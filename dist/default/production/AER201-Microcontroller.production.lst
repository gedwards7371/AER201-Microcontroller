

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Sat Apr 08 15:09:31 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    11                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,delta=1
    49                           	psect	text35,global,reloc=2,class=CODE,delta=1
    50                           	psect	text36,global,reloc=2,class=CODE,delta=1
    51                           	psect	text37,global,reloc=2,class=CODE,delta=1
    52                           	psect	text38,global,reloc=2,class=CODE,delta=1
    53                           	psect	text39,global,reloc=2,class=CODE,delta=1
    54                           	psect	text40,global,reloc=2,class=CODE,delta=1
    55                           	psect	text41,global,reloc=2,class=CODE,delta=1
    56                           	psect	text42,global,reloc=2,class=CODE,delta=1
    57                           	psect	text43,global,reloc=2,class=CODE,delta=1
    58                           	psect	text44,global,reloc=2,class=CODE,delta=1
    59                           	psect	text45,global,reloc=2,class=CODE,delta=1
    60                           	psect	text46,global,reloc=2,class=CODE,delta=1
    61                           	psect	text47,global,reloc=2,class=CODE,delta=1
    62                           	psect	text48,global,reloc=2,class=CODE,delta=1
    63                           	psect	text49,global,reloc=2,class=CODE,delta=1
    64                           	psect	text50,global,reloc=2,class=CODE,delta=1
    65                           	psect	text51,global,reloc=2,class=CODE,delta=1
    66                           	psect	text52,global,reloc=2,class=CODE,delta=1
    67                           	psect	text53,global,reloc=2,class=CODE,delta=1
    68                           	psect	text54,global,reloc=2,class=CODE,delta=1
    69                           	psect	text55,global,reloc=2,class=CODE,delta=1
    70                           	psect	text56,global,reloc=2,class=CODE,delta=1
    71                           	psect	text57,global,reloc=2,class=CODE,delta=1
    72                           	psect	text58,global,reloc=2,class=CODE,delta=1
    73                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    74                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    75                           	psect	text60,global,reloc=2,class=CODE,delta=1
    76                           	psect	text61,global,reloc=2,class=CODE,delta=1
    77                           	psect	text62,global,reloc=2,class=CODE,delta=1
    78                           	psect	text63,global,reloc=2,class=CODE,delta=1
    79                           	psect	text64,global,reloc=2,class=CODE,delta=1
    80                           	psect	text65,global,reloc=2,class=CODE,delta=1
    81                           	psect	text66,global,reloc=2,class=CODE,delta=1
    82                           	psect	text67,global,reloc=2,class=CODE,delta=1
    83                           	psect	text68,global,reloc=2,class=CODE,delta=1
    84                           	psect	text69,global,reloc=2,class=CODE,delta=1
    85                           	psect	text70,global,reloc=2,class=CODE,delta=1
    86                           	psect	text71,global,reloc=2,class=CODE,delta=1
    87                           	psect	text72,global,reloc=2,class=CODE,delta=1
    88                           	psect	text73,global,reloc=2,class=CODE,delta=1
    89                           	psect	text74,global,reloc=2,class=CODE,delta=1
    90                           	psect	text75,global,reloc=2,class=CODE,delta=1
    91                           	psect	text76,global,reloc=2,class=CODE,delta=1
    92                           	psect	text77,global,reloc=2,class=CODE,delta=1
    93                           	psect	text78,global,reloc=2,class=CODE,delta=1
    94                           	psect	text79,global,reloc=2,class=CODE,delta=1
    95                           	psect	text80,global,reloc=2,class=CODE,delta=1
    96                           	psect	text81,global,reloc=2,class=CODE,delta=1
    97                           	psect	text82,global,reloc=2,class=CODE,delta=1
    98                           	psect	text83,global,reloc=2,class=CODE,delta=1
    99                           	psect	text84,global,reloc=2,class=CODE,delta=1
   100                           	psect	text85,global,reloc=2,class=CODE,delta=1
   101                           	psect	text86,global,reloc=2,class=CODE,delta=1
   102                           	psect	text87,global,reloc=2,class=CODE,delta=1
   103                           	psect	text88,global,reloc=2,class=CODE,delta=1
   104                           	psect	text89,global,reloc=2,class=CODE,delta=1
   105                           	psect	text90,global,reloc=2,class=CODE,delta=1
   106                           	psect	text91,global,reloc=2,class=CODE,delta=1
   107                           	psect	text92,global,reloc=2,class=CODE,delta=1
   108                           	psect	text93,global,reloc=2,class=CODE,delta=1
   109                           	psect	text94,global,reloc=2,class=CODE,delta=1
   110                           	psect	text95,global,reloc=2,class=CODE,delta=1
   111                           	psect	text96,global,reloc=2,class=CODE,delta=1
   112                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   113                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   114                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   115  0000                     
   116                           ; Version 1.40
   117                           ; Generated 01/12/2016 GMT
   118                           ; 
   119                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
   120                           ; All rights reserved.
   121                           ; 
   122                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   123                           ; 
   124                           ; Redistribution and use in source and binary forms, with or without modification, are
   125                           ; permitted provided that the following conditions are met:
   126                           ; 
   127                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   128                           ;        conditions and the following disclaimer.
   129                           ; 
   130                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   131                           ;        of conditions and the following disclaimer in the documentation and/or other
   132                           ;        materials provided with the distribution.
   133                           ; 
   134                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   135                           ;        software without specific prior written permission.
   136                           ; 
   137                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   138                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   139                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   140                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   141                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   142                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   143                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   144                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   145                           ; 
   146                           ; 
   147                           ; Code-generator required, PIC18F4620 Definitions
   148                           ; 
   149                           ; SFR Addresses
   150  0000                     
   151                           	psect	idataBANK1
   152  005520                     __pidataBANK1:
   153                           	opt stack 0
   154                           
   155                           ;initializer for UI@F3241
   156  005520  4D                 	db	77
   157  005521  4D                 	db	77
   158  005522  4D                 	db	77
   159  005523  00                 	db	0
   160                           
   161                           ;initializer for printRTC@F3231
   162  005524  4D                 	db	77
   163  005525  4D                 	db	77
   164  005526  4D                 	db	77
   165  005527  00                 	db	0
   166                           
   167                           	psect	mediumconst
   168  00FAB4                     __pmediumconst:
   169                           	opt stack 0
   170  00FAB4  00                 	db	0
   171  00FAB5                     _keys:
   172                           	opt stack 0
   173  00FAB5  31                 	db	49
   174  00FAB6  32                 	db	50
   175  00FAB7  33                 	db	51
   176  00FAB8  41                 	db	65
   177  00FAB9  34                 	db	52
   178  00FABA  35                 	db	53
   179  00FABB  36                 	db	54
   180  00FABC  42                 	db	66
   181  00FABD  37                 	db	55
   182  00FABE  38                 	db	56
   183  00FABF  39                 	db	57
   184  00FAC0  43                 	db	67
   185  00FAC1  2A                 	db	42
   186  00FAC2  30                 	db	48
   187  00FAC3  23                 	db	35
   188  00FAC4  44                 	db	68
   189  00FAC5  00                 	db	0
   190  00FAC6                     __end_of_keys:
   191                           	opt stack 0
   192  00FAC6                     _dpowers:
   193                           	opt stack 0
   194  00FAC6  0001               	dw	1
   195  00FAC8  000A               	dw	10
   196  00FACA  0064               	dw	100
   197  00FACC  03E8               	dw	1000
   198  00FACE  2710               	dw	10000
   199  00FAD0                     __end_of_dpowers:
   200                           	opt stack 0
   201  0000                     _ADCON0	set	4034
   202  0000                     _ADCON0bits	set	4034
   203  0000                     _ADCON1	set	4033
   204  0000                     _ADCON2	set	4032
   205  0000                     _ADRESH	set	4036
   206  0000                     _ADRESL	set	4035
   207  0000                     _CMCONbits	set	4020
   208  0000                     _CVRCON	set	4021
   209  0000                     _EEADR	set	4009
   210  0000                     _EEADRH	set	4010
   211  0000                     _EECON1bits	set	4006
   212  0000                     _EECON2	set	4007
   213  0000                     _EEDATA	set	4008
   214  0000                     _INTCONbits	set	4082
   215  0000                     _LATA	set	3977
   216  0000                     _LATAbits	set	3977
   217  0000                     _LATB	set	3978
   218  0000                     _LATBbits	set	3978
   219  0000                     _LATC	set	3979
   220  0000                     _LATCbits	set	3979
   221  0000                     _LATD	set	3980
   222  0000                     _LATDbits	set	3980
   223  0000                     _LATE	set	3981
   224  0000                     _OSCCON	set	4051
   225  0000                     _OSCTUNEbits	set	3995
   226  0000                     _PIR2bits	set	4001
   227  0000                     _PORTAbits	set	3968
   228  0000                     _PORTB	set	3969
   229  0000                     _PORTBbits	set	3969
   230  0000                     _PR2	set	4043
   231  0000                     _SSPADD	set	4040
   232  0000                     _SSPBUF	set	4041
   233  0000                     _SSPCON1	set	4038
   234  0000                     _SSPCON2	set	4037
   235  0000                     _SSPSTAT	set	4039
   236  0000                     _T0CON	set	4053
   237  0000                     _T1CON	set	4045
   238  0000                     _T2CON	set	4042
   239  0000                     _T3CON	set	4017
   240  0000                     _TMR0H	set	4055
   241  0000                     _TMR0L	set	4054
   242  0000                     _TMR1H	set	4047
   243  0000                     _TMR1L	set	4046
   244  0000                     _TMR3H	set	4019
   245  0000                     _TMR3L	set	4018
   246  0000                     _TRISA	set	3986
   247  0000                     _TRISB	set	3987
   248  0000                     _TRISC	set	3988
   249  0000                     _TRISD	set	3989
   250  0000                     _TRISE	set	3990
   251  0000                     _ACKDT	set	32301
   252  0000                     _ACKEN	set	32300
   253  0000                     _ADIE	set	31982
   254  0000                     _INT1IE	set	32643
   255  0000                     _INT1IF	set	32640
   256  0000                     _PEIE	set	32662
   257  0000                     _PEN	set	32298
   258  0000                     _RCEN	set	32299
   259  0000                     _RSEN	set	32297
   260  0000                     _SEN	set	32296
   261  0000                     _TMR0IE	set	32661
   262  0000                     _TMR0IF	set	32658
   263  0000                     _TMR0ON	set	32431
   264  0000                     _TMR1IE	set	31976
   265  0000                     _TMR1IF	set	31984
   266  0000                     _TMR1ON	set	32360
   267  0000                     _TMR2IE	set	31977
   268  0000                     _TMR2IF	set	31985
   269  0000                     _TMR2ON	set	32338
   270  0000                     _TMR3IE	set	32001
   271  0000                     _TMR3IF	set	32009
   272  0000                     _TMR3ON	set	32136
   273  0000                     _TRISC3	set	31907
   274  0000                     _TRISC4	set	31908
   275  0000                     _nRBPU	set	32655
   276  00FAD0                     STR_21:
   277  00FAD0  25                 	db	37
   278  00FAD1  30                 	db	48	;'0'
   279  00FAD2  32                 	db	50	;'2'
   280  00FAD3  64                 	db	100	;'d'
   281  00FAD4  25                 	db	37
   282  00FAD5  73                 	db	115	;'s'
   283  00FAD6  20                 	db	32
   284  00FAD7  7C                 	db	124
   285  00FAD8  20                 	db	32
   286  00FAD9  25                 	db	37
   287  00FADA  30                 	db	48	;'0'
   288  00FADB  32                 	db	50	;'2'
   289  00FADC  64                 	db	100	;'d'
   290  00FADD  3A                 	db	58	;':'
   291  00FADE  25                 	db	37
   292  00FADF  30                 	db	48	;'0'
   293  00FAE0  32                 	db	50	;'2'
   294  00FAE1  64                 	db	100	;'d'
   295  00FAE2  3A                 	db	58	;':'
   296  00FAE3  25                 	db	37
   297  00FAE4  30                 	db	48	;'0'
   298  00FAE5  32                 	db	50	;'2'
   299  00FAE6  64                 	db	100	;'d'
   300  00FAE7  00                 	db	0
   301  00FAE8                     STR_66:
   302  00FAE8  28                 	db	40
   303  00FAE9  64                 	db	100	;'d'
   304  00FAEA  61                 	db	97	;'a'
   305  00FAEB  74                 	db	116	;'t'
   306  00FAEC  61                 	db	97	;'a'
   307  00FAED  3A                 	db	58	;':'
   308  00FAEE  20                 	db	32
   309  00FAEF  25                 	db	37
   310  00FAF0  75                 	db	117	;'u'
   311  00FAF1  2C                 	db	44
   312  00FAF2  20                 	db	32
   313  00FAF3  61                 	db	97	;'a'
   314  00FAF4  64                 	db	100	;'d'
   315  00FAF5  64                 	db	100	;'d'
   316  00FAF6  72                 	db	114	;'r'
   317  00FAF7  3A                 	db	58	;':'
   318  00FAF8  20                 	db	32
   319  00FAF9  25                 	db	37
   320  00FAFA  75                 	db	117	;'u'
   321  00FAFB  29                 	db	41
   322  00FAFC  00                 	db	0
   323  00FAFD                     STR_111:
   324  00FAFD  44                 	db	68	;'D'
   325  00FAFE  20                 	db	32
   326  00FAFF  57                 	db	87	;'W'
   327  00FB00  49                 	db	73	;'I'
   328  00FB01  4C                 	db	76	;'L'
   329  00FB02  4C                 	db	76	;'L'
   330  00FB03  20                 	db	32
   331  00FB04  52                 	db	82	;'R'
   332  00FB05  45                 	db	69	;'E'
   333  00FB06  54                 	db	84	;'T'
   334  00FB07  55                 	db	85	;'U'
   335  00FB08  52                 	db	82	;'R'
   336  00FB09  4E                 	db	78	;'N'
   337  00FB0A  20                 	db	32
   338  00FB0B  20                 	db	32
   339  00FB0C  20                 	db	32
   340  00FB0D  20                 	db	32
   341  00FB0E  00                 	db	0
   342  00FB0F                     STR_119:
   343  00FB0F  4F                 	db	79	;'O'
   344  00FB10  54                 	db	84	;'T'
   345  00FB11  48                 	db	72	;'H'
   346  00FB12  45                 	db	69	;'E'
   347  00FB13  52                 	db	82	;'R'
   348  00FB14  20                 	db	32
   349  00FB15  53                 	db	83	;'S'
   350  00FB16  45                 	db	69	;'E'
   351  00FB17  54                 	db	84	;'T'
   352  00FB18  53                 	db	83	;'S'
   353  00FB19  20                 	db	32
   354  00FB1A  52                 	db	82	;'R'
   355  00FB1B  41                 	db	65	;'A'
   356  00FB1C  35                 	db	53	;'5'
   357  00FB1D  20                 	db	32
   358  00FB1E  20                 	db	32
   359  00FB1F  20                 	db	32
   360  00FB20  00                 	db	0
   361  00FB21                     STR_118:
   362  00FB21  53                 	db	83	;'S'
   363  00FB22  3A                 	db	58	;':'
   364  00FB23  20                 	db	32
   365  00FB24  44                 	db	68	;'D'
   366  00FB25  20                 	db	32
   367  00FB26  57                 	db	87	;'W'
   368  00FB27  49                 	db	73	;'I'
   369  00FB28  4C                 	db	76	;'L'
   370  00FB29  4C                 	db	76	;'L'
   371  00FB2A  20                 	db	32
   372  00FB2B  52                 	db	82	;'R'
   373  00FB2C  45                 	db	69	;'E'
   374  00FB2D  54                 	db	84	;'T'
   375  00FB2E  55                 	db	85	;'U'
   376  00FB2F  52                 	db	82	;'R'
   377  00FB30  4E                 	db	78	;'N'
   378  00FB31  20                 	db	32
   379  00FB32  00                 	db	0
   380  00FB33                     STR_121:
   381  00FB33  4F                 	db	79	;'O'
   382  00FB34  54                 	db	84	;'T'
   383  00FB35  48                 	db	72	;'H'
   384  00FB36  45                 	db	69	;'E'
   385  00FB37  52                 	db	82	;'R'
   386  00FB38  3A                 	db	58	;':'
   387  00FB39  20                 	db	32
   388  00FB3A  43                 	db	67	;'C'
   389  00FB3B  41                 	db	65	;'A'
   390  00FB3C  4D                 	db	77	;'M'
   391  00FB3D  20                 	db	32
   392  00FB3E  54                 	db	84	;'T'
   393  00FB3F  4F                 	db	79	;'O'
   394  00FB40  47                 	db	71	;'G'
   395  00FB41  47                 	db	71	;'G'
   396  00FB42  4C                 	db	76	;'L'
   397  00FB43  45                 	db	69	;'E'
   398  00FB44  00                 	db	0
   399  00FB45                     STR_120:
   400  00FB45  44                 	db	68	;'D'
   401  00FB46  3A                 	db	58	;':'
   402  00FB47  20                 	db	32
   403  00FB48  52                 	db	82	;'R'
   404  00FB49  45                 	db	69	;'E'
   405  00FB4A  54                 	db	84	;'T'
   406  00FB4B  7C                 	db	124
   407  00FB4C  32                 	db	50	;'2'
   408  00FB4D  3A                 	db	58	;':'
   409  00FB4E  20                 	db	32
   410  00FB4F  43                 	db	67	;'C'
   411  00FB50  4F                 	db	79	;'O'
   412  00FB51  4E                 	db	78	;'N'
   413  00FB52  44                 	db	68	;'D'
   414  00FB53  20                 	db	32
   415  00FB54  25                 	db	37
   416  00FB55  64                 	db	100	;'d'
   417  00FB56  00                 	db	0
   418  00FB57                     STR_3:
   419  00FB57  2D                 	db	45
   420  00FB58  2D                 	db	45
   421  00FB59  20                 	db	32
   422  00FB5A  4C                 	db	76	;'L'
   423  00FB5B  4F                 	db	79	;'O'
   424  00FB5C  47                 	db	71	;'G'
   425  00FB5D  20                 	db	32
   426  00FB5E  25                 	db	37
   427  00FB5F  32                 	db	50	;'2'
   428  00FB60  64                 	db	100	;'d'
   429  00FB61  20                 	db	32
   430  00FB62  48                 	db	72	;'H'
   431  00FB63  45                 	db	69	;'E'
   432  00FB64  52                 	db	82	;'R'
   433  00FB65  45                 	db	69	;'E'
   434  00FB66  2D                 	db	45
   435  00FB67  2D                 	db	45
   436  00FB68  00                 	db	0
   437  00FB69                     STR_1:
   438  00FB69  52                 	db	82	;'R'
   439  00FB6A  45                 	db	69	;'E'
   440  00FB6B  53                 	db	83	;'S'
   441  00FB6C  55                 	db	85	;'U'
   442  00FB6D  4C                 	db	76	;'L'
   443  00FB6E  54                 	db	84	;'T'
   444  00FB6F  53                 	db	83	;'S'
   445  00FB70  20                 	db	32
   446  00FB71  49                 	db	73	;'I'
   447  00FB72  4E                 	db	78	;'N'
   448  00FB73  20                 	db	32
   449  00FB74  4C                 	db	76	;'L'
   450  00FB75  4F                 	db	79	;'O'
   451  00FB76  47                 	db	71	;'G'
   452  00FB77  20                 	db	32
   453  00FB78  25                 	db	37
   454  00FB79  64                 	db	100	;'d'
   455  00FB7A  00                 	db	0
   456  00FB7B                     STR_102:
   457  00FB7B  4D                 	db	77	;'M'
   458  00FB7C  49                 	db	73	;'I'
   459  00FB7D  44                 	db	68	;'D'
   460  00FB7E  20                 	db	32
   461  00FB7F  2D                 	db	45
   462  00FB80  2D                 	db	45
   463  00FB81  20                 	db	32
   464  00FB82  32                 	db	50	;'2'
   465  00FB83  73                 	db	115	;'s'
   466  00FB84  20                 	db	32
   467  00FB85  20                 	db	32
   468  00FB86  20                 	db	32
   469  00FB87  20                 	db	32
   470  00FB88  20                 	db	32
   471  00FB89  20                 	db	32
   472  00FB8A  20                 	db	32
   473  00FB8B  00                 	db	0
   474  00FB8C                     STR_105:
   475  00FB8C  44                 	db	68	;'D'
   476  00FB8D  52                 	db	82	;'R'
   477  00FB8E  4F                 	db	79	;'O'
   478  00FB8F  50                 	db	80	;'P'
   479  00FB90  20                 	db	32
   480  00FB91  2D                 	db	45
   481  00FB92  2D                 	db	45
   482  00FB93  20                 	db	32
   483  00FB94  32                 	db	50	;'2'
   484  00FB95  73                 	db	115	;'s'
   485  00FB96  20                 	db	32
   486  00FB97  20                 	db	32
   487  00FB98  20                 	db	32
   488  00FB99  20                 	db	32
   489  00FB9A  20                 	db	32
   490  00FB9B  20                 	db	32
   491  00FB9C  00                 	db	0
   492  00FB9D                     STR_99:
   493  00FB9D  4C                 	db	76	;'L'
   494  00FB9E  45                 	db	69	;'E'
   495  00FB9F  46                 	db	70	;'F'
   496  00FBA0  54                 	db	84	;'T'
   497  00FBA1  20                 	db	32
   498  00FBA2  2D                 	db	45
   499  00FBA3  2D                 	db	45
   500  00FBA4  20                 	db	32
   501  00FBA5  32                 	db	50	;'2'
   502  00FBA6  73                 	db	115	;'s'
   503  00FBA7  20                 	db	32
   504  00FBA8  20                 	db	32
   505  00FBA9  20                 	db	32
   506  00FBAA  20                 	db	32
   507  00FBAB  20                 	db	32
   508  00FBAC  20                 	db	32
   509  00FBAD  00                 	db	0
   510  00FBAE                     STR_104:
   511  00FBAE  4C                 	db	76	;'L'
   512  00FBAF  45                 	db	69	;'E'
   513  00FBB0  56                 	db	86	;'V'
   514  00FBB1  45                 	db	69	;'E'
   515  00FBB2  4C                 	db	76	;'L'
   516  00FBB3  20                 	db	32
   517  00FBB4  2D                 	db	45
   518  00FBB5  2D                 	db	45
   519  00FBB6  20                 	db	32
   520  00FBB7  32                 	db	50	;'2'
   521  00FBB8  73                 	db	115	;'s'
   522  00FBB9  20                 	db	32
   523  00FBBA  20                 	db	32
   524  00FBBB  20                 	db	32
   525  00FBBC  20                 	db	32
   526  00FBBD  20                 	db	32
   527  00FBBE  00                 	db	0
   528  00FBBF                     STR_98:
   529  00FBBF  52                 	db	82	;'R'
   530  00FBC0  49                 	db	73	;'I'
   531  00FBC1  47                 	db	71	;'G'
   532  00FBC2  48                 	db	72	;'H'
   533  00FBC3  54                 	db	84	;'T'
   534  00FBC4  20                 	db	32
   535  00FBC5  2D                 	db	45
   536  00FBC6  2D                 	db	45
   537  00FBC7  20                 	db	32
   538  00FBC8  32                 	db	50	;'2'
   539  00FBC9  73                 	db	115	;'s'
   540  00FBCA  20                 	db	32
   541  00FBCB  20                 	db	32
   542  00FBCC  20                 	db	32
   543  00FBCD  20                 	db	32
   544  00FBCE  20                 	db	32
   545  00FBCF  00                 	db	0
   546  00FBD0                     STR_97:
   547  00FBD0  4D                 	db	77	;'M'
   548  00FBD1  49                 	db	73	;'I'
   549  00FBD2  44                 	db	68	;'D'
   550  00FBD3  44                 	db	68	;'D'
   551  00FBD4  4C                 	db	76	;'L'
   552  00FBD5  45                 	db	69	;'E'
   553  00FBD6  20                 	db	32
   554  00FBD7  2D                 	db	45
   555  00FBD8  2D                 	db	45
   556  00FBD9  20                 	db	32
   557  00FBDA  32                 	db	50	;'2'
   558  00FBDB  73                 	db	115	;'s'
   559  00FBDC  20                 	db	32
   560  00FBDD  20                 	db	32
   561  00FBDE  20                 	db	32
   562  00FBDF  20                 	db	32
   563  00FBE0  00                 	db	0
   564  00FBE1                     STR_112:
   565  00FBE1  4F                 	db	79	;'O'
   566  00FBE2  54                 	db	84	;'T'
   567  00FBE3  48                 	db	72	;'H'
   568  00FBE4  45                 	db	69	;'E'
   569  00FBE5  52                 	db	82	;'R'
   570  00FBE6  20                 	db	32
   571  00FBE7  53                 	db	83	;'S'
   572  00FBE8  45                 	db	69	;'E'
   573  00FBE9  54                 	db	84	;'T'
   574  00FBEA  53                 	db	83	;'S'
   575  00FBEB  20                 	db	32
   576  00FBEC  44                 	db	68	;'D'
   577  00FBED  43                 	db	67	;'C'
   578  00FBEE  20                 	db	32
   579  00FBEF  20                 	db	32
   580  00FBF0  20                 	db	32
   581  00FBF1  00                 	db	0
   582  00FBF2                     STR_116:
   583  00FBF2  44                 	db	68	;'D'
   584  00FBF3  20                 	db	32
   585  00FBF4  57                 	db	87	;'W'
   586  00FBF5  49                 	db	73	;'I'
   587  00FBF6  4C                 	db	76	;'L'
   588  00FBF7  4C                 	db	76	;'L'
   589  00FBF8  20                 	db	32
   590  00FBF9  52                 	db	82	;'R'
   591  00FBFA  45                 	db	69	;'E'
   592  00FBFB  54                 	db	84	;'T'
   593  00FBFC  55                 	db	85	;'U'
   594  00FBFD  52                 	db	82	;'R'
   595  00FBFE  4E                 	db	78	;'N'
   596  00FBFF  20                 	db	32
   597  00FC00  20                 	db	32
   598  00FC01  20                 	db	32
   599  00FC02  00                 	db	0
   600  00FC03                     STR_114:
   601  00FC03  35                 	db	53	;'5'
   602  00FC04  3A                 	db	58	;':'
   603  00FC05  48                 	db	72	;'H'
   604  00FC06  7C                 	db	124
   605  00FC07  36                 	db	54	;'6'
   606  00FC08  3A                 	db	58	;':'
   607  00FC09  4C                 	db	76	;'L'
   608  00FC0A  7C                 	db	124
   609  00FC0B  49                 	db	73	;'I'
   610  00FC0C  52                 	db	82	;'R'
   611  00FC0D  3A                 	db	58	;':'
   612  00FC0E  25                 	db	37
   613  00FC0F  64                 	db	100	;'d'
   614  00FC10  20                 	db	32
   615  00FC11  20                 	db	32
   616  00FC12  20                 	db	32
   617  00FC13  00                 	db	0
   618  00FC14                     STR_113:
   619  00FC14  31                 	db	49	;'1'
   620  00FC15  3A                 	db	58	;':'
   621  00FC16  20                 	db	32
   622  00FC17  44                 	db	68	;'D'
   623  00FC18  43                 	db	67	;'C'
   624  00FC19  20                 	db	32
   625  00FC1A  7C                 	db	124
   626  00FC1B  20                 	db	32
   627  00FC1C  41                 	db	65	;'A'
   628  00FC1D  3A                 	db	58	;':'
   629  00FC1E  20                 	db	32
   630  00FC1F  41                 	db	65	;'A'
   631  00FC20  52                 	db	82	;'R'
   632  00FC21  4D                 	db	77	;'M'
   633  00FC22  20                 	db	32
   634  00FC23  20                 	db	32
   635  00FC24  00                 	db	0
   636  00FC25                     STR_100:
   637  00FC25  4D                 	db	77	;'M'
   638  00FC26  49                 	db	73	;'I'
   639  00FC27  44                 	db	68	;'D'
   640  00FC28  2D                 	db	45
   641  00FC29  4C                 	db	76	;'L'
   642  00FC2A  45                 	db	69	;'E'
   643  00FC2B  46                 	db	70	;'F'
   644  00FC2C  54                 	db	84	;'T'
   645  00FC2D  20                 	db	32
   646  00FC2E  2D                 	db	45
   647  00FC2F  2D                 	db	45
   648  00FC30  20                 	db	32
   649  00FC31  32                 	db	50	;'2'
   650  00FC32  73                 	db	115	;'s'
   651  00FC33  20                 	db	32
   652  00FC34  20                 	db	32
   653  00FC35  00                 	db	0
   654  00FC36                     STR_101:
   655  00FC36  4D                 	db	77	;'M'
   656  00FC37  49                 	db	73	;'I'
   657  00FC38  44                 	db	68	;'D'
   658  00FC39  2D                 	db	45
   659  00FC3A  52                 	db	82	;'R'
   660  00FC3B  49                 	db	73	;'I'
   661  00FC3C  47                 	db	71	;'G'
   662  00FC3D  48                 	db	72	;'H'
   663  00FC3E  54                 	db	84	;'T'
   664  00FC3F  20                 	db	32
   665  00FC40  2D                 	db	45
   666  00FC41  2D                 	db	45
   667  00FC42  20                 	db	32
   668  00FC43  32                 	db	50	;'2'
   669  00FC44  73                 	db	115	;'s'
   670  00FC45  20                 	db	32
   671  00FC46  00                 	db	0
   672  00FC47  45                 	db	69	;'E'
   673  00FC48  4C                 	db	76	;'L'
   674  00FC49  53                 	db	83	;'S'
   675  00FC4A  45                 	db	69	;'E'
   676  00FC4B  20                 	db	32
   677  00FC4C  54                 	db	84	;'T'
   678  00FC4D  4F                 	db	79	;'O'
   679  00FC4E  47                 	db	71	;'G'
   680  00FC4F  47                 	db	71	;'G'
   681  00FC50  4C                 	db	76	;'L'
   682  00FC51  45                 	db	69	;'E'
   683  00FC52  53                 	db	83	;'S'
   684  00FC53  20                 	db	32
   685  00FC54  52                 	db	82	;'R'
   686  00FC55  41                 	db	65	;'A'
   687  00FC56  35                 	db	53	;'5'
   688  00FC57  00                 	db	0
   689  00FC58                     STR_72:
   690  00FC58  41                 	db	65	;'A'
   691  00FC59  4C                 	db	76	;'L'
   692  00FC5A  47                 	db	71	;'G'
   693  00FC5B  31                 	db	49	;'1'
   694  00FC5C  3A                 	db	58	;':'
   695  00FC5D  20                 	db	32
   696  00FC5E  39                 	db	57	;'9'
   697  00FC5F  20                 	db	32
   698  00FC60  50                 	db	80	;'P'
   699  00FC61  4F                 	db	79	;'O'
   700  00FC62  50                 	db	80	;'P'
   701  00FC63  4E                 	db	78	;'N'
   702  00FC64  4F                 	db	79	;'O'
   703  00FC65  54                 	db	84	;'T'
   704  00FC66  41                 	db	65	;'A'
   705  00FC67  42                 	db	66	;'B'
   706  00FC68  00                 	db	0
   707  00FC69                     STR_92:
   708  00FC69  54                 	db	84	;'T'
   709  00FC6A  53                 	db	83	;'S'
   710  00FC6B  54                 	db	84	;'T'
   711  00FC6C  3A                 	db	58	;':'
   712  00FC6D  20                 	db	32
   713  00FC6E  43                 	db	67	;'C'
   714  00FC6F  4F                 	db	79	;'O'
   715  00FC70  4E                 	db	78	;'N'
   716  00FC71  44                 	db	68	;'D'
   717  00FC72  20                 	db	32
   718  00FC73  53                 	db	83	;'S'
   719  00FC74  4F                 	db	79	;'O'
   720  00FC75  4C                 	db	76	;'L'
   721  00FC76  4E                 	db	78	;'N'
   722  00FC77  27                 	db	39
   723  00FC78  44                 	db	68	;'D'
   724  00FC79  00                 	db	0
   725  00FC7A                     STR_94:
   726  00FC7A  54                 	db	84	;'T'
   727  00FC7B  53                 	db	83	;'S'
   728  00FC7C  54                 	db	84	;'T'
   729  00FC7D  3A                 	db	58	;':'
   730  00FC7E  20                 	db	32
   731  00FC7F  50                 	db	80	;'P'
   732  00FC80  55                 	db	85	;'U'
   733  00FC81  53                 	db	83	;'S'
   734  00FC82  48                 	db	72	;'H'
   735  00FC83  20                 	db	32
   736  00FC84  53                 	db	83	;'S'
   737  00FC85  4F                 	db	79	;'O'
   738  00FC86  4C                 	db	76	;'L'
   739  00FC87  4E                 	db	78	;'N'
   740  00FC88  27                 	db	39
   741  00FC89  44                 	db	68	;'D'
   742  00FC8A  00                 	db	0
   743  00FC8B                     STR_68:
   744  00FC8B  32                 	db	50	;'2'
   745  00FC8C  2E                 	db	46
   746  00FC8D  53                 	db	83	;'S'
   747  00FC8E  4E                 	db	78	;'N'
   748  00FC8F  52                 	db	82	;'R'
   749  00FC90  7C                 	db	124
   750  00FC91  34                 	db	52	;'4'
   751  00FC92  2E                 	db	46
   752  00FC93  48                 	db	72	;'H'
   753  00FC94  49                 	db	73	;'I'
   754  00FC95  7C                 	db	124
   755  00FC96  35                 	db	53	;'5'
   756  00FC97  2E                 	db	46
   757  00FC98  4D                 	db	77	;'M'
   758  00FC99  45                 	db	69	;'E'
   759  00FC9A  44                 	db	68	;'D'
   760  00FC9B  00                 	db	0
   761  00FC9C                     STR_69:
   762  00FC9C  42                 	db	66	;'B'
   763  00FC9D  2E                 	db	46
   764  00FC9E  50                 	db	80	;'P'
   765  00FC9F  4C                 	db	76	;'L'
   766  00FCA0  41                 	db	65	;'A'
   767  00FCA1  7C                 	db	124
   768  00FCA2  38                 	db	56	;'8'
   769  00FCA3  2E                 	db	46
   770  00FCA4  53                 	db	83	;'S'
   771  00FCA5  56                 	db	86	;'V'
   772  00FCA6  7C                 	db	124
   773  00FCA7  39                 	db	57	;'9'
   774  00FCA8  2E                 	db	46
   775  00FCA9  42                 	db	66	;'B'
   776  00FCAA  4C                 	db	76	;'L'
   777  00FCAB  4B                 	db	75	;'K'
   778  00FCAC  00                 	db	0
   779  00FCAD                     STR_125:
   780  00FCAD  45                 	db	69	;'E'
   781  00FCAE  4C                 	db	76	;'L'
   782  00FCAF  53                 	db	83	;'S'
   783  00FCB0  45                 	db	69	;'E'
   784  00FCB1  20                 	db	32
   785  00FCB2  54                 	db	84	;'T'
   786  00FCB3  4F                 	db	79	;'O'
   787  00FCB4  47                 	db	71	;'G'
   788  00FCB5  47                 	db	71	;'G'
   789  00FCB6  4C                 	db	76	;'L'
   790  00FCB7  45                 	db	69	;'E'
   791  00FCB8  53                 	db	83	;'S'
   792  00FCB9  20                 	db	32
   793  00FCBA  41                 	db	65	;'A'
   794  00FCBB  52                 	db	82	;'R'
   795  00FCBC  4D                 	db	77	;'M'
   796  00FCBD  00                 	db	0
   797  00FCBE                     STR_110:
   798  00FCBE  54                 	db	84	;'T'
   799  00FCBF  53                 	db	83	;'S'
   800  00FCC0  54                 	db	84	;'T'
   801  00FCC1  3A                 	db	58	;':'
   802  00FCC2  20                 	db	32
   803  00FCC3  42                 	db	66	;'B'
   804  00FCC4  4F                 	db	79	;'O'
   805  00FCC5  54                 	db	84	;'T'
   806  00FCC6  48                 	db	72	;'H'
   807  00FCC7  20                 	db	32
   808  00FCC8  53                 	db	83	;'S'
   809  00FCC9  45                 	db	69	;'E'
   810  00FCCA  52                 	db	82	;'R'
   811  00FCCB  56                 	db	86	;'V'
   812  00FCCC  4F                 	db	79	;'O'
   813  00FCCD  53                 	db	83	;'S'
   814  00FCCE  00                 	db	0
   815  00FCCF                     STR_41:
   816  00FCCF  4C                 	db	76	;'L'
   817  00FCD0  4F                 	db	79	;'O'
   818  00FCD1  47                 	db	71	;'G'
   819  00FCD2  20                 	db	32
   820  00FCD3  31                 	db	49	;'1'
   821  00FCD4  20                 	db	32
   822  00FCD5  20                 	db	32
   823  00FCD6  20                 	db	32
   824  00FCD7  20                 	db	32
   825  00FCD8  20                 	db	32
   826  00FCD9  20                 	db	32
   827  00FCDA  20                 	db	32
   828  00FCDB  20                 	db	32
   829  00FCDC  20                 	db	32
   830  00FCDD  20                 	db	32
   831  00FCDE  20                 	db	32
   832  00FCDF  00                 	db	0
   833  00FCE0                     STR_40:
   834  00FCE0  4C                 	db	76	;'L'
   835  00FCE1  4F                 	db	79	;'O'
   836  00FCE2  47                 	db	71	;'G'
   837  00FCE3  20                 	db	32
   838  00FCE4  32                 	db	50	;'2'
   839  00FCE5  20                 	db	32
   840  00FCE6  20                 	db	32
   841  00FCE7  20                 	db	32
   842  00FCE8  20                 	db	32
   843  00FCE9  20                 	db	32
   844  00FCEA  20                 	db	32
   845  00FCEB  20                 	db	32
   846  00FCEC  20                 	db	32
   847  00FCED  20                 	db	32
   848  00FCEE  20                 	db	32
   849  00FCEF  20                 	db	32
   850  00FCF0  00                 	db	0
   851  00FCF1                     STR_44:
   852  00FCF1  4C                 	db	76	;'L'
   853  00FCF2  4F                 	db	79	;'O'
   854  00FCF3  47                 	db	71	;'G'
   855  00FCF4  20                 	db	32
   856  00FCF5  33                 	db	51	;'3'
   857  00FCF6  20                 	db	32
   858  00FCF7  20                 	db	32
   859  00FCF8  20                 	db	32
   860  00FCF9  20                 	db	32
   861  00FCFA  20                 	db	32
   862  00FCFB  20                 	db	32
   863  00FCFC  20                 	db	32
   864  00FCFD  20                 	db	32
   865  00FCFE  20                 	db	32
   866  00FCFF  20                 	db	32
   867  00FD00  20                 	db	32
   868  00FD01  00                 	db	0
   869  00FD02                     STR_48:
   870  00FD02  4C                 	db	76	;'L'
   871  00FD03  4F                 	db	79	;'O'
   872  00FD04  47                 	db	71	;'G'
   873  00FD05  20                 	db	32
   874  00FD06  34                 	db	52	;'4'
   875  00FD07  20                 	db	32
   876  00FD08  20                 	db	32
   877  00FD09  20                 	db	32
   878  00FD0A  20                 	db	32
   879  00FD0B  20                 	db	32
   880  00FD0C  20                 	db	32
   881  00FD0D  20                 	db	32
   882  00FD0E  20                 	db	32
   883  00FD0F  20                 	db	32
   884  00FD10  20                 	db	32
   885  00FD11  20                 	db	32
   886  00FD12  00                 	db	0
   887  00FD13                     STR_36:
   888  00FD13  33                 	db	51	;'3'
   889  00FD14  2E                 	db	46
   890  00FD15  20                 	db	32
   891  00FD16  4C                 	db	76	;'L'
   892  00FD17  4F                 	db	79	;'O'
   893  00FD18  47                 	db	71	;'G'
   894  00FD19  53                 	db	83	;'S'
   895  00FD1A  20                 	db	32
   896  00FD1B  20                 	db	32
   897  00FD1C  20                 	db	32
   898  00FD1D  20                 	db	32
   899  00FD1E  20                 	db	32
   900  00FD1F  20                 	db	32
   901  00FD20  20                 	db	32
   902  00FD21  20                 	db	32
   903  00FD22  20                 	db	32
   904  00FD23  00                 	db	0
   905  00FD24                     STR_32:
   906  00FD24  32                 	db	50	;'2'
   907  00FD25  2E                 	db	46
   908  00FD26  20                 	db	32
   909  00FD27  53                 	db	83	;'S'
   910  00FD28  4F                 	db	79	;'O'
   911  00FD29  52                 	db	82	;'R'
   912  00FD2A  54                 	db	84	;'T'
   913  00FD2B  20                 	db	32
   914  00FD2C  20                 	db	32
   915  00FD2D  20                 	db	32
   916  00FD2E  20                 	db	32
   917  00FD2F  20                 	db	32
   918  00FD30  20                 	db	32
   919  00FD31  20                 	db	32
   920  00FD32  20                 	db	32
   921  00FD33  20                 	db	32
   922  00FD34  00                 	db	0
   923  00FD35                     STR_33:
   924  00FD35  31                 	db	49	;'1'
   925  00FD36  2E                 	db	46
   926  00FD37  20                 	db	32
   927  00FD38  44                 	db	68	;'D'
   928  00FD39  41                 	db	65	;'A'
   929  00FD3A  54                 	db	84	;'T'
   930  00FD3B  45                 	db	69	;'E'
   931  00FD3C  2F                 	db	47
   932  00FD3D  54                 	db	84	;'T'
   933  00FD3E  49                 	db	73	;'I'
   934  00FD3F  4D                 	db	77	;'M'
   935  00FD40  45                 	db	69	;'E'
   936  00FD41  20                 	db	32
   937  00FD42  20                 	db	32
   938  00FD43  20                 	db	32
   939  00FD44  20                 	db	32
   940  00FD45  00                 	db	0
   941  00FD46                     STR_24:
   942  00FD46  20                 	db	32
   943  00FD47  2D                 	db	45
   944  00FD48  2D                 	db	45
   945  00FD49  20                 	db	32
   946  00FD4A  50                 	db	80	;'P'
   947  00FD4B  4F                 	db	79	;'O'
   948  00FD4C  50                 	db	80	;'P'
   949  00FD4D  20                 	db	32
   950  00FD4E  20                 	db	32
   951  00FD4F  43                 	db	67	;'C'
   952  00FD50  41                 	db	65	;'A'
   953  00FD51  4E                 	db	78	;'N'
   954  00FD52  20                 	db	32
   955  00FD53  2D                 	db	45
   956  00FD54  2D                 	db	45
   957  00FD55  20                 	db	32
   958  00FD56  00                 	db	0
   959  00FD57                     STR_26:
   960  00FD57  20                 	db	32
   961  00FD58  2D                 	db	45
   962  00FD59  2D                 	db	45
   963  00FD5A  20                 	db	32
   964  00FD5B  53                 	db	83	;'S'
   965  00FD5C  4F                 	db	79	;'O'
   966  00FD5D  55                 	db	85	;'U'
   967  00FD5E  50                 	db	80	;'P'
   968  00FD5F  20                 	db	32
   969  00FD60  43                 	db	67	;'C'
   970  00FD61  41                 	db	65	;'A'
   971  00FD62  4E                 	db	78	;'N'
   972  00FD63  20                 	db	32
   973  00FD64  2D                 	db	45
   974  00FD65  2D                 	db	45
   975  00FD66  20                 	db	32
   976  00FD67  00                 	db	0
   977  00FD68                     STR_28:
   978  00FD68  2D                 	db	45
   979  00FD69  2D                 	db	45
   980  00FD6A  20                 	db	32
   981  00FD6B  54                 	db	84	;'T'
   982  00FD6C  4F                 	db	79	;'O'
   983  00FD6D  54                 	db	84	;'T'
   984  00FD6E  41                 	db	65	;'A'
   985  00FD6F  4C                 	db	76	;'L'
   986  00FD70  20                 	db	32
   987  00FD71  43                 	db	67	;'C'
   988  00FD72  41                 	db	65	;'A'
   989  00FD73  4E                 	db	78	;'N'
   990  00FD74  53                 	db	83	;'S'
   991  00FD75  20                 	db	32
   992  00FD76  2D                 	db	45
   993  00FD77  2D                 	db	45
   994  00FD78  00                 	db	0
   995  00FD79                     STR_39:
   996  00FD79  4C                 	db	76	;'L'
   997  00FD7A  4F                 	db	79	;'O'
   998  00FD7B  47                 	db	71	;'G'
   999  00FD7C  20                 	db	32
  1000  00FD7D  31                 	db	49	;'1'
  1001  00FD7E  20                 	db	32
  1002  00FD7F  20                 	db	32
  1003  00FD80  20                 	db	32
  1004  00FD81  20                 	db	32
  1005  00FD82  20                 	db	32
  1006  00FD83  20                 	db	32
  1007  00FD84  20                 	db	32
  1008  00FD85  20                 	db	32
  1009  00FD86  20                 	db	32
  1010  00FD87  20                 	db	32
  1011  00FD88  3C                 	db	60	;'<'
  1012  00FD89  00                 	db	0
  1013  00FD8A                     STR_42:
  1014  00FD8A  4C                 	db	76	;'L'
  1015  00FD8B  4F                 	db	79	;'O'
  1016  00FD8C  47                 	db	71	;'G'
  1017  00FD8D  20                 	db	32
  1018  00FD8E  32                 	db	50	;'2'
  1019  00FD8F  20                 	db	32
  1020  00FD90  20                 	db	32
  1021  00FD91  20                 	db	32
  1022  00FD92  20                 	db	32
  1023  00FD93  20                 	db	32
  1024  00FD94  20                 	db	32
  1025  00FD95  20                 	db	32
  1026  00FD96  20                 	db	32
  1027  00FD97  20                 	db	32
  1028  00FD98  20                 	db	32
  1029  00FD99  3C                 	db	60	;'<'
  1030  00FD9A  00                 	db	0
  1031  00FD9B                     STR_46:
  1032  00FD9B  4C                 	db	76	;'L'
  1033  00FD9C  4F                 	db	79	;'O'
  1034  00FD9D  47                 	db	71	;'G'
  1035  00FD9E  20                 	db	32
  1036  00FD9F  33                 	db	51	;'3'
  1037  00FDA0  20                 	db	32
  1038  00FDA1  20                 	db	32
  1039  00FDA2  20                 	db	32
  1040  00FDA3  20                 	db	32
  1041  00FDA4  20                 	db	32
  1042  00FDA5  20                 	db	32
  1043  00FDA6  20                 	db	32
  1044  00FDA7  20                 	db	32
  1045  00FDA8  20                 	db	32
  1046  00FDA9  20                 	db	32
  1047  00FDAA  3C                 	db	60	;'<'
  1048  00FDAB  00                 	db	0
  1049  00FDAC                     STR_50:
  1050  00FDAC  4C                 	db	76	;'L'
  1051  00FDAD  4F                 	db	79	;'O'
  1052  00FDAE  47                 	db	71	;'G'
  1053  00FDAF  20                 	db	32
  1054  00FDB0  34                 	db	52	;'4'
  1055  00FDB1  20                 	db	32
  1056  00FDB2  20                 	db	32
  1057  00FDB3  20                 	db	32
  1058  00FDB4  20                 	db	32
  1059  00FDB5  20                 	db	32
  1060  00FDB6  20                 	db	32
  1061  00FDB7  20                 	db	32
  1062  00FDB8  20                 	db	32
  1063  00FDB9  20                 	db	32
  1064  00FDBA  20                 	db	32
  1065  00FDBB  3C                 	db	60	;'<'
  1066  00FDBC  00                 	db	0
  1067  00FDBD                     STR_38:
  1068  00FDBD  33                 	db	51	;'3'
  1069  00FDBE  2E                 	db	46
  1070  00FDBF  20                 	db	32
  1071  00FDC0  4C                 	db	76	;'L'
  1072  00FDC1  4F                 	db	79	;'O'
  1073  00FDC2  47                 	db	71	;'G'
  1074  00FDC3  53                 	db	83	;'S'
  1075  00FDC4  20                 	db	32
  1076  00FDC5  20                 	db	32
  1077  00FDC6  20                 	db	32
  1078  00FDC7  20                 	db	32
  1079  00FDC8  20                 	db	32
  1080  00FDC9  20                 	db	32
  1081  00FDCA  20                 	db	32
  1082  00FDCB  20                 	db	32
  1083  00FDCC  3C                 	db	60	;'<'
  1084  00FDCD  00                 	db	0
  1085  00FDCE                     STR_34:
  1086  00FDCE  32                 	db	50	;'2'
  1087  00FDCF  2E                 	db	46
  1088  00FDD0  20                 	db	32
  1089  00FDD1  53                 	db	83	;'S'
  1090  00FDD2  4F                 	db	79	;'O'
  1091  00FDD3  52                 	db	82	;'R'
  1092  00FDD4  54                 	db	84	;'T'
  1093  00FDD5  20                 	db	32
  1094  00FDD6  20                 	db	32
  1095  00FDD7  20                 	db	32
  1096  00FDD8  20                 	db	32
  1097  00FDD9  20                 	db	32
  1098  00FDDA  20                 	db	32
  1099  00FDDB  20                 	db	32
  1100  00FDDC  20                 	db	32
  1101  00FDDD  3C                 	db	60	;'<'
  1102  00FDDE  00                 	db	0
  1103  00FDDF                     STR_31:
  1104  00FDDF  31                 	db	49	;'1'
  1105  00FDE0  2E                 	db	46
  1106  00FDE1  20                 	db	32
  1107  00FDE2  44                 	db	68	;'D'
  1108  00FDE3  41                 	db	65	;'A'
  1109  00FDE4  54                 	db	84	;'T'
  1110  00FDE5  45                 	db	69	;'E'
  1111  00FDE6  2F                 	db	47
  1112  00FDE7  54                 	db	84	;'T'
  1113  00FDE8  49                 	db	73	;'I'
  1114  00FDE9  4D                 	db	77	;'M'
  1115  00FDEA  45                 	db	69	;'E'
  1116  00FDEB  20                 	db	32
  1117  00FDEC  20                 	db	32
  1118  00FDED  20                 	db	32
  1119  00FDEE  3C                 	db	60	;'<'
  1120  00FDEF  00                 	db	0
  1121  00FDF0                     STR_6:
  1122  00FDF0  50                 	db	80	;'P'
  1123  00FDF1  41                 	db	65	;'A'
  1124  00FDF2  55                 	db	85	;'U'
  1125  00FDF3  53                 	db	83	;'S'
  1126  00FDF4  45                 	db	69	;'E'
  1127  00FDF5  20                 	db	32
  1128  00FDF6  3C                 	db	60	;'<'
  1129  00FDF7  20                 	db	32
  1130  00FDF8  7C                 	db	124
  1131  00FDF9  20                 	db	32
  1132  00FDFA  42                 	db	66	;'B'
  1133  00FDFB  41                 	db	65	;'A'
  1134  00FDFC  43                 	db	67	;'C'
  1135  00FDFD  4B                 	db	75	;'K'
  1136  00FDFE  20                 	db	32
  1137  00FDFF  3E                 	db	62	;'>'
  1138  00FE00  00                 	db	0
  1139  00FE01                     STR_30:
  1140  00FE01  50                 	db	80	;'P'
  1141  00FE02  55                 	db	85	;'U'
  1142  00FE03  53                 	db	83	;'S'
  1143  00FE04  48                 	db	72	;'H'
  1144  00FE05  20                 	db	32
  1145  00FE06  54                 	db	84	;'T'
  1146  00FE07  4F                 	db	79	;'O'
  1147  00FE08  20                 	db	32
  1148  00FE09  43                 	db	67	;'C'
  1149  00FE0A  4F                 	db	79	;'O'
  1150  00FE0B  4E                 	db	78	;'N'
  1151  00FE0C  54                 	db	84	;'T'
  1152  00FE0D  49                 	db	73	;'I'
  1153  00FE0E  4E                 	db	78	;'N'
  1154  00FE0F  55                 	db	85	;'U'
  1155  00FE10  45                 	db	69	;'E'
  1156  00FE11  00                 	db	0
  1157  00FE12                     STR_27:
  1158  00FE12  4E                 	db	78	;'N'
  1159  00FE13  4C                 	db	76	;'L'
  1160  00FE14  41                 	db	65	;'A'
  1161  00FE15  42                 	db	66	;'B'
  1162  00FE16  3A                 	db	58	;':'
  1163  00FE17  20                 	db	32
  1164  00FE18  25                 	db	37
  1165  00FE19  64                 	db	100	;'d'
  1166  00FE1A  7C                 	db	124
  1167  00FE1B  4C                 	db	76	;'L'
  1168  00FE1C  41                 	db	65	;'A'
  1169  00FE1D  42                 	db	66	;'B'
  1170  00FE1E  3A                 	db	58	;':'
  1171  00FE1F  20                 	db	32
  1172  00FE20  25                 	db	37
  1173  00FE21  64                 	db	100	;'d'
  1174  00FE22  00                 	db	0
  1175  00FE23                     STR_25:
  1176  00FE23  4E                 	db	78	;'N'
  1177  00FE24  54                 	db	84	;'T'
  1178  00FE25  41                 	db	65	;'A'
  1179  00FE26  42                 	db	66	;'B'
  1180  00FE27  3A                 	db	58	;':'
  1181  00FE28  20                 	db	32
  1182  00FE29  25                 	db	37
  1183  00FE2A  64                 	db	100	;'d'
  1184  00FE2B  7C                 	db	124
  1185  00FE2C  54                 	db	84	;'T'
  1186  00FE2D  41                 	db	65	;'A'
  1187  00FE2E  42                 	db	66	;'B'
  1188  00FE2F  3A                 	db	58	;':'
  1189  00FE30  20                 	db	32
  1190  00FE31  25                 	db	37
  1191  00FE32  64                 	db	100	;'d'
  1192  00FE33  00                 	db	0
  1193  00FE34                     STR_83:
  1194  00FE34  4D                 	db	77	;'M'
  1195  00FE35  41                 	db	65	;'A'
  1196  00FE36  47                 	db	71	;'G'
  1197  00FE37  5F                 	db	95	;'_'
  1198  00FE38  73                 	db	115	;'s'
  1199  00FE39  69                 	db	105	;'i'
  1200  00FE3A  67                 	db	103	;'g'
  1201  00FE3B  6E                 	db	110	;'n'
  1202  00FE3C  61                 	db	97	;'a'
  1203  00FE3D  6C                 	db	108	;'l'
  1204  00FE3E  3A                 	db	58	;':'
  1205  00FE3F  20                 	db	32
  1206  00FE40  25                 	db	37
  1207  00FE41  64                 	db	100	;'d'
  1208  00FE42  20                 	db	32
  1209  00FE43  00                 	db	0
  1210  00FE44                     STR_103:
  1211  00FE44  54                 	db	84	;'T'
  1212  00FE45  53                 	db	83	;'S'
  1213  00FE46  54                 	db	84	;'T'
  1214  00FE47  3A                 	db	58	;':'
  1215  00FE48  20                 	db	32
  1216  00FE49  54                 	db	84	;'T'
  1217  00FE4A  49                 	db	73	;'I'
  1218  00FE4B  4C                 	db	76	;'L'
  1219  00FE4C  54                 	db	84	;'T'
  1220  00FE4D  20                 	db	32
  1221  00FE4E  53                 	db	83	;'S'
  1222  00FE4F  45                 	db	69	;'E'
  1223  00FE50  52                 	db	82	;'R'
  1224  00FE51  56                 	db	86	;'V'
  1225  00FE52  4F                 	db	79	;'O'
  1226  00FE53  00                 	db	0
  1227  00FE54                     STR_4:
  1228  00FE54  44                 	db	68	;'D'
  1229  00FE55  49                 	db	73	;'I'
  1230  00FE56  44                 	db	68	;'D'
  1231  00FE57  4E                 	db	78	;'N'
  1232  00FE58  27                 	db	39
  1233  00FE59  54                 	db	84	;'T'
  1234  00FE5A  20                 	db	32
  1235  00FE5B  43                 	db	67	;'C'
  1236  00FE5C  4F                 	db	79	;'O'
  1237  00FE5D  4D                 	db	77	;'M'
  1238  00FE5E  50                 	db	80	;'P'
  1239  00FE5F  4C                 	db	76	;'L'
  1240  00FE60  45                 	db	69	;'E'
  1241  00FE61  54                 	db	84	;'T'
  1242  00FE62  45                 	db	69	;'E'
  1243  00FE63  00                 	db	0
  1244  00FE64                     STR_80:
  1245  00FE64  49                 	db	73	;'I'
  1246  00FE65  52                 	db	82	;'R'
  1247  00FE66  5F                 	db	95	;'_'
  1248  00FE67  73                 	db	115	;'s'
  1249  00FE68  69                 	db	105	;'i'
  1250  00FE69  67                 	db	103	;'g'
  1251  00FE6A  6E                 	db	110	;'n'
  1252  00FE6B  61                 	db	97	;'a'
  1253  00FE6C  6C                 	db	108	;'l'
  1254  00FE6D  3A                 	db	58	;':'
  1255  00FE6E  20                 	db	32
  1256  00FE6F  25                 	db	37
  1257  00FE70  64                 	db	100	;'d'
  1258  00FE71  20                 	db	32
  1259  00FE72  00                 	db	0
  1260  00FE73                     STR_109:
  1261  00FE73  43                 	db	67	;'C'
  1262  00FE74  41                 	db	65	;'A'
  1263  00FE75  4D                 	db	77	;'M'
  1264  00FE76  20                 	db	32
  1265  00FE77  44                 	db	68	;'D'
  1266  00FE78  57                 	db	87	;'W'
  1267  00FE79  4E                 	db	78	;'N'
  1268  00FE7A  20                 	db	32
  1269  00FE7B  7C                 	db	124
  1270  00FE7C  52                 	db	82	;'R'
  1271  00FE7D  43                 	db	67	;'C'
  1272  00FE7E  30                 	db	48	;'0'
  1273  00FE7F  3D                 	db	61	;'='
  1274  00FE80  30                 	db	48	;'0'
  1275  00FE81  00                 	db	0
  1276  00FE82                     STR_108:
  1277  00FE82  43                 	db	67	;'C'
  1278  00FE83  41                 	db	65	;'A'
  1279  00FE84  4D                 	db	77	;'M'
  1280  00FE85  20                 	db	32
  1281  00FE86  55                 	db	85	;'U'
  1282  00FE87  50                 	db	80	;'P'
  1283  00FE88  20                 	db	32
  1284  00FE89  20                 	db	32
  1285  00FE8A  7C                 	db	124
  1286  00FE8B  52                 	db	82	;'R'
  1287  00FE8C  43                 	db	67	;'C'
  1288  00FE8D  30                 	db	48	;'0'
  1289  00FE8E  3D                 	db	61	;'='
  1290  00FE8F  31                 	db	49	;'1'
  1291  00FE90  00                 	db	0
  1292  00FE91                     STR_82:
  1293  00FE91  54                 	db	84	;'T'
  1294  00FE92  53                 	db	83	;'S'
  1295  00FE93  54                 	db	84	;'T'
  1296  00FE94  3A                 	db	58	;':'
  1297  00FE95  20                 	db	32
  1298  00FE96  4D                 	db	77	;'M'
  1299  00FE97  41                 	db	65	;'A'
  1300  00FE98  47                 	db	71	;'G'
  1301  00FE99  4E                 	db	78	;'N'
  1302  00FE9A  45                 	db	69	;'E'
  1303  00FE9B  54                 	db	84	;'T'
  1304  00FE9C  49                 	db	73	;'I'
  1305  00FE9D  53                 	db	83	;'S'
  1306  00FE9E  4D                 	db	77	;'M'
  1307  00FE9F  00                 	db	0
  1308  00FEA0                     STR_107:
  1309  00FEA0  54                 	db	84	;'T'
  1310  00FEA1  53                 	db	83	;'S'
  1311  00FEA2  54                 	db	84	;'T'
  1312  00FEA3  3A                 	db	58	;':'
  1313  00FEA4  20                 	db	32
  1314  00FEA5  43                 	db	67	;'C'
  1315  00FEA6  41                 	db	65	;'A'
  1316  00FEA7  4D                 	db	77	;'M'
  1317  00FEA8  20                 	db	32
  1318  00FEA9  53                 	db	83	;'S'
  1319  00FEAA  45                 	db	69	;'E'
  1320  00FEAB  52                 	db	82	;'R'
  1321  00FEAC  56                 	db	86	;'V'
  1322  00FEAD  4F                 	db	79	;'O'
  1323  00FEAE  00                 	db	0
  1324  00FEAF                     STR_96:
  1325  00FEAF  54                 	db	84	;'T'
  1326  00FEB0  53                 	db	83	;'S'
  1327  00FEB1  54                 	db	84	;'T'
  1328  00FEB2  3A                 	db	58	;':'
  1329  00FEB3  20                 	db	32
  1330  00FEB4  50                 	db	80	;'P'
  1331  00FEB5  41                 	db	65	;'A'
  1332  00FEB6  4E                 	db	78	;'N'
  1333  00FEB7  20                 	db	32
  1334  00FEB8  53                 	db	83	;'S'
  1335  00FEB9  45                 	db	69	;'E'
  1336  00FEBA  52                 	db	82	;'R'
  1337  00FEBB  56                 	db	86	;'V'
  1338  00FEBC  4F                 	db	79	;'O'
  1339  00FEBD  00                 	db	0
  1340  00FEBE                     STR_75:
  1341  00FEBE  41                 	db	65	;'A'
  1342  00FEBF  4C                 	db	76	;'L'
  1343  00FEC0  47                 	db	71	;'G'
  1344  00FEC1  34                 	db	52	;'4'
  1345  00FEC2  3A                 	db	58	;':'
  1346  00FEC3  20                 	db	32
  1347  00FEC4  41                 	db	65	;'A'
  1348  00FEC5  4C                 	db	76	;'L'
  1349  00FEC6  4C                 	db	76	;'L'
  1350  00FEC7  20                 	db	32
  1351  00FEC8  43                 	db	67	;'C'
  1352  00FEC9  41                 	db	65	;'A'
  1353  00FECA  4E                 	db	78	;'N'
  1354  00FECB  53                 	db	83	;'S'
  1355  00FECC  00                 	db	0
  1356  00FECD                     STR_90:
  1357  00FECD  54                 	db	84	;'T'
  1358  00FECE  53                 	db	83	;'S'
  1359  00FECF  54                 	db	84	;'T'
  1360  00FED0  3A                 	db	58	;':'
  1361  00FED1  20                 	db	32
  1362  00FED2  44                 	db	68	;'D'
  1363  00FED3  43                 	db	67	;'C'
  1364  00FED4  20                 	db	32
  1365  00FED5  4D                 	db	77	;'M'
  1366  00FED6  4F                 	db	79	;'O'
  1367  00FED7  54                 	db	84	;'T'
  1368  00FED8  4F                 	db	79	;'O'
  1369  00FED9  52                 	db	82	;'R'
  1370  00FEDA  53                 	db	83	;'S'
  1371  00FEDB  00                 	db	0
  1372  00FEDC                     STR_70:
  1373  00FEDC  41                 	db	65	;'A'
  1374  00FEDD  4C                 	db	76	;'L'
  1375  00FEDE  47                 	db	71	;'G'
  1376  00FEDF  4F                 	db	79	;'O'
  1377  00FEE0  52                 	db	82	;'R'
  1378  00FEE1  49                 	db	73	;'I'
  1379  00FEE2  54                 	db	84	;'T'
  1380  00FEE3  48                 	db	72	;'H'
  1381  00FEE4  4D                 	db	77	;'M'
  1382  00FEE5  20                 	db	32
  1383  00FEE6  54                 	db	84	;'T'
  1384  00FEE7  45                 	db	69	;'E'
  1385  00FEE8  53                 	db	83	;'S'
  1386  00FEE9  54                 	db	84	;'T'
  1387  00FEEA  00                 	db	0
  1388  00FEEB                     STR_91:
  1389  00FEEB  50                 	db	80	;'P'
  1390  00FEEC  49                 	db	73	;'I'
  1391  00FEED  4E                 	db	78	;'N'
  1392  00FEEE  20                 	db	32
  1393  00FEEF  52                 	db	82	;'R'
  1394  00FEF0  41                 	db	65	;'A'
  1395  00FEF1  35                 	db	53	;'5'
  1396  00FEF2  20                 	db	32
  1397  00FEF3  48                 	db	72	;'H'
  1398  00FEF4  49                 	db	73	;'I'
  1399  00FEF5  47                 	db	71	;'G'
  1400  00FEF6  48                 	db	72	;'H'
  1401  00FEF7  2E                 	db	46
  1402  00FEF8  00                 	db	0
  1403  00FEF9                     STR_73:
  1404  00FEF9  41                 	db	65	;'A'
  1405  00FEFA  4C                 	db	76	;'L'
  1406  00FEFB  47                 	db	71	;'G'
  1407  00FEFC  32                 	db	50	;'2'
  1408  00FEFD  3A                 	db	58	;':'
  1409  00FEFE  20                 	db	32
  1410  00FEFF  31                 	db	49	;'1'
  1411  00FF00  32                 	db	50	;'2'
  1412  00FF01  20                 	db	32
  1413  00FF02  43                 	db	67	;'C'
  1414  00FF03  41                 	db	65	;'A'
  1415  00FF04  4E                 	db	78	;'N'
  1416  00FF05  53                 	db	83	;'S'
  1417  00FF06  00                 	db	0
  1418  00FF07                     STR_76:
  1419  00FF07  41                 	db	65	;'A'
  1420  00FF08  4C                 	db	76	;'L'
  1421  00FF09  47                 	db	71	;'G'
  1422  00FF0A  35                 	db	53	;'5'
  1423  00FF0B  3A                 	db	58	;':'
  1424  00FF0C  20                 	db	32
  1425  00FF0D  4E                 	db	78	;'N'
  1426  00FF0E  4F                 	db	79	;'O'
  1427  00FF0F  20                 	db	32
  1428  00FF10  43                 	db	67	;'C'
  1429  00FF11  41                 	db	65	;'A'
  1430  00FF12  4E                 	db	78	;'N'
  1431  00FF13  53                 	db	83	;'S'
  1432  00FF14  00                 	db	0
  1433  00FF15                     STR_71:
  1434  00FF15  50                 	db	80	;'P'
  1435  00FF16  55                 	db	85	;'U'
  1436  00FF17  53                 	db	83	;'S'
  1437  00FF18  48                 	db	72	;'H'
  1438  00FF19  20                 	db	32
  1439  00FF1A  54                 	db	84	;'T'
  1440  00FF1B  4F                 	db	79	;'O'
  1441  00FF1C  20                 	db	32
  1442  00FF1D  53                 	db	83	;'S'
  1443  00FF1E  54                 	db	84	;'T'
  1444  00FF1F  41                 	db	65	;'A'
  1445  00FF20  52                 	db	82	;'R'
  1446  00FF21  54                 	db	84	;'T'
  1447  00FF22  00                 	db	0
  1448  00FF23                     STR_23:
  1449  00FF23  25                 	db	37
  1450  00FF24  64                 	db	100	;'d'
  1451  00FF25  20                 	db	32
  1452  00FF26  4D                 	db	77	;'M'
  1453  00FF27  49                 	db	73	;'I'
  1454  00FF28  4E                 	db	78	;'N'
  1455  00FF29  20                 	db	32
  1456  00FF2A  25                 	db	37
  1457  00FF2B  64                 	db	100	;'d'
  1458  00FF2C  20                 	db	32
  1459  00FF2D  53                 	db	83	;'S'
  1460  00FF2E  45                 	db	69	;'E'
  1461  00FF2F  43                 	db	67	;'C'
  1462  00FF30  00                 	db	0
  1463  00FF31                     STR_2:
  1464  00FF31  54                 	db	84	;'T'
  1465  00FF32  49                 	db	73	;'I'
  1466  00FF33  4D                 	db	77	;'M'
  1467  00FF34  45                 	db	69	;'E'
  1468  00FF35  3A                 	db	58	;':'
  1469  00FF36  20                 	db	32
  1470  00FF37  25                 	db	37
  1471  00FF38  64                 	db	100	;'d'
  1472  00FF39  3A                 	db	58	;':'
  1473  00FF3A  25                 	db	37
  1474  00FF3B  30                 	db	48	;'0'
  1475  00FF3C  32                 	db	50	;'2'
  1476  00FF3D  64                 	db	100	;'d'
  1477  00FF3E  00                 	db	0
  1478  00FF3F                     STR_79:
  1479  00FF3F  54                 	db	84	;'T'
  1480  00FF40  53                 	db	83	;'S'
  1481  00FF41  54                 	db	84	;'T'
  1482  00FF42  3A                 	db	58	;':'
  1483  00FF43  20                 	db	32
  1484  00FF44  49                 	db	73	;'I'
  1485  00FF45  52                 	db	82	;'R'
  1486  00FF46  20                 	db	32
  1487  00FF47  53                 	db	83	;'S'
  1488  00FF48  4E                 	db	78	;'N'
  1489  00FF49  53                 	db	83	;'S'
  1490  00FF4A  52                 	db	82	;'R'
  1491  00FF4B  00                 	db	0
  1492  00FF4C                     STR_65:
  1493  00FF4C  54                 	db	84	;'T'
  1494  00FF4D  49                 	db	73	;'I'
  1495  00FF4E  4D                 	db	77	;'M'
  1496  00FF4F  45                 	db	69	;'E'
  1497  00FF50  20                 	db	32
  1498  00FF51  25                 	db	37
  1499  00FF52  64                 	db	100	;'d'
  1500  00FF53  3A                 	db	58	;':'
  1501  00FF54  25                 	db	37
  1502  00FF55  30                 	db	48	;'0'
  1503  00FF56  32                 	db	50	;'2'
  1504  00FF57  64                 	db	100	;'d'
  1505  00FF58  00                 	db	0
  1506  00FF59                     STR_74:
  1507  00FF59  41                 	db	65	;'A'
  1508  00FF5A  4C                 	db	76	;'L'
  1509  00FF5B  47                 	db	71	;'G'
  1510  00FF5C  33                 	db	51	;'3'
  1511  00FF5D  3A                 	db	58	;':'
  1512  00FF5E  20                 	db	32
  1513  00FF5F  31                 	db	49	;'1'
  1514  00FF60  20                 	db	32
  1515  00FF61  43                 	db	67	;'C'
  1516  00FF62  41                 	db	65	;'A'
  1517  00FF63  4E                 	db	78	;'N'
  1518  00FF64  00                 	db	0
  1519  00FF65                     STR_93:
  1520  00FF65  50                 	db	80	;'P'
  1521  00FF66  49                 	db	73	;'I'
  1522  00FF67  4E                 	db	78	;'N'
  1523  00FF68  20                 	db	32
  1524  00FF69  52                 	db	82	;'R'
  1525  00FF6A  41                 	db	65	;'A'
  1526  00FF6B  33                 	db	51	;'3'
  1527  00FF6C  2E                 	db	46
  1528  00FF6D  2E                 	db	46
  1529  00FF6E  2E                 	db	46
  1530  00FF6F  00                 	db	0
  1531  00FF70                     STR_95:
  1532  00FF70  50                 	db	80	;'P'
  1533  00FF71  49                 	db	73	;'I'
  1534  00FF72  4E                 	db	78	;'N'
  1535  00FF73  20                 	db	32
  1536  00FF74  52                 	db	82	;'R'
  1537  00FF75  41                 	db	65	;'A'
  1538  00FF76  34                 	db	52	;'4'
  1539  00FF77  2E                 	db	46
  1540  00FF78  2E                 	db	46
  1541  00FF79  2E                 	db	46
  1542  00FF7A  00                 	db	0
  1543  00FF7B                     STR_64:
  1544  00FF7B  53                 	db	83	;'S'
  1545  00FF7C  4F                 	db	79	;'O'
  1546  00FF7D  52                 	db	82	;'R'
  1547  00FF7E  54                 	db	84	;'T'
  1548  00FF7F  49                 	db	73	;'I'
  1549  00FF80  4E                 	db	78	;'N'
  1550  00FF81  47                 	db	71	;'G'
  1551  00FF82  2E                 	db	46
  1552  00FF83  2E                 	db	46
  1553  00FF84  2E                 	db	46
  1554  00FF85  00                 	db	0
  1555  00FF86                     STR_84:
  1556  00FF86  54                 	db	84	;'T'
  1557  00FF87  53                 	db	83	;'S'
  1558  00FF88  54                 	db	84	;'T'
  1559  00FF89  3A                 	db	58	;':'
  1560  00FF8A  20                 	db	32
  1561  00FF8B  43                 	db	67	;'C'
  1562  00FF8C  4F                 	db	79	;'O'
  1563  00FF8D  4E                 	db	78	;'N'
  1564  00FF8E  44                 	db	68	;'D'
  1565  00FF8F  00                 	db	0
  1566  00FF90                     STR_88:
  1567  00FF90  41                 	db	65	;'A'
  1568  00FF91  43                 	db	67	;'C'
  1569  00FF92  54                 	db	84	;'T'
  1570  00FF93  55                 	db	85	;'U'
  1571  00FF94  41                 	db	65	;'A'
  1572  00FF95  54                 	db	84	;'T'
  1573  00FF96  4F                 	db	79	;'O'
  1574  00FF97  52                 	db	82	;'R'
  1575  00FF98  53                 	db	83	;'S'
  1576  00FF99  00                 	db	0
  1577  00FF9A                     STR_22:
  1578  00FF9A  44                 	db	68	;'D'
  1579  00FF9B  55                 	db	85	;'U'
  1580  00FF9C  52                 	db	82	;'R'
  1581  00FF9D  41                 	db	65	;'A'
  1582  00FF9E  54                 	db	84	;'T'
  1583  00FF9F  49                 	db	73	;'I'
  1584  00FFA0  4F                 	db	79	;'O'
  1585  00FFA1  4E                 	db	78	;'N'
  1586  00FFA2  3A                 	db	58	;':'
  1587  00FFA3  00                 	db	0
  1588  00FFA4                     STR_86:
  1589  00FFA4  43                 	db	67	;'C'
  1590  00FFA5  4F                 	db	79	;'O'
  1591  00FFA6  4E                 	db	78	;'N'
  1592  00FFA7  44                 	db	68	;'D'
  1593  00FFA8  3A                 	db	58	;':'
  1594  00FFA9  20                 	db	32
  1595  00FFAA  25                 	db	37
  1596  00FFAB  64                 	db	100	;'d'
  1597  00FFAC  00                 	db	0
  1598  00FFAD                     STR_77:
  1599  00FFAD  53                 	db	83	;'S'
  1600  00FFAE  45                 	db	69	;'E'
  1601  00FFAF  4E                 	db	78	;'N'
  1602  00FFB0  53                 	db	83	;'S'
  1603  00FFB1  4F                 	db	79	;'O'
  1604  00FFB2  52                 	db	82	;'R'
  1605  00FFB3  53                 	db	83	;'S'
  1606  00FFB4  00                 	db	0
  1607  00FFB5                     STR_126:
  1608  00FFB5  28                 	db	40
  1609  00FFB6  6E                 	db	110	;'n'
  1610  00FFB7  75                 	db	117	;'u'
  1611  00FFB8  6C                 	db	108	;'l'
  1612  00FFB9  6C                 	db	108	;'l'
  1613  00FFBA  29                 	db	41
  1614  00FFBB  00                 	db	0
  1615  00FFBC                     STR_67:
  1616  00FFBC  46                 	db	70	;'F'
  1617  00FFBD  41                 	db	65	;'A'
  1618  00FFBE  49                 	db	73	;'I'
  1619  00FFBF  4C                 	db	76	;'L'
  1620  00FFC0  45                 	db	69	;'E'
  1621  00FFC1  44                 	db	68	;'D'
  1622  00FFC2  00                 	db	0
  1623  00FFC3                     STR_7:
  1624  00FFC3  53                 	db	83	;'S'
  1625  00FFC4  54                 	db	84	;'T'
  1626  00FFC5  41                 	db	65	;'A'
  1627  00FFC6  52                 	db	82	;'R'
  1628  00FFC7  54                 	db	84	;'T'
  1629  00FFC8  3A                 	db	58	;':'
  1630  00FFC9  00                 	db	0
  1631  00FFCA                     STR_9:
  1632  00FFCA  46                 	db	70	;'F'
  1633  00FFCB  45                 	db	69	;'E'
  1634  00FFCC  42                 	db	66	;'B'
  1635  00FFCD  00                 	db	0
  1636  00FFCE                     STR_19:
  1637  00FFCE  44                 	db	68	;'D'
  1638  00FFCF  45                 	db	69	;'E'
  1639  00FFD0  43                 	db	67	;'C'
  1640  00FFD1  00                 	db	0
  1641  00FFD2                     STR_15:
  1642  00FFD2  41                 	db	65	;'A'
  1643  00FFD3  55                 	db	85	;'U'
  1644  00FFD4  47                 	db	71	;'G'
  1645  00FFD5  00                 	db	0
  1646  00FFD6                     STR_14:
  1647  00FFD6  4A                 	db	74	;'J'
  1648  00FFD7  55                 	db	85	;'U'
  1649  00FFD8  4C                 	db	76	;'L'
  1650  00FFD9  00                 	db	0
  1651  00FFDA                     STR_8:
  1652  00FFDA  4A                 	db	74	;'J'
  1653  00FFDB  41                 	db	65	;'A'
  1654  00FFDC  4E                 	db	78	;'N'
  1655  00FFDD  00                 	db	0
  1656  00FFDE                     STR_13:
  1657  00FFDE  4A                 	db	74	;'J'
  1658  00FFDF  55                 	db	85	;'U'
  1659  00FFE0  4E                 	db	78	;'N'
  1660  00FFE1  00                 	db	0
  1661  00FFE2                     STR_16:
  1662  00FFE2  53                 	db	83	;'S'
  1663  00FFE3  45                 	db	69	;'E'
  1664  00FFE4  50                 	db	80	;'P'
  1665  00FFE5  00                 	db	0
  1666  00FFE6                     STR_10:
  1667  00FFE6  4D                 	db	77	;'M'
  1668  00FFE7  41                 	db	65	;'A'
  1669  00FFE8  52                 	db	82	;'R'
  1670  00FFE9  00                 	db	0
  1671  00FFEA                     STR_11:
  1672  00FFEA  41                 	db	65	;'A'
  1673  00FFEB  50                 	db	80	;'P'
  1674  00FFEC  52                 	db	82	;'R'
  1675  00FFED  00                 	db	0
  1676  00FFEE                     STR_20:
  1677  00FFEE  45                 	db	69	;'E'
  1678  00FFEF  52                 	db	82	;'R'
  1679  00FFF0  52                 	db	82	;'R'
  1680  00FFF1  00                 	db	0
  1681  00FFF2                     STR_17:
  1682  00FFF2  4F                 	db	79	;'O'
  1683  00FFF3  43                 	db	67	;'C'
  1684  00FFF4  54                 	db	84	;'T'
  1685  00FFF5  00                 	db	0
  1686  00FFF6                     STR_18:
  1687  00FFF6  4E                 	db	78	;'N'
  1688  00FFF7  4F                 	db	79	;'O'
  1689  00FFF8  56                 	db	86	;'V'
  1690  00FFF9  00                 	db	0
  1691  00FFFA                     STR_12:
  1692  00FFFA  4D                 	db	77	;'M'
  1693  00FFFB  41                 	db	65	;'A'
  1694  00FFFC  59                 	db	89	;'Y'
  1695  00FFFD  00                 	db	0
  1696  0000                     
  1697                           ; #config settings
  1698  00FFFE  00                 	db	0	; dummy byte at the end
  1699  0000                     
  1700                           	psect	cinit
  1701  004D80                     __pcinit:
  1702                           	opt stack 0
  1703  004D80                     start_initialization:
  1704                           	opt stack 0
  1705  004D80                     __initialization:
  1706                           	opt stack 0
  1707                           
  1708                           ; Initialize objects allocated to BANK1 (8 bytes)
  1709                           ; load TBLPTR registers with __pidataBANK1
  1710  004D80  0E20               	movlw	low __pidataBANK1
  1711  004D82  6EF6               	movwf	tblptrl,c
  1712  004D84  0E55               	movlw	high __pidataBANK1
  1713  004D86  6EF7               	movwf	tblptrh,c
  1714  004D88  0E00               	movlw	low (__pidataBANK1 shr (0+16))
  1715  004D8A  6EF8               	movwf	tblptru,c
  1716  004D8C  EE01  F047         	lfsr	0,__pdataBANK1
  1717  004D90  EE10 F008          	lfsr	1,8
  1718  004D94                     copy_data0:
  1719  004D94  0009               	tblrd		*+
  1720  004D96  CFF5 FFEE          	movff	tablat,postinc0
  1721  004D9A  50E5               	movf	postdec1,w,c
  1722  004D9C  50E1               	movf	fsr1l,w,c
  1723  004D9E  E1FA               	bnz	copy_data0
  1724                           
  1725                           ; Clear objects allocated to BANK1 (71 bytes)
  1726  004DA0  EE01  F000         	lfsr	0,__pbssBANK1
  1727  004DA4  0E47               	movlw	71
  1728  004DA6                     clear_0:
  1729  004DA6  6AEE               	clrf	postinc0,c
  1730  004DA8  06E8               	decf	wreg,f,c
  1731  004DAA  E1FD               	bnz	clear_0
  1732                           
  1733                           ; Clear objects allocated to BANK0 (38 bytes)
  1734  004DAC  EE00  F0DA         	lfsr	0,__pbssBANK0
  1735  004DB0  0E26               	movlw	38
  1736  004DB2                     clear_1:
  1737  004DB2  6AEE               	clrf	postinc0,c
  1738  004DB4  06E8               	decf	wreg,f,c
  1739  004DB6  E1FD               	bnz	clear_1
  1740                           
  1741                           ; Clear objects allocated to COMRAM (35 bytes)
  1742  004DB8  EE00  F05B         	lfsr	0,__pbssCOMRAM
  1743  004DBC  0E23               	movlw	35
  1744  004DBE                     clear_2:
  1745  004DBE  6AEE               	clrf	postinc0,c
  1746  004DC0  06E8               	decf	wreg,f,c
  1747  004DC2  E1FD               	bnz	clear_2
  1748  004DC4                     end_of_initialization:
  1749                           	opt stack 0
  1750  004DC4                     __end_of__initialization:
  1751                           	opt stack 0
  1752  004DC4  907E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1753  004DC6  927E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1754  004DC8  0100               	movlb	0
  1755  004DCA  EF23  F021         	goto	_main	;jump to C main() function
  1756                           tblptru	equ	0xFF8
  1757                           tblptrh	equ	0xFF7
  1758                           tblptrl	equ	0xFF6
  1759                           tablat	equ	0xFF5
  1760                           postinc0	equ	0xFEE
  1761                           wreg	equ	0xFE8
  1762                           postdec1	equ	0xFE5
  1763                           fsr1l	equ	0xFE1
  1764                           
  1765                           	psect	bssCOMRAM
  1766  00005B                     __pbssCOMRAM:
  1767                           	opt stack 0
  1768  00005B                     _back:
  1769                           	opt stack 0
  1770  00005B                     	ds	2
  1771  00005D                     _down:
  1772                           	opt stack 0
  1773  00005D                     	ds	2
  1774  00005F                     _enter:
  1775                           	opt stack 0
  1776  00005F                     	ds	2
  1777  000061                     _f_panning_to_bin:
  1778                           	opt stack 0
  1779  000061                     	ds	2
  1780  000063                     _log_completion:
  1781                           	opt stack 0
  1782  000063                     	ds	2
  1783  000065                     _log_count_pop_no_tab:
  1784                           	opt stack 0
  1785  000065                     	ds	2
  1786  000067                     _log_count_pop_w_tab:
  1787                           	opt stack 0
  1788  000067                     	ds	2
  1789  000069                     _most_recent_sort_time:
  1790                           	opt stack 0
  1791  000069                     	ds	2
  1792  00006B                     _pan_servo_state:
  1793                           	opt stack 0
  1794  00006B                     	ds	2
  1795  00006D                     _servo_timer_counter:
  1796                           	opt stack 0
  1797  00006D                     	ds	2
  1798  00006F                     _servo_timer_target:
  1799                           	opt stack 0
  1800  00006F                     	ds	2
  1801  000071                     _tilt_servo_state:
  1802                           	opt stack 0
  1803  000071                     	ds	2
  1804  000073                     _timer2_counter:
  1805                           	opt stack 0
  1806  000073                     	ds	2
  1807  000075                     _up:
  1808                           	opt stack 0
  1809  000075                     	ds	2
  1810  000077                     _was_low_1:
  1811                           	opt stack 0
  1812  000077                     	ds	2
  1813  000079                     _was_low_2:
  1814                           	opt stack 0
  1815  000079                     	ds	2
  1816  00007B                     _was_low_3:
  1817                           	opt stack 0
  1818  00007B                     	ds	2
  1819  00007D                     _input:
  1820                           	opt stack 0
  1821  00007D                     	ds	1
  1822                           tblptru	equ	0xFF8
  1823                           tblptrh	equ	0xFF7
  1824                           tblptrl	equ	0xFF6
  1825                           tablat	equ	0xFF5
  1826                           postinc0	equ	0xFEE
  1827                           wreg	equ	0xFE8
  1828                           postdec1	equ	0xFE5
  1829                           fsr1l	equ	0xFE1
  1830                           
  1831                           	psect	bssBANK0
  1832  0000DA                     __pbssBANK0:
  1833                           	opt stack 0
  1834  0000DA                     _servoTimes:
  1835                           	opt stack 0
  1836  0000DA                     	ds	8
  1837  0000E2                     _sensor_outputs:
  1838                           	opt stack 0
  1839  0000E2                     	ds	4
  1840  0000E6                     _IR_signal:
  1841                           	opt stack 0
  1842  0000E6                     	ds	2
  1843  0000E8                     _MAG_signal:
  1844                           	opt stack 0
  1845  0000E8                     	ds	2
  1846  0000EA                     _RTCflag:
  1847                           	opt stack 0
  1848  0000EA                     	ds	2
  1849  0000EC                     _cur_state:
  1850                           	opt stack 0
  1851  0000EC                     	ds	2
  1852  0000EE                     _f_arm_position:
  1853                           	opt stack 0
  1854  0000EE                     	ds	2
  1855  0000F0                     _f_lastCan:
  1856                           	opt stack 0
  1857  0000F0                     	ds	2
  1858  0000F2                     _f_loadingNewCan:
  1859                           	opt stack 0
  1860  0000F2                     	ds	2
  1861  0000F4                     _log:
  1862                           	opt stack 0
  1863  0000F4                     	ds	2
  1864  0000F6                     _log_total_time:
  1865                           	opt stack 0
  1866  0000F6                     	ds	2
  1867  0000F8                     _logstate:
  1868                           	opt stack 0
  1869  0000F8                     	ds	2
  1870  0000FA                     _total_time:
  1871                           	opt stack 0
  1872  0000FA                     	ds	2
  1873  0000FC                     _machine_state:
  1874                           	opt stack 0
  1875  0000FC                     	ds	1
  1876  0000FD                     _sel:
  1877                           	opt stack 0
  1878  0000FD                     	ds	1
  1879  0000FE                     _count_total:
  1880                           	opt stack 0
  1881  0000FE                     	ds	2
  1882                           tblptru	equ	0xFF8
  1883                           tblptrh	equ	0xFF7
  1884                           tblptrl	equ	0xFF6
  1885                           tablat	equ	0xFF5
  1886                           postinc0	equ	0xFEE
  1887                           wreg	equ	0xFE8
  1888                           postdec1	equ	0xFE5
  1889                           fsr1l	equ	0xFE1
  1890                           
  1891                           	psect	bssBANK1
  1892  000100                     __pbssBANK1:
  1893                           	opt stack 0
  1894  000100                     _log_startTime:
  1895                           	opt stack 0
  1896  000100                     	ds	14
  1897  00010E                     _startTime:
  1898                           	opt stack 0
  1899  00010E                     	ds	14
  1900  00011C                     _time:
  1901                           	opt stack 0
  1902  00011C                     	ds	7
  1903  000123                     _count_can_no_lab:
  1904                           	opt stack 0
  1905  000123                     	ds	2
  1906  000125                     _count_can_w_lab:
  1907                           	opt stack 0
  1908  000125                     	ds	2
  1909  000127                     _count_pop_no_tab:
  1910                           	opt stack 0
  1911  000127                     	ds	2
  1912  000129                     _count_pop_w_tab:
  1913                           	opt stack 0
  1914  000129                     	ds	2
  1915  00012B                     _cur_can:
  1916                           	opt stack 0
  1917  00012B                     	ds	2
  1918  00012D                     _debug:
  1919                           	opt stack 0
  1920  00012D                     	ds	2
  1921  00012F                     _f_ID_receive:
  1922                           	opt stack 0
  1923  00012F                     	ds	2
  1924  000131                     _f_can_coming_to_ID:
  1925                           	opt stack 0
  1926  000131                     	ds	2
  1927  000133                     _f_can_coming_to_distribution:
  1928                           	opt stack 0
  1929  000133                     	ds	2
  1930  000135                     _f_can_distributed:
  1931                           	opt stack 0
  1932  000135                     	ds	2
  1933  000137                     _f_most_recent_sort_time:
  1934                           	opt stack 0
  1935  000137                     	ds	2
  1936  000139                     _first:
  1937                           	opt stack 0
  1938  000139                     	ds	2
  1939  00013B                     _firstboot:
  1940                           	opt stack 0
  1941  00013B                     	ds	2
  1942  00013D                     _i:
  1943                           	opt stack 0
  1944  00013D                     	ds	2
  1945  00013F                     _log_count_can_no_lab:
  1946                           	opt stack 0
  1947  00013F                     	ds	2
  1948  000141                     _log_count_can_w_lab:
  1949                           	opt stack 0
  1950  000141                     	ds	2
  1951  000143                     _log_count_total:
  1952                           	opt stack 0
  1953  000143                     	ds	2
  1954  000145                     _var:
  1955                           	opt stack 0
  1956  000145                     	ds	2
  1957                           tblptru	equ	0xFF8
  1958                           tblptrh	equ	0xFF7
  1959                           tblptrl	equ	0xFF6
  1960                           tablat	equ	0xFF5
  1961                           postinc0	equ	0xFEE
  1962                           wreg	equ	0xFE8
  1963                           postdec1	equ	0xFE5
  1964                           fsr1l	equ	0xFE1
  1965                           
  1966                           	psect	dataBANK1
  1967  000147                     __pdataBANK1:
  1968                           	opt stack 0
  1969  000147                     UI@F3241:
  1970                           	opt stack 0
  1971  000147                     	ds	4
  1972  00014B                     printRTC@F3231:
  1973                           	opt stack 0
  1974  00014B                     	ds	4
  1975                           tblptru	equ	0xFF8
  1976                           tblptrh	equ	0xFF7
  1977                           tblptrl	equ	0xFF6
  1978                           tablat	equ	0xFF5
  1979                           postinc0	equ	0xFEE
  1980                           wreg	equ	0xFE8
  1981                           postdec1	equ	0xFE5
  1982                           fsr1l	equ	0xFE1
  1983                           
  1984                           	psect	cstackBANK0
  1985  000080                     __pcstackBANK0:
  1986                           	opt stack 0
  1987  000080                     ??_delay_ms:
  1988  000080                     ??_isdigit:
  1989  000080                     ??_readADC:
  1990  000080                     ??_I2C_Master_Wait:
  1991  000080                     ?___wmul:
  1992                           	opt stack 0
  1993  000080                     ?___awmod:
  1994                           	opt stack 0
  1995  000080                     ?___lwdiv:
  1996                           	opt stack 0
  1997  000080                     ?___lldiv:
  1998                           	opt stack 0
  1999  000080                     lcdNibble@temp:
  2000                           	opt stack 0
  2001  000080                     initTime@m:
  2002                           	opt stack 0
  2003  000080                     updateServoPosition@time_us:
  2004                           	opt stack 0
  2005  000080                     EEPROM_read@address:
  2006                           	opt stack 0
  2007  000080                     ___wmul@multiplier:
  2008                           	opt stack 0
  2009  000080                     ___awmod@dividend:
  2010                           	opt stack 0
  2011  000080                     ___lwdiv@dividend:
  2012                           	opt stack 0
  2013  000080                     strcpy@to:
  2014                           	opt stack 0
  2015  000080                     ___lldiv@dividend:
  2016                           	opt stack 0
  2017                           
  2018                           ; 4 bytes @ 0x0
  2019  000080                     	ds	1
  2020  000081                     readADC@channel:
  2021                           	opt stack 0
  2022  000081                     I2C_Master_Read@a:
  2023                           	opt stack 0
  2024  000081                     lcdNibble@data:
  2025                           	opt stack 0
  2026  000081                     initTime@h:
  2027                           	opt stack 0
  2028  000081                     delay_ms@milliseconds:
  2029                           	opt stack 0
  2030  000081                     _isdigit$2052:
  2031                           	opt stack 0
  2032  000081                     I2C_Master_Write@d:
  2033                           	opt stack 0
  2034                           
  2035                           ; 2 bytes @ 0x1
  2036  000081                     	ds	1
  2037  000082                     ??_ID:
  2038  000082                     ??_readIR:
  2039  000082                     ??_readMAG:
  2040  000082                     I2C_Master_Read@temp:
  2041                           	opt stack 0
  2042  000082                     lcdInst@data:
  2043                           	opt stack 0
  2044  000082                     putch@data:
  2045                           	opt stack 0
  2046  000082                     initTime@w:
  2047                           	opt stack 0
  2048  000082                     isdigit@c:
  2049                           	opt stack 0
  2050  000082                     updateServoPosition@timer:
  2051                           	opt stack 0
  2052  000082                     ___wmul@multiplicand:
  2053                           	opt stack 0
  2054  000082                     ___awmod@divisor:
  2055                           	opt stack 0
  2056  000082                     ___lwdiv@divisor:
  2057                           	opt stack 0
  2058  000082                     strcpy@from:
  2059                           	opt stack 0
  2060                           
  2061                           ; 2 bytes @ 0x2
  2062  000082                     	ds	1
  2063  000083                     ??_initLCD:
  2064  000083                     initTime@DD:
  2065                           	opt stack 0
  2066  000083                     getRTC@i:
  2067                           	opt stack 0
  2068                           
  2069                           ; 2 bytes @ 0x3
  2070  000083                     	ds	1
  2071  000084                     ??_updateServoPosition:
  2072  000084                     initTime@MM:
  2073                           	opt stack 0
  2074  000084                     ___awmod@counter:
  2075                           	opt stack 0
  2076  000084                     readIR@res:
  2077                           	opt stack 0
  2078  000084                     readMAG@res:
  2079                           	opt stack 0
  2080  000084                     ID@i:
  2081                           	opt stack 0
  2082  000084                     ___wmul@product:
  2083                           	opt stack 0
  2084  000084                     ___lwdiv@quotient:
  2085                           	opt stack 0
  2086  000084                     strcpy@cp:
  2087                           	opt stack 0
  2088  000084                     ___lldiv@divisor:
  2089                           	opt stack 0
  2090                           
  2091                           ; 4 bytes @ 0x4
  2092  000084                     	ds	1
  2093  000085                     ??_initSortTimer:
  2094  000085                     initTime@YY:
  2095                           	opt stack 0
  2096  000085                     ___awmod@sign:
  2097                           	opt stack 0
  2098                           
  2099                           ; 1 bytes @ 0x5
  2100  000085                     	ds	1
  2101  000086                     ??_getIR:
  2102  000086                     ??_getMAG:
  2103  000086                     ?___awdiv:
  2104                           	opt stack 0
  2105  000086                     initTime@s:
  2106                           	opt stack 0
  2107  000086                     ___lwdiv@counter:
  2108                           	opt stack 0
  2109  000086                     ID@i_1181:
  2110                           	opt stack 0
  2111  000086                     updateServoPosition@my_time:
  2112                           	opt stack 0
  2113  000086                     ___awdiv@dividend:
  2114                           	opt stack 0
  2115                           
  2116                           ; 2 bytes @ 0x6
  2117  000086                     	ds	1
  2118  000087                     ?___lwmod:
  2119                           	opt stack 0
  2120  000087                     getIR@i:
  2121                           	opt stack 0
  2122  000087                     ___lwmod@dividend:
  2123                           	opt stack 0
  2124                           
  2125                           ; 2 bytes @ 0x7
  2126  000087                     	ds	1
  2127  000088                     ??_Distribution:
  2128  000088                     ??_initServos:
  2129  000088                     ID@i_1182:
  2130                           	opt stack 0
  2131  000088                     initSortTimer@i:
  2132                           	opt stack 0
  2133  000088                     ___awdiv@divisor:
  2134                           	opt stack 0
  2135  000088                     ___lldiv@quotient:
  2136                           	opt stack 0
  2137                           
  2138                           ; 4 bytes @ 0x8
  2139  000088                     	ds	1
  2140  000089                     ___lwmod@divisor:
  2141                           	opt stack 0
  2142                           
  2143                           ; 2 bytes @ 0x9
  2144  000089                     	ds	1
  2145  00008A                     ___awdiv@counter:
  2146                           	opt stack 0
  2147                           
  2148                           ; 1 bytes @ 0xA
  2149  00008A                     	ds	1
  2150  00008B                     ___awdiv@sign:
  2151                           	opt stack 0
  2152  00008B                     ___lwmod@counter:
  2153                           	opt stack 0
  2154                           
  2155                           ; 1 bytes @ 0xB
  2156  00008B                     	ds	1
  2157  00008C                     ___lldiv@counter:
  2158                           	opt stack 0
  2159  00008C                     ___awdiv@quotient:
  2160                           	opt stack 0
  2161                           
  2162                           ; 2 bytes @ 0xC
  2163  00008C                     	ds	1
  2164  00008D                     I2C_Master_Init@c:
  2165                           	opt stack 0
  2166                           
  2167                           ; 4 bytes @ 0xD
  2168  00008D                     	ds	1
  2169  00008E                     ?_printf:
  2170                           	opt stack 0
  2171  00008E                     printf@f:
  2172                           	opt stack 0
  2173                           
  2174                           ; 2 bytes @ 0xE
  2175  00008E                     	ds	3
  2176  000091                     ??_I2C_Master_Init:
  2177                           
  2178                           ; 1 bytes @ 0x11
  2179  000091                     	ds	4
  2180  000095                     ??_loadRTC:
  2181                           
  2182                           ; 1 bytes @ 0x15
  2183  000095                     	ds	1
  2184  000096                     loadRTC@i:
  2185                           	opt stack 0
  2186                           
  2187                           ; 2 bytes @ 0x16
  2188  000096                     	ds	4
  2189  00009A                     ??_printf:
  2190                           
  2191                           ; 1 bytes @ 0x1A
  2192  00009A                     	ds	4
  2193  00009E                     printf@prec:
  2194                           	opt stack 0
  2195                           
  2196                           ; 1 bytes @ 0x1E
  2197  00009E                     	ds	1
  2198  00009F                     printf@cp:
  2199                           	opt stack 0
  2200                           
  2201                           ; 2 bytes @ 0x1F
  2202  00009F                     	ds	2
  2203  0000A1                     printf@ap:
  2204                           	opt stack 0
  2205                           
  2206                           ; 2 bytes @ 0x21
  2207  0000A1                     	ds	2
  2208  0000A3                     printf@len:
  2209                           	opt stack 0
  2210                           
  2211                           ; 2 bytes @ 0x23
  2212  0000A3                     	ds	2
  2213  0000A5                     printf@val:
  2214                           	opt stack 0
  2215                           
  2216                           ; 2 bytes @ 0x25
  2217  0000A5                     	ds	2
  2218  0000A7                     printf@flag:
  2219                           	opt stack 0
  2220                           
  2221                           ; 1 bytes @ 0x27
  2222  0000A7                     	ds	1
  2223  0000A8                     printf@c:
  2224                           	opt stack 0
  2225                           
  2226                           ; 1 bytes @ 0x28
  2227  0000A8                     	ds	1
  2228  0000A9                     printf@width:
  2229                           	opt stack 0
  2230                           
  2231                           ; 2 bytes @ 0x29
  2232  0000A9                     	ds	2
  2233  0000AB                     ??_printRTC:
  2234  0000AB                     ??_algorithmTest:
  2235  0000AB                     ??_sensorTest:
  2236  0000AB                     ??_actuatorTest:
  2237  0000AB                     ??_arm:
  2238  0000AB                     ??_PortTestDC:
  2239  0000AB                     ??_SpeedTest:
  2240  0000AB                     ??_PlatformTest:
  2241  0000AB                     ??_BothServos:
  2242  0000AB                     ??_BlockerTest:
  2243  0000AB                     EEPROM_write@address:
  2244                           	opt stack 0
  2245                           
  2246                           ; 2 bytes @ 0x2B
  2247  0000AB                     	ds	1
  2248  0000AC                     BlockerTest@i:
  2249                           	opt stack 0
  2250  0000AC                     arm@on:
  2251                           	opt stack 0
  2252                           
  2253                           ; 2 bytes @ 0x2C
  2254  0000AC                     	ds	1
  2255  0000AD                     EEPROM_write@data:
  2256                           	opt stack 0
  2257  0000AD                     actuatorTest@i_1729:
  2258                           	opt stack 0
  2259  0000AD                     sensorTest@res:
  2260                           	opt stack 0
  2261  0000AD                     PlatformTest@res:
  2262                           	opt stack 0
  2263                           
  2264                           ; 2 bytes @ 0x2D
  2265  0000AD                     	ds	1
  2266  0000AE                     ??_EEPROM_write:
  2267  0000AE                     actuatorTest@i_1736:
  2268                           	opt stack 0
  2269  0000AE                     BlockerTest@cam_flag:
  2270                           	opt stack 0
  2271  0000AE                     printRTC@INT_time:
  2272                           	opt stack 0
  2273                           
  2274                           ; 14 bytes @ 0x2E
  2275  0000AE                     	ds	1
  2276  0000AF                     EEPROM_write@i:
  2277                           	opt stack 0
  2278  0000AF                     actuatorTest@i_1737:
  2279                           	opt stack 0
  2280  0000AF                     PlatformTest@res_1780:
  2281                           	opt stack 0
  2282                           
  2283                           ; 2 bytes @ 0x2F
  2284  0000AF                     	ds	1
  2285  0000B0                     EEPROM_write@i_1436:
  2286                           	opt stack 0
  2287  0000B0                     actuatorTest@i_1739:
  2288                           	opt stack 0
  2289  0000B0                     BlockerTest@cond_flag:
  2290                           	opt stack 0
  2291                           
  2292                           ; 2 bytes @ 0x30
  2293  0000B0                     	ds	1
  2294  0000B1                     ??_Loading:
  2295  0000B1                     logRun@num:
  2296                           	opt stack 0
  2297  0000B1                     actuatorTest@i_1740:
  2298                           	opt stack 0
  2299  0000B1                     PlatformTest@i:
  2300                           	opt stack 0
  2301                           
  2302                           ; 2 bytes @ 0x31
  2303  0000B1                     	ds	1
  2304  0000B2                     logRun@byte1:
  2305                           	opt stack 0
  2306  0000B2                     actuatorTest@i_1742:
  2307                           	opt stack 0
  2308                           
  2309                           ; 1 bytes @ 0x32
  2310  0000B2                     	ds	1
  2311  0000B3                     logRun@byte2:
  2312                           	opt stack 0
  2313  0000B3                     actuatorTest@i_1743:
  2314                           	opt stack 0
  2315  0000B3                     Loading@addr:
  2316                           	opt stack 0
  2317  0000B3                     PlatformTest@i_1783:
  2318                           	opt stack 0
  2319                           
  2320                           ; 2 bytes @ 0x33
  2321  0000B3                     	ds	1
  2322  0000B4                     logRun@byte3:
  2323                           	opt stack 0
  2324  0000B4                     actuatorTest@i_1745:
  2325                           	opt stack 0
  2326                           
  2327                           ; 1 bytes @ 0x34
  2328  0000B4                     	ds	1
  2329  0000B5                     Loading@byte1:
  2330                           	opt stack 0
  2331  0000B5                     logRun@byte_i:
  2332                           	opt stack 0
  2333  0000B5                     actuatorTest@i_1746:
  2334                           	opt stack 0
  2335  0000B5                     PlatformTest@on:
  2336                           	opt stack 0
  2337                           
  2338                           ; 2 bytes @ 0x35
  2339  0000B5                     	ds	1
  2340  0000B6                     logRun@byte11:
  2341                           	opt stack 0
  2342  0000B6                     actuatorTest@i_1748:
  2343                           	opt stack 0
  2344  0000B6                     Loading@i_1156:
  2345                           	opt stack 0
  2346                           
  2347                           ; 2 bytes @ 0x36
  2348  0000B6                     	ds	1
  2349  0000B7                     actuatorTest@i_1749:
  2350                           	opt stack 0
  2351  0000B7                     logRun@i:
  2352                           	opt stack 0
  2353                           
  2354                           ; 2 bytes @ 0x37
  2355  0000B7                     	ds	1
  2356  0000B8                     actuatorTest@i_1751:
  2357                           	opt stack 0
  2358  0000B8                     Loading@i_1165:
  2359                           	opt stack 0
  2360                           
  2361                           ; 2 bytes @ 0x38
  2362  0000B8                     	ds	1
  2363  0000B9                     actuatorTest@i_1752:
  2364                           	opt stack 0
  2365  0000B9                     logRun@addr:
  2366                           	opt stack 0
  2367                           
  2368                           ; 2 bytes @ 0x39
  2369  0000B9                     	ds	1
  2370  0000BA                     actuatorTest@i_1755:
  2371                           	opt stack 0
  2372  0000BA                     Loading@i_1167:
  2373                           	opt stack 0
  2374                           
  2375                           ; 2 bytes @ 0x3A
  2376  0000BA                     	ds	1
  2377  0000BB                     actuatorTest@i_1756:
  2378                           	opt stack 0
  2379                           
  2380                           ; 1 bytes @ 0x3B
  2381  0000BB                     	ds	1
  2382  0000BC                     actuatorTest@i_1758:
  2383                           	opt stack 0
  2384  0000BC                     printRTC@RTC_month:
  2385                           	opt stack 0
  2386  0000BC                     Loading@i_1168:
  2387                           	opt stack 0
  2388                           
  2389                           ; 2 bytes @ 0x3C
  2390  0000BC                     	ds	1
  2391  0000BD                     actuatorTest@i_1759:
  2392                           	opt stack 0
  2393                           
  2394                           ; 1 bytes @ 0x3D
  2395  0000BD                     	ds	1
  2396  0000BE                     actuatorTest@i_1761:
  2397                           	opt stack 0
  2398  0000BE                     Loading@i_1170:
  2399                           	opt stack 0
  2400  0000BE                     printRTC@month:
  2401                           	opt stack 0
  2402                           
  2403                           ; 4 bytes @ 0x3E
  2404  0000BE                     	ds	1
  2405  0000BF                     actuatorTest@i_1762:
  2406                           	opt stack 0
  2407                           
  2408                           ; 1 bytes @ 0x3F
  2409  0000BF                     	ds	1
  2410  0000C0                     actuatorTest@i_1765:
  2411                           	opt stack 0
  2412  0000C0                     Loading@j:
  2413                           	opt stack 0
  2414                           
  2415                           ; 2 bytes @ 0x40
  2416  0000C0                     	ds	1
  2417  0000C1                     actuatorTest@i_1766:
  2418                           	opt stack 0
  2419                           
  2420                           ; 1 bytes @ 0x41
  2421  0000C1                     	ds	1
  2422  0000C2                     actuatorTest@i_1768:
  2423                           	opt stack 0
  2424  0000C2                     printRTC@i:
  2425                           	opt stack 0
  2426  0000C2                     Loading@i:
  2427                           	opt stack 0
  2428                           
  2429                           ; 2 bytes @ 0x42
  2430  0000C2                     	ds	1
  2431  0000C3                     actuatorTest@i_1769:
  2432                           	opt stack 0
  2433                           
  2434                           ; 1 bytes @ 0x43
  2435  0000C3                     	ds	1
  2436  0000C4                     ??_UI:
  2437  0000C4                     actuatorTest@i:
  2438                           	opt stack 0
  2439                           
  2440                           ; 2 bytes @ 0x44
  2441  0000C4                     	ds	2
  2442  0000C6                     ??_Test:
  2443  0000C6                     _UI$2412:
  2444                           	opt stack 0
  2445                           
  2446                           ; 2 bytes @ 0x46
  2447  0000C6                     	ds	2
  2448  0000C8                     UI@i:
  2449                           	opt stack 0
  2450                           
  2451                           ; 1 bytes @ 0x48
  2452  0000C8                     	ds	1
  2453  0000C9                     UI@i_409:
  2454                           	opt stack 0
  2455                           
  2456                           ; 1 bytes @ 0x49
  2457  0000C9                     	ds	1
  2458  0000CA                     UI@i_412:
  2459                           	opt stack 0
  2460                           
  2461                           ; 1 bytes @ 0x4A
  2462  0000CA                     	ds	1
  2463  0000CB                     UI@i_413:
  2464                           	opt stack 0
  2465                           
  2466                           ; 1 bytes @ 0x4B
  2467  0000CB                     	ds	1
  2468  0000CC                     UI@i_431:
  2469                           	opt stack 0
  2470                           
  2471                           ; 1 bytes @ 0x4C
  2472  0000CC                     	ds	1
  2473  0000CD                     UI@i_432:
  2474                           	opt stack 0
  2475                           
  2476                           ; 1 bytes @ 0x4D
  2477  0000CD                     	ds	1
  2478  0000CE                     UI@i_435:
  2479                           	opt stack 0
  2480                           
  2481                           ; 1 bytes @ 0x4E
  2482  0000CE                     	ds	1
  2483  0000CF                     UI@i_436:
  2484                           	opt stack 0
  2485                           
  2486                           ; 1 bytes @ 0x4F
  2487  0000CF                     	ds	1
  2488  0000D0                     UI@i_439:
  2489                           	opt stack 0
  2490                           
  2491                           ; 1 bytes @ 0x50
  2492  0000D0                     	ds	1
  2493  0000D1                     UI@i_440:
  2494                           	opt stack 0
  2495                           
  2496                           ; 1 bytes @ 0x51
  2497  0000D1                     	ds	1
  2498  0000D2                     UI@i_443:
  2499                           	opt stack 0
  2500                           
  2501                           ; 1 bytes @ 0x52
  2502  0000D2                     	ds	1
  2503  0000D3                     UI@i_444:
  2504                           	opt stack 0
  2505                           
  2506                           ; 1 bytes @ 0x53
  2507  0000D3                     	ds	1
  2508  0000D4                     UI@i_447:
  2509                           	opt stack 0
  2510                           
  2511                           ; 1 bytes @ 0x54
  2512  0000D4                     	ds	1
  2513  0000D5                     UI@i_448:
  2514                           	opt stack 0
  2515                           
  2516                           ; 1 bytes @ 0x55
  2517  0000D5                     	ds	1
  2518  0000D6                     UI@month:
  2519                           	opt stack 0
  2520                           
  2521                           ; 4 bytes @ 0x56
  2522  0000D6                     	ds	4
  2523  0000DA                     tblptru	equ	0xFF8
  2524                           tblptrh	equ	0xFF7
  2525                           tblptrl	equ	0xFF6
  2526                           tablat	equ	0xFF5
  2527                           postinc0	equ	0xFEE
  2528                           wreg	equ	0xFE8
  2529                           postdec1	equ	0xFE5
  2530                           fsr1l	equ	0xFE1
  2531                           
  2532                           ; 1 bytes @ 0x5A
  2533                           
  2534                           	psect	cstackCOMRAM
  2535  000001                     __pcstackCOMRAM:
  2536                           	opt stack 0
  2537  000001                     ??_updateArmState:
  2538  000001                     ??i2_I2C_Master_Wait:
  2539  000001                     ??i2_delay_ms:
  2540  000001                     ??i2_isdigit:
  2541  000001                     ?i2___wmul:
  2542                           	opt stack 0
  2543  000001                     ?i2___lwmod:
  2544                           	opt stack 0
  2545  000001                     i2lcdNibble@temp:
  2546                           	opt stack 0
  2547  000001                     i2updateServoPosition@time_us:
  2548                           	opt stack 0
  2549  000001                     i2EEPROM_read@address:
  2550                           	opt stack 0
  2551  000001                     i2___wmul@multiplier:
  2552                           	opt stack 0
  2553  000001                     i2___lwmod@dividend:
  2554                           	opt stack 0
  2555  000001                     i2strcpy@to:
  2556                           	opt stack 0
  2557                           
  2558                           ; 2 bytes @ 0x0
  2559  000001                     	ds	1
  2560  000002                     i2I2C_Master_Read@a:
  2561                           	opt stack 0
  2562  000002                     i2lcdNibble@data:
  2563                           	opt stack 0
  2564  000002                     i2delay_ms@milliseconds:
  2565                           	opt stack 0
  2566  000002                     i2_isdigit$2052:
  2567                           	opt stack 0
  2568  000002                     i2I2C_Master_Write@d:
  2569                           	opt stack 0
  2570                           
  2571                           ; 2 bytes @ 0x1
  2572  000002                     	ds	1
  2573  000003                     i2I2C_Master_Read@temp:
  2574                           	opt stack 0
  2575  000003                     i2lcdInst@data:
  2576                           	opt stack 0
  2577  000003                     i2putch@data:
  2578                           	opt stack 0
  2579  000003                     i2isdigit@c:
  2580                           	opt stack 0
  2581  000003                     i2updateServoPosition@timer:
  2582                           	opt stack 0
  2583  000003                     i2___wmul@multiplicand:
  2584                           	opt stack 0
  2585  000003                     i2___lwmod@divisor:
  2586                           	opt stack 0
  2587  000003                     i2strcpy@from:
  2588                           	opt stack 0
  2589                           
  2590                           ; 2 bytes @ 0x2
  2591  000003                     	ds	1
  2592  000004                     i2getRTC@i:
  2593                           	opt stack 0
  2594                           
  2595                           ; 2 bytes @ 0x3
  2596  000004                     	ds	1
  2597  000005                     ??i2_updateServoPosition:
  2598  000005                     i2___lwmod@counter:
  2599                           	opt stack 0
  2600  000005                     i2___wmul@product:
  2601                           	opt stack 0
  2602  000005                     i2strcpy@cp:
  2603                           	opt stack 0
  2604                           
  2605                           ; 2 bytes @ 0x4
  2606  000005                     	ds	1
  2607  000006                     ?i2___lwdiv:
  2608                           	opt stack 0
  2609  000006                     i2___lwdiv@dividend:
  2610                           	opt stack 0
  2611                           
  2612                           ; 2 bytes @ 0x5
  2613  000006                     	ds	1
  2614  000007                     retrieveLog@logNum:
  2615                           	opt stack 0
  2616  000007                     i2updateServoPosition@my_time:
  2617                           	opt stack 0
  2618                           
  2619                           ; 2 bytes @ 0x6
  2620  000007                     	ds	1
  2621  000008                     i2___lwdiv@divisor:
  2622                           	opt stack 0
  2623                           
  2624                           ; 2 bytes @ 0x7
  2625  000008                     	ds	1
  2626  000009                     ??_retrieveLog:
  2627  000009                     ??_updateServoStates:
  2628                           
  2629                           ; 1 bytes @ 0x8
  2630  000009                     	ds	1
  2631  00000A                     i2___lwdiv@quotient:
  2632                           	opt stack 0
  2633                           
  2634                           ; 2 bytes @ 0x9
  2635  00000A                     	ds	1
  2636  00000B                     retrieveLog@byte1:
  2637                           	opt stack 0
  2638                           
  2639                           ; 1 bytes @ 0xA
  2640  00000B                     	ds	1
  2641  00000C                     retrieveLog@byte2:
  2642                           	opt stack 0
  2643  00000C                     i2___lwdiv@counter:
  2644                           	opt stack 0
  2645                           
  2646                           ; 1 bytes @ 0xB
  2647  00000C                     	ds	1
  2648  00000D                     ?i2_printf:
  2649                           	opt stack 0
  2650  00000D                     retrieveLog@byte3:
  2651                           	opt stack 0
  2652  00000D                     i2printf@f:
  2653                           	opt stack 0
  2654                           
  2655                           ; 2 bytes @ 0xC
  2656  00000D                     	ds	1
  2657  00000E                     retrieveLog@i:
  2658                           	opt stack 0
  2659                           
  2660                           ; 2 bytes @ 0xD
  2661  00000E                     	ds	2
  2662  000010                     retrieveLog@addr:
  2663                           	opt stack 0
  2664                           
  2665                           ; 2 bytes @ 0xF
  2666  000010                     	ds	2
  2667  000012                     dispLogs@myLog:
  2668                           	opt stack 0
  2669                           
  2670                           ; 2 bytes @ 0x11
  2671  000012                     	ds	2
  2672  000014                     
  2673                           ; 1 bytes @ 0x13
  2674  000014                     	ds	5
  2675  000019                     ??i2_printf:
  2676                           
  2677                           ; 1 bytes @ 0x18
  2678  000019                     	ds	4
  2679  00001D                     i2printf@prec:
  2680                           	opt stack 0
  2681                           
  2682                           ; 1 bytes @ 0x1C
  2683  00001D                     	ds	1
  2684  00001E                     i2printf@cp:
  2685                           	opt stack 0
  2686                           
  2687                           ; 2 bytes @ 0x1D
  2688  00001E                     	ds	2
  2689  000020                     i2printf@ap:
  2690                           	opt stack 0
  2691                           
  2692                           ; 2 bytes @ 0x1F
  2693  000020                     	ds	2
  2694  000022                     i2printf@len:
  2695                           	opt stack 0
  2696                           
  2697                           ; 2 bytes @ 0x21
  2698  000022                     	ds	2
  2699  000024                     i2printf@val:
  2700                           	opt stack 0
  2701                           
  2702                           ; 2 bytes @ 0x23
  2703  000024                     	ds	2
  2704  000026                     i2printf@flag:
  2705                           	opt stack 0
  2706                           
  2707                           ; 1 bytes @ 0x25
  2708  000026                     	ds	1
  2709  000027                     i2printf@c:
  2710                           	opt stack 0
  2711                           
  2712                           ; 1 bytes @ 0x26
  2713  000027                     	ds	1
  2714  000028                     i2printf@width:
  2715                           	opt stack 0
  2716                           
  2717                           ; 2 bytes @ 0x27
  2718  000028                     	ds	2
  2719  00002A                     ??_printSortTimer:
  2720  00002A                     ??i2_printRTC:
  2721  00002A                     ?_inputHandler:
  2722                           	opt stack 0
  2723                           
  2724                           ; 2 bytes @ 0x29
  2725  00002A                     	ds	2
  2726  00002C                     ??_inputHandler:
  2727                           
  2728                           ; 1 bytes @ 0x2B
  2729  00002C                     	ds	1
  2730  00002D                     printSortTimer@curTime:
  2731                           	opt stack 0
  2732  00002D                     i2printRTC@INT_time:
  2733                           	opt stack 0
  2734                           
  2735                           ; 14 bytes @ 0x2C
  2736  00002D                     	ds	14
  2737  00003B                     printSortTimer@start_sec:
  2738                           	opt stack 0
  2739  00003B                     i2printRTC@RTC_month:
  2740                           	opt stack 0
  2741                           
  2742                           ; 2 bytes @ 0x3A
  2743  00003B                     	ds	2
  2744  00003D                     printSortTimer@cur_sec:
  2745                           	opt stack 0
  2746  00003D                     i2printRTC@month:
  2747                           	opt stack 0
  2748                           
  2749                           ; 4 bytes @ 0x3C
  2750  00003D                     	ds	2
  2751  00003F                     printSortTimer@min:
  2752                           	opt stack 0
  2753                           
  2754                           ; 2 bytes @ 0x3E
  2755  00003F                     	ds	2
  2756  000041                     printSortTimer@sec:
  2757                           	opt stack 0
  2758  000041                     i2printRTC@i:
  2759                           	opt stack 0
  2760                           
  2761                           ; 2 bytes @ 0x40
  2762  000041                     	ds	2
  2763  000043                     ??_updateMenu:
  2764  000043                     _printSortTimer$2544:
  2765                           	opt stack 0
  2766                           
  2767                           ; 2 bytes @ 0x42
  2768  000043                     	ds	2
  2769  000045                     printSortTimer@timeDiff:
  2770                           	opt stack 0
  2771                           
  2772                           ; 2 bytes @ 0x44
  2773  000045                     	ds	2
  2774  000047                     printSortTimer@i_1194:
  2775                           	opt stack 0
  2776                           
  2777                           ; 2 bytes @ 0x46
  2778  000047                     	ds	2
  2779  000049                     printSortTimer@i:
  2780                           	opt stack 0
  2781                           
  2782                           ; 2 bytes @ 0x48
  2783  000049                     	ds	2
  2784  00004B                     ??_handler:
  2785                           
  2786                           ; 1 bytes @ 0x4A
  2787  00004B                     	ds	16
  2788                           tblptru	equ	0xFF8
  2789                           tblptrh	equ	0xFF7
  2790                           tblptrl	equ	0xFF6
  2791                           tablat	equ	0xFF5
  2792                           postinc0	equ	0xFEE
  2793                           wreg	equ	0xFE8
  2794                           postdec1	equ	0xFE5
  2795                           fsr1l	equ	0xFE1
  2796                           
  2797 ;;
  2798 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  2799 ;;
  2800 ;; *************** function _main *****************
  2801 ;; Defined at:
  2802 ;;		line 19 in file "main.c"
  2803 ;; Parameters:    Size  Location     Type
  2804 ;;		None
  2805 ;; Auto vars:     Size  Location     Type
  2806 ;;		None
  2807 ;; Return value:  Size  Location     Type
  2808 ;;                  1    wreg      void 
  2809 ;; Registers used:
  2810 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2811 ;; Tracked objects:
  2812 ;;		On entry : 0/0
  2813 ;;		On exit  : 0/0
  2814 ;;		Unchanged: 0/0
  2815 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2816 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2817 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2818 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2819 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2820 ;;Total ram usage:        0 bytes
  2821 ;; Hardware stack levels required when called:   13
  2822 ;; This function calls:
  2823 ;;		_I2C_Master_Init
  2824 ;;		_Test
  2825 ;;		_UI
  2826 ;;		_initLCD
  2827 ;;		_initTime
  2828 ;;		_initUI
  2829 ;;		_logRun
  2830 ;;		_machineConfig
  2831 ;;		_sort
  2832 ;;		_stopSignals
  2833 ;; This function is called by:
  2834 ;;		Startup code after reset
  2835 ;; This function uses a non-reentrant model
  2836 ;;
  2837                           
  2838                           	psect	text0
  2839  004246                     __ptext0:
  2840                           	opt stack 0
  2841  004246                     _main:
  2842                           	opt stack 18
  2843                           
  2844                           ;main.c: 20: machineConfig();
  2845                           
  2846                           ;incstack = 0
  2847  004246  ECAB  F025         	call	_machineConfig	;wreg free
  2848                           
  2849                           ;main.c: 21: initLCD();
  2850  00424A  EC33  F027         	call	_initLCD	;wreg free
  2851                           
  2852                           ;main.c: 24: RTCflag = 0;
  2853  00424E  0E00               	movlw	0
  2854  004250  0100               	movlb	0	; () banked
  2855  004252  6FEB               	movwf	(_RTCflag+1)& (0+255),b
  2856  004254  0E00               	movlw	0
  2857  004256  6FEA               	movwf	_RTCflag& (0+255),b
  2858                           
  2859                           ;main.c: 25: if(RTCflag){
  2860  004258  0100               	movlb	0	; () banked
  2861  00425A  51EA               	movf	_RTCflag& (0+255),w,b
  2862  00425C  0100               	movlb	0	; () banked
  2863  00425E  11EB               	iorwf	(_RTCflag+1)& (0+255),w,b
  2864  004260  B4D8               	btfsc	status,2,c
  2865  004262  D016               	goto	l9644
  2866                           
  2867                           ; BSR set to: 0
  2868                           ;main.c: 26: initTime(0x42, 0x36, 0x13, 0x06, 0x07, 0x04, 0x17);
  2869  004264  0E36               	movlw	54
  2870  004266  0100               	movlb	0	; () banked
  2871  004268  6F80               	movwf	initTime@m& (0+255),b
  2872  00426A  0E13               	movlw	19
  2873  00426C  0100               	movlb	0	; () banked
  2874  00426E  6F81               	movwf	initTime@h& (0+255),b
  2875  004270  0E06               	movlw	6
  2876  004272  0100               	movlb	0	; () banked
  2877  004274  6F82               	movwf	initTime@w& (0+255),b
  2878  004276  0E07               	movlw	7
  2879  004278  0100               	movlb	0	; () banked
  2880  00427A  6F83               	movwf	initTime@DD& (0+255),b
  2881  00427C  0E04               	movlw	4
  2882  00427E  0100               	movlb	0	; () banked
  2883  004280  6F84               	movwf	initTime@MM& (0+255),b
  2884  004282  0E17               	movlw	23
  2885  004284  0100               	movlb	0	; () banked
  2886  004286  6F85               	movwf	initTime@YY& (0+255),b
  2887  004288  0E42               	movlw	66
  2888  00428A  EC04  F02A         	call	_initTime
  2889                           
  2890                           ;main.c: 27: }
  2891  00428E  D00B               	goto	l9646
  2892  004290                     l9644:
  2893                           
  2894                           ;main.c: 28: else{
  2895                           ;main.c: 29: I2C_Master_Init(10000);
  2896  004290  0E10               	movlw	16
  2897  004292  0100               	movlb	0	; () banked
  2898  004294  6F8D               	movwf	I2C_Master_Init@c& (0+255),b
  2899  004296  0E27               	movlw	39
  2900  004298  6F8E               	movwf	(I2C_Master_Init@c+1)& (0+255),b
  2901  00429A  0E00               	movlw	0
  2902  00429C  6F8F               	movwf	(I2C_Master_Init@c+2)& (0+255),b
  2903  00429E  0E00               	movlw	0
  2904  0042A0  6F90               	movwf	(I2C_Master_Init@c+3)& (0+255),b
  2905  0042A2  EC0E  F026         	call	_I2C_Master_Init	;wreg free
  2906  0042A6                     l9646:
  2907                           
  2908                           ;main.c: 30: }
  2909                           ;main.c: 32: initUI();
  2910  0042A6  EC34  F028         	call	_initUI	;wreg free
  2911                           
  2912                           ;main.c: 33: first = 1;
  2913  0042AA  0E00               	movlw	0
  2914  0042AC  0101               	movlb	1	; () banked
  2915  0042AE  6F3A               	movwf	(_first+1)& (0+255),b
  2916  0042B0  0E01               	movlw	1
  2917  0042B2  6F39               	movwf	_first& (0+255),b
  2918                           
  2919                           ; BSR set to: 1
  2920                           ;main.c: 44: switch(machine_state){
  2921                           
  2922                           ;main.c: 43: while(1){
  2923  0042B4  D018               	goto	l9668
  2924  0042B6                     l9650:
  2925                           
  2926                           ;main.c: 46: UI();
  2927  0042B6  EC09  F000         	call	_UI	;wreg free
  2928                           
  2929                           ;main.c: 47: break;
  2930  0042BA  D015               	goto	l9668
  2931  0042BC                     l9652:
  2932                           
  2933                           ;main.c: 49: sort();
  2934  0042BC  ECF3  F029         	call	_sort	;wreg free
  2935                           
  2936                           ;main.c: 50: break;
  2937  0042C0  D012               	goto	l9668
  2938  0042C2                     l9654:
  2939                           
  2940                           ;main.c: 52: stopSignals();
  2941  0042C2  EC24  F02A         	call	_stopSignals	;wreg free
  2942                           
  2943                           ;main.c: 53: logRun();
  2944  0042C6  EC9D  F01D         	call	_logRun	;wreg free
  2945                           
  2946                           ;main.c: 54: first = 1;
  2947  0042CA  0E00               	movlw	0
  2948  0042CC  0101               	movlb	1	; () banked
  2949  0042CE  6F3A               	movwf	(_first+1)& (0+255),b
  2950  0042D0  0E01               	movlw	1
  2951  0042D2  6F39               	movwf	_first& (0+255),b
  2952                           
  2953                           ; BSR set to: 1
  2954                           ;main.c: 55: UI();
  2955  0042D4  EC09  F000         	call	_UI	;wreg free
  2956                           
  2957                           ;main.c: 56: break;
  2958  0042D8  D006               	goto	l9668
  2959  0042DA                     l9662:
  2960                           
  2961                           ;main.c: 58: Test();
  2962  0042DA  ECCF  F01E         	call	_Test	;wreg free
  2963                           
  2964                           ;main.c: 59: break;
  2965  0042DE  D003               	goto	l9668
  2966  0042E0                     l9664:
  2967                           
  2968                           ;main.c: 61: stopSignals();
  2969  0042E0  EC24  F02A         	call	_stopSignals	;wreg free
  2970  0042E4                     l499:
  2971  0042E4  D7FF               	goto	l499
  2972  0042E6                     l9668:
  2973  0042E6  0100               	movlb	0	; () banked
  2974  0042E8  51FC               	movf	_machine_state& (0+255),w,b
  2975                           
  2976                           ; Switch size 1, requested type "space"
  2977                           ; Number of cases is 5, Range of values is 0 to 4
  2978                           ; switch strategies available:
  2979                           ; Name         Instructions Cycles
  2980                           ; simple_byte           16     9 (average)
  2981                           ;	Chosen strategy is simple_byte
  2982  0042EA  0A00               	xorlw	0	; case 0
  2983  0042EC  B4D8               	btfsc	status,2,c
  2984  0042EE  D7E3               	goto	l9650
  2985  0042F0  0A01               	xorlw	1	; case 1
  2986  0042F2  B4D8               	btfsc	status,2,c
  2987  0042F4  D7E3               	goto	l9652
  2988  0042F6  0A03               	xorlw	3	; case 2
  2989  0042F8  B4D8               	btfsc	status,2,c
  2990  0042FA  D7E3               	goto	l9654
  2991  0042FC  0A01               	xorlw	1	; case 3
  2992  0042FE  B4D8               	btfsc	status,2,c
  2993  004300  D7EC               	goto	l9662
  2994  004302  0A07               	xorlw	7	; case 4
  2995  004304  B4D8               	btfsc	status,2,c
  2996  004306  D7EC               	goto	l9664
  2997                           
  2998                           ; BSR set to: 0
  2999                           
  3000                           ; BSR set to: 0
  3001  004308  D7EE               	goto	l9668
  3002  00430A                     __end_of_main:
  3003                           	opt stack 0
  3004                           tblptru	equ	0xFF8
  3005                           tblptrh	equ	0xFF7
  3006                           tblptrl	equ	0xFF6
  3007                           tablat	equ	0xFF5
  3008                           postinc0	equ	0xFEE
  3009                           wreg	equ	0xFE8
  3010                           postdec1	equ	0xFE5
  3011                           fsr1l	equ	0xFE1
  3012                           status	equ	0xFD8
  3013                           
  3014 ;; *************** function _sort *****************
  3015 ;; Defined at:
  3016 ;;		line 66 in file "sort.c"
  3017 ;; Parameters:    Size  Location     Type
  3018 ;;		None
  3019 ;; Auto vars:     Size  Location     Type
  3020 ;;		None
  3021 ;; Return value:  Size  Location     Type
  3022 ;;                  1    wreg      void 
  3023 ;; Registers used:
  3024 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3025 ;; Tracked objects:
  3026 ;;		On entry : 0/0
  3027 ;;		On exit  : 0/0
  3028 ;;		Unchanged: 0/0
  3029 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3030 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3031 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3032 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3033 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3034 ;;Total ram usage:        0 bytes
  3035 ;; Hardware stack levels used:    1
  3036 ;; Hardware stack levels required when called:   12
  3037 ;; This function calls:
  3038 ;;		_Distribution
  3039 ;;		_ID
  3040 ;;		_Loading
  3041 ;; This function is called by:
  3042 ;;		_main
  3043 ;; This function uses a non-reentrant model
  3044 ;;
  3045                           
  3046                           	psect	text1
  3047  0053E6                     __ptext1:
  3048                           	opt stack 0
  3049  0053E6                     _sort:
  3050                           	opt stack 18
  3051                           
  3052                           ;sort.c: 67: if(machine_state == Sorting_state){
  3053                           
  3054                           ; BSR set to: 0
  3055                           ;incstack = 0
  3056  0053E6  0100               	movlb	0	; () banked
  3057  0053E8  05FC               	decf	_machine_state& (0+255),w,b
  3058  0053EA  B4D8               	btfsc	status,2,c
  3059                           
  3060                           ; BSR set to: 0
  3061                           ;sort.c: 68: Loading();
  3062  0053EC  ECC7  F008         	call	_Loading	;wreg free
  3063                           
  3064                           ;sort.c: 69: }
  3065                           ;sort.c: 70: if(machine_state == Sorting_state){
  3066  0053F0  0100               	movlb	0	; () banked
  3067  0053F2  05FC               	decf	_machine_state& (0+255),w,b
  3068  0053F4  B4D8               	btfsc	status,2,c
  3069                           
  3070                           ; BSR set to: 0
  3071                           ;sort.c: 71: ID();
  3072  0053F6  ECB4  F017         	call	_ID	;wreg free
  3073                           
  3074                           ;sort.c: 72: }
  3075                           ;sort.c: 73: if(machine_state == Sorting_state){
  3076  0053FA  0100               	movlb	0	; () banked
  3077  0053FC  05FC               	decf	_machine_state& (0+255),w,b
  3078  0053FE  A4D8               	btfss	status,2,c
  3079  005400  0012               	return	
  3080                           
  3081                           ; BSR set to: 0
  3082                           ;sort.c: 74: Distribution();
  3083  005402  EC47  F020         	call	_Distribution	;wreg free
  3084  005406  0012               	return	
  3085  005408                     __end_of_sort:
  3086                           	opt stack 0
  3087                           tblptru	equ	0xFF8
  3088                           tblptrh	equ	0xFF7
  3089                           tblptrl	equ	0xFF6
  3090                           tablat	equ	0xFF5
  3091                           postinc0	equ	0xFEE
  3092                           wreg	equ	0xFE8
  3093                           postdec1	equ	0xFE5
  3094                           fsr1l	equ	0xFE1
  3095                           status	equ	0xFD8
  3096                           
  3097 ;; *************** function _Loading *****************
  3098 ;; Defined at:
  3099 ;;		line 78 in file "sort.c"
  3100 ;; Parameters:    Size  Location     Type
  3101 ;;		None
  3102 ;; Auto vars:     Size  Location     Type
  3103 ;;  i               2   62[BANK0 ] int 
  3104 ;;  i               2   60[BANK0 ] int 
  3105 ;;  i               2   58[BANK0 ] int 
  3106 ;;  i               2   56[BANK0 ] int 
  3107 ;;  i               2   54[BANK0 ] int 
  3108 ;;  j               2   64[BANK0 ] int 
  3109 ;;  i               2   66[BANK0 ] int 
  3110 ;;  addr            2   51[BANK0 ] unsigned short 
  3111 ;;  byte1           1   53[BANK0 ] unsigned char 
  3112 ;; Return value:  Size  Location     Type
  3113 ;;                  1    wreg      void 
  3114 ;; Registers used:
  3115 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3116 ;; Tracked objects:
  3117 ;;		On entry : 0/0
  3118 ;;		On exit  : 0/0
  3119 ;;		Unchanged: 0/0
  3120 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3121 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3122 ;;      Locals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3123 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3124 ;;      Totals:         0      19       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3125 ;;Total ram usage:       19 bytes
  3126 ;; Hardware stack levels used:    1
  3127 ;; Hardware stack levels required when called:   11
  3128 ;; This function calls:
  3129 ;;		_EEPROM_read
  3130 ;;		_EEPROM_write
  3131 ;;		_delay_ms
  3132 ;;		_getIR
  3133 ;;		_getMAG
  3134 ;;		_initGlobalVars
  3135 ;;		_initServos
  3136 ;;		_initSortTimer
  3137 ;;		_lcdInst
  3138 ;;		_readIR
  3139 ;; This function is called by:
  3140 ;;		_sort
  3141 ;; This function uses a non-reentrant model
  3142 ;;
  3143                           
  3144                           	psect	text2
  3145  00118E                     __ptext2:
  3146                           	opt stack 0
  3147  00118E                     _Loading:
  3148                           	opt stack 18
  3149                           
  3150                           ;sort.c: 79: if(first){
  3151                           
  3152                           ;incstack = 0
  3153  00118E  0101               	movlb	1	; () banked
  3154  001190  5139               	movf	_first& (0+255),w,b
  3155  001192  0101               	movlb	1	; () banked
  3156  001194  113A               	iorwf	(_first+1)& (0+255),w,b
  3157  001196  B4D8               	btfsc	status,2,c
  3158  001198  D066               	goto	l7434
  3159                           
  3160                           ; BSR set to: 1
  3161                           ;sort.c: 80: initGlobalVars();
  3162  00119A  EC85  F021         	call	_initGlobalVars	;wreg free
  3163                           
  3164                           ;sort.c: 81: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  3165  00119E  0E01               	movlw	1
  3166  0011A0  EC72  F02A         	call	_lcdInst
  3167  0011A4  0E68               	movlw	104
  3168  0011A6  0100               	movlb	0	; () banked
  3169  0011A8  6FB1               	movwf	??_Loading& (0+255),b
  3170  0011AA  0EE4               	movlw	228
  3171  0011AC                     u9057:
  3172  0011AC  2EE8               	decfsz	wreg,f,c
  3173  0011AE  D7FE               	bra	u9057
  3174  0011B0  2FB1               	decfsz	??_Loading& (0+255),f,b
  3175  0011B2  D7FC               	bra	u9057
  3176  0011B4  F000               	nop	
  3177                           
  3178                           ;sort.c: 82: initSortTimer();
  3179  0011B6  ECA1  F022         	call	_initSortTimer	;wreg free
  3180                           
  3181                           ;sort.c: 83: LATCbits.LATC5 = 1;
  3182  0011BA  8A8B               	bsf	3979,5,c	;volatile
  3183                           
  3184                           ;sort.c: 88: sel = EEPROM_read(0);
  3185  0011BC  0E00               	movlw	0
  3186  0011BE  0100               	movlb	0	; () banked
  3187  0011C0  6F81               	movwf	(EEPROM_read@address+1)& (0+255),b
  3188  0011C2  0E00               	movlw	0
  3189  0011C4  6F80               	movwf	EEPROM_read@address& (0+255),b
  3190  0011C6  EC40  F02A         	call	_EEPROM_read	;wreg free
  3191  0011CA  0100               	movlb	0	; () banked
  3192  0011CC  6FFD               	movwf	_sel& (0+255),b
  3193                           
  3194                           ; BSR set to: 0
  3195                           ;sort.c: 89: unsigned short addr = 1 + 11 * sel;
  3196  0011CE  0100               	movlb	0	; () banked
  3197  0011D0  51FD               	movf	_sel& (0+255),w,b
  3198  0011D2  0D0B               	mullw	11
  3199  0011D4  0E01               	movlw	1
  3200  0011D6  24F3               	addwf	prodl,w,c
  3201  0011D8  0100               	movlb	0	; () banked
  3202  0011DA  6FB3               	movwf	Loading@addr& (0+255),b
  3203  0011DC  0E00               	movlw	0
  3204  0011DE  20F4               	addwfc	prodh,w,c
  3205  0011E0  0100               	movlb	0	; () banked
  3206  0011E2  6FB4               	movwf	(Loading@addr+1)& (0+255),b
  3207                           
  3208                           ; BSR set to: 0
  3209                           ;sort.c: 90: unsigned char byte1 = 0b01111111;
  3210  0011E4  0E7F               	movlw	127
  3211  0011E6  0100               	movlb	0	; () banked
  3212  0011E8  6FB5               	movwf	Loading@byte1& (0+255),b
  3213                           
  3214                           ; BSR set to: 0
  3215                           ;sort.c: 91: EEPROM_write(addr, byte1);
  3216  0011EA  C0B3  F0AB         	movff	Loading@addr,EEPROM_write@address
  3217  0011EE  C0B4  F0AC         	movff	Loading@addr+1,EEPROM_write@address+1
  3218  0011F2  C0B5  F0AD         	movff	Loading@byte1,EEPROM_write@data
  3219  0011F6  ECD3  F01F         	call	_EEPROM_write	;wreg free
  3220                           
  3221                           ;sort.c: 94: LATBbits.LATB2 = 0;
  3222  0011FA  948A               	bcf	3978,2,c	;volatile
  3223                           
  3224                           ;sort.c: 96: for(int i=0; i<46; i++){
  3225  0011FC  0E00               	movlw	0
  3226  0011FE  0100               	movlb	0	; () banked
  3227  001200  6FC3               	movwf	(Loading@i+1)& (0+255),b
  3228  001202  0E00               	movlw	0
  3229  001204  6FC2               	movwf	Loading@i& (0+255),b
  3230                           
  3231                           ; BSR set to: 0
  3232  001206  0100               	movlb	0	; () banked
  3233  001208  BFC3               	btfsc	(Loading@i+1)& (0+255),7,b
  3234  00120A  D008               	goto	l7424
  3235  00120C  0100               	movlb	0	; () banked
  3236  00120E  51C3               	movf	(Loading@i+1)& (0+255),w,b
  3237  001210  E126               	bnz	l774
  3238  001212  0E2E               	movlw	46
  3239  001214  0100               	movlb	0	; () banked
  3240  001216  5DC2               	subwf	Loading@i& (0+255),w,b
  3241  001218  B0D8               	btfsc	status,0,c
  3242  00121A  D021               	goto	l774
  3243  00121C                     l7424:
  3244                           
  3245                           ; BSR set to: 0
  3246                           ;sort.c: 97: LATBbits.LATB2 = !LATBbits.LATB2;
  3247  00121C  B48A               	btfsc	3978,2,c	;volatile
  3248  00121E  D004               	goto	u5840
  3249  001220  0100               	movlb	0	; () banked
  3250  001222  6BB1               	clrf	??_Loading& (0+255),b
  3251  001224  2BB1               	incf	??_Loading& (0+255),f,b
  3252  001226  D002               	goto	u5858
  3253  001228                     u5840:
  3254  001228  0100               	movlb	0	; () banked
  3255  00122A  6BB1               	clrf	??_Loading& (0+255),b
  3256  00122C                     u5858:
  3257  00122C  0100               	movlb	0	; () banked
  3258  00122E  47B1               	rlncf	??_Loading& (0+255),f,b
  3259  001230  47B1               	rlncf	??_Loading& (0+255),f,b
  3260  001232  508A               	movf	3978,w,c	;volatile
  3261  001234  0100               	movlb	0	; () banked
  3262  001236  19B1               	xorwf	??_Loading& (0+255),w,b
  3263  001238  0BFB               	andlw	-5
  3264  00123A  19B1               	xorwf	??_Loading& (0+255),w,b
  3265  00123C  6E8A               	movwf	3978,c	;volatile
  3266                           
  3267                           ; BSR set to: 0
  3268                           ;sort.c: 98: delay_ms(45-i);
  3269  00123E  0100               	movlb	0	; () banked
  3270  001240  51C2               	movf	Loading@i& (0+255),w,b
  3271  001242  0800               	sublw	0
  3272  001244  0F2D               	addlw	45
  3273  001246  EC93  F029         	call	_delay_ms
  3274  00124A  0100               	movlb	0	; () banked
  3275  00124C  4BC2               	infsnz	Loading@i& (0+255),f,b
  3276  00124E  2BC3               	incf	(Loading@i+1)& (0+255),f,b
  3277                           
  3278                           ; BSR set to: 0
  3279  001250  0100               	movlb	0	; () banked
  3280  001252  BFC3               	btfsc	(Loading@i+1)& (0+255),7,b
  3281  001254  D7E3               	goto	l7424
  3282  001256  0100               	movlb	0	; () banked
  3283  001258  51C3               	movf	(Loading@i+1)& (0+255),w,b
  3284  00125A  E101               	bnz	u5860
  3285  00125C  D7DA               	goto	L1
  3286  00125E                     u5860:
  3287  00125E                     l774:
  3288                           
  3289                           ; BSR set to: 0
  3290                           ;sort.c: 99: }
  3291                           ;sort.c: 100: LATBbits.LATB2 = 1;
  3292  00125E  848A               	bsf	3978,2,c	;volatile
  3293                           
  3294                           ; BSR set to: 0
  3295                           ;sort.c: 103: initServos();
  3296  001260  EC55  F024         	call	_initServos	;wreg free
  3297                           
  3298                           ;sort.c: 104: }
  3299  001264  0012               	return	
  3300  001266                     l7434:
  3301                           
  3302                           ;sort.c: 105: else{
  3303                           ;sort.c: 108: if(!f_loadingNewCan){
  3304  001266  0100               	movlb	0	; () banked
  3305  001268  51F2               	movf	_f_loadingNewCan& (0+255),w,b
  3306  00126A  0100               	movlb	0	; () banked
  3307  00126C  11F3               	iorwf	(_f_loadingNewCan+1)& (0+255),w,b
  3308  00126E  A4D8               	btfss	status,2,c
  3309  001270  D018               	goto	l7450
  3310                           
  3311                           ; BSR set to: 0
  3312                           ;sort.c: 110: getIR();
  3313  001272  ECCD  F024         	call	_getIR	;wreg free
  3314                           
  3315                           ;sort.c: 112: if(!f_loadingNewCan){
  3316  001276  0100               	movlb	0	; () banked
  3317  001278  51F2               	movf	_f_loadingNewCan& (0+255),w,b
  3318  00127A  0100               	movlb	0	; () banked
  3319  00127C  11F3               	iorwf	(_f_loadingNewCan+1)& (0+255),w,b
  3320  00127E  B4D8               	btfsc	status,2,c
  3321  001280  0012               	return	
  3322                           
  3323                           ; BSR set to: 0
  3324                           ;sort.c: 116: else{
  3325                           ;sort.c: 117: count_total++;
  3326                           
  3327                           ; BSR set to: 0
  3328                           
  3329                           ; BSR set to: 0
  3330                           ;sort.c: 114: }
  3331                           
  3332                           ; BSR set to: 0
  3333                           ;sort.c: 113: return;
  3334  001282  0100               	movlb	0	; () banked
  3335  001284  4BFE               	infsnz	_count_total& (0+255),f,b
  3336  001286  2BFF               	incf	(_count_total+1)& (0+255),f,b
  3337                           
  3338                           ; BSR set to: 0
  3339                           ;sort.c: 118: if(count_total == 12){
  3340  001288  0E0C               	movlw	12
  3341  00128A  0100               	movlb	0	; () banked
  3342  00128C  19FE               	xorwf	_count_total& (0+255),w,b
  3343  00128E  0100               	movlb	0	; () banked
  3344  001290  11FF               	iorwf	(_count_total+1)& (0+255),w,b
  3345  001292  A4D8               	btfss	status,2,c
  3346  001294  0012               	return	
  3347                           
  3348                           ; BSR set to: 0
  3349                           ;sort.c: 119: f_lastCan = 1;
  3350  001296  0E00               	movlw	0
  3351  001298  0100               	movlb	0	; () banked
  3352  00129A  6FF1               	movwf	(_f_lastCan+1)& (0+255),b
  3353  00129C  0E01               	movlw	1
  3354  00129E  6FF0               	movwf	_f_lastCan& (0+255),b
  3355                           
  3356                           ; BSR set to: 0
  3357                           ;sort.c: 120: }
  3358                           ;sort.c: 121: }
  3359                           ;sort.c: 122: }
  3360                           
  3361                           ; BSR set to: 0
  3362  0012A0  0012               	return	
  3363  0012A2                     l7450:
  3364                           
  3365                           ; BSR set to: 0
  3366                           ;sort.c: 125: else if(f_ID_receive){
  3367  0012A2  0101               	movlb	1	; () banked
  3368  0012A4  512F               	movf	_f_ID_receive& (0+255),w,b
  3369  0012A6  0101               	movlb	1	; () banked
  3370  0012A8  1130               	iorwf	(_f_ID_receive+1)& (0+255),w,b
  3371  0012AA  B4D8               	btfsc	status,2,c
  3372  0012AC  0012               	return	
  3373                           
  3374                           ; BSR set to: 1
  3375                           ;sort.c: 126: f_most_recent_sort_time = 1;
  3376  0012AE  0E00               	movlw	0
  3377  0012B0  0101               	movlb	1	; () banked
  3378  0012B2  6F38               	movwf	(_f_most_recent_sort_time+1)& (0+255),b
  3379  0012B4  0E01               	movlw	1
  3380  0012B6  6F37               	movwf	_f_most_recent_sort_time& (0+255),b
  3381                           
  3382                           ;sort.c: 127: f_loadingNewCan = 0;
  3383  0012B8  0E00               	movlw	0
  3384  0012BA  0100               	movlb	0	; () banked
  3385  0012BC  6FF3               	movwf	(_f_loadingNewCan+1)& (0+255),b
  3386  0012BE  0E00               	movlw	0
  3387  0012C0  6FF2               	movwf	_f_loadingNewCan& (0+255),b
  3388                           
  3389                           ; BSR set to: 0
  3390                           ;sort.c: 128: _delay((unsigned long)((750)*(32000000/4000.0)));
  3391  0012C2  0E1F               	movlw	31
  3392  0012C4  0100               	movlb	0	; () banked
  3393  0012C6  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3394  0012C8  0E71               	movlw	113
  3395  0012CA  0100               	movlb	0	; () banked
  3396  0012CC  6FB1               	movwf	??_Loading& (0+255),b
  3397  0012CE  0E1E               	movlw	30
  3398  0012D0                     u9067:
  3399  0012D0  2EE8               	decfsz	wreg,f,c
  3400  0012D2  D7FE               	bra	u9067
  3401  0012D4  2FB1               	decfsz	??_Loading& (0+255),f,b
  3402  0012D6  D7FC               	bra	u9067
  3403  0012D8  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3404  0012DA  D7FA               	bra	u9067
  3405  0012DC  F000               	nop	
  3406                           
  3407                           ;sort.c: 129: LATBbits.LATB2 = 0;
  3408  0012DE  948A               	bcf	3978,2,c	;volatile
  3409                           
  3410                           ;sort.c: 133: f_arm_position = 1;
  3411  0012E0  0E00               	movlw	0
  3412  0012E2  0100               	movlb	0	; () banked
  3413  0012E4  6FEF               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
  3414  0012E6  0E01               	movlw	1
  3415  0012E8  6FEE               	movwf	_f_arm_position& (0+255),b	;volatile
  3416                           
  3417                           ; BSR set to: 0
  3418                           ;sort.c: 134: getMAG();
  3419  0012EA  EC02  F028         	call	_getMAG	;wreg free
  3420                           
  3421                           ;sort.c: 135: sensor_outputs[0] = MAG_signal;
  3422  0012EE  C0E8  F0E2         	movff	_MAG_signal,_sensor_outputs
  3423  0012F2  C0E9  F0E3         	movff	_MAG_signal+1,_sensor_outputs+1
  3424                           
  3425                           ;sort.c: 137: if(sensor_outputs[0]){
  3426  0012F6  0100               	movlb	0	; () banked
  3427  0012F8  51E2               	movf	_sensor_outputs& (0+255),w,b
  3428  0012FA  0100               	movlb	0	; () banked
  3429  0012FC  11E3               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  3430  0012FE  B4D8               	btfsc	status,2,c
  3431  001300  D01D               	goto	l7478
  3432                           
  3433                           ; BSR set to: 0
  3434                           ;sort.c: 138: for(int i = 0; i<2500; i++){
  3435  001302  0E00               	movlw	0
  3436  001304  0100               	movlb	0	; () banked
  3437  001306  6FB7               	movwf	(Loading@i_1156+1)& (0+255),b
  3438  001308  0E00               	movlw	0
  3439  00130A  6FB6               	movwf	Loading@i_1156& (0+255),b
  3440  00130C                     l7468:
  3441                           
  3442                           ; BSR set to: 0
  3443  00130C  0100               	movlb	0	; () banked
  3444  00130E  BFB7               	btfsc	(Loading@i_1156+1)& (0+255),7,b
  3445  001310  D008               	goto	l784
  3446  001312  0EC4               	movlw	196
  3447  001314  0100               	movlb	0	; () banked
  3448  001316  5DB6               	subwf	Loading@i_1156& (0+255),w,b
  3449  001318  0E09               	movlw	9
  3450  00131A  0100               	movlb	0	; () banked
  3451  00131C  59B7               	subwfb	(Loading@i_1156+1)& (0+255),w,b
  3452  00131E  B0D8               	btfsc	status,0,c
  3453  001320  D02A               	goto	l7490
  3454  001322                     l784:
  3455                           
  3456                           ; BSR set to: 0
  3457                           ;sort.c: 139: LATAbits.LATA4 = 1;
  3458  001322  8889               	bsf	3977,4,c	;volatile
  3459                           
  3460                           ; BSR set to: 0
  3461                           ;sort.c: 140: _delay((unsigned long)((75)*(32000000/4000000.0)));
  3462  001324  0EC8               	movlw	200
  3463  001326                     u9077:
  3464  001326  2EE8               	decfsz	wreg,f,c
  3465  001328  D7FE               	bra	u9077
  3466                           
  3467                           ;sort.c: 141: LATAbits.LATA4 = 0;
  3468  00132A  9889               	bcf	3977,4,c	;volatile
  3469                           
  3470                           ;sort.c: 142: _delay((unsigned long)((25)*(32000000/4000000.0)));
  3471  00132C  0E42               	movlw	66
  3472  00132E                     u9087:
  3473  00132E  2EE8               	decfsz	wreg,f,c
  3474  001330  D7FE               	bra	u9087
  3475  001332  D000               	nop2	
  3476  001334  0100               	movlb	0	; () banked
  3477  001336  4BB6               	infsnz	Loading@i_1156& (0+255),f,b
  3478  001338  2BB7               	incf	(Loading@i_1156+1)& (0+255),f,b
  3479  00133A  D7E8               	goto	l7468
  3480  00133C                     l7478:
  3481                           
  3482                           ; BSR set to: 0
  3483                           ;sort.c: 145: else{
  3484                           ;sort.c: 146: for(int i = 0; i<2500; i++){
  3485  00133C  0E00               	movlw	0
  3486  00133E  0100               	movlb	0	; () banked
  3487  001340  6FB9               	movwf	(Loading@i_1165+1)& (0+255),b
  3488  001342  0E00               	movlw	0
  3489  001344  6FB8               	movwf	Loading@i_1165& (0+255),b
  3490  001346                     l7480:
  3491                           
  3492                           ; BSR set to: 0
  3493  001346  0100               	movlb	0	; () banked
  3494  001348  BFB9               	btfsc	(Loading@i_1165+1)& (0+255),7,b
  3495  00134A  D008               	goto	l787
  3496  00134C  0EC4               	movlw	196
  3497  00134E  0100               	movlb	0	; () banked
  3498  001350  5DB8               	subwf	Loading@i_1165& (0+255),w,b
  3499  001352  0E09               	movlw	9
  3500  001354  0100               	movlb	0	; () banked
  3501  001356  59B9               	subwfb	(Loading@i_1165+1)& (0+255),w,b
  3502  001358  B0D8               	btfsc	status,0,c
  3503  00135A  D00D               	goto	l7490
  3504  00135C                     l787:
  3505                           
  3506                           ; BSR set to: 0
  3507                           ;sort.c: 147: LATAbits.LATA4 = 1;
  3508  00135C  8889               	bsf	3977,4,c	;volatile
  3509                           
  3510                           ; BSR set to: 0
  3511                           ;sort.c: 148: _delay((unsigned long)((58)*(32000000/4000000.0)));
  3512  00135E  0E9A               	movlw	154
  3513  001360                     u9097:
  3514  001360  2EE8               	decfsz	wreg,f,c
  3515  001362  D7FE               	bra	u9097
  3516  001364  D000               	nop2	
  3517                           
  3518                           ;sort.c: 149: LATAbits.LATA4 = 0;
  3519  001366  9889               	bcf	3977,4,c	;volatile
  3520                           
  3521                           ;sort.c: 150: _delay((unsigned long)((42)*(32000000/4000000.0)));
  3522  001368  0E70               	movlw	112
  3523  00136A                     u9107:
  3524  00136A  2EE8               	decfsz	wreg,f,c
  3525  00136C  D7FE               	bra	u9107
  3526  00136E  0100               	movlb	0	; () banked
  3527  001370  4BB8               	infsnz	Loading@i_1165& (0+255),f,b
  3528  001372  2BB9               	incf	(Loading@i_1165+1)& (0+255),f,b
  3529  001374  D7E8               	goto	l7480
  3530  001376                     l7490:
  3531                           
  3532                           ; BSR set to: 0
  3533                           ;sort.c: 151: }
  3534                           ;sort.c: 152: }
  3535                           ;sort.c: 154: _delay((unsigned long)((350)*(32000000/4000.0)));
  3536  001376  0E0F               	movlw	15
  3537  001378  0100               	movlb	0	; () banked
  3538  00137A  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3539  00137C  0E35               	movlw	53
  3540  00137E  0100               	movlb	0	; () banked
  3541  001380  6FB1               	movwf	??_Loading& (0+255),b
  3542  001382  0E51               	movlw	81
  3543  001384                     u9117:
  3544  001384  2EE8               	decfsz	wreg,f,c
  3545  001386  D7FE               	bra	u9117
  3546  001388  2FB1               	decfsz	??_Loading& (0+255),f,b
  3547  00138A  D7FC               	bra	u9117
  3548  00138C  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3549  00138E  D7FA               	bra	u9117
  3550                           
  3551                           ;sort.c: 156: readIR();
  3552  001390  ECE7  F026         	call	_readIR	;wreg free
  3553                           
  3554                           ;sort.c: 157: if(IR_signal==1){
  3555  001394  0100               	movlb	0	; () banked
  3556  001396  05E6               	decf	_IR_signal& (0+255),w,b
  3557  001398  0100               	movlb	0	; () banked
  3558  00139A  11E7               	iorwf	(_IR_signal+1)& (0+255),w,b
  3559  00139C  A4D8               	btfss	status,2,c
  3560  00139E  D148               	goto	l7608
  3561                           
  3562                           ; BSR set to: 0
  3563                           ;sort.c: 158: _delay((unsigned long)((100)*(32000000/4000.0)));
  3564  0013A0  0E05               	movlw	5
  3565  0013A2  0100               	movlb	0	; () banked
  3566  0013A4  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3567  0013A6  0E0F               	movlw	15
  3568  0013A8  0100               	movlb	0	; () banked
  3569  0013AA  6FB1               	movwf	??_Loading& (0+255),b
  3570  0013AC  0EF1               	movlw	241
  3571  0013AE                     u9127:
  3572  0013AE  2EE8               	decfsz	wreg,f,c
  3573  0013B0  D7FE               	bra	u9127
  3574  0013B2  2FB1               	decfsz	??_Loading& (0+255),f,b
  3575  0013B4  D7FC               	bra	u9127
  3576  0013B6  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3577  0013B8  D7FA               	bra	u9127
  3578                           
  3579                           ;sort.c: 159: readIR();
  3580  0013BA  ECE7  F026         	call	_readIR	;wreg free
  3581                           
  3582                           ;sort.c: 160: if(IR_signal==1){
  3583  0013BE  0100               	movlb	0	; () banked
  3584  0013C0  05E6               	decf	_IR_signal& (0+255),w,b
  3585  0013C2  0100               	movlb	0	; () banked
  3586  0013C4  11E7               	iorwf	(_IR_signal+1)& (0+255),w,b
  3587  0013C6  A4D8               	btfss	status,2,c
  3588  0013C8  D040               	goto	l7528
  3589                           
  3590                           ; BSR set to: 0
  3591                           ;sort.c: 161: if(sensor_outputs[0]){
  3592  0013CA  0100               	movlb	0	; () banked
  3593  0013CC  51E2               	movf	_sensor_outputs& (0+255),w,b
  3594  0013CE  0100               	movlb	0	; () banked
  3595  0013D0  11E3               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  3596  0013D2  B4D8               	btfsc	status,2,c
  3597  0013D4  D01D               	goto	l7516
  3598                           
  3599                           ; BSR set to: 0
  3600                           ;sort.c: 162: for(int i = 0; i<2500; i++){
  3601  0013D6  0E00               	movlw	0
  3602  0013D8  0100               	movlb	0	; () banked
  3603  0013DA  6FBB               	movwf	(Loading@i_1167+1)& (0+255),b
  3604  0013DC  0E00               	movlw	0
  3605  0013DE  6FBA               	movwf	Loading@i_1167& (0+255),b
  3606  0013E0                     l7506:
  3607                           
  3608                           ; BSR set to: 0
  3609  0013E0  0100               	movlb	0	; () banked
  3610  0013E2  BFBB               	btfsc	(Loading@i_1167+1)& (0+255),7,b
  3611  0013E4  D008               	goto	l792
  3612  0013E6  0EC4               	movlw	196
  3613  0013E8  0100               	movlb	0	; () banked
  3614  0013EA  5DBA               	subwf	Loading@i_1167& (0+255),w,b
  3615  0013EC  0E09               	movlw	9
  3616  0013EE  0100               	movlb	0	; () banked
  3617  0013F0  59BB               	subwfb	(Loading@i_1167+1)& (0+255),w,b
  3618  0013F2  B0D8               	btfsc	status,0,c
  3619  0013F4  D02A               	goto	l7528
  3620  0013F6                     l792:
  3621                           
  3622                           ; BSR set to: 0
  3623                           ;sort.c: 163: LATAbits.LATA4 = 1;
  3624  0013F6  8889               	bsf	3977,4,c	;volatile
  3625                           
  3626                           ; BSR set to: 0
  3627                           ;sort.c: 164: _delay((unsigned long)((75)*(32000000/4000000.0)));
  3628  0013F8  0EC8               	movlw	200
  3629  0013FA                     u9137:
  3630  0013FA  2EE8               	decfsz	wreg,f,c
  3631  0013FC  D7FE               	bra	u9137
  3632                           
  3633                           ;sort.c: 165: LATAbits.LATA4 = 0;
  3634  0013FE  9889               	bcf	3977,4,c	;volatile
  3635                           
  3636                           ;sort.c: 166: _delay((unsigned long)((25)*(32000000/4000000.0)));
  3637  001400  0E42               	movlw	66
  3638  001402                     u9147:
  3639  001402  2EE8               	decfsz	wreg,f,c
  3640  001404  D7FE               	bra	u9147
  3641  001406  D000               	nop2	
  3642  001408  0100               	movlb	0	; () banked
  3643  00140A  4BBA               	infsnz	Loading@i_1167& (0+255),f,b
  3644  00140C  2BBB               	incf	(Loading@i_1167+1)& (0+255),f,b
  3645  00140E  D7E8               	goto	l7506
  3646  001410                     l7516:
  3647                           
  3648                           ; BSR set to: 0
  3649                           ;sort.c: 169: else{
  3650                           ;sort.c: 170: for(int i = 0; i<2500; i++){
  3651  001410  0E00               	movlw	0
  3652  001412  0100               	movlb	0	; () banked
  3653  001414  6FBD               	movwf	(Loading@i_1168+1)& (0+255),b
  3654  001416  0E00               	movlw	0
  3655  001418  6FBC               	movwf	Loading@i_1168& (0+255),b
  3656  00141A                     l7518:
  3657                           
  3658                           ; BSR set to: 0
  3659  00141A  0100               	movlb	0	; () banked
  3660  00141C  BFBD               	btfsc	(Loading@i_1168+1)& (0+255),7,b
  3661  00141E  D008               	goto	l795
  3662  001420  0EC4               	movlw	196
  3663  001422  0100               	movlb	0	; () banked
  3664  001424  5DBC               	subwf	Loading@i_1168& (0+255),w,b
  3665  001426  0E09               	movlw	9
  3666  001428  0100               	movlb	0	; () banked
  3667  00142A  59BD               	subwfb	(Loading@i_1168+1)& (0+255),w,b
  3668  00142C  B0D8               	btfsc	status,0,c
  3669  00142E  D00D               	goto	l7528
  3670  001430                     l795:
  3671                           
  3672                           ; BSR set to: 0
  3673                           ;sort.c: 171: LATAbits.LATA4 = 1;
  3674  001430  8889               	bsf	3977,4,c	;volatile
  3675                           
  3676                           ; BSR set to: 0
  3677                           ;sort.c: 172: _delay((unsigned long)((58)*(32000000/4000000.0)));
  3678  001432  0E9A               	movlw	154
  3679  001434                     u9157:
  3680  001434  2EE8               	decfsz	wreg,f,c
  3681  001436  D7FE               	bra	u9157
  3682  001438  D000               	nop2	
  3683                           
  3684                           ;sort.c: 173: LATAbits.LATA4 = 0;
  3685  00143A  9889               	bcf	3977,4,c	;volatile
  3686                           
  3687                           ;sort.c: 174: _delay((unsigned long)((42)*(32000000/4000000.0)));
  3688  00143C  0E70               	movlw	112
  3689  00143E                     u9167:
  3690  00143E  2EE8               	decfsz	wreg,f,c
  3691  001440  D7FE               	bra	u9167
  3692  001442  0100               	movlb	0	; () banked
  3693  001444  4BBC               	infsnz	Loading@i_1168& (0+255),f,b
  3694  001446  2BBD               	incf	(Loading@i_1168+1)& (0+255),f,b
  3695  001448  D7E8               	goto	l7518
  3696  00144A                     l7528:
  3697                           
  3698                           ; BSR set to: 0
  3699                           ;sort.c: 175: }
  3700                           ;sort.c: 176: }
  3701                           ;sort.c: 177: }
  3702                           ;sort.c: 179: _delay((unsigned long)((350)*(32000000/4000.0)));
  3703  00144A  0E0F               	movlw	15
  3704  00144C  0100               	movlb	0	; () banked
  3705  00144E  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3706  001450  0E35               	movlw	53
  3707  001452  0100               	movlb	0	; () banked
  3708  001454  6FB1               	movwf	??_Loading& (0+255),b
  3709  001456  0E51               	movlw	81
  3710  001458                     u9177:
  3711  001458  2EE8               	decfsz	wreg,f,c
  3712  00145A  D7FE               	bra	u9177
  3713  00145C  2FB1               	decfsz	??_Loading& (0+255),f,b
  3714  00145E  D7FC               	bra	u9177
  3715  001460  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3716  001462  D7FA               	bra	u9177
  3717                           
  3718                           ;sort.c: 181: int j = 1;
  3719  001464  0E00               	movlw	0
  3720  001466  0100               	movlb	0	; () banked
  3721  001468  6FC1               	movwf	(Loading@j+1)& (0+255),b
  3722  00146A  0E01               	movlw	1
  3723  00146C  6FC0               	movwf	Loading@j& (0+255),b
  3724                           
  3725                           ;sort.c: 182: while(IR_signal == 1){
  3726  00146E  D0D9               	goto	l7606
  3727  001470                     l7532:
  3728                           
  3729                           ; BSR set to: 0
  3730                           ;sort.c: 183: readIR();
  3731  001470  ECE7  F026         	call	_readIR	;wreg free
  3732                           
  3733                           ;sort.c: 184: if(j == 10){
  3734  001474  0E0A               	movlw	10
  3735  001476  0100               	movlb	0	; () banked
  3736  001478  19C0               	xorwf	Loading@j& (0+255),w,b
  3737  00147A  0100               	movlb	0	; () banked
  3738  00147C  11C1               	iorwf	(Loading@j+1)& (0+255),w,b
  3739  00147E  A4D8               	btfss	status,2,c
  3740  001480  D016               	goto	l7540
  3741                           
  3742                           ; BSR set to: 0
  3743                           ;sort.c: 185: LATBbits.LATB2 = !LATBbits.LATB2;
  3744  001482  B48A               	btfsc	3978,2,c	;volatile
  3745  001484  D004               	goto	u6040
  3746  001486  0100               	movlb	0	; () banked
  3747  001488  6BB1               	clrf	??_Loading& (0+255),b
  3748  00148A  2BB1               	incf	??_Loading& (0+255),f,b
  3749  00148C  D002               	goto	u6058
  3750  00148E                     u6040:
  3751  00148E  0100               	movlb	0	; () banked
  3752  001490  6BB1               	clrf	??_Loading& (0+255),b
  3753  001492                     u6058:
  3754  001492  0100               	movlb	0	; () banked
  3755  001494  47B1               	rlncf	??_Loading& (0+255),f,b
  3756  001496  47B1               	rlncf	??_Loading& (0+255),f,b
  3757  001498  508A               	movf	3978,w,c	;volatile
  3758  00149A  0100               	movlb	0	; () banked
  3759  00149C  19B1               	xorwf	??_Loading& (0+255),w,b
  3760  00149E  0BFB               	andlw	-5
  3761  0014A0  19B1               	xorwf	??_Loading& (0+255),w,b
  3762  0014A2  6E8A               	movwf	3978,c	;volatile
  3763                           
  3764                           ; BSR set to: 0
  3765                           ;sort.c: 186: j = 0;
  3766  0014A4  0E00               	movlw	0
  3767  0014A6  0100               	movlb	0	; () banked
  3768  0014A8  6FC1               	movwf	(Loading@j+1)& (0+255),b
  3769  0014AA  0E00               	movlw	0
  3770  0014AC  6FC0               	movwf	Loading@j& (0+255),b
  3771  0014AE                     l7540:
  3772                           
  3773                           ; BSR set to: 0
  3774                           ;sort.c: 187: }
  3775                           ;sort.c: 188: if(IR_signal==1){
  3776  0014AE  0100               	movlb	0	; () banked
  3777  0014B0  05E6               	decf	_IR_signal& (0+255),w,b
  3778  0014B2  0100               	movlb	0	; () banked
  3779  0014B4  11E7               	iorwf	(_IR_signal+1)& (0+255),w,b
  3780  0014B6  A4D8               	btfss	status,2,c
  3781  0014B8  D098               	goto	l7594
  3782                           
  3783                           ; BSR set to: 0
  3784                           ;sort.c: 189: _delay((unsigned long)((350)*(32000000/4000.0)));
  3785  0014BA  0E0F               	movlw	15
  3786  0014BC  0100               	movlb	0	; () banked
  3787  0014BE  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3788  0014C0  0E35               	movlw	53
  3789  0014C2  0100               	movlb	0	; () banked
  3790  0014C4  6FB1               	movwf	??_Loading& (0+255),b
  3791  0014C6  0E51               	movlw	81
  3792  0014C8                     u9187:
  3793  0014C8  2EE8               	decfsz	wreg,f,c
  3794  0014CA  D7FE               	bra	u9187
  3795  0014CC  2FB1               	decfsz	??_Loading& (0+255),f,b
  3796  0014CE  D7FC               	bra	u9187
  3797  0014D0  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3798  0014D2  D7FA               	bra	u9187
  3799                           
  3800                           ;sort.c: 190: readIR();
  3801  0014D4  ECE7  F026         	call	_readIR	;wreg free
  3802                           
  3803                           ;sort.c: 191: if(IR_signal==1){
  3804  0014D8  0100               	movlb	0	; () banked
  3805  0014DA  05E6               	decf	_IR_signal& (0+255),w,b
  3806  0014DC  0100               	movlb	0	; () banked
  3807  0014DE  11E7               	iorwf	(_IR_signal+1)& (0+255),w,b
  3808  0014E0  A4D8               	btfss	status,2,c
  3809  0014E2  D07F               	goto	l801
  3810                           
  3811                           ; BSR set to: 0
  3812                           ;sort.c: 192: if(sensor_outputs[0]){
  3813  0014E4  0100               	movlb	0	; () banked
  3814  0014E6  51E2               	movf	_sensor_outputs& (0+255),w,b
  3815  0014E8  0100               	movlb	0	; () banked
  3816  0014EA  11E3               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  3817  0014EC  B4D8               	btfsc	status,2,c
  3818  0014EE  D011               	goto	l7556
  3819                           
  3820                           ; BSR set to: 0
  3821                           ;sort.c: 193: LATAbits.LATA4 = 1;
  3822  0014F0  8889               	bsf	3977,4,c	;volatile
  3823                           
  3824                           ; BSR set to: 0
  3825                           ;sort.c: 194: _delay((unsigned long)((250)*(32000000/4000.0)));
  3826  0014F2  0E0B               	movlw	11
  3827  0014F4  0100               	movlb	0	; () banked
  3828  0014F6  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3829  0014F8  0E26               	movlw	38
  3830  0014FA  0100               	movlb	0	; () banked
  3831  0014FC  6FB1               	movwf	??_Loading& (0+255),b
  3832  0014FE  0E5D               	movlw	93
  3833  001500                     u9197:
  3834  001500  2EE8               	decfsz	wreg,f,c
  3835  001502  D7FE               	bra	u9197
  3836  001504  2FB1               	decfsz	??_Loading& (0+255),f,b
  3837  001506  D7FC               	bra	u9197
  3838  001508  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3839  00150A  D7FA               	bra	u9197
  3840  00150C  D000               	nop2	
  3841                           
  3842                           ;sort.c: 195: LATAbits.LATA4 = 0;
  3843  00150E  9889               	bcf	3977,4,c	;volatile
  3844                           
  3845                           ;sort.c: 196: }
  3846  001510  D068               	goto	l801
  3847  001512                     l7556:
  3848                           
  3849                           ;sort.c: 197: else{
  3850                           ;sort.c: 198: for(int i = 0; i<2500; i++){
  3851  001512  0E00               	movlw	0
  3852  001514  0100               	movlb	0	; () banked
  3853  001516  6FBF               	movwf	(Loading@i_1170+1)& (0+255),b
  3854  001518  0E00               	movlw	0
  3855  00151A  6FBE               	movwf	Loading@i_1170& (0+255),b
  3856  00151C                     l7558:
  3857                           
  3858                           ; BSR set to: 0
  3859  00151C  0100               	movlb	0	; () banked
  3860  00151E  BFBF               	btfsc	(Loading@i_1170+1)& (0+255),7,b
  3861  001520  D041               	goto	l7586
  3862  001522  0EC4               	movlw	196
  3863  001524  0100               	movlb	0	; () banked
  3864  001526  5DBE               	subwf	Loading@i_1170& (0+255),w,b
  3865  001528  0E09               	movlw	9
  3866  00152A  0100               	movlb	0	; () banked
  3867  00152C  59BF               	subwfb	(Loading@i_1170+1)& (0+255),w,b
  3868  00152E  B0D8               	btfsc	status,0,c
  3869  001530  D058               	goto	l801
  3870  001532  D038               	goto	l7586
  3871  001534                     l807:
  3872                           
  3873                           ; BSR set to: 0
  3874                           ;sort.c: 201: LATAbits.LATA4 = 1;
  3875  001534  8889               	bsf	3977,4,c	;volatile
  3876                           
  3877                           ; BSR set to: 0
  3878                           ;sort.c: 202: _delay((unsigned long)((75)*(32000000/4000000.0)));
  3879  001536  0EC8               	movlw	200
  3880  001538                     u9207:
  3881  001538  2EE8               	decfsz	wreg,f,c
  3882  00153A  D7FE               	bra	u9207
  3883                           
  3884                           ;sort.c: 203: LATAbits.LATA4 = 0;
  3885  00153C  9889               	bcf	3977,4,c	;volatile
  3886                           
  3887                           ;sort.c: 204: _delay((unsigned long)((25)*(32000000/4000000.0)));
  3888  00153E  0E42               	movlw	66
  3889  001540                     u9217:
  3890  001540  2EE8               	decfsz	wreg,f,c
  3891  001542  D7FE               	bra	u9217
  3892  001544  D01C               	goto	L2
  3893  001546                     l809:
  3894                           
  3895                           ; BSR set to: 0
  3896                           ;sort.c: 207: LATAbits.LATA4 = 1;
  3897  001546  8889               	bsf	3977,4,c	;volatile
  3898                           
  3899                           ; BSR set to: 0
  3900                           ;sort.c: 208: _delay((unsigned long)((80)*(32000000/4000000.0)));
  3901  001548  0ED5               	movlw	213
  3902  00154A                     u9227:
  3903  00154A  2EE8               	decfsz	wreg,f,c
  3904  00154C  D7FE               	bra	u9227
  3905  00154E  F000               	nop	
  3906                           
  3907                           ;sort.c: 209: LATAbits.LATA4 = 0;
  3908  001550  9889               	bcf	3977,4,c	;volatile
  3909                           
  3910                           ;sort.c: 210: _delay((unsigned long)((20)*(32000000/4000000.0)));
  3911  001552  0E35               	movlw	53
  3912  001554                     u9237:
  3913  001554  2EE8               	decfsz	wreg,f,c
  3914  001556  D7FE               	bra	u9237
  3915  001558  D01D               	goto	L3
  3916  00155A                     l810:
  3917                           
  3918                           ; BSR set to: 0
  3919                           ;sort.c: 213: LATAbits.LATA4 = 1;
  3920  00155A  8889               	bsf	3977,4,c	;volatile
  3921                           
  3922                           ; BSR set to: 0
  3923                           ;sort.c: 214: _delay((unsigned long)((85)*(32000000/4000000.0)));
  3924  00155C  0EE2               	movlw	226
  3925  00155E                     u9247:
  3926  00155E  2EE8               	decfsz	wreg,f,c
  3927  001560  D7FE               	bra	u9247
  3928  001562  D000               	nop2	
  3929                           
  3930                           ;sort.c: 215: LATAbits.LATA4 = 0;
  3931  001564  9889               	bcf	3977,4,c	;volatile
  3932                           
  3933                           ;sort.c: 216: _delay((unsigned long)((15)*(32000000/4000000.0)));
  3934  001566  0E28               	movlw	40
  3935  001568                     u9257:
  3936  001568  2EE8               	decfsz	wreg,f,c
  3937  00156A  D7FE               	bra	u9257
  3938                           
  3939                           ;sort.c: 217: break;
  3940  00156C  D036               	goto	l7588
  3941  00156E                     l811:
  3942                           
  3943                           ; BSR set to: 0
  3944                           ;sort.c: 219: LATAbits.LATA4 = 1;
  3945  00156E  8889               	bsf	3977,4,c	;volatile
  3946                           
  3947                           ; BSR set to: 0
  3948                           ;sort.c: 220: _delay((unsigned long)((90)*(32000000/4000000.0)));
  3949  001570  0EF0               	movlw	240
  3950  001572                     u9267:
  3951  001572  2EE8               	decfsz	wreg,f,c
  3952  001574  D7FE               	bra	u9267
  3953                           
  3954                           ;sort.c: 221: LATAbits.LATA4 = 0;
  3955  001576  9889               	bcf	3977,4,c	;volatile
  3956                           
  3957                           ;sort.c: 222: _delay((unsigned long)((10)*(32000000/4000000.0)));
  3958  001578  0E1A               	movlw	26
  3959  00157A                     u9277:
  3960  00157A  2EE8               	decfsz	wreg,f,c
  3961  00157C  D7FE               	bra	u9277
  3962  00157E                     L2:
  3963  00157E  D000               	nop2	
  3964                           
  3965                           ;sort.c: 223: break;
  3966  001580  D02C               	goto	l7588
  3967  001582                     l812:
  3968                           
  3969                           ; BSR set to: 0
  3970                           ;sort.c: 225: LATAbits.LATA4 = 1;
  3971  001582  8889               	bsf	3977,4,c	;volatile
  3972                           
  3973                           ; BSR set to: 0
  3974                           ;sort.c: 226: _delay((unsigned long)((95)*(32000000/4000000.0)));
  3975  001584  0EFD               	movlw	253
  3976  001586                     u9287:
  3977  001586  2EE8               	decfsz	wreg,f,c
  3978  001588  D7FE               	bra	u9287
  3979  00158A  F000               	nop	
  3980                           
  3981                           ;sort.c: 227: LATAbits.LATA4 = 0;
  3982  00158C  9889               	bcf	3977,4,c	;volatile
  3983                           
  3984                           ;sort.c: 228: _delay((unsigned long)((5)*(32000000/4000000.0)));
  3985  00158E  0E0D               	movlw	13
  3986  001590                     u9297:
  3987  001590  2EE8               	decfsz	wreg,f,c
  3988  001592  D7FE               	bra	u9297
  3989  001594                     L3:
  3990  001594  F000               	nop	
  3991                           
  3992                           ;sort.c: 229: break;
  3993  001596  D021               	goto	l7588
  3994  001598                     l813:
  3995                           
  3996                           ; BSR set to: 0
  3997                           ;sort.c: 231: LATAbits.LATA4 = 1;
  3998  001598  8889               	bsf	3977,4,c	;volatile
  3999                           
  4000                           ; BSR set to: 0
  4001                           ;sort.c: 232: _delay((unsigned long)((100)*(32000000/4000000.0)));
  4002  00159A  0EA0               	movlw	160
  4003  00159C                     u9307:
  4004  00159C  D000               	nop2	
  4005  00159E  2EE8               	decfsz	wreg,f,c
  4006  0015A0  D7FD               	bra	u9307
  4007                           
  4008                           ;sort.c: 234: }
  4009                           
  4010                           ;sort.c: 233: break;
  4011  0015A2  D01B               	goto	l7588
  4012  0015A4                     l7586:
  4013  0015A4  C0C0  F0B1         	movff	Loading@j,??_Loading
  4014  0015A8  C0C1  F0B2         	movff	Loading@j+1,??_Loading+1
  4015                           
  4016                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4017                           ; Switch size 1, requested type "space"
  4018                           ; Number of cases is 1, Range of values is 0 to 0
  4019                           ; switch strategies available:
  4020                           ; Name         Instructions Cycles
  4021                           ; simple_byte            4     3 (average)
  4022                           ;	Chosen strategy is simple_byte
  4023  0015AC  0100               	movlb	0	; () banked
  4024  0015AE  51B2               	movf	(??_Loading+1)& (0+255),w,b
  4025  0015B0  0A00               	xorlw	0	; case 0
  4026  0015B2  A4D8               	btfss	status,2,c
  4027  0015B4  D7F1               	goto	l813
  4028                           
  4029                           ; BSR set to: 0
  4030                           ; Switch size 1, requested type "space"
  4031                           ; Number of cases is 5, Range of values is 1 to 5
  4032                           ; switch strategies available:
  4033                           ; Name         Instructions Cycles
  4034                           ; simple_byte           16     9 (average)
  4035                           ;	Chosen strategy is simple_byte
  4036  0015B6  0100               	movlb	0	; () banked
  4037  0015B8  51B1               	movf	??_Loading& (0+255),w,b
  4038  0015BA  0A01               	xorlw	1	; case 1
  4039  0015BC  B4D8               	btfsc	status,2,c
  4040  0015BE  D7BA               	goto	l807
  4041  0015C0  0A03               	xorlw	3	; case 2
  4042  0015C2  B4D8               	btfsc	status,2,c
  4043  0015C4  D7C0               	goto	l809
  4044  0015C6  0A01               	xorlw	1	; case 3
  4045  0015C8  B4D8               	btfsc	status,2,c
  4046  0015CA  D7C7               	goto	l810
  4047  0015CC  0A07               	xorlw	7	; case 4
  4048  0015CE  B4D8               	btfsc	status,2,c
  4049  0015D0  D7CE               	goto	l811
  4050  0015D2  0A01               	xorlw	1	; case 5
  4051  0015D4  B4D8               	btfsc	status,2,c
  4052  0015D6  D7D5               	goto	l812
  4053  0015D8  D7DF               	goto	l813
  4054  0015DA                     l7588:
  4055  0015DA  0100               	movlb	0	; () banked
  4056  0015DC  4BBE               	infsnz	Loading@i_1170& (0+255),f,b
  4057  0015DE  2BBF               	incf	(Loading@i_1170+1)& (0+255),f,b
  4058  0015E0  D79D               	goto	l7558
  4059  0015E2                     l801:
  4060                           
  4061                           ;sort.c: 235: }
  4062                           ;sort.c: 236: }
  4063                           ;sort.c: 237: }
  4064                           ;sort.c: 238: LATAbits.LATA4 = 0;
  4065  0015E2  9889               	bcf	3977,4,c	;volatile
  4066                           
  4067                           ;sort.c: 239: j++;
  4068  0015E4  0100               	movlb	0	; () banked
  4069  0015E6  4BC0               	infsnz	Loading@j& (0+255),f,b
  4070  0015E8  2BC1               	incf	(Loading@j+1)& (0+255),f,b
  4071  0015EA                     l7594:
  4072                           
  4073                           ; BSR set to: 0
  4074                           ;sort.c: 240: }
  4075                           ;sort.c: 242: if(!IR_signal){
  4076  0015EA  0100               	movlb	0	; () banked
  4077  0015EC  51E6               	movf	_IR_signal& (0+255),w,b
  4078  0015EE  0100               	movlb	0	; () banked
  4079  0015F0  11E7               	iorwf	(_IR_signal+1)& (0+255),w,b
  4080  0015F2  A4D8               	btfss	status,2,c
  4081  0015F4  D016               	goto	l7606
  4082                           
  4083                           ; BSR set to: 0
  4084                           ;sort.c: 243: _delay((unsigned long)((500)*(32000000/4000.0)));
  4085  0015F6  0E15               	movlw	21
  4086  0015F8  0100               	movlb	0	; () banked
  4087  0015FA  6FB2               	movwf	(??_Loading+1)& (0+255),b
  4088  0015FC  0E4B               	movlw	75
  4089  0015FE  0100               	movlb	0	; () banked
  4090  001600  6FB1               	movwf	??_Loading& (0+255),b
  4091  001602  0EBE               	movlw	190
  4092  001604                     u9317:
  4093  001604  2EE8               	decfsz	wreg,f,c
  4094  001606  D7FE               	bra	u9317
  4095  001608  2FB1               	decfsz	??_Loading& (0+255),f,b
  4096  00160A  D7FC               	bra	u9317
  4097  00160C  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  4098  00160E  D7FA               	bra	u9317
  4099  001610  F000               	nop	
  4100                           
  4101                           ;sort.c: 244: readIR();
  4102  001612  ECE7  F026         	call	_readIR	;wreg free
  4103                           
  4104                           ;sort.c: 245: if(IR_signal==1){
  4105  001616  0100               	movlb	0	; () banked
  4106  001618  05E6               	decf	_IR_signal& (0+255),w,b
  4107  00161A  0100               	movlb	0	; () banked
  4108  00161C  11E7               	iorwf	(_IR_signal+1)& (0+255),w,b
  4109  00161E  A4D8               	btfss	status,2,c
  4110  001620  D006               	goto	l817
  4111  001622                     l7606:
  4112                           
  4113                           ; BSR set to: 0
  4114  001622  0100               	movlb	0	; () banked
  4115  001624  05E6               	decf	_IR_signal& (0+255),w,b
  4116  001626  0100               	movlb	0	; () banked
  4117  001628  11E7               	iorwf	(_IR_signal+1)& (0+255),w,b
  4118  00162A  B4D8               	btfsc	status,2,c
  4119  00162C  D721               	goto	l7532
  4120  00162E                     l817:
  4121                           
  4122                           ; BSR set to: 0
  4123                           ;sort.c: 250: }
  4124                           ;sort.c: 251: }
  4125                           ;sort.c: 252: }
  4126                           ;sort.c: 253: LATBbits.LATB2 = 0;
  4127  00162E  948A               	bcf	3978,2,c	;volatile
  4128  001630                     l7608:
  4129                           
  4130                           ; BSR set to: 0
  4131                           ;sort.c: 254: }
  4132                           ;sort.c: 255: f_can_coming_to_ID = 1;
  4133  001630  0E00               	movlw	0
  4134  001632  0101               	movlb	1	; () banked
  4135  001634  6F32               	movwf	(_f_can_coming_to_ID+1)& (0+255),b
  4136  001636  0E01               	movlw	1
  4137  001638  6F31               	movwf	_f_can_coming_to_ID& (0+255),b
  4138                           
  4139                           ; BSR set to: 1
  4140                           
  4141                           ; BSR set to: 1
  4142  00163A  0012               	return	
  4143  00163C                     __end_of_Loading:
  4144                           	opt stack 0
  4145                           tblptru	equ	0xFF8
  4146                           tblptrh	equ	0xFF7
  4147                           tblptrl	equ	0xFF6
  4148                           tablat	equ	0xFF5
  4149                           prodh	equ	0xFF4
  4150                           prodl	equ	0xFF3
  4151                           postinc0	equ	0xFEE
  4152                           wreg	equ	0xFE8
  4153                           postdec1	equ	0xFE5
  4154                           fsr1l	equ	0xFE1
  4155                           status	equ	0xFD8
  4156                           
  4157 ;; *************** function _initSortTimer *****************
  4158 ;; Defined at:
  4159 ;;		line 416 in file "sort.c"
  4160 ;; Parameters:    Size  Location     Type
  4161 ;;		None
  4162 ;; Auto vars:     Size  Location     Type
  4163 ;;  i               2    8[BANK0 ] int 
  4164 ;; Return value:  Size  Location     Type
  4165 ;;                  1    wreg      void 
  4166 ;; Registers used:
  4167 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4168 ;; Tracked objects:
  4169 ;;		On entry : 0/0
  4170 ;;		On exit  : 0/0
  4171 ;;		Unchanged: 0/0
  4172 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4173 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4174 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4175 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4176 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4177 ;;Total ram usage:        5 bytes
  4178 ;; Hardware stack levels used:    1
  4179 ;; Hardware stack levels required when called:   10
  4180 ;; This function calls:
  4181 ;;		_getRTC
  4182 ;; This function is called by:
  4183 ;;		_Loading
  4184 ;; This function uses a non-reentrant model
  4185 ;;
  4186                           
  4187                           	psect	text3
  4188  004542                     __ptext3:
  4189                           	opt stack 0
  4190  004542                     _initSortTimer:
  4191                           	opt stack 18
  4192                           
  4193                           ;sort.c: 418: getRTC();
  4194                           
  4195                           ;incstack = 0
  4196  004542  EC8D  F023         	call	_getRTC	;wreg free
  4197                           
  4198                           ;sort.c: 419: for(int i = 0; i < 7; i++){
  4199  004546  0E00               	movlw	0
  4200  004548  0100               	movlb	0	; () banked
  4201  00454A  6F89               	movwf	(initSortTimer@i+1)& (0+255),b
  4202  00454C  0E00               	movlw	0
  4203  00454E  6F88               	movwf	initSortTimer@i& (0+255),b
  4204  004550                     l7000:
  4205                           
  4206                           ; BSR set to: 0
  4207  004550  0100               	movlb	0	; () banked
  4208  004552  BF89               	btfsc	(initSortTimer@i+1)& (0+255),7,b
  4209  004554  D008               	goto	l7004
  4210  004556  0100               	movlb	0	; () banked
  4211  004558  5189               	movf	(initSortTimer@i+1)& (0+255),w,b
  4212  00455A  E140               	bnz	l7010
  4213  00455C  0E07               	movlw	7
  4214  00455E  0100               	movlb	0	; () banked
  4215  004560  5D88               	subwf	initSortTimer@i& (0+255),w,b
  4216  004562  B0D8               	btfsc	status,0,c
  4217  004564  D03B               	goto	l7010
  4218  004566                     l7004:
  4219                           
  4220                           ; BSR set to: 0
  4221                           ;sort.c: 420: startTime[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
  4222  004566  0E1C               	movlw	low _time
  4223  004568  0100               	movlb	0	; () banked
  4224  00456A  2588               	addwf	initSortTimer@i& (0+255),w,b
  4225  00456C  6ED9               	movwf	fsr2l,c
  4226  00456E  0E01               	movlw	high _time
  4227  004570  0100               	movlb	0	; () banked
  4228  004572  2189               	addwfc	(initSortTimer@i+1)& (0+255),w,b
  4229  004574  6EDA               	movwf	fsr2h,c
  4230  004576  50DF               	movf	indf2,w,c
  4231  004578  0100               	movlb	0	; () banked
  4232  00457A  6F85               	movwf	??_initSortTimer& (0+255),b
  4233  00457C  0100               	movlb	0	; () banked
  4234  00457E  3B85               	swapf	??_initSortTimer& (0+255),f,b
  4235  004580  0E0F               	movlw	15
  4236  004582  1785               	andwf	??_initSortTimer& (0+255),f,b
  4237  004584  0E0F               	movlw	15
  4238  004586  0100               	movlb	0	; () banked
  4239  004588  1785               	andwf	??_initSortTimer& (0+255),f,b
  4240  00458A  0100               	movlb	0	; () banked
  4241  00458C  5185               	movf	??_initSortTimer& (0+255),w,b
  4242  00458E  0D0A               	mullw	10
  4243  004590  0E1C               	movlw	low _time
  4244  004592  0100               	movlb	0	; () banked
  4245  004594  2588               	addwf	initSortTimer@i& (0+255),w,b
  4246  004596  6ED9               	movwf	fsr2l,c
  4247  004598  0E01               	movlw	high _time
  4248  00459A  0100               	movlb	0	; () banked
  4249  00459C  2189               	addwfc	(initSortTimer@i+1)& (0+255),w,b
  4250  00459E  6EDA               	movwf	fsr2h,c
  4251  0045A0  50DF               	movf	indf2,w,c
  4252  0045A2  0B0F               	andlw	15
  4253  0045A4  0100               	movlb	0	; () banked
  4254  0045A6  6F86               	movwf	(??_initSortTimer+1)& (0+255),b
  4255  0045A8  6B87               	clrf	(??_initSortTimer+2)& (0+255),b
  4256  0045AA  50F3               	movf	prodl,w,c
  4257  0045AC  0100               	movlb	0	; () banked
  4258  0045AE  2786               	addwf	(??_initSortTimer+1)& (0+255),f,b
  4259  0045B0  50F4               	movf	prodh,w,c
  4260  0045B2  0100               	movlb	0	; () banked
  4261  0045B4  2387               	addwfc	(??_initSortTimer+2)& (0+255),f,b
  4262  0045B6  90D8               	bcf	status,0,c
  4263  0045B8  0100               	movlb	0	; () banked
  4264  0045BA  3588               	rlcf	initSortTimer@i& (0+255),w,b
  4265  0045BC  6ED9               	movwf	fsr2l,c
  4266  0045BE  0100               	movlb	0	; () banked
  4267  0045C0  3589               	rlcf	(initSortTimer@i+1)& (0+255),w,b
  4268  0045C2  6EDA               	movwf	fsr2h,c
  4269  0045C4  0E0E               	movlw	low _startTime
  4270  0045C6  26D9               	addwf	fsr2l,f,c
  4271  0045C8  0E01               	movlw	high _startTime
  4272  0045CA  22DA               	addwfc	fsr2h,f,c
  4273  0045CC  C086  FFDE         	movff	??_initSortTimer+1,postinc2
  4274  0045D0  C087  FFDD         	movff	??_initSortTimer+2,postdec2
  4275                           
  4276                           ; BSR set to: 0
  4277  0045D4  0100               	movlb	0	; () banked
  4278  0045D6  4B88               	infsnz	initSortTimer@i& (0+255),f,b
  4279  0045D8  2B89               	incf	(initSortTimer@i+1)& (0+255),f,b
  4280  0045DA  D7BA               	goto	l7000
  4281  0045DC                     l7010:
  4282                           
  4283                           ; BSR set to: 0
  4284                           ;sort.c: 421: }
  4285                           ;sort.c: 423: T0CON = 0b00010111;
  4286  0045DC  0E17               	movlw	23
  4287  0045DE  6ED5               	movwf	4053,c	;volatile
  4288                           
  4289                           ;sort.c: 432: TMR0H = 0b10000101;
  4290  0045E0  0E85               	movlw	133
  4291  0045E2  6ED7               	movwf	4055,c	;volatile
  4292                           
  4293                           ;sort.c: 433: TMR0L = 0b11101110;
  4294  0045E4  0EEE               	movlw	238
  4295  0045E6  6ED6               	movwf	4054,c	;volatile
  4296                           
  4297                           ; BSR set to: 0
  4298                           ;sort.c: 434: TMR0ON = 1;
  4299  0045E8  8ED5               	bsf	4053,7,c	;volatile
  4300                           
  4301                           ; BSR set to: 0
  4302  0045EA  0012               	return		;funcret
  4303  0045EC                     __end_of_initSortTimer:
  4304                           	opt stack 0
  4305                           tblptru	equ	0xFF8
  4306                           tblptrh	equ	0xFF7
  4307                           tblptrl	equ	0xFF6
  4308                           tablat	equ	0xFF5
  4309                           prodh	equ	0xFF4
  4310                           prodl	equ	0xFF3
  4311                           postinc0	equ	0xFEE
  4312                           wreg	equ	0xFE8
  4313                           postdec1	equ	0xFE5
  4314                           fsr1l	equ	0xFE1
  4315                           indf2	equ	0xFDF
  4316                           postinc2	equ	0xFDE
  4317                           postdec2	equ	0xFDD
  4318                           fsr2h	equ	0xFDA
  4319                           fsr2l	equ	0xFD9
  4320                           status	equ	0xFD8
  4321                           
  4322 ;; *************** function _initGlobalVars *****************
  4323 ;; Defined at:
  4324 ;;		line 384 in file "sort.c"
  4325 ;; Parameters:    Size  Location     Type
  4326 ;;		None
  4327 ;; Auto vars:     Size  Location     Type
  4328 ;;		None
  4329 ;; Return value:  Size  Location     Type
  4330 ;;                  1    wreg      void 
  4331 ;; Registers used:
  4332 ;;		wreg, status,2
  4333 ;; Tracked objects:
  4334 ;;		On entry : 0/0
  4335 ;;		On exit  : 0/0
  4336 ;;		Unchanged: 0/0
  4337 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4338 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4339 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4340 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4341 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4342 ;;Total ram usage:        0 bytes
  4343 ;; Hardware stack levels used:    1
  4344 ;; Hardware stack levels required when called:    7
  4345 ;; This function calls:
  4346 ;;		Nothing
  4347 ;; This function is called by:
  4348 ;;		_Loading
  4349 ;; This function uses a non-reentrant model
  4350 ;;
  4351                           
  4352                           	psect	text4
  4353  00430A                     __ptext4:
  4354                           	opt stack 0
  4355  00430A                     _initGlobalVars:
  4356                           	opt stack 21
  4357                           
  4358                           ;sort.c: 386: first = 0;
  4359                           
  4360                           ; BSR set to: 0
  4361                           ;incstack = 0
  4362  00430A  0E00               	movlw	0
  4363  00430C  0101               	movlb	1	; () banked
  4364  00430E  6F3A               	movwf	(_first+1)& (0+255),b
  4365  004310  0E00               	movlw	0
  4366  004312  6F39               	movwf	_first& (0+255),b
  4367                           
  4368                           ;sort.c: 389: f_loadingNewCan = 0;
  4369  004314  0E00               	movlw	0
  4370  004316  0100               	movlb	0	; () banked
  4371  004318  6FF3               	movwf	(_f_loadingNewCan+1)& (0+255),b
  4372  00431A  0E00               	movlw	0
  4373  00431C  6FF2               	movwf	_f_loadingNewCan& (0+255),b
  4374                           
  4375                           ;sort.c: 390: f_lastCan = 0;
  4376  00431E  0E00               	movlw	0
  4377  004320  0100               	movlb	0	; () banked
  4378  004322  6FF1               	movwf	(_f_lastCan+1)& (0+255),b
  4379  004324  0E00               	movlw	0
  4380  004326  6FF0               	movwf	_f_lastCan& (0+255),b
  4381                           
  4382                           ;sort.c: 391: f_ID_receive = 1;
  4383  004328  0E00               	movlw	0
  4384  00432A  0101               	movlb	1	; () banked
  4385  00432C  6F30               	movwf	(_f_ID_receive+1)& (0+255),b
  4386  00432E  0E01               	movlw	1
  4387  004330  6F2F               	movwf	_f_ID_receive& (0+255),b
  4388                           
  4389                           ;sort.c: 392: f_can_coming_to_ID = 0;
  4390  004332  0E00               	movlw	0
  4391  004334  0101               	movlb	1	; () banked
  4392  004336  6F32               	movwf	(_f_can_coming_to_ID+1)& (0+255),b
  4393  004338  0E00               	movlw	0
  4394  00433A  6F31               	movwf	_f_can_coming_to_ID& (0+255),b
  4395                           
  4396                           ;sort.c: 393: f_can_coming_to_distribution = 0;
  4397  00433C  0E00               	movlw	0
  4398  00433E  0101               	movlb	1	; () banked
  4399  004340  6F34               	movwf	(_f_can_coming_to_distribution+1)& (0+255),b
  4400  004342  0E00               	movlw	0
  4401  004344  6F33               	movwf	_f_can_coming_to_distribution& (0+255),b
  4402                           
  4403                           ;sort.c: 394: f_can_distributed = 1;
  4404  004346  0E00               	movlw	0
  4405  004348  0101               	movlb	1	; () banked
  4406  00434A  6F36               	movwf	(_f_can_distributed+1)& (0+255),b
  4407  00434C  0E01               	movlw	1
  4408  00434E  6F35               	movwf	_f_can_distributed& (0+255),b
  4409                           
  4410                           ;sort.c: 395: f_most_recent_sort_time = 0;
  4411  004350  0E00               	movlw	0
  4412  004352  0101               	movlb	1	; () banked
  4413  004354  6F38               	movwf	(_f_most_recent_sort_time+1)& (0+255),b
  4414  004356  0E00               	movlw	0
  4415  004358  6F37               	movwf	_f_most_recent_sort_time& (0+255),b
  4416                           
  4417                           ;sort.c: 398: count_total = 0;
  4418  00435A  0E00               	movlw	0
  4419  00435C  0100               	movlb	0	; () banked
  4420  00435E  6FFF               	movwf	(_count_total+1)& (0+255),b
  4421  004360  0E00               	movlw	0
  4422  004362  6FFE               	movwf	_count_total& (0+255),b
  4423                           
  4424                           ;sort.c: 399: count_pop_no_tab = 0;
  4425  004364  0E00               	movlw	0
  4426  004366  0101               	movlb	1	; () banked
  4427  004368  6F28               	movwf	(_count_pop_no_tab+1)& (0+255),b
  4428  00436A  0E00               	movlw	0
  4429  00436C  6F27               	movwf	_count_pop_no_tab& (0+255),b
  4430                           
  4431                           ;sort.c: 400: count_pop_w_tab = 0;
  4432  00436E  0E00               	movlw	0
  4433  004370  0101               	movlb	1	; () banked
  4434  004372  6F2A               	movwf	(_count_pop_w_tab+1)& (0+255),b
  4435  004374  0E00               	movlw	0
  4436  004376  6F29               	movwf	_count_pop_w_tab& (0+255),b
  4437                           
  4438                           ;sort.c: 401: count_can_w_lab = 0;
  4439  004378  0E00               	movlw	0
  4440  00437A  0101               	movlb	1	; () banked
  4441  00437C  6F26               	movwf	(_count_can_w_lab+1)& (0+255),b
  4442  00437E  0E00               	movlw	0
  4443  004380  6F25               	movwf	_count_can_w_lab& (0+255),b
  4444                           
  4445                           ;sort.c: 402: count_can_no_lab = 0;
  4446  004382  0E00               	movlw	0
  4447  004384  0101               	movlb	1	; () banked
  4448  004386  6F24               	movwf	(_count_can_no_lab+1)& (0+255),b
  4449  004388  0E00               	movlw	0
  4450  00438A  6F23               	movwf	_count_can_no_lab& (0+255),b
  4451                           
  4452                           ;sort.c: 405: most_recent_sort_time = 999;
  4453  00438C  0E03               	movlw	3
  4454  00438E  6E6A               	movwf	_most_recent_sort_time+1,c
  4455  004390  0EE7               	movlw	231
  4456  004392  6E69               	movwf	_most_recent_sort_time,c
  4457                           
  4458                           ;sort.c: 408: servo_timer_counter = 0;
  4459  004394  0E00               	movlw	0
  4460  004396  6E6E               	movwf	_servo_timer_counter+1,c	;volatile
  4461  004398  0E00               	movlw	0
  4462  00439A  6E6D               	movwf	_servo_timer_counter,c	;volatile
  4463                           
  4464                           ;sort.c: 409: servo_timer_target = 9999;
  4465  00439C  0E27               	movlw	39
  4466  00439E  6E70               	movwf	_servo_timer_target+1,c	;volatile
  4467  0043A0  0E0F               	movlw	15
  4468  0043A2  6E6F               	movwf	_servo_timer_target,c	;volatile
  4469                           
  4470                           ;sort.c: 410: timer2_counter = 0;
  4471  0043A4  0E00               	movlw	0
  4472  0043A6  6E74               	movwf	_timer2_counter+1,c	;volatile
  4473  0043A8  0E00               	movlw	0
  4474  0043AA  6E73               	movwf	_timer2_counter,c	;volatile
  4475                           
  4476                           ;sort.c: 411: f_arm_position = 2;
  4477  0043AC  0E00               	movlw	0
  4478  0043AE  0100               	movlb	0	; () banked
  4479  0043B0  6FEF               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
  4480  0043B2  0E02               	movlw	2
  4481  0043B4  6FEE               	movwf	_f_arm_position& (0+255),b	;volatile
  4482                           
  4483                           ; BSR set to: 0
  4484                           ;sort.c: 412: pan_servo_state = -1;
  4485  0043B6  686B               	setf	_pan_servo_state,c	;volatile
  4486  0043B8  686C               	setf	_pan_servo_state+1,c	;volatile
  4487                           
  4488                           ; BSR set to: 0
  4489                           ;sort.c: 413: tilt_servo_state = -1;
  4490  0043BA  6871               	setf	_tilt_servo_state,c	;volatile
  4491  0043BC  6872               	setf	_tilt_servo_state+1,c	;volatile
  4492                           
  4493                           ;sort.c: 414: f_panning_to_bin = 0;
  4494  0043BE  0E00               	movlw	0
  4495  0043C0  6E62               	movwf	_f_panning_to_bin+1,c	;volatile
  4496  0043C2  0E00               	movlw	0
  4497  0043C4  6E61               	movwf	_f_panning_to_bin,c	;volatile
  4498                           
  4499                           ; BSR set to: 0
  4500  0043C6  0012               	return		;funcret
  4501  0043C8                     __end_of_initGlobalVars:
  4502                           	opt stack 0
  4503                           tblptru	equ	0xFF8
  4504                           tblptrh	equ	0xFF7
  4505                           tblptrl	equ	0xFF6
  4506                           tablat	equ	0xFF5
  4507                           prodh	equ	0xFF4
  4508                           prodl	equ	0xFF3
  4509                           postinc0	equ	0xFEE
  4510                           wreg	equ	0xFE8
  4511                           postdec1	equ	0xFE5
  4512                           fsr1l	equ	0xFE1
  4513                           indf2	equ	0xFDF
  4514                           postinc2	equ	0xFDE
  4515                           postdec2	equ	0xFDD
  4516                           fsr2h	equ	0xFDA
  4517                           fsr2l	equ	0xFD9
  4518                           status	equ	0xFD8
  4519                           
  4520 ;; *************** function _getMAG *****************
  4521 ;; Defined at:
  4522 ;;		line 513 in file "sort.c"
  4523 ;; Parameters:    Size  Location     Type
  4524 ;;		None
  4525 ;; Auto vars:     Size  Location     Type
  4526 ;;		None
  4527 ;; Return value:  Size  Location     Type
  4528 ;;                  1    wreg      void 
  4529 ;; Registers used:
  4530 ;;		wreg, status,2, status,0, cstack
  4531 ;; Tracked objects:
  4532 ;;		On entry : 0/0
  4533 ;;		On exit  : 0/0
  4534 ;;		Unchanged: 0/0
  4535 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4536 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4537 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4538 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4539 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4540 ;;Total ram usage:        2 bytes
  4541 ;; Hardware stack levels used:    1
  4542 ;; Hardware stack levels required when called:    9
  4543 ;; This function calls:
  4544 ;;		_readMAG
  4545 ;; This function is called by:
  4546 ;;		_Loading
  4547 ;; This function uses a non-reentrant model
  4548 ;;
  4549                           
  4550                           	psect	text5
  4551  005004                     __ptext5:
  4552                           	opt stack 0
  4553  005004                     _getMAG:
  4554                           	opt stack 19
  4555                           
  4556                           ;sort.c: 514: readMAG();
  4557                           
  4558                           ; BSR set to: 0
  4559                           ;incstack = 0
  4560  005004  EC0D  F027         	call	_readMAG	;wreg free
  4561                           
  4562                           ;sort.c: 516: if(MAG_signal==1){
  4563  005008  0100               	movlb	0	; () banked
  4564  00500A  05E8               	decf	_MAG_signal& (0+255),w,b
  4565  00500C  0100               	movlb	0	; () banked
  4566  00500E  11E9               	iorwf	(_MAG_signal+1)& (0+255),w,b
  4567  005010  A4D8               	btfss	status,2,c
  4568  005012  0012               	return	
  4569                           
  4570                           ; BSR set to: 0
  4571                           ;sort.c: 517: _delay((unsigned long)((500)*(32000000/4000.0)));
  4572  005014  0E15               	movlw	21
  4573  005016  0100               	movlb	0	; () banked
  4574  005018  6F87               	movwf	(??_getMAG+1)& (0+255),b
  4575  00501A  0E4B               	movlw	75
  4576  00501C  0100               	movlb	0	; () banked
  4577  00501E  6F86               	movwf	??_getMAG& (0+255),b
  4578  005020  0EBE               	movlw	190
  4579  005022                     u9327:
  4580  005022  2EE8               	decfsz	wreg,f,c
  4581  005024  D7FE               	bra	u9327
  4582  005026  2F86               	decfsz	??_getMAG& (0+255),f,b
  4583  005028  D7FC               	bra	u9327
  4584  00502A  2F87               	decfsz	(??_getMAG+1)& (0+255),f,b
  4585  00502C  D7FA               	bra	u9327
  4586  00502E  F000               	nop	
  4587                           
  4588                           ;sort.c: 518: readMAG();
  4589  005030  EC0D  F027         	call	_readMAG	;wreg free
  4590  005034  0012               	return	
  4591  005036                     __end_of_getMAG:
  4592                           	opt stack 0
  4593                           tblptru	equ	0xFF8
  4594                           tblptrh	equ	0xFF7
  4595                           tblptrl	equ	0xFF6
  4596                           tablat	equ	0xFF5
  4597                           prodh	equ	0xFF4
  4598                           prodl	equ	0xFF3
  4599                           postinc0	equ	0xFEE
  4600                           wreg	equ	0xFE8
  4601                           postdec1	equ	0xFE5
  4602                           fsr1l	equ	0xFE1
  4603                           indf2	equ	0xFDF
  4604                           postinc2	equ	0xFDE
  4605                           postdec2	equ	0xFDD
  4606                           fsr2h	equ	0xFDA
  4607                           fsr2l	equ	0xFD9
  4608                           status	equ	0xFD8
  4609                           
  4610 ;; *************** function _getIR *****************
  4611 ;; Defined at:
  4612 ;;		line 497 in file "sort.c"
  4613 ;; Parameters:    Size  Location     Type
  4614 ;;		None
  4615 ;; Auto vars:     Size  Location     Type
  4616 ;;  i               2    7[BANK0 ] int 
  4617 ;; Return value:  Size  Location     Type
  4618 ;;                  1    wreg      void 
  4619 ;; Registers used:
  4620 ;;		wreg, status,2, status,0, cstack
  4621 ;; Tracked objects:
  4622 ;;		On entry : 0/0
  4623 ;;		On exit  : 0/0
  4624 ;;		Unchanged: 0/0
  4625 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4626 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4627 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4628 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4629 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4630 ;;Total ram usage:        3 bytes
  4631 ;; Hardware stack levels used:    1
  4632 ;; Hardware stack levels required when called:    9
  4633 ;; This function calls:
  4634 ;;		_readIR
  4635 ;; This function is called by:
  4636 ;;		_Loading
  4637 ;; This function uses a non-reentrant model
  4638 ;;
  4639                           
  4640                           	psect	text6
  4641  00499A                     __ptext6:
  4642                           	opt stack 0
  4643  00499A                     _getIR:
  4644                           	opt stack 19
  4645                           
  4646                           ;sort.c: 498: readIR();
  4647                           
  4648                           ;incstack = 0
  4649  00499A  ECE7  F026         	call	_readIR	;wreg free
  4650                           
  4651                           ;sort.c: 499: for(int i = 0; i < 150; i++){
  4652  00499E  0E00               	movlw	0
  4653  0049A0  0100               	movlb	0	; () banked
  4654  0049A2  6F88               	movwf	(getIR@i+1)& (0+255),b
  4655  0049A4  0E00               	movlw	0
  4656  0049A6  6F87               	movwf	getIR@i& (0+255),b
  4657  0049A8                     l7100:
  4658                           
  4659                           ; BSR set to: 0
  4660  0049A8  0100               	movlb	0	; () banked
  4661  0049AA  BF88               	btfsc	(getIR@i+1)& (0+255),7,b
  4662  0049AC  D008               	goto	l7104
  4663  0049AE  0100               	movlb	0	; () banked
  4664  0049B0  5188               	movf	(getIR@i+1)& (0+255),w,b
  4665  0049B2  E11A               	bnz	l7116
  4666  0049B4  0E96               	movlw	150
  4667  0049B6  0100               	movlb	0	; () banked
  4668  0049B8  5D87               	subwf	getIR@i& (0+255),w,b
  4669  0049BA  B0D8               	btfsc	status,0,c
  4670  0049BC  D015               	goto	l7116
  4671  0049BE                     l7104:
  4672                           
  4673                           ; BSR set to: 0
  4674                           ;sort.c: 500: _delay((unsigned long)((500)*(32000000/4000000.0)));
  4675  0049BE  0E06               	movlw	6
  4676  0049C0  0100               	movlb	0	; () banked
  4677  0049C2  6F86               	movwf	??_getIR& (0+255),b
  4678  0049C4  0E30               	movlw	48
  4679  0049C6                     u9337:
  4680  0049C6  2EE8               	decfsz	wreg,f,c
  4681  0049C8  D7FE               	bra	u9337
  4682  0049CA  2F86               	decfsz	??_getIR& (0+255),f,b
  4683  0049CC  D7FC               	bra	u9337
  4684  0049CE  F000               	nop	
  4685                           
  4686                           ;sort.c: 501: readIR();
  4687  0049D0  ECE7  F026         	call	_readIR	;wreg free
  4688                           
  4689                           ;sort.c: 502: if(!IR_signal){
  4690  0049D4  0100               	movlb	0	; () banked
  4691  0049D6  51E6               	movf	_IR_signal& (0+255),w,b
  4692  0049D8  0100               	movlb	0	; () banked
  4693  0049DA  11E7               	iorwf	(_IR_signal+1)& (0+255),w,b
  4694  0049DC  B4D8               	btfsc	status,2,c
  4695  0049DE  D004               	goto	l7116
  4696                           
  4697                           ; BSR set to: 0
  4698                           
  4699                           ; BSR set to: 0
  4700                           
  4701                           ; BSR set to: 0
  4702                           ;sort.c: 503: break;
  4703  0049E0  0100               	movlb	0	; () banked
  4704  0049E2  4B87               	infsnz	getIR@i& (0+255),f,b
  4705  0049E4  2B88               	incf	(getIR@i+1)& (0+255),f,b
  4706  0049E6  D7E0               	goto	l7100
  4707  0049E8                     l7116:
  4708                           
  4709                           ; BSR set to: 0
  4710                           ;sort.c: 504: }
  4711                           ;sort.c: 505: }
  4712                           ;sort.c: 506: if(IR_signal==1){
  4713  0049E8  0100               	movlb	0	; () banked
  4714  0049EA  05E6               	decf	_IR_signal& (0+255),w,b
  4715  0049EC  0100               	movlb	0	; () banked
  4716  0049EE  11E7               	iorwf	(_IR_signal+1)& (0+255),w,b
  4717  0049F0  A4D8               	btfss	status,2,c
  4718  0049F2  D006               	goto	l7120
  4719                           
  4720                           ; BSR set to: 0
  4721                           ;sort.c: 507: f_loadingNewCan = 1;
  4722  0049F4  0E00               	movlw	0
  4723  0049F6  0100               	movlb	0	; () banked
  4724  0049F8  6FF3               	movwf	(_f_loadingNewCan+1)& (0+255),b
  4725  0049FA  0E01               	movlw	1
  4726  0049FC  6FF2               	movwf	_f_loadingNewCan& (0+255),b
  4727                           
  4728                           ;sort.c: 508: }
  4729  0049FE  0012               	return	
  4730  004A00                     l7120:
  4731                           
  4732                           ; BSR set to: 0
  4733                           ;sort.c: 509: else{
  4734                           ;sort.c: 510: f_loadingNewCan = 0;
  4735  004A00  0E00               	movlw	0
  4736  004A02  0100               	movlb	0	; () banked
  4737  004A04  6FF3               	movwf	(_f_loadingNewCan+1)& (0+255),b
  4738  004A06  0E00               	movlw	0
  4739  004A08  6FF2               	movwf	_f_loadingNewCan& (0+255),b
  4740  004A0A  0012               	return	
  4741  004A0C                     __end_of_getIR:
  4742                           	opt stack 0
  4743                           tblptru	equ	0xFF8
  4744                           tblptrh	equ	0xFF7
  4745                           tblptrl	equ	0xFF6
  4746                           tablat	equ	0xFF5
  4747                           prodh	equ	0xFF4
  4748                           prodl	equ	0xFF3
  4749                           postinc0	equ	0xFEE
  4750                           wreg	equ	0xFE8
  4751                           postdec1	equ	0xFE5
  4752                           fsr1l	equ	0xFE1
  4753                           indf2	equ	0xFDF
  4754                           postinc2	equ	0xFDE
  4755                           postdec2	equ	0xFDD
  4756                           fsr2h	equ	0xFDA
  4757                           fsr2l	equ	0xFD9
  4758                           status	equ	0xFD8
  4759                           
  4760 ;; *************** function _readIR *****************
  4761 ;; Defined at:
  4762 ;;		line 23 in file "ADCFunctionality.c"
  4763 ;; Parameters:    Size  Location     Type
  4764 ;;		None
  4765 ;; Auto vars:     Size  Location     Type
  4766 ;;  res             2    4[BANK0 ] int 
  4767 ;; Return value:  Size  Location     Type
  4768 ;;                  1    wreg      void 
  4769 ;; Registers used:
  4770 ;;		wreg, status,2, status,0, cstack
  4771 ;; Tracked objects:
  4772 ;;		On entry : 0/0
  4773 ;;		On exit  : 0/0
  4774 ;;		Unchanged: 0/0
  4775 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4776 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4777 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4778 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4779 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4780 ;;Total ram usage:        4 bytes
  4781 ;; Hardware stack levels used:    1
  4782 ;; Hardware stack levels required when called:    8
  4783 ;; This function calls:
  4784 ;;		_readADC
  4785 ;; This function is called by:
  4786 ;;		_Loading
  4787 ;;		_getIR
  4788 ;; This function uses a non-reentrant model
  4789 ;;
  4790                           
  4791                           	psect	text7
  4792  004DCE                     __ptext7:
  4793                           	opt stack 0
  4794  004DCE                     _readIR:
  4795                           	opt stack 20
  4796                           
  4797                           ;ADCFunctionality.c: 24: readADC(0);
  4798                           
  4799                           ; BSR set to: 0
  4800                           ;incstack = 0
  4801  004DCE  0E00               	movlw	0
  4802  004DD0  EC68  F029         	call	_readADC
  4803                           
  4804                           ;ADCFunctionality.c: 25: int res = ADRESH<<8 | ADRESL;
  4805  004DD4  50C3               	movf	4035,w,c	;volatile
  4806  004DD6  CFC4 F082          	movff	4036,??_readIR	;volatile
  4807  004DDA  0100               	movlb	0	; () banked
  4808  004DDC  6B83               	clrf	(??_readIR+1)& (0+255),b
  4809  004DDE  C082  F083         	movff	??_readIR,??_readIR+1
  4810  004DE2  0100               	movlb	0	; () banked
  4811  004DE4  6B82               	clrf	??_readIR& (0+255),b
  4812  004DE6  0100               	movlb	0	; () banked
  4813  004DE8  1182               	iorwf	??_readIR& (0+255),w,b
  4814  004DEA  0100               	movlb	0	; () banked
  4815  004DEC  6F84               	movwf	readIR@res& (0+255),b
  4816  004DEE  0100               	movlb	0	; () banked
  4817  004DF0  5183               	movf	(??_readIR+1)& (0+255),w,b
  4818  004DF2  0100               	movlb	0	; () banked
  4819  004DF4  6F85               	movwf	(readIR@res+1)& (0+255),b
  4820                           
  4821                           ; BSR set to: 0
  4822                           ;ADCFunctionality.c: 26: IR_signal = (res > 800) ? 1 : 0;
  4823  004DF6  0100               	movlb	0	; () banked
  4824  004DF8  BF85               	btfsc	(readIR@res+1)& (0+255),7,b
  4825  004DFA  D00A               	goto	u4780
  4826  004DFC  0E21               	movlw	33
  4827  004DFE  0100               	movlb	0	; () banked
  4828  004E00  5D84               	subwf	readIR@res& (0+255),w,b
  4829  004E02  0E03               	movlw	3
  4830  004E04  0100               	movlb	0	; () banked
  4831  004E06  5985               	subwfb	(readIR@res+1)& (0+255),w,b
  4832  004E08  A0D8               	btfss	status,0,c
  4833  004E0A  D002               	goto	u4780
  4834  004E0C  0E01               	movlw	1
  4835  004E0E  D001               	goto	u4790
  4836  004E10                     u4780:
  4837  004E10  0E00               	movlw	0
  4838  004E12                     u4790:
  4839  004E12  0100               	movlb	0	; () banked
  4840  004E14  6FE6               	movwf	_IR_signal& (0+255),b
  4841  004E16  6BE7               	clrf	(_IR_signal+1)& (0+255),b
  4842                           
  4843                           ; BSR set to: 0
  4844  004E18  0012               	return		;funcret
  4845  004E1A                     __end_of_readIR:
  4846                           	opt stack 0
  4847                           tblptru	equ	0xFF8
  4848                           tblptrh	equ	0xFF7
  4849                           tblptrl	equ	0xFF6
  4850                           tablat	equ	0xFF5
  4851                           prodh	equ	0xFF4
  4852                           prodl	equ	0xFF3
  4853                           postinc0	equ	0xFEE
  4854                           wreg	equ	0xFE8
  4855                           postdec1	equ	0xFE5
  4856                           fsr1l	equ	0xFE1
  4857                           indf2	equ	0xFDF
  4858                           postinc2	equ	0xFDE
  4859                           postdec2	equ	0xFDD
  4860                           fsr2h	equ	0xFDA
  4861                           fsr2l	equ	0xFD9
  4862                           status	equ	0xFD8
  4863                           
  4864 ;; *************** function _ID *****************
  4865 ;; Defined at:
  4866 ;;		line 259 in file "sort.c"
  4867 ;; Parameters:    Size  Location     Type
  4868 ;;		None
  4869 ;; Auto vars:     Size  Location     Type
  4870 ;;  i               2    8[BANK0 ] int 
  4871 ;;  i               2    6[BANK0 ] int 
  4872 ;;  i               2    4[BANK0 ] int 
  4873 ;; Return value:  Size  Location     Type
  4874 ;;                  1    wreg      void 
  4875 ;; Registers used:
  4876 ;;		wreg, status,2, status,0, cstack
  4877 ;; Tracked objects:
  4878 ;;		On entry : 0/0
  4879 ;;		On exit  : 0/0
  4880 ;;		Unchanged: 0/0
  4881 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4882 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4883 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4884 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4885 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4886 ;;Total ram usage:        8 bytes
  4887 ;; Hardware stack levels used:    1
  4888 ;; Hardware stack levels required when called:    8
  4889 ;; This function calls:
  4890 ;;		_delay_ms
  4891 ;; This function is called by:
  4892 ;;		_sort
  4893 ;; This function uses a non-reentrant model
  4894 ;;
  4895                           
  4896                           	psect	text8
  4897  002F68                     __ptext8:
  4898                           	opt stack 0
  4899  002F68                     _ID:
  4900                           	opt stack 21
  4901                           
  4902                           ;sort.c: 260: if(f_can_coming_to_ID){
  4903                           
  4904                           ; BSR set to: 0
  4905                           ;incstack = 0
  4906  002F68  0101               	movlb	1	; () banked
  4907  002F6A  5131               	movf	_f_can_coming_to_ID& (0+255),w,b
  4908  002F6C  0101               	movlb	1	; () banked
  4909  002F6E  1132               	iorwf	(_f_can_coming_to_ID+1)& (0+255),w,b
  4910  002F70  B4D8               	btfsc	status,2,c
  4911  002F72  0012               	return	
  4912                           
  4913                           ; BSR set to: 1
  4914                           ;sort.c: 262: _delay((unsigned long)((1000)*(32000000/4000.0)));
  4915  002F74  0E29               	movlw	41
  4916  002F76  0100               	movlb	0	; () banked
  4917  002F78  6F83               	movwf	(??_ID+1)& (0+255),b
  4918  002F7A  0E96               	movlw	150
  4919  002F7C  0100               	movlb	0	; () banked
  4920  002F7E  6F82               	movwf	??_ID& (0+255),b
  4921  002F80  0E7F               	movlw	127
  4922  002F82                     u9347:
  4923  002F82  2EE8               	decfsz	wreg,f,c
  4924  002F84  D7FE               	bra	u9347
  4925  002F86  2F82               	decfsz	??_ID& (0+255),f,b
  4926  002F88  D7FC               	bra	u9347
  4927  002F8A  2F83               	decfsz	(??_ID+1)& (0+255),f,b
  4928  002F8C  D7FA               	bra	u9347
  4929                           
  4930                           ;sort.c: 264: f_arm_position = 0;
  4931  002F8E  0E00               	movlw	0
  4932  002F90  0100               	movlb	0	; () banked
  4933  002F92  6FEF               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
  4934  002F94  0E00               	movlw	0
  4935  002F96  6FEE               	movwf	_f_arm_position& (0+255),b	;volatile
  4936                           
  4937                           ; BSR set to: 0
  4938                           ;sort.c: 266: LATAbits.LATA3 = 1;
  4939  002F98  8689               	bsf	3977,3,c	;volatile
  4940                           
  4941                           ; BSR set to: 0
  4942                           ;sort.c: 267: _delay((unsigned long)((600)*(32000000/4000.0)));
  4943  002F9A  0E19               	movlw	25
  4944  002F9C  0100               	movlb	0	; () banked
  4945  002F9E  6F83               	movwf	(??_ID+1)& (0+255),b
  4946  002FA0  0E5A               	movlw	90
  4947  002FA2  0100               	movlb	0	; () banked
  4948  002FA4  6F82               	movwf	??_ID& (0+255),b
  4949  002FA6  0EB1               	movlw	177
  4950  002FA8                     u9357:
  4951  002FA8  2EE8               	decfsz	wreg,f,c
  4952  002FAA  D7FE               	bra	u9357
  4953  002FAC  2F82               	decfsz	??_ID& (0+255),f,b
  4954  002FAE  D7FC               	bra	u9357
  4955  002FB0  2F83               	decfsz	(??_ID+1)& (0+255),f,b
  4956  002FB2  D7FA               	bra	u9357
  4957  002FB4  D000               	nop2	
  4958                           
  4959                           ;sort.c: 268: sensor_outputs[1] = PORTAbits.RA2;
  4960  002FB6  A480               	btfss	3968,2,c	;volatile
  4961  002FB8  D004               	goto	u6150
  4962  002FBA  0100               	movlb	0	; () banked
  4963  002FBC  6B82               	clrf	??_ID& (0+255),b
  4964  002FBE  2B82               	incf	??_ID& (0+255),f,b
  4965  002FC0  D002               	goto	u6158
  4966  002FC2                     u6150:
  4967  002FC2  0100               	movlb	0	; () banked
  4968  002FC4  6B82               	clrf	??_ID& (0+255),b
  4969  002FC6                     u6158:
  4970  002FC6  0100               	movlb	0	; () banked
  4971  002FC8  5182               	movf	??_ID& (0+255),w,b
  4972  002FCA  0100               	movlb	0	; () banked
  4973  002FCC  6FE4               	movwf	(_sensor_outputs+2)& (0+255),b
  4974  002FCE  6BE5               	clrf	(_sensor_outputs+3)& (0+255),b
  4975                           
  4976                           ; BSR set to: 0
  4977                           ;sort.c: 269: LATAbits.LATA3 = 0;
  4978  002FD0  9689               	bcf	3977,3,c	;volatile
  4979                           
  4980                           ; BSR set to: 0
  4981                           ;sort.c: 271: _delay((unsigned long)((200)*(32000000/4000.0)));
  4982  002FD2  0E09               	movlw	9
  4983  002FD4  0100               	movlb	0	; () banked
  4984  002FD6  6F83               	movwf	(??_ID+1)& (0+255),b
  4985  002FD8  0E1E               	movlw	30
  4986  002FDA  0100               	movlb	0	; () banked
  4987  002FDC  6F82               	movwf	??_ID& (0+255),b
  4988  002FDE  0EE4               	movlw	228
  4989  002FE0                     u9367:
  4990  002FE0  2EE8               	decfsz	wreg,f,c
  4991  002FE2  D7FE               	bra	u9367
  4992  002FE4  2F82               	decfsz	??_ID& (0+255),f,b
  4993  002FE6  D7FC               	bra	u9367
  4994  002FE8  2F83               	decfsz	(??_ID+1)& (0+255),f,b
  4995  002FEA  D7FA               	bra	u9367
  4996  002FEC  F000               	nop	
  4997                           
  4998                           ;sort.c: 272: LATAbits.LATA3 = 1;
  4999  002FEE  8689               	bsf	3977,3,c	;volatile
  5000                           
  5001                           ;sort.c: 273: _delay((unsigned long)((600)*(32000000/4000.0)));
  5002  002FF0  0E19               	movlw	25
  5003  002FF2  0100               	movlb	0	; () banked
  5004  002FF4  6F83               	movwf	(??_ID+1)& (0+255),b
  5005  002FF6  0E5A               	movlw	90
  5006  002FF8  0100               	movlb	0	; () banked
  5007  002FFA  6F82               	movwf	??_ID& (0+255),b
  5008  002FFC  0EB1               	movlw	177
  5009  002FFE                     u9377:
  5010  002FFE  2EE8               	decfsz	wreg,f,c
  5011  003000  D7FE               	bra	u9377
  5012  003002  2F82               	decfsz	??_ID& (0+255),f,b
  5013  003004  D7FC               	bra	u9377
  5014  003006  2F83               	decfsz	(??_ID+1)& (0+255),f,b
  5015  003008  D7FA               	bra	u9377
  5016  00300A  D000               	nop2	
  5017                           
  5018                           ;sort.c: 274: sensor_outputs[1] = (sensor_outputs[1] | PORTAbits.RA2);
  5019  00300C  A480               	btfss	3968,2,c	;volatile
  5020  00300E  D004               	goto	u6160
  5021  003010  0100               	movlb	0	; () banked
  5022  003012  6B82               	clrf	??_ID& (0+255),b
  5023  003014  2B82               	incf	??_ID& (0+255),f,b
  5024  003016  D002               	goto	u6168
  5025  003018                     u6160:
  5026  003018  0100               	movlb	0	; () banked
  5027  00301A  6B82               	clrf	??_ID& (0+255),b
  5028  00301C                     u6168:
  5029  00301C  0100               	movlb	0	; () banked
  5030  00301E  51E4               	movf	(_sensor_outputs+2)& (0+255),w,b
  5031  003020  0100               	movlb	0	; () banked
  5032  003022  1182               	iorwf	??_ID& (0+255),w,b
  5033  003024  0100               	movlb	0	; () banked
  5034  003026  6FE4               	movwf	(_sensor_outputs+2)& (0+255),b
  5035  003028  0100               	movlb	0	; () banked
  5036  00302A  51E5               	movf	(_sensor_outputs+3)& (0+255),w,b
  5037  00302C  0100               	movlb	0	; () banked
  5038  00302E  6FE5               	movwf	(_sensor_outputs+3)& (0+255),b
  5039                           
  5040                           ; BSR set to: 0
  5041                           ;sort.c: 282: if(!sensor_outputs[0]){
  5042  003030  0100               	movlb	0	; () banked
  5043  003032  51E2               	movf	_sensor_outputs& (0+255),w,b
  5044  003034  0100               	movlb	0	; () banked
  5045  003036  11E3               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  5046  003038  A4D8               	btfss	status,2,c
  5047  00303A  D016               	goto	l7648
  5048                           
  5049                           ; BSR set to: 0
  5050                           ;sort.c: 283: if(!sensor_outputs[1]){
  5051  00303C  0100               	movlb	0	; () banked
  5052  00303E  51E4               	movf	(_sensor_outputs+2)& (0+255),w,b
  5053  003040  0100               	movlb	0	; () banked
  5054  003042  11E5               	iorwf	(_sensor_outputs+3)& (0+255),w,b
  5055  003044  A4D8               	btfss	status,2,c
  5056  003046  D008               	goto	l7644
  5057                           
  5058                           ; BSR set to: 0
  5059                           ;sort.c: 284: count_pop_no_tab++;
  5060  003048  0101               	movlb	1	; () banked
  5061  00304A  4B27               	infsnz	_count_pop_no_tab& (0+255),f,b
  5062  00304C  2B28               	incf	(_count_pop_no_tab+1)& (0+255),f,b
  5063                           
  5064                           ; BSR set to: 1
  5065                           ;sort.c: 285: cur_can = 0;
  5066  00304E  0E00               	movlw	0
  5067  003050  0101               	movlb	1	; () banked
  5068  003052  6F2C               	movwf	(_cur_can+1)& (0+255),b
  5069  003054  0E00               	movlw	0
  5070  003056  D007               	goto	L4
  5071  003058                     l7644:
  5072                           
  5073                           ;sort.c: 287: else{
  5074                           ;sort.c: 288: count_pop_w_tab++;
  5075  003058  0101               	movlb	1	; () banked
  5076  00305A  4B29               	infsnz	_count_pop_w_tab& (0+255),f,b
  5077  00305C  2B2A               	incf	(_count_pop_w_tab+1)& (0+255),f,b
  5078                           
  5079                           ; BSR set to: 1
  5080                           ;sort.c: 289: cur_can = 1;
  5081  00305E  0E00               	movlw	0
  5082  003060  0101               	movlb	1	; () banked
  5083  003062  6F2C               	movwf	(_cur_can+1)& (0+255),b
  5084  003064  0E01               	movlw	1
  5085  003066                     L4:
  5086  003066  6F2B               	movwf	_cur_can& (0+255),b
  5087  003068                     l7648:
  5088                           
  5089                           ;sort.c: 290: }
  5090                           ;sort.c: 291: }
  5091                           ;sort.c: 292: if(sensor_outputs[0]){
  5092  003068  0100               	movlb	0	; () banked
  5093  00306A  51E2               	movf	_sensor_outputs& (0+255),w,b
  5094  00306C  0100               	movlb	0	; () banked
  5095  00306E  11E3               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  5096  003070  B4D8               	btfsc	status,2,c
  5097  003072  D016               	goto	l7660
  5098                           
  5099                           ; BSR set to: 0
  5100                           ;sort.c: 293: if(!sensor_outputs[1]){
  5101  003074  0100               	movlb	0	; () banked
  5102  003076  51E4               	movf	(_sensor_outputs+2)& (0+255),w,b
  5103  003078  0100               	movlb	0	; () banked
  5104  00307A  11E5               	iorwf	(_sensor_outputs+3)& (0+255),w,b
  5105  00307C  A4D8               	btfss	status,2,c
  5106  00307E  D008               	goto	l7656
  5107                           
  5108                           ; BSR set to: 0
  5109                           ;sort.c: 294: count_can_w_lab++;
  5110  003080  0101               	movlb	1	; () banked
  5111  003082  4B25               	infsnz	_count_can_w_lab& (0+255),f,b
  5112  003084  2B26               	incf	(_count_can_w_lab+1)& (0+255),f,b
  5113                           
  5114                           ; BSR set to: 1
  5115                           ;sort.c: 295: cur_can = 2;
  5116  003086  0E00               	movlw	0
  5117  003088  0101               	movlb	1	; () banked
  5118  00308A  6F2C               	movwf	(_cur_can+1)& (0+255),b
  5119  00308C  0E02               	movlw	2
  5120  00308E  D007               	goto	L5
  5121  003090                     l7656:
  5122                           
  5123                           ;sort.c: 297: else{
  5124                           ;sort.c: 298: count_can_no_lab++;
  5125  003090  0101               	movlb	1	; () banked
  5126  003092  4B23               	infsnz	_count_can_no_lab& (0+255),f,b
  5127  003094  2B24               	incf	(_count_can_no_lab+1)& (0+255),f,b
  5128                           
  5129                           ; BSR set to: 1
  5130                           ;sort.c: 299: cur_can = 3;
  5131  003096  0E00               	movlw	0
  5132  003098  0101               	movlb	1	; () banked
  5133  00309A  6F2C               	movwf	(_cur_can+1)& (0+255),b
  5134  00309C  0E03               	movlw	3
  5135  00309E                     L5:
  5136  00309E  6F2B               	movwf	_cur_can& (0+255),b
  5137  0030A0                     l7660:
  5138                           
  5139                           ;sort.c: 300: }
  5140                           ;sort.c: 301: }
  5141                           ;sort.c: 302: LATAbits.LATA3 = 0;
  5142  0030A0  9689               	bcf	3977,3,c	;volatile
  5143  0030A2                     l7662:
  5144  0030A2  0101               	movlb	1	; () banked
  5145  0030A4  5135               	movf	_f_can_distributed& (0+255),w,b
  5146  0030A6  0101               	movlb	1	; () banked
  5147  0030A8  1136               	iorwf	(_f_can_distributed+1)& (0+255),w,b
  5148  0030AA  B4D8               	btfsc	status,2,c
  5149  0030AC  D7FA               	goto	l7662
  5150                           
  5151                           ; BSR set to: 1
  5152                           ;sort.c: 306: if(sensor_outputs[0]){
  5153                           
  5154                           ; BSR set to: 1
  5155  0030AE  0100               	movlb	0	; () banked
  5156  0030B0  51E2               	movf	_sensor_outputs& (0+255),w,b
  5157  0030B2  0100               	movlb	0	; () banked
  5158  0030B4  11E3               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  5159  0030B6  B4D8               	btfsc	status,2,c
  5160  0030B8  D020               	goto	l7680
  5161                           
  5162                           ; BSR set to: 0
  5163                           ;sort.c: 308: LATAbits.LATA3 = 1;
  5164  0030BA  8689               	bsf	3977,3,c	;volatile
  5165                           
  5166                           ; BSR set to: 0
  5167                           ;sort.c: 311: for(int i=0;i<10000;i++)
  5168  0030BC  0E00               	movlw	0
  5169  0030BE  0100               	movlb	0	; () banked
  5170  0030C0  6F85               	movwf	(ID@i+1)& (0+255),b
  5171  0030C2  0E00               	movlw	0
  5172  0030C4  6F84               	movwf	ID@i& (0+255),b
  5173  0030C6                     l7670:
  5174                           
  5175                           ; BSR set to: 0
  5176  0030C6  0100               	movlb	0	; () banked
  5177  0030C8  BF85               	btfsc	(ID@i+1)& (0+255),7,b
  5178  0030CA  D008               	goto	l831
  5179  0030CC  0E10               	movlw	16
  5180  0030CE  0100               	movlb	0	; () banked
  5181  0030D0  5D84               	subwf	ID@i& (0+255),w,b
  5182  0030D2  0E27               	movlw	39
  5183  0030D4  0100               	movlb	0	; () banked
  5184  0030D6  5985               	subwfb	(ID@i+1)& (0+255),w,b
  5185  0030D8  B0D8               	btfsc	status,0,c
  5186  0030DA  D00D               	goto	l832
  5187  0030DC                     l831:
  5188                           
  5189                           ; BSR set to: 0
  5190                           ;sort.c: 312: {
  5191                           ;sort.c: 313: LATCbits.LATC0 = 1;
  5192  0030DC  808B               	bsf	3979,0,c	;volatile
  5193                           
  5194                           ; BSR set to: 0
  5195                           ;sort.c: 314: _delay((unsigned long)((10)*(32000000/4000000.0)));
  5196  0030DE  0E1A               	movlw	26
  5197  0030E0                     u9387:
  5198  0030E0  2EE8               	decfsz	wreg,f,c
  5199  0030E2  D7FE               	bra	u9387
  5200  0030E4  D000               	nop2	
  5201                           
  5202                           ;sort.c: 315: LATCbits.LATC0 = 0;
  5203  0030E6  908B               	bcf	3979,0,c	;volatile
  5204                           
  5205                           ;sort.c: 316: _delay((unsigned long)((90)*(32000000/4000000.0)));
  5206  0030E8  0EF0               	movlw	240
  5207  0030EA                     u9397:
  5208  0030EA  2EE8               	decfsz	wreg,f,c
  5209  0030EC  D7FE               	bra	u9397
  5210  0030EE  0100               	movlb	0	; () banked
  5211  0030F0  4B84               	infsnz	ID@i& (0+255),f,b
  5212  0030F2  2B85               	incf	(ID@i+1)& (0+255),f,b
  5213  0030F4  D7E8               	goto	l7670
  5214  0030F6                     l832:
  5215                           
  5216                           ; BSR set to: 0
  5217                           ;sort.c: 317: }
  5218                           ;sort.c: 319: LATAbits.LATA3 = 0;
  5219  0030F6  9689               	bcf	3977,3,c	;volatile
  5220                           
  5221                           ;sort.c: 322: }
  5222  0030F8  D01D               	goto	l833
  5223  0030FA                     l7680:
  5224                           
  5225                           ; BSR set to: 0
  5226                           ;sort.c: 323: else{
  5227                           ;sort.c: 325: for(int i=0;i<10000;i++)
  5228  0030FA  0E00               	movlw	0
  5229  0030FC  0100               	movlb	0	; () banked
  5230  0030FE  6F87               	movwf	(ID@i_1181+1)& (0+255),b
  5231  003100  0E00               	movlw	0
  5232  003102  6F86               	movwf	ID@i_1181& (0+255),b
  5233  003104                     l7682:
  5234                           
  5235                           ; BSR set to: 0
  5236  003104  0100               	movlb	0	; () banked
  5237  003106  BF87               	btfsc	(ID@i_1181+1)& (0+255),7,b
  5238  003108  D008               	goto	l834
  5239  00310A  0E10               	movlw	16
  5240  00310C  0100               	movlb	0	; () banked
  5241  00310E  5D86               	subwf	ID@i_1181& (0+255),w,b
  5242  003110  0E27               	movlw	39
  5243  003112  0100               	movlb	0	; () banked
  5244  003114  5987               	subwfb	(ID@i_1181+1)& (0+255),w,b
  5245  003116  B0D8               	btfsc	status,0,c
  5246  003118  D00D               	goto	l833
  5247  00311A                     l834:
  5248                           
  5249                           ; BSR set to: 0
  5250                           ;sort.c: 326: {
  5251                           ;sort.c: 327: LATCbits.LATC0 = 1;
  5252  00311A  808B               	bsf	3979,0,c	;volatile
  5253                           
  5254                           ; BSR set to: 0
  5255                           ;sort.c: 328: _delay((unsigned long)((10)*(32000000/4000000.0)));
  5256  00311C  0E1A               	movlw	26
  5257  00311E                     u9407:
  5258  00311E  2EE8               	decfsz	wreg,f,c
  5259  003120  D7FE               	bra	u9407
  5260  003122  D000               	nop2	
  5261                           
  5262                           ;sort.c: 329: LATCbits.LATC0 = 0;
  5263  003124  908B               	bcf	3979,0,c	;volatile
  5264                           
  5265                           ;sort.c: 330: _delay((unsigned long)((90)*(32000000/4000000.0)));
  5266  003126  0EF0               	movlw	240
  5267  003128                     u9417:
  5268  003128  2EE8               	decfsz	wreg,f,c
  5269  00312A  D7FE               	bra	u9417
  5270  00312C  0100               	movlb	0	; () banked
  5271  00312E  4B86               	infsnz	ID@i_1181& (0+255),f,b
  5272  003130  2B87               	incf	(ID@i_1181+1)& (0+255),f,b
  5273  003132  D7E8               	goto	l7682
  5274  003134                     l833:
  5275                           
  5276                           ; BSR set to: 0
  5277                           ;sort.c: 331: }
  5278                           ;sort.c: 332: }
  5279                           ;sort.c: 334: LATCbits.LATC0 = 0;
  5280  003134  908B               	bcf	3979,0,c	;volatile
  5281                           
  5282                           ; BSR set to: 0
  5283                           ;sort.c: 336: f_can_coming_to_distribution = 1;
  5284  003136  0E00               	movlw	0
  5285  003138  0101               	movlb	1	; () banked
  5286  00313A  6F34               	movwf	(_f_can_coming_to_distribution+1)& (0+255),b
  5287  00313C  0E01               	movlw	1
  5288  00313E  6F33               	movwf	_f_can_coming_to_distribution& (0+255),b
  5289                           
  5290                           ; BSR set to: 1
  5291                           ;sort.c: 337: _delay((unsigned long)((750)*(32000000/4000.0)));
  5292  003140  0E1F               	movlw	31
  5293  003142  0100               	movlb	0	; () banked
  5294  003144  6F83               	movwf	(??_ID+1)& (0+255),b
  5295  003146  0E71               	movlw	113
  5296  003148  0100               	movlb	0	; () banked
  5297  00314A  6F82               	movwf	??_ID& (0+255),b
  5298  00314C  0E1E               	movlw	30
  5299  00314E                     u9427:
  5300  00314E  2EE8               	decfsz	wreg,f,c
  5301  003150  D7FE               	bra	u9427
  5302  003152  2F82               	decfsz	??_ID& (0+255),f,b
  5303  003154  D7FC               	bra	u9427
  5304  003156  2F83               	decfsz	(??_ID+1)& (0+255),f,b
  5305  003158  D7FA               	bra	u9427
  5306  00315A  F000               	nop	
  5307                           
  5308                           ;sort.c: 338: LATCbits.LATC0 = 1;
  5309  00315C  808B               	bsf	3979,0,c	;volatile
  5310                           
  5311                           ;sort.c: 341: if(!f_lastCan){
  5312  00315E  0100               	movlb	0	; () banked
  5313  003160  51F0               	movf	_f_lastCan& (0+255),w,b
  5314  003162  0100               	movlb	0	; () banked
  5315  003164  11F1               	iorwf	(_f_lastCan+1)& (0+255),w,b
  5316  003166  A4D8               	btfss	status,2,c
  5317  003168  D032               	goto	l7714
  5318                           
  5319                           ; BSR set to: 0
  5320                           ;sort.c: 342: for(int i=0; i<46; i++){
  5321  00316A  0E00               	movlw	0
  5322  00316C  0100               	movlb	0	; () banked
  5323  00316E  6F89               	movwf	(ID@i_1182+1)& (0+255),b
  5324  003170  0E00               	movlw	0
  5325  003172  6F88               	movwf	ID@i_1182& (0+255),b
  5326                           
  5327                           ; BSR set to: 0
  5328  003174  0100               	movlb	0	; () banked
  5329  003176  BF89               	btfsc	(ID@i_1182+1)& (0+255),7,b
  5330  003178  D008               	goto	l7706
  5331  00317A  0100               	movlb	0	; () banked
  5332  00317C  5189               	movf	(ID@i_1182+1)& (0+255),w,b
  5333  00317E  E126               	bnz	l838
  5334  003180  0E2E               	movlw	46
  5335  003182  0100               	movlb	0	; () banked
  5336  003184  5D88               	subwf	ID@i_1182& (0+255),w,b
  5337  003186  B0D8               	btfsc	status,0,c
  5338  003188  D021               	goto	l838
  5339  00318A                     l7706:
  5340                           
  5341                           ; BSR set to: 0
  5342                           ;sort.c: 343: LATBbits.LATB2 = !LATBbits.LATB2;
  5343  00318A  B48A               	btfsc	3978,2,c	;volatile
  5344  00318C  D004               	goto	u6290
  5345  00318E  0100               	movlb	0	; () banked
  5346  003190  6B82               	clrf	??_ID& (0+255),b
  5347  003192  2B82               	incf	??_ID& (0+255),f,b
  5348  003194  D002               	goto	u6308
  5349  003196                     u6290:
  5350  003196  0100               	movlb	0	; () banked
  5351  003198  6B82               	clrf	??_ID& (0+255),b
  5352  00319A                     u6308:
  5353  00319A  0100               	movlb	0	; () banked
  5354  00319C  4782               	rlncf	??_ID& (0+255),f,b
  5355  00319E  4782               	rlncf	??_ID& (0+255),f,b
  5356  0031A0  508A               	movf	3978,w,c	;volatile
  5357  0031A2  0100               	movlb	0	; () banked
  5358  0031A4  1982               	xorwf	??_ID& (0+255),w,b
  5359  0031A6  0BFB               	andlw	-5
  5360  0031A8  1982               	xorwf	??_ID& (0+255),w,b
  5361  0031AA  6E8A               	movwf	3978,c	;volatile
  5362                           
  5363                           ; BSR set to: 0
  5364                           ;sort.c: 344: delay_ms(45-i);
  5365  0031AC  0100               	movlb	0	; () banked
  5366  0031AE  5188               	movf	ID@i_1182& (0+255),w,b
  5367  0031B0  0800               	sublw	0
  5368  0031B2  0F2D               	addlw	45
  5369  0031B4  EC93  F029         	call	_delay_ms
  5370  0031B8  0100               	movlb	0	; () banked
  5371  0031BA  4B88               	infsnz	ID@i_1182& (0+255),f,b
  5372  0031BC  2B89               	incf	(ID@i_1182+1)& (0+255),f,b
  5373                           
  5374                           ; BSR set to: 0
  5375  0031BE  0100               	movlb	0	; () banked
  5376  0031C0  BF89               	btfsc	(ID@i_1182+1)& (0+255),7,b
  5377  0031C2  D7E3               	goto	l7706
  5378  0031C4  0100               	movlb	0	; () banked
  5379  0031C6  5189               	movf	(ID@i_1182+1)& (0+255),w,b
  5380  0031C8  E101               	bnz	u6310
  5381  0031CA  D7DA               	goto	L6
  5382  0031CC                     u6310:
  5383  0031CC                     l838:
  5384                           
  5385                           ; BSR set to: 0
  5386                           ;sort.c: 345: }
  5387                           ;sort.c: 346: LATBbits.LATB2 = 1;
  5388  0031CC  848A               	bsf	3978,2,c	;volatile
  5389  0031CE                     l7714:
  5390                           
  5391                           ; BSR set to: 0
  5392                           ;sort.c: 347: }
  5393                           ;sort.c: 349: f_can_coming_to_ID = 0;
  5394  0031CE  0E00               	movlw	0
  5395  0031D0  0101               	movlb	1	; () banked
  5396  0031D2  6F32               	movwf	(_f_can_coming_to_ID+1)& (0+255),b
  5397  0031D4  0E00               	movlw	0
  5398  0031D6  6F31               	movwf	_f_can_coming_to_ID& (0+255),b
  5399  0031D8  0012               	return	
  5400  0031DA                     __end_of_ID:
  5401                           	opt stack 0
  5402                           tblptru	equ	0xFF8
  5403                           tblptrh	equ	0xFF7
  5404                           tblptrl	equ	0xFF6
  5405                           tablat	equ	0xFF5
  5406                           prodh	equ	0xFF4
  5407                           prodl	equ	0xFF3
  5408                           postinc0	equ	0xFEE
  5409                           wreg	equ	0xFE8
  5410                           postdec1	equ	0xFE5
  5411                           fsr1l	equ	0xFE1
  5412                           indf2	equ	0xFDF
  5413                           postinc2	equ	0xFDE
  5414                           postdec2	equ	0xFDD
  5415                           fsr2h	equ	0xFDA
  5416                           fsr2l	equ	0xFD9
  5417                           status	equ	0xFD8
  5418                           
  5419 ;; *************** function _delay_ms *****************
  5420 ;; Defined at:
  5421 ;;		line 632 in file "sort.c"
  5422 ;; Parameters:    Size  Location     Type
  5423 ;;  milliseconds    1    wreg     unsigned char 
  5424 ;; Auto vars:     Size  Location     Type
  5425 ;;  milliseconds    1    1[BANK0 ] unsigned char 
  5426 ;; Return value:  Size  Location     Type
  5427 ;;                  1    wreg      void 
  5428 ;; Registers used:
  5429 ;;		wreg, status,2, status,0, cstack
  5430 ;; Tracked objects:
  5431 ;;		On entry : 0/0
  5432 ;;		On exit  : 0/0
  5433 ;;		Unchanged: 0/0
  5434 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5435 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5436 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5437 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5438 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5439 ;;Total ram usage:        2 bytes
  5440 ;; Hardware stack levels used:    1
  5441 ;; Hardware stack levels required when called:    7
  5442 ;; This function calls:
  5443 ;;		Nothing
  5444 ;; This function is called by:
  5445 ;;		_Loading
  5446 ;;		_ID
  5447 ;; This function uses a non-reentrant model
  5448 ;;
  5449                           
  5450                           	psect	text9
  5451  005326                     __ptext9:
  5452                           	opt stack 0
  5453  005326                     _delay_ms:
  5454                           	opt stack 21
  5455                           
  5456                           ; BSR set to: 1
  5457                           ;incstack = 0
  5458                           ;delay_ms@milliseconds stored from wreg
  5459  005326  0100               	movlb	0	; () banked
  5460  005328  6F81               	movwf	delay_ms@milliseconds& (0+255),b
  5461                           
  5462                           ;sort.c: 633: while(milliseconds > 0)
  5463  00532A  D00B               	goto	l7072
  5464  00532C                     l7068:
  5465                           
  5466                           ;sort.c: 634: {
  5467                           ;sort.c: 635: milliseconds--;
  5468  00532C  0100               	movlb	0	; () banked
  5469  00532E  0781               	decf	delay_ms@milliseconds& (0+255),f,b
  5470                           
  5471                           ; BSR set to: 0
  5472                           ;sort.c: 636: _delay((unsigned long)((990)*(32000000/4000000.0)));
  5473  005330  0E0B               	movlw	11
  5474  005332  0100               	movlb	0	; () banked
  5475  005334  6F80               	movwf	??_delay_ms& (0+255),b
  5476  005336  0E47               	movlw	71
  5477  005338                     u9437:
  5478  005338  2EE8               	decfsz	wreg,f,c
  5479  00533A  D7FE               	bra	u9437
  5480  00533C  2F80               	decfsz	??_delay_ms& (0+255),f,b
  5481  00533E  D7FC               	bra	u9437
  5482  005340  D000               	nop2	
  5483  005342                     l7072:
  5484  005342  0100               	movlb	0	; () banked
  5485  005344  5181               	movf	delay_ms@milliseconds& (0+255),w,b
  5486  005346  0100               	movlb	0	; () banked
  5487  005348  B4D8               	btfsc	status,2,c
  5488  00534A  0012               	return	
  5489  00534C  D7EF               	goto	l7068
  5490  00534E                     __end_of_delay_ms:
  5491                           	opt stack 0
  5492                           tblptru	equ	0xFF8
  5493                           tblptrh	equ	0xFF7
  5494                           tblptrl	equ	0xFF6
  5495                           tablat	equ	0xFF5
  5496                           prodh	equ	0xFF4
  5497                           prodl	equ	0xFF3
  5498                           postinc0	equ	0xFEE
  5499                           wreg	equ	0xFE8
  5500                           postdec1	equ	0xFE5
  5501                           fsr1l	equ	0xFE1
  5502                           indf2	equ	0xFDF
  5503                           postinc2	equ	0xFDE
  5504                           postdec2	equ	0xFDD
  5505                           fsr2h	equ	0xFDA
  5506                           fsr2l	equ	0xFD9
  5507                           status	equ	0xFD8
  5508                           
  5509 ;; *************** function _Distribution *****************
  5510 ;; Defined at:
  5511 ;;		line 352 in file "sort.c"
  5512 ;; Parameters:    Size  Location     Type
  5513 ;;		None
  5514 ;; Auto vars:     Size  Location     Type
  5515 ;;		None
  5516 ;; Return value:  Size  Location     Type
  5517 ;;                  1    wreg      void 
  5518 ;; Registers used:
  5519 ;;		wreg, status,2, status,0, cstack
  5520 ;; Tracked objects:
  5521 ;;		On entry : 0/0
  5522 ;;		On exit  : 0/0
  5523 ;;		Unchanged: 0/0
  5524 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5525 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5526 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5527 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5528 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5529 ;;Total ram usage:        2 bytes
  5530 ;; Hardware stack levels used:    1
  5531 ;; Hardware stack levels required when called:    8
  5532 ;; This function calls:
  5533 ;;		_updateServoPosition
  5534 ;; This function is called by:
  5535 ;;		_sort
  5536 ;; This function uses a non-reentrant model
  5537 ;;
  5538                           
  5539                           	psect	text10
  5540  00408E                     __ptext10:
  5541                           	opt stack 0
  5542  00408E                     _Distribution:
  5543                           	opt stack 21
  5544                           
  5545                           ;sort.c: 353: if(f_can_coming_to_distribution){
  5546                           
  5547                           ; BSR set to: 0
  5548                           ;incstack = 0
  5549  00408E  0101               	movlb	1	; () banked
  5550  004090  5133               	movf	_f_can_coming_to_distribution& (0+255),w,b
  5551  004092  0101               	movlb	1	; () banked
  5552  004094  1134               	iorwf	(_f_can_coming_to_distribution+1)& (0+255),w,b
  5553  004096  B4D8               	btfsc	status,2,c
  5554  004098  0012               	return	
  5555                           
  5556                           ; BSR set to: 1
  5557                           ;sort.c: 354: f_can_distributed = 0;
  5558  00409A  0E00               	movlw	0
  5559  00409C  0101               	movlb	1	; () banked
  5560  00409E  6F36               	movwf	(_f_can_distributed+1)& (0+255),b
  5561  0040A0  0E00               	movlw	0
  5562  0040A2  6F35               	movwf	_f_can_distributed& (0+255),b
  5563                           
  5564                           ;sort.c: 361: switch(cur_can){
  5565  0040A4  D034               	goto	l7730
  5566  0040A6                     l7720:
  5567                           
  5568                           ;sort.c: 363: updateServoPosition(500, 1);
  5569  0040A6  0E01               	movlw	1
  5570  0040A8  0100               	movlb	0	; () banked
  5571  0040AA  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  5572  0040AC  0EF4               	movlw	244
  5573  0040AE  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  5574  0040B0  0E00               	movlw	0
  5575  0040B2  0100               	movlb	0	; () banked
  5576  0040B4  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  5577  0040B6  0E01               	movlw	1
  5578  0040B8  6F82               	movwf	updateServoPosition@timer& (0+255),b
  5579  0040BA  ECD0  F023         	call	_updateServoPosition	;wreg free
  5580                           
  5581                           ;sort.c: 364: break;
  5582  0040BE  D03E               	goto	l7732
  5583  0040C0                     l7722:
  5584                           
  5585                           ;sort.c: 366: updateServoPosition(850, 1);
  5586  0040C0  0E03               	movlw	3
  5587  0040C2  0100               	movlb	0	; () banked
  5588  0040C4  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  5589  0040C6  0E52               	movlw	82
  5590  0040C8  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  5591  0040CA  0E00               	movlw	0
  5592  0040CC  0100               	movlb	0	; () banked
  5593  0040CE  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  5594  0040D0  0E01               	movlw	1
  5595  0040D2  6F82               	movwf	updateServoPosition@timer& (0+255),b
  5596  0040D4  ECD0  F023         	call	_updateServoPosition	;wreg free
  5597                           
  5598                           ;sort.c: 367: break;
  5599  0040D8  D031               	goto	l7732
  5600  0040DA                     l7724:
  5601                           
  5602                           ;sort.c: 369: updateServoPosition(1670, 1);
  5603  0040DA  0E06               	movlw	6
  5604  0040DC  0100               	movlb	0	; () banked
  5605  0040DE  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  5606  0040E0  0E86               	movlw	134
  5607  0040E2  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  5608  0040E4  0E00               	movlw	0
  5609  0040E6  0100               	movlb	0	; () banked
  5610  0040E8  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  5611  0040EA  0E01               	movlw	1
  5612  0040EC  6F82               	movwf	updateServoPosition@timer& (0+255),b
  5613  0040EE  ECD0  F023         	call	_updateServoPosition	;wreg free
  5614                           
  5615                           ;sort.c: 370: break;
  5616  0040F2  D024               	goto	l7732
  5617  0040F4                     l7726:
  5618                           
  5619                           ;sort.c: 372: updateServoPosition(2400, 1);
  5620  0040F4  0E09               	movlw	9
  5621  0040F6  0100               	movlb	0	; () banked
  5622  0040F8  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  5623  0040FA  0E60               	movlw	96
  5624  0040FC  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  5625  0040FE  0E00               	movlw	0
  5626  004100  0100               	movlb	0	; () banked
  5627  004102  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  5628  004104  0E01               	movlw	1
  5629  004106  6F82               	movwf	updateServoPosition@timer& (0+255),b
  5630  004108  ECD0  F023         	call	_updateServoPosition	;wreg free
  5631                           
  5632                           ;sort.c: 376: }
  5633                           
  5634                           ;sort.c: 375: break;
  5635                           
  5636                           ;sort.c: 374: default:
  5637                           
  5638                           ;sort.c: 373: break;
  5639  00410C  D017               	goto	l7732
  5640  00410E                     l7730:
  5641  00410E  C12B  F088         	movff	_cur_can,??_Distribution
  5642  004112  C12C  F089         	movff	_cur_can+1,??_Distribution+1
  5643                           
  5644                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5645                           ; Switch size 1, requested type "space"
  5646                           ; Number of cases is 1, Range of values is 0 to 0
  5647                           ; switch strategies available:
  5648                           ; Name         Instructions Cycles
  5649                           ; simple_byte            4     3 (average)
  5650                           ;	Chosen strategy is simple_byte
  5651  004116  0100               	movlb	0	; () banked
  5652  004118  5189               	movf	(??_Distribution+1)& (0+255),w,b
  5653  00411A  0A00               	xorlw	0	; case 0
  5654  00411C  A4D8               	btfss	status,2,c
  5655  00411E  D00E               	goto	l7732
  5656                           
  5657                           ; BSR set to: 0
  5658                           ; Switch size 1, requested type "space"
  5659                           ; Number of cases is 4, Range of values is 0 to 3
  5660                           ; switch strategies available:
  5661                           ; Name         Instructions Cycles
  5662                           ; simple_byte           13     7 (average)
  5663                           ;	Chosen strategy is simple_byte
  5664  004120  0100               	movlb	0	; () banked
  5665  004122  5188               	movf	??_Distribution& (0+255),w,b
  5666  004124  0A00               	xorlw	0	; case 0
  5667  004126  B4D8               	btfsc	status,2,c
  5668  004128  D7BE               	goto	l7720
  5669  00412A  0A01               	xorlw	1	; case 1
  5670  00412C  B4D8               	btfsc	status,2,c
  5671  00412E  D7C8               	goto	l7722
  5672  004130  0A03               	xorlw	3	; case 2
  5673  004132  B4D8               	btfsc	status,2,c
  5674  004134  D7D2               	goto	l7724
  5675  004136  0A01               	xorlw	1	; case 3
  5676  004138  B4D8               	btfsc	status,2,c
  5677  00413A  D7DC               	goto	l7726
  5678  00413C                     l7732:
  5679                           
  5680                           ;sort.c: 377: updateServoPosition(1050, 3);
  5681  00413C  0E04               	movlw	4
  5682  00413E  0100               	movlb	0	; () banked
  5683  004140  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  5684  004142  0E1A               	movlw	26
  5685  004144  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  5686  004146  0E00               	movlw	0
  5687  004148  0100               	movlb	0	; () banked
  5688  00414A  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  5689  00414C  0E03               	movlw	3
  5690  00414E  6F82               	movwf	updateServoPosition@timer& (0+255),b
  5691  004150  ECD0  F023         	call	_updateServoPosition	;wreg free
  5692                           
  5693                           ;sort.c: 378: servo_timer_target = 750;
  5694  004154  0E02               	movlw	2
  5695  004156  6E70               	movwf	_servo_timer_target+1,c	;volatile
  5696  004158  0EEE               	movlw	238
  5697  00415A  6E6F               	movwf	_servo_timer_target,c	;volatile
  5698                           
  5699                           ;sort.c: 379: f_panning_to_bin = 1;
  5700  00415C  0E00               	movlw	0
  5701  00415E  6E62               	movwf	_f_panning_to_bin+1,c	;volatile
  5702  004160  0E01               	movlw	1
  5703  004162  6E61               	movwf	_f_panning_to_bin,c	;volatile
  5704                           
  5705                           ;sort.c: 380: f_can_coming_to_distribution = 0;
  5706  004164  0E00               	movlw	0
  5707  004166  0101               	movlb	1	; () banked
  5708  004168  6F34               	movwf	(_f_can_coming_to_distribution+1)& (0+255),b
  5709  00416A  0E00               	movlw	0
  5710  00416C  6F33               	movwf	_f_can_coming_to_distribution& (0+255),b
  5711  00416E  0012               	return	
  5712  004170                     __end_of_Distribution:
  5713                           	opt stack 0
  5714                           tblptru	equ	0xFF8
  5715                           tblptrh	equ	0xFF7
  5716                           tblptrl	equ	0xFF6
  5717                           tablat	equ	0xFF5
  5718                           prodh	equ	0xFF4
  5719                           prodl	equ	0xFF3
  5720                           postinc0	equ	0xFEE
  5721                           wreg	equ	0xFE8
  5722                           postdec1	equ	0xFE5
  5723                           fsr1l	equ	0xFE1
  5724                           indf2	equ	0xFDF
  5725                           postinc2	equ	0xFDE
  5726                           postdec2	equ	0xFDD
  5727                           fsr2h	equ	0xFDA
  5728                           fsr2l	equ	0xFD9
  5729                           status	equ	0xFD8
  5730                           
  5731 ;; *************** function _machineConfig *****************
  5732 ;; Defined at:
  5733 ;;		line 15 in file "MachineConfig.c"
  5734 ;; Parameters:    Size  Location     Type
  5735 ;;		None
  5736 ;; Auto vars:     Size  Location     Type
  5737 ;;		None
  5738 ;; Return value:  Size  Location     Type
  5739 ;;                  1    wreg      void 
  5740 ;; Registers used:
  5741 ;;		wreg, status,2
  5742 ;; Tracked objects:
  5743 ;;		On entry : 0/0
  5744 ;;		On exit  : 0/0
  5745 ;;		Unchanged: 0/0
  5746 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5747 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5748 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5749 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5750 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5751 ;;Total ram usage:        0 bytes
  5752 ;; Hardware stack levels used:    1
  5753 ;; Hardware stack levels required when called:    7
  5754 ;; This function calls:
  5755 ;;		Nothing
  5756 ;; This function is called by:
  5757 ;;		_main
  5758 ;; This function uses a non-reentrant model
  5759 ;;
  5760                           
  5761                           	psect	text11
  5762  004B56                     __ptext11:
  5763                           	opt stack 0
  5764  004B56                     _machineConfig:
  5765                           	opt stack 23
  5766                           
  5767                           ;MachineConfig.c: 17: OSCCON = 0xF0;
  5768                           
  5769                           ; BSR set to: 1
  5770                           ;incstack = 0
  5771  004B56  0EF0               	movlw	240
  5772  004B58  6ED3               	movwf	4051,c	;volatile
  5773                           
  5774                           ;MachineConfig.c: 18: OSCTUNEbits.PLLEN = 1;
  5775  004B5A  8C9B               	bsf	3995,6,c	;volatile
  5776                           
  5777                           ;MachineConfig.c: 22: TRISA = 0b00000111;
  5778  004B5C  0E07               	movlw	7
  5779  004B5E  6E92               	movwf	3986,c	;volatile
  5780                           
  5781                           ;MachineConfig.c: 24: TRISB = 0b11110010;
  5782  004B60  0EF2               	movlw	242
  5783  004B62  6E93               	movwf	3987,c	;volatile
  5784                           
  5785                           ;MachineConfig.c: 27: TRISC = 0x00;
  5786  004B64  0E00               	movlw	0
  5787  004B66  6E94               	movwf	3988,c	;volatile
  5788                           
  5789                           ;MachineConfig.c: 31: TRISD = 0x00;
  5790  004B68  0E00               	movlw	0
  5791  004B6A  6E95               	movwf	3989,c	;volatile
  5792                           
  5793                           ;MachineConfig.c: 34: TRISE = 0x00;
  5794  004B6C  0E00               	movlw	0
  5795  004B6E  6E96               	movwf	3990,c	;volatile
  5796                           
  5797                           ;MachineConfig.c: 37: LATA = 0x00;
  5798  004B70  0E00               	movlw	0
  5799  004B72  6E89               	movwf	3977,c	;volatile
  5800                           
  5801                           ;MachineConfig.c: 38: LATB = 0x00;
  5802  004B74  0E00               	movlw	0
  5803  004B76  6E8A               	movwf	3978,c	;volatile
  5804                           
  5805                           ;MachineConfig.c: 39: LATC = 0x00;
  5806  004B78  0E00               	movlw	0
  5807  004B7A  6E8B               	movwf	3979,c	;volatile
  5808                           
  5809                           ;MachineConfig.c: 40: LATD = 0x00;
  5810  004B7C  0E00               	movlw	0
  5811  004B7E  6E8C               	movwf	3980,c	;volatile
  5812                           
  5813                           ;MachineConfig.c: 41: LATE = 0x00;
  5814  004B80  0E00               	movlw	0
  5815  004B82  6E8D               	movwf	3981,c	;volatile
  5816                           
  5817                           ;MachineConfig.c: 43: nRBPU = 0;
  5818  004B84  9EF1               	bcf	intcon2,7,c	;volatile
  5819                           
  5820                           ;MachineConfig.c: 46: ADCON0 = 0x00;
  5821  004B86  0E00               	movlw	0
  5822  004B88  6EC2               	movwf	4034,c	;volatile
  5823                           
  5824                           ;MachineConfig.c: 47: ADCON1 = 0b00001101;
  5825  004B8A  0E0D               	movlw	13
  5826  004B8C  6EC1               	movwf	4033,c	;volatile
  5827                           
  5828                           ;MachineConfig.c: 50: CVRCON = 0x00;
  5829  004B8E  0E00               	movlw	0
  5830  004B90  6EB5               	movwf	4021,c	;volatile
  5831                           
  5832                           ;MachineConfig.c: 51: CMCONbits.CIS = 0;
  5833  004B92  96B4               	bcf	4020,3,c	;volatile
  5834                           
  5835                           ;MachineConfig.c: 52: ADCON2 = 0b10110001;
  5836  004B94  0EB1               	movlw	177
  5837  004B96  6EC0               	movwf	4032,c	;volatile
  5838                           
  5839                           ;MachineConfig.c: 55: INT1IE = 1;
  5840  004B98  86F0               	bsf	intcon3,3,c	;volatile
  5841                           
  5842                           ;MachineConfig.c: 57: TMR0IE = 1;
  5843  004B9A  8AF2               	bsf	intcon,5,c	;volatile
  5844                           
  5845                           ;MachineConfig.c: 58: TMR1IE = 1;
  5846  004B9C  809D               	bsf	3997,0,c	;volatile
  5847                           
  5848                           ;MachineConfig.c: 59: TMR2IE = 1;
  5849  004B9E  829D               	bsf	3997,1,c	;volatile
  5850                           
  5851                           ;MachineConfig.c: 60: TMR3IE = 1;
  5852  004BA0  82A0               	bsf	4000,1,c	;volatile
  5853                           
  5854                           ;MachineConfig.c: 62: T1CON = 0b10110000;
  5855  004BA2  0EB0               	movlw	176
  5856  004BA4  6ECD               	movwf	4045,c	;volatile
  5857                           
  5858                           ;MachineConfig.c: 63: T2CON = 0b01111011;
  5859  004BA6  0E7B               	movlw	123
  5860  004BA8  6ECA               	movwf	4042,c	;volatile
  5861                           
  5862                           ;MachineConfig.c: 64: PR2 = 0x22;
  5863  004BAA  0E22               	movlw	34
  5864  004BAC  6ECB               	movwf	4043,c	;volatile
  5865                           
  5866                           ;MachineConfig.c: 65: T3CON = 0b10110000;
  5867  004BAE  0EB0               	movlw	176
  5868  004BB0  6EB1               	movwf	4017,c	;volatile
  5869                           
  5870                           ;MachineConfig.c: 66: PEIE = 1;
  5871  004BB2  8CF2               	bsf	intcon,6,c	;volatile
  5872                           
  5873                           ;MachineConfig.c: 67: ADIE = 0;
  5874  004BB4  9C9D               	bcf	3997,6,c	;volatile
  5875                           
  5876                           ;MachineConfig.c: 68: (INTCONbits.GIE = 0);
  5877  004BB6  9EF2               	bcf	intcon,7,c	;volatile
  5878  004BB8  0012               	return		;funcret
  5879  004BBA                     __end_of_machineConfig:
  5880                           	opt stack 0
  5881                           tblptru	equ	0xFF8
  5882                           tblptrh	equ	0xFF7
  5883                           tblptrl	equ	0xFF6
  5884                           tablat	equ	0xFF5
  5885                           prodh	equ	0xFF4
  5886                           prodl	equ	0xFF3
  5887                           intcon	equ	0xFF2
  5888                           intcon2	equ	0xFF1
  5889                           intcon3	equ	0xFF0
  5890                           postinc0	equ	0xFEE
  5891                           wreg	equ	0xFE8
  5892                           postdec1	equ	0xFE5
  5893                           fsr1l	equ	0xFE1
  5894                           indf2	equ	0xFDF
  5895                           postinc2	equ	0xFDE
  5896                           postdec2	equ	0xFDD
  5897                           fsr2h	equ	0xFDA
  5898                           fsr2l	equ	0xFD9
  5899                           status	equ	0xFD8
  5900                           
  5901 ;; *************** function _logRun *****************
  5902 ;; Defined at:
  5903 ;;		line 84 in file "EEPROM.c"
  5904 ;; Parameters:    Size  Location     Type
  5905 ;;		None
  5906 ;; Auto vars:     Size  Location     Type
  5907 ;;  byte_i          1   53[BANK0 ] unsigned char 
  5908 ;;  i               2   55[BANK0 ] int 
  5909 ;;  num             1   49[BANK0 ] unsigned char 
  5910 ;;  addr            2   57[BANK0 ] unsigned short 
  5911 ;;  byte11          1   54[BANK0 ] unsigned char 
  5912 ;;  byte3           1   52[BANK0 ] unsigned char 
  5913 ;;  byte2           1   51[BANK0 ] unsigned char 
  5914 ;;  byte1           1   50[BANK0 ] unsigned char 
  5915 ;; Return value:  Size  Location     Type
  5916 ;;                  1    wreg      void 
  5917 ;; Registers used:
  5918 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5919 ;; Tracked objects:
  5920 ;;		On entry : 0/0
  5921 ;;		On exit  : 0/0
  5922 ;;		Unchanged: 0/0
  5923 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5924 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5925 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5926 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5927 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5928 ;;Total ram usage:       10 bytes
  5929 ;; Hardware stack levels used:    1
  5930 ;; Hardware stack levels required when called:   11
  5931 ;; This function calls:
  5932 ;;		_EEPROM_read
  5933 ;;		_EEPROM_write
  5934 ;; This function is called by:
  5935 ;;		_main
  5936 ;; This function uses a non-reentrant model
  5937 ;;
  5938                           
  5939                           	psect	text12
  5940  003B3A                     __ptext12:
  5941                           	opt stack 0
  5942  003B3A                     _logRun:
  5943                           	opt stack 19
  5944                           
  5945                           ;EEPROM.c: 97: sel = EEPROM_read(0);
  5946                           
  5947                           ;incstack = 0
  5948  003B3A  0E00               	movlw	0
  5949  003B3C  0100               	movlb	0	; () banked
  5950  003B3E  6F81               	movwf	(EEPROM_read@address+1)& (0+255),b
  5951  003B40  0E00               	movlw	0
  5952  003B42  6F80               	movwf	EEPROM_read@address& (0+255),b
  5953  003B44  EC40  F02A         	call	_EEPROM_read	;wreg free
  5954  003B48  0100               	movlb	0	; () banked
  5955  003B4A  6FFD               	movwf	_sel& (0+255),b
  5956                           
  5957                           ; BSR set to: 0
  5958                           ;EEPROM.c: 98: unsigned short addr = 1 + 11 * sel;
  5959  003B4C  0100               	movlb	0	; () banked
  5960  003B4E  51FD               	movf	_sel& (0+255),w,b
  5961  003B50  0D0B               	mullw	11
  5962  003B52  0E01               	movlw	1
  5963  003B54  24F3               	addwf	prodl,w,c
  5964  003B56  0100               	movlb	0	; () banked
  5965  003B58  6FB9               	movwf	logRun@addr& (0+255),b
  5966  003B5A  0E00               	movlw	0
  5967  003B5C  20F4               	addwfc	prodh,w,c
  5968  003B5E  0100               	movlb	0	; () banked
  5969  003B60  6FBA               	movwf	(logRun@addr+1)& (0+255),b
  5970                           
  5971                           ; BSR set to: 0
  5972                           ;EEPROM.c: 101: if (sel < 3){
  5973  003B62  0E03               	movlw	3
  5974  003B64  0100               	movlb	0	; () banked
  5975  003B66  61FD               	cpfslt	_sel& (0+255),b
  5976  003B68  D00E               	goto	l9372
  5977                           
  5978                           ; BSR set to: 0
  5979                           ;EEPROM.c: 102: unsigned char num = sel+1;
  5980  003B6A  0100               	movlb	0	; () banked
  5981  003B6C  29FD               	incf	_sel& (0+255),w,b
  5982  003B6E  0100               	movlb	0	; () banked
  5983  003B70  6FB1               	movwf	logRun@num& (0+255),b
  5984                           
  5985                           ; BSR set to: 0
  5986                           ;EEPROM.c: 103: EEPROM_write(0, num);
  5987  003B72  0E00               	movlw	0
  5988  003B74  0100               	movlb	0	; () banked
  5989  003B76  6FAC               	movwf	(EEPROM_write@address+1)& (0+255),b
  5990  003B78  0E00               	movlw	0
  5991  003B7A  6FAB               	movwf	EEPROM_write@address& (0+255),b
  5992  003B7C  C0B1  F0AD         	movff	logRun@num,EEPROM_write@data
  5993  003B80  ECD3  F01F         	call	_EEPROM_write	;wreg free
  5994                           
  5995                           ;EEPROM.c: 104: }
  5996  003B84  D00A               	goto	l9374
  5997  003B86                     l9372:
  5998                           
  5999                           ;EEPROM.c: 105: else{
  6000                           ;EEPROM.c: 106: EEPROM_write(0, 0);
  6001  003B86  0E00               	movlw	0
  6002  003B88  0100               	movlb	0	; () banked
  6003  003B8A  6FAC               	movwf	(EEPROM_write@address+1)& (0+255),b
  6004  003B8C  0E00               	movlw	0
  6005  003B8E  6FAB               	movwf	EEPROM_write@address& (0+255),b
  6006  003B90  0E00               	movlw	0
  6007  003B92  0100               	movlb	0	; () banked
  6008  003B94  6FAD               	movwf	EEPROM_write@data& (0+255),b
  6009  003B96  ECD3  F01F         	call	_EEPROM_write	;wreg free
  6010  003B9A                     l9374:
  6011                           
  6012                           ;EEPROM.c: 107: }
  6013                           ;EEPROM.c: 110: unsigned char byte1 = 0b10000000 | count_total;
  6014  003B9A  0100               	movlb	0	; () banked
  6015  003B9C  51FE               	movf	_count_total& (0+255),w,b
  6016  003B9E  0980               	iorlw	128
  6017  003BA0  0100               	movlb	0	; () banked
  6018  003BA2  6FB2               	movwf	logRun@byte1& (0+255),b
  6019                           
  6020                           ; BSR set to: 0
  6021                           ;EEPROM.c: 111: EEPROM_write(addr, byte1);
  6022  003BA4  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  6023  003BA8  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  6024  003BAC  C0B2  F0AD         	movff	logRun@byte1,EEPROM_write@data
  6025  003BB0  ECD3  F01F         	call	_EEPROM_write	;wreg free
  6026                           
  6027                           ;EEPROM.c: 112: addr++;
  6028  003BB4  0100               	movlb	0	; () banked
  6029  003BB6  4BB9               	infsnz	logRun@addr& (0+255),f,b
  6030  003BB8  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  6031                           
  6032                           ; BSR set to: 0
  6033                           ;EEPROM.c: 115: unsigned char byte2 = (count_pop_no_tab << 4) | count_pop_w_tab;
  6034  003BBA  0101               	movlb	1	; () banked
  6035  003BBC  3927               	swapf	_count_pop_no_tab& (0+255),w,b
  6036  003BBE  0BF0               	andlw	240
  6037  003BC0  0101               	movlb	1	; () banked
  6038  003BC2  1129               	iorwf	_count_pop_w_tab& (0+255),w,b
  6039  003BC4  0100               	movlb	0	; () banked
  6040  003BC6  6FB3               	movwf	logRun@byte2& (0+255),b
  6041                           
  6042                           ; BSR set to: 0
  6043                           ;EEPROM.c: 116: EEPROM_write(addr, byte2);
  6044  003BC8  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  6045  003BCC  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  6046  003BD0  C0B3  F0AD         	movff	logRun@byte2,EEPROM_write@data
  6047  003BD4  ECD3  F01F         	call	_EEPROM_write	;wreg free
  6048                           
  6049                           ;EEPROM.c: 117: addr++;
  6050  003BD8  0100               	movlb	0	; () banked
  6051  003BDA  4BB9               	infsnz	logRun@addr& (0+255),f,b
  6052  003BDC  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  6053                           
  6054                           ; BSR set to: 0
  6055                           ;EEPROM.c: 118: unsigned char byte3 = (count_can_w_lab << 4) | count_can_no_lab;
  6056  003BDE  0101               	movlb	1	; () banked
  6057  003BE0  3925               	swapf	_count_can_w_lab& (0+255),w,b
  6058  003BE2  0BF0               	andlw	240
  6059  003BE4  0101               	movlb	1	; () banked
  6060  003BE6  1123               	iorwf	_count_can_no_lab& (0+255),w,b
  6061  003BE8  0100               	movlb	0	; () banked
  6062  003BEA  6FB4               	movwf	logRun@byte3& (0+255),b
  6063                           
  6064                           ; BSR set to: 0
  6065                           ;EEPROM.c: 119: EEPROM_write(addr, byte3);
  6066  003BEC  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  6067  003BF0  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  6068  003BF4  C0B4  F0AD         	movff	logRun@byte3,EEPROM_write@data
  6069  003BF8  ECD3  F01F         	call	_EEPROM_write	;wreg free
  6070                           
  6071                           ;EEPROM.c: 120: addr++;
  6072  003BFC  0100               	movlb	0	; () banked
  6073  003BFE  4BB9               	infsnz	logRun@addr& (0+255),f,b
  6074  003C00  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  6075                           
  6076                           ; BSR set to: 0
  6077                           ;EEPROM.c: 123: for(int i = 0; i < 7; i++){
  6078  003C02  0E00               	movlw	0
  6079  003C04  0100               	movlb	0	; () banked
  6080  003C06  6FB8               	movwf	(logRun@i+1)& (0+255),b
  6081  003C08  0E00               	movlw	0
  6082  003C0A  6FB7               	movwf	logRun@i& (0+255),b
  6083                           
  6084                           ; BSR set to: 0
  6085  003C0C  0100               	movlb	0	; () banked
  6086  003C0E  BFB8               	btfsc	(logRun@i+1)& (0+255),7,b
  6087  003C10  D008               	goto	l9398
  6088  003C12  0100               	movlb	0	; () banked
  6089  003C14  51B8               	movf	(logRun@i+1)& (0+255),w,b
  6090  003C16  E128               	bnz	l1105
  6091  003C18  0E07               	movlw	7
  6092  003C1A  0100               	movlb	0	; () banked
  6093  003C1C  5DB7               	subwf	logRun@i& (0+255),w,b
  6094  003C1E  B0D8               	btfsc	status,0,c
  6095  003C20  D023               	goto	l1105
  6096  003C22                     l9398:
  6097                           
  6098                           ; BSR set to: 0
  6099                           ;EEPROM.c: 124: unsigned char byte_i = startTime[i];
  6100  003C22  90D8               	bcf	status,0,c
  6101  003C24  0100               	movlb	0	; () banked
  6102  003C26  35B7               	rlcf	logRun@i& (0+255),w,b
  6103  003C28  6ED9               	movwf	fsr2l,c
  6104  003C2A  0100               	movlb	0	; () banked
  6105  003C2C  35B8               	rlcf	(logRun@i+1)& (0+255),w,b
  6106  003C2E  6EDA               	movwf	fsr2h,c
  6107  003C30  0E0E               	movlw	low _startTime
  6108  003C32  26D9               	addwf	fsr2l,f,c
  6109  003C34  0E01               	movlw	high _startTime
  6110  003C36  22DA               	addwfc	fsr2h,f,c
  6111  003C38  50DF               	movf	indf2,w,c
  6112  003C3A  0100               	movlb	0	; () banked
  6113  003C3C  6FB5               	movwf	logRun@byte_i& (0+255),b
  6114                           
  6115                           ; BSR set to: 0
  6116                           ;EEPROM.c: 125: EEPROM_write(addr, byte_i);
  6117  003C3E  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  6118  003C42  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  6119  003C46  C0B5  F0AD         	movff	logRun@byte_i,EEPROM_write@data
  6120  003C4A  ECD3  F01F         	call	_EEPROM_write	;wreg free
  6121                           
  6122                           ;EEPROM.c: 126: addr++;
  6123  003C4E  0100               	movlb	0	; () banked
  6124  003C50  4BB9               	infsnz	logRun@addr& (0+255),f,b
  6125  003C52  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  6126                           
  6127                           ; BSR set to: 0
  6128  003C54  0100               	movlb	0	; () banked
  6129  003C56  4BB7               	infsnz	logRun@i& (0+255),f,b
  6130  003C58  2BB8               	incf	(logRun@i+1)& (0+255),f,b
  6131                           
  6132                           ; BSR set to: 0
  6133  003C5A  0100               	movlb	0	; () banked
  6134  003C5C  BFB8               	btfsc	(logRun@i+1)& (0+255),7,b
  6135  003C5E  D7E1               	goto	l9398
  6136  003C60  0100               	movlb	0	; () banked
  6137  003C62  51B8               	movf	(logRun@i+1)& (0+255),w,b
  6138  003C64  E101               	bnz	u8670
  6139  003C66  D7D8               	goto	L7
  6140  003C68                     u8670:
  6141  003C68                     l1105:
  6142                           
  6143                           ; BSR set to: 0
  6144                           ;EEPROM.c: 127: }
  6145                           ;EEPROM.c: 130: unsigned char byte11 = total_time;
  6146  003C68  C0FA  F0B6         	movff	_total_time,logRun@byte11
  6147                           
  6148                           ; BSR set to: 0
  6149                           ;EEPROM.c: 131: EEPROM_write(addr, byte11);
  6150  003C6C  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  6151  003C70  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  6152  003C74  C0B6  F0AD         	movff	logRun@byte11,EEPROM_write@data
  6153  003C78  ECD3  F01F         	call	_EEPROM_write	;wreg free
  6154  003C7C  0012               	return		;funcret
  6155  003C7E                     __end_of_logRun:
  6156                           	opt stack 0
  6157                           tblptru	equ	0xFF8
  6158                           tblptrh	equ	0xFF7
  6159                           tblptrl	equ	0xFF6
  6160                           tablat	equ	0xFF5
  6161                           prodh	equ	0xFF4
  6162                           prodl	equ	0xFF3
  6163                           intcon	equ	0xFF2
  6164                           intcon2	equ	0xFF1
  6165                           intcon3	equ	0xFF0
  6166                           postinc0	equ	0xFEE
  6167                           wreg	equ	0xFE8
  6168                           postdec1	equ	0xFE5
  6169                           fsr1l	equ	0xFE1
  6170                           indf2	equ	0xFDF
  6171                           postinc2	equ	0xFDE
  6172                           postdec2	equ	0xFDD
  6173                           fsr2h	equ	0xFDA
  6174                           fsr2l	equ	0xFD9
  6175                           status	equ	0xFD8
  6176                           
  6177 ;; *************** function _EEPROM_write *****************
  6178 ;; Defined at:
  6179 ;;		line 32 in file "EEPROM.c"
  6180 ;; Parameters:    Size  Location     Type
  6181 ;;  address         2   43[BANK0 ] unsigned short 
  6182 ;;  data            1   45[BANK0 ] unsigned char 
  6183 ;; Auto vars:     Size  Location     Type
  6184 ;;  i               1   48[BANK0 ] unsigned char 
  6185 ;;  i               1   47[BANK0 ] unsigned char 
  6186 ;; Return value:  Size  Location     Type
  6187 ;;                  1    wreg      void 
  6188 ;; Registers used:
  6189 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6190 ;; Tracked objects:
  6191 ;;		On entry : 0/0
  6192 ;;		On exit  : 0/0
  6193 ;;		Unchanged: 0/0
  6194 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6195 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6196 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6197 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6198 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6199 ;;Total ram usage:        6 bytes
  6200 ;; Hardware stack levels used:    1
  6201 ;; Hardware stack levels required when called:   10
  6202 ;; This function calls:
  6203 ;;		_EEPROM_read
  6204 ;;		_lcdInst
  6205 ;;		_printf
  6206 ;; This function is called by:
  6207 ;;		_Loading
  6208 ;;		_logRun
  6209 ;; This function uses a non-reentrant model
  6210 ;;
  6211                           
  6212                           	psect	text13
  6213  003FA6                     __ptext13:
  6214                           	opt stack 0
  6215  003FA6                     _EEPROM_write:
  6216                           	opt stack 18
  6217                           
  6218                           ;EEPROM.c: 33: EECON1bits.WREN = 1;
  6219                           
  6220                           ;incstack = 0
  6221  003FA6  84A6               	bsf	4006,2,c	;volatile
  6222                           
  6223                           ;EEPROM.c: 36: EEADRH = (unsigned char)(address >> 8);
  6224  003FA8  0100               	movlb	0	; () banked
  6225  003FAA  51AC               	movf	(EEPROM_write@address+1)& (0+255),w,b
  6226  003FAC  6EAA               	movwf	4010,c	;volatile
  6227                           
  6228                           ; BSR set to: 0
  6229                           ;EEPROM.c: 37: EEADR = (unsigned char)address;
  6230  003FAE  C0AB  FFA9         	movff	EEPROM_write@address,4009	;volatile
  6231                           
  6232                           ; BSR set to: 0
  6233                           ;EEPROM.c: 39: EEDATA = data;
  6234  003FB2  C0AD  FFA8         	movff	EEPROM_write@data,4008	;volatile
  6235                           
  6236                           ; BSR set to: 0
  6237                           ;EEPROM.c: 40: EECON1bits.EEPGD = 0;
  6238  003FB6  9EA6               	bcf	4006,7,c	;volatile
  6239                           
  6240                           ; BSR set to: 0
  6241                           ;EEPROM.c: 41: EECON1bits.CFGS = 0;
  6242  003FB8  9CA6               	bcf	4006,6,c	;volatile
  6243                           
  6244                           ; BSR set to: 0
  6245                           ;EEPROM.c: 43: (INTCONbits.GIE = 0);
  6246  003FBA  9EF2               	bcf	intcon,7,c	;volatile
  6247                           
  6248                           ;EEPROM.c: 45: EECON2 = 0x55;
  6249  003FBC  0E55               	movlw	85
  6250  003FBE  6EA7               	movwf	4007,c	;volatile
  6251                           
  6252                           ;EEPROM.c: 46: EECON2 = 0x0AA;
  6253  003FC0  0EAA               	movlw	170
  6254  003FC2  6EA7               	movwf	4007,c	;volatile
  6255                           
  6256                           ; BSR set to: 0
  6257                           ;EEPROM.c: 47: EECON1bits.WR = 1;
  6258  003FC4  82A6               	bsf	4006,1,c	;volatile
  6259                           
  6260                           ; BSR set to: 0
  6261                           ;EEPROM.c: 48: (INTCONbits.GIE = 1);
  6262  003FC6  8EF2               	bsf	intcon,7,c	;volatile
  6263  003FC8                     l1083:
  6264  003FC8  A8A1               	btfss	4001,4,c	;volatile
  6265  003FCA  D7FE               	goto	l1083
  6266                           
  6267                           ;EEPROM.c: 53: PIR2bits.EEIF = 0;
  6268  003FCC  98A1               	bcf	4001,4,c	;volatile
  6269                           
  6270                           ;EEPROM.c: 54: EECON1bits.WREN = 0;
  6271  003FCE  94A6               	bcf	4006,2,c	;volatile
  6272                           
  6273                           ;EEPROM.c: 57: if(debug){
  6274  003FD0  0101               	movlb	1	; () banked
  6275  003FD2  512D               	movf	_debug& (0+255),w,b
  6276  003FD4  0101               	movlb	1	; () banked
  6277  003FD6  112E               	iorwf	(_debug+1)& (0+255),w,b
  6278  003FD8  B4D8               	btfsc	status,2,c
  6279  003FDA  0012               	return	
  6280                           
  6281                           ; BSR set to: 1
  6282                           ;EEPROM.c: 58: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  6283  003FDC  0E01               	movlw	1
  6284  003FDE  EC72  F02A         	call	_lcdInst
  6285  003FE2  0E68               	movlw	104
  6286  003FE4  0100               	movlb	0	; () banked
  6287  003FE6  6FAE               	movwf	??_EEPROM_write& (0+255),b
  6288  003FE8  0EE4               	movlw	228
  6289  003FEA                     u9447:
  6290  003FEA  2EE8               	decfsz	wreg,f,c
  6291  003FEC  D7FE               	bra	u9447
  6292  003FEE  2FAE               	decfsz	??_EEPROM_write& (0+255),f,b
  6293  003FF0  D7FC               	bra	u9447
  6294  003FF2  F000               	nop	
  6295                           
  6296                           ;EEPROM.c: 59: lcdInst(0b10000000);;
  6297  003FF4  0E80               	movlw	128
  6298  003FF6  EC72  F02A         	call	_lcdInst
  6299                           
  6300                           ;EEPROM.c: 60: if(EEPROM_read(address)==data){
  6301  003FFA  C0AB  F080         	movff	EEPROM_write@address,EEPROM_read@address
  6302  003FFE  C0AC  F081         	movff	EEPROM_write@address+1,EEPROM_read@address+1
  6303  004002  EC40  F02A         	call	_EEPROM_read	;wreg free
  6304  004006  0100               	movlb	0	; () banked
  6305  004008  19AD               	xorwf	EEPROM_write@data& (0+255),w,b
  6306  00400A  A4D8               	btfss	status,2,c
  6307  00400C  D024               	goto	l7054
  6308                           
  6309                           ; BSR set to: 0
  6310                           ;EEPROM.c: 61: printf("(data: %u, addr: %u)", data, address);
  6311  00400E  0EE8               	movlw	low STR_66
  6312  004010  0100               	movlb	0	; () banked
  6313  004012  6F8E               	movwf	printf@f& (0+255),b
  6314  004014  0EFA               	movlw	high STR_66
  6315  004016  0100               	movlb	0	; () banked
  6316  004018  6F8F               	movwf	(printf@f+1)& (0+255),b
  6317  00401A  C0AD  F090         	movff	EEPROM_write@data,?_printf+2
  6318  00401E  0100               	movlb	0	; () banked
  6319  004020  6B91               	clrf	(?_printf+3)& (0+255),b
  6320  004022  C0AB  F092         	movff	EEPROM_write@address,?_printf+4
  6321  004026  C0AC  F093         	movff	EEPROM_write@address+1,?_printf+5
  6322  00402A  EC1E  F00B         	call	_printf	;wreg free
  6323                           
  6324                           ;EEPROM.c: 62: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));}
      +                          ;
  6325  00402E  0E00               	movlw	0
  6326  004030  0100               	movlb	0	; () banked
  6327  004032  6FAF               	movwf	EEPROM_write@i& (0+255),b
  6328  004034                     l7046:
  6329                           
  6330                           ; BSR set to: 0
  6331  004034  0E63               	movlw	99
  6332  004036  0100               	movlb	0	; () banked
  6333  004038  65AF               	cpfsgt	EEPROM_write@i& (0+255),b
  6334  00403A  D001               	goto	l7050
  6335  00403C  0012               	return	
  6336  00403E                     l7050:
  6337                           
  6338                           ; BSR set to: 0
  6339  00403E  0E68               	movlw	104
  6340  004040  0100               	movlb	0	; () banked
  6341  004042  6FAE               	movwf	??_EEPROM_write& (0+255),b
  6342  004044  0EE4               	movlw	228
  6343  004046                     u9457:
  6344  004046  2EE8               	decfsz	wreg,f,c
  6345  004048  D7FE               	bra	u9457
  6346  00404A  2FAE               	decfsz	??_EEPROM_write& (0+255),f,b
  6347  00404C  D7FC               	bra	u9457
  6348  00404E  F000               	nop	
  6349  004050  0100               	movlb	0	; () banked
  6350  004052  2BAF               	incf	EEPROM_write@i& (0+255),f,b
  6351  004054  D7EF               	goto	l7046
  6352  004056                     l7054:
  6353                           
  6354                           ; BSR set to: 0
  6355                           ;EEPROM.c: 64: else{ printf("FAILED"); for(char i=0;i<100;i++){_delay((unsigned long)((1
      +                          0)*(32000000/4000.0)));}; }
  6356  004056  0EBC               	movlw	low STR_67
  6357  004058  0100               	movlb	0	; () banked
  6358  00405A  6F8E               	movwf	printf@f& (0+255),b
  6359  00405C  0EFF               	movlw	high STR_67
  6360  00405E  0100               	movlb	0	; () banked
  6361  004060  6F8F               	movwf	(printf@f+1)& (0+255),b
  6362  004062  EC1E  F00B         	call	_printf	;wreg free
  6363  004066  0E00               	movlw	0
  6364  004068  0100               	movlb	0	; () banked
  6365  00406A  6FB0               	movwf	EEPROM_write@i_1436& (0+255),b
  6366  00406C                     l7058:
  6367                           
  6368                           ; BSR set to: 0
  6369  00406C  0E63               	movlw	99
  6370  00406E  0100               	movlb	0	; () banked
  6371  004070  65B0               	cpfsgt	EEPROM_write@i_1436& (0+255),b
  6372  004072  D001               	goto	l7062
  6373  004074  0012               	return	
  6374  004076                     l7062:
  6375                           
  6376                           ; BSR set to: 0
  6377  004076  0E68               	movlw	104
  6378  004078  0100               	movlb	0	; () banked
  6379  00407A  6FAE               	movwf	??_EEPROM_write& (0+255),b
  6380  00407C  0EE4               	movlw	228
  6381  00407E                     u9467:
  6382  00407E  2EE8               	decfsz	wreg,f,c
  6383  004080  D7FE               	bra	u9467
  6384  004082  2FAE               	decfsz	??_EEPROM_write& (0+255),f,b
  6385  004084  D7FC               	bra	u9467
  6386  004086  F000               	nop	
  6387  004088  0100               	movlb	0	; () banked
  6388  00408A  2BB0               	incf	EEPROM_write@i_1436& (0+255),f,b
  6389  00408C  D7EF               	goto	l7058
  6390  00408E                     __end_of_EEPROM_write:
  6391                           	opt stack 0
  6392                           tblptru	equ	0xFF8
  6393                           tblptrh	equ	0xFF7
  6394                           tblptrl	equ	0xFF6
  6395                           tablat	equ	0xFF5
  6396                           prodh	equ	0xFF4
  6397                           prodl	equ	0xFF3
  6398                           intcon	equ	0xFF2
  6399                           intcon2	equ	0xFF1
  6400                           intcon3	equ	0xFF0
  6401                           postinc0	equ	0xFEE
  6402                           wreg	equ	0xFE8
  6403                           postdec1	equ	0xFE5
  6404                           fsr1l	equ	0xFE1
  6405                           indf2	equ	0xFDF
  6406                           postinc2	equ	0xFDE
  6407                           postdec2	equ	0xFDD
  6408                           fsr2h	equ	0xFDA
  6409                           fsr2l	equ	0xFD9
  6410                           status	equ	0xFD8
  6411                           
  6412 ;; *************** function _EEPROM_read *****************
  6413 ;; Defined at:
  6414 ;;		line 68 in file "EEPROM.c"
  6415 ;; Parameters:    Size  Location     Type
  6416 ;;  address         2    0[BANK0 ] unsigned short 
  6417 ;; Auto vars:     Size  Location     Type
  6418 ;;		None
  6419 ;; Return value:  Size  Location     Type
  6420 ;;                  1    wreg      unsigned char 
  6421 ;; Registers used:
  6422 ;;		wreg, status,2
  6423 ;; Tracked objects:
  6424 ;;		On entry : 0/0
  6425 ;;		On exit  : 0/0
  6426 ;;		Unchanged: 0/0
  6427 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6428 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6429 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6430 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6431 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6432 ;;Total ram usage:        2 bytes
  6433 ;; Hardware stack levels used:    1
  6434 ;; Hardware stack levels required when called:    7
  6435 ;; This function calls:
  6436 ;;		Nothing
  6437 ;; This function is called by:
  6438 ;;		_Loading
  6439 ;;		_EEPROM_write
  6440 ;;		_logRun
  6441 ;; This function uses a non-reentrant model
  6442 ;;
  6443                           
  6444                           	psect	text14
  6445  005480                     __ptext14:
  6446                           	opt stack 0
  6447  005480                     _EEPROM_read:
  6448                           	opt stack 20
  6449                           
  6450                           ;EEPROM.c: 70: EEADRH = (unsigned char)(address >> 8);
  6451                           
  6452                           ;incstack = 0
  6453  005480  0100               	movlb	0	; () banked
  6454  005482  5181               	movf	(EEPROM_read@address+1)& (0+255),w,b
  6455  005484  6EAA               	movwf	4010,c	;volatile
  6456                           
  6457                           ; BSR set to: 0
  6458                           ;EEPROM.c: 71: EEADR = (unsigned char)address;
  6459  005486  C080  FFA9         	movff	EEPROM_read@address,4009	;volatile
  6460                           
  6461                           ; BSR set to: 0
  6462                           ;EEPROM.c: 73: EECON1bits.EEPGD = 0;
  6463  00548A  9EA6               	bcf	4006,7,c	;volatile
  6464                           
  6465                           ; BSR set to: 0
  6466                           ;EEPROM.c: 74: EECON1bits.CFGS = 0;
  6467  00548C  9CA6               	bcf	4006,6,c	;volatile
  6468                           
  6469                           ; BSR set to: 0
  6470                           ;EEPROM.c: 75: EECON1bits.RD = 1;
  6471  00548E  80A6               	bsf	4006,0,c	;volatile
  6472  005490                     l1096:
  6473  005490  B0A6               	btfsc	4006,0,c	;volatile
  6474  005492  D7FE               	goto	l1096
  6475                           
  6476                           ;EEPROM.c: 81: return EEDATA;
  6477  005494  50A8               	movf	4008,w,c	;volatile
  6478  005496  0012               	return	
  6479  005498                     __end_of_EEPROM_read:
  6480                           	opt stack 0
  6481                           tblptru	equ	0xFF8
  6482                           tblptrh	equ	0xFF7
  6483                           tblptrl	equ	0xFF6
  6484                           tablat	equ	0xFF5
  6485                           prodh	equ	0xFF4
  6486                           prodl	equ	0xFF3
  6487                           intcon	equ	0xFF2
  6488                           intcon2	equ	0xFF1
  6489                           intcon3	equ	0xFF0
  6490                           postinc0	equ	0xFEE
  6491                           wreg	equ	0xFE8
  6492                           postdec1	equ	0xFE5
  6493                           fsr1l	equ	0xFE1
  6494                           indf2	equ	0xFDF
  6495                           postinc2	equ	0xFDE
  6496                           postdec2	equ	0xFDD
  6497                           fsr2h	equ	0xFDA
  6498                           fsr2l	equ	0xFD9
  6499                           status	equ	0xFD8
  6500                           
  6501 ;; *************** function _initUI *****************
  6502 ;; Defined at:
  6503 ;;		line 62 in file "UI.c"
  6504 ;; Parameters:    Size  Location     Type
  6505 ;;		None
  6506 ;; Auto vars:     Size  Location     Type
  6507 ;;		None
  6508 ;; Return value:  Size  Location     Type
  6509 ;;                  1    wreg      void 
  6510 ;; Registers used:
  6511 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6512 ;; Tracked objects:
  6513 ;;		On entry : 0/0
  6514 ;;		On exit  : 0/0
  6515 ;;		Unchanged: 0/0
  6516 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6517 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6518 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6519 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6520 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6521 ;;Total ram usage:        0 bytes
  6522 ;; Hardware stack levels used:    1
  6523 ;; Hardware stack levels required when called:   12
  6524 ;; This function calls:
  6525 ;;		_change_state_to_menu_start
  6526 ;;		_loadRTC
  6527 ;; This function is called by:
  6528 ;;		_main
  6529 ;; This function uses a non-reentrant model
  6530 ;;
  6531                           
  6532                           	psect	text15
  6533  005068                     __ptext15:
  6534                           	opt stack 0
  6535  005068                     _initUI:
  6536                           	opt stack 18
  6537                           
  6538                           ;UI.c: 63: (INTCONbits.GIE = 1);
  6539                           
  6540                           ;incstack = 0
  6541  005068  8EF2               	bsf	intcon,7,c	;volatile
  6542                           
  6543                           ;UI.c: 64: machine_state = UI_state;
  6544  00506A  0E00               	movlw	0
  6545  00506C  0100               	movlb	0	; () banked
  6546  00506E  6FFC               	movwf	_machine_state& (0+255),b
  6547                           
  6548                           ;UI.c: 65: logstate = 0;
  6549  005070  0E00               	movlw	0
  6550  005072  0100               	movlb	0	; () banked
  6551  005074  6FF9               	movwf	(_logstate+1)& (0+255),b
  6552  005076  0E00               	movlw	0
  6553  005078  6FF8               	movwf	_logstate& (0+255),b
  6554                           
  6555                           ; BSR set to: 0
  6556                           ;UI.c: 67: if(RTCflag){
  6557  00507A  0100               	movlb	0	; () banked
  6558  00507C  51EA               	movf	_RTCflag& (0+255),w,b
  6559  00507E  0100               	movlb	0	; () banked
  6560  005080  11EB               	iorwf	(_RTCflag+1)& (0+255),w,b
  6561  005082  A4D8               	btfss	status,2,c
  6562                           
  6563                           ; BSR set to: 0
  6564                           ;UI.c: 68: loadRTC();
  6565  005084  EC47  F023         	call	_loadRTC	;wreg free
  6566                           
  6567                           ;UI.c: 69: }
  6568                           ;UI.c: 71: change_state_to_menu_start();
  6569  005088  EC52  F029         	call	_change_state_to_menu_start	;wreg free
  6570                           
  6571                           ;UI.c: 72: firstboot = 1;
  6572  00508C  0E00               	movlw	0
  6573  00508E  0101               	movlb	1	; () banked
  6574  005090  6F3C               	movwf	(_firstboot+1)& (0+255),b
  6575  005092  0E01               	movlw	1
  6576  005094  6F3B               	movwf	_firstboot& (0+255),b
  6577                           
  6578                           ; BSR set to: 1
  6579  005096  0012               	return		;funcret
  6580  005098                     __end_of_initUI:
  6581                           	opt stack 0
  6582                           tblptru	equ	0xFF8
  6583                           tblptrh	equ	0xFF7
  6584                           tblptrl	equ	0xFF6
  6585                           tablat	equ	0xFF5
  6586                           prodh	equ	0xFF4
  6587                           prodl	equ	0xFF3
  6588                           intcon	equ	0xFF2
  6589                           intcon2	equ	0xFF1
  6590                           intcon3	equ	0xFF0
  6591                           postinc0	equ	0xFEE
  6592                           wreg	equ	0xFE8
  6593                           postdec1	equ	0xFE5
  6594                           fsr1l	equ	0xFE1
  6595                           indf2	equ	0xFDF
  6596                           postinc2	equ	0xFDE
  6597                           postdec2	equ	0xFDD
  6598                           fsr2h	equ	0xFDA
  6599                           fsr2l	equ	0xFD9
  6600                           status	equ	0xFD8
  6601                           
  6602 ;; *************** function _loadRTC *****************
  6603 ;; Defined at:
  6604 ;;		line 28 in file "RTC.c"
  6605 ;; Parameters:    Size  Location     Type
  6606 ;;		None
  6607 ;; Auto vars:     Size  Location     Type
  6608 ;;  i               2   22[BANK0 ] int 
  6609 ;; Return value:  Size  Location     Type
  6610 ;;                  1    wreg      void 
  6611 ;; Registers used:
  6612 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6613 ;; Tracked objects:
  6614 ;;		On entry : 0/0
  6615 ;;		On exit  : 0/0
  6616 ;;		Unchanged: 0/0
  6617 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6618 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6619 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6620 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6621 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6622 ;;Total ram usage:        3 bytes
  6623 ;; Hardware stack levels used:    1
  6624 ;; Hardware stack levels required when called:    9
  6625 ;; This function calls:
  6626 ;;		_I2C_Master_Init
  6627 ;;		_I2C_Master_Start
  6628 ;;		_I2C_Master_Stop
  6629 ;;		_I2C_Master_Write
  6630 ;; This function is called by:
  6631 ;;		_initUI
  6632 ;; This function uses a non-reentrant model
  6633 ;;
  6634                           
  6635                           	psect	text16
  6636  00468E                     __ptext16:
  6637                           	opt stack 0
  6638  00468E                     _loadRTC:
  6639                           	opt stack 20
  6640                           
  6641                           ;RTC.c: 30: I2C_Master_Init(10000);
  6642                           
  6643                           ; BSR set to: 1
  6644                           ;incstack = 0
  6645  00468E  0E10               	movlw	16
  6646  004690  0100               	movlb	0	; () banked
  6647  004692  6F8D               	movwf	I2C_Master_Init@c& (0+255),b
  6648  004694  0E27               	movlw	39
  6649  004696  6F8E               	movwf	(I2C_Master_Init@c+1)& (0+255),b
  6650  004698  0E00               	movlw	0
  6651  00469A  6F8F               	movwf	(I2C_Master_Init@c+2)& (0+255),b
  6652  00469C  0E00               	movlw	0
  6653  00469E  6F90               	movwf	(I2C_Master_Init@c+3)& (0+255),b
  6654  0046A0  EC0E  F026         	call	_I2C_Master_Init	;wreg free
  6655                           
  6656                           ;RTC.c: 32: (INTCONbits.GIE = 0);
  6657  0046A4  9EF2               	bcf	intcon,7,c	;volatile
  6658                           
  6659                           ;RTC.c: 34: I2C_Master_Start();
  6660  0046A6  EC98  F02A         	call	_I2C_Master_Start	;wreg free
  6661                           
  6662                           ;RTC.c: 35: I2C_Master_Write(0b11010000);
  6663  0046AA  0E00               	movlw	0
  6664  0046AC  0100               	movlb	0	; () banked
  6665  0046AE  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  6666  0046B0  0ED0               	movlw	208
  6667  0046B2  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  6668  0046B4  EC86  F02A         	call	_I2C_Master_Write	;wreg free
  6669                           
  6670                           ;RTC.c: 36: I2C_Master_Write(0x00);
  6671  0046B8  0E00               	movlw	0
  6672  0046BA  0100               	movlb	0	; () banked
  6673  0046BC  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  6674  0046BE  0E00               	movlw	0
  6675  0046C0  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  6676  0046C2  EC86  F02A         	call	_I2C_Master_Write	;wreg free
  6677                           
  6678                           ;RTC.c: 37: for(int i = 0; i<7; i++){
  6679  0046C6  0E00               	movlw	0
  6680  0046C8  0100               	movlb	0	; () banked
  6681  0046CA  6F97               	movwf	(loadRTC@i+1)& (0+255),b
  6682  0046CC  0E00               	movlw	0
  6683  0046CE  6F96               	movwf	loadRTC@i& (0+255),b
  6684  0046D0                     l7208:
  6685                           
  6686                           ; BSR set to: 0
  6687  0046D0  0100               	movlb	0	; () banked
  6688  0046D2  BF97               	btfsc	(loadRTC@i+1)& (0+255),7,b
  6689  0046D4  D008               	goto	l7212
  6690  0046D6  0100               	movlb	0	; () banked
  6691  0046D8  5197               	movf	(loadRTC@i+1)& (0+255),w,b
  6692  0046DA  E11B               	bnz	l7218
  6693  0046DC  0E07               	movlw	7
  6694  0046DE  0100               	movlb	0	; () banked
  6695  0046E0  5D96               	subwf	loadRTC@i& (0+255),w,b
  6696  0046E2  B0D8               	btfsc	status,0,c
  6697  0046E4  D016               	goto	l7218
  6698  0046E6                     l7212:
  6699                           
  6700                           ; BSR set to: 0
  6701                           ;RTC.c: 38: I2C_Master_Write(time[i]);
  6702  0046E6  0E1C               	movlw	low _time
  6703  0046E8  0100               	movlb	0	; () banked
  6704  0046EA  2596               	addwf	loadRTC@i& (0+255),w,b
  6705  0046EC  6ED9               	movwf	fsr2l,c
  6706  0046EE  0E01               	movlw	high _time
  6707  0046F0  0100               	movlb	0	; () banked
  6708  0046F2  2197               	addwfc	(loadRTC@i+1)& (0+255),w,b
  6709  0046F4  6EDA               	movwf	fsr2h,c
  6710  0046F6  50DF               	movf	indf2,w,c
  6711  0046F8  0100               	movlb	0	; () banked
  6712  0046FA  6F95               	movwf	??_loadRTC& (0+255),b
  6713  0046FC  0100               	movlb	0	; () banked
  6714  0046FE  5195               	movf	??_loadRTC& (0+255),w,b
  6715  004700  0100               	movlb	0	; () banked
  6716  004702  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  6717  004704  6B82               	clrf	(I2C_Master_Write@d+1)& (0+255),b
  6718  004706  EC86  F02A         	call	_I2C_Master_Write	;wreg free
  6719  00470A  0100               	movlb	0	; () banked
  6720  00470C  4B96               	infsnz	loadRTC@i& (0+255),f,b
  6721  00470E  2B97               	incf	(loadRTC@i+1)& (0+255),f,b
  6722  004710  D7DF               	goto	l7208
  6723  004712                     l7218:
  6724                           
  6725                           ; BSR set to: 0
  6726                           ;RTC.c: 39: }
  6727                           ;RTC.c: 40: I2C_Master_Stop();
  6728  004712  EC94  F02A         	call	_I2C_Master_Stop	;wreg free
  6729                           
  6730                           ;RTC.c: 41: (INTCONbits.GIE = 1);
  6731  004716  8EF2               	bsf	intcon,7,c	;volatile
  6732  004718  0012               	return		;funcret
  6733  00471A                     __end_of_loadRTC:
  6734                           	opt stack 0
  6735                           tblptru	equ	0xFF8
  6736                           tblptrh	equ	0xFF7
  6737                           tblptrl	equ	0xFF6
  6738                           tablat	equ	0xFF5
  6739                           prodh	equ	0xFF4
  6740                           prodl	equ	0xFF3
  6741                           intcon	equ	0xFF2
  6742                           intcon2	equ	0xFF1
  6743                           intcon3	equ	0xFF0
  6744                           postinc0	equ	0xFEE
  6745                           wreg	equ	0xFE8
  6746                           postdec1	equ	0xFE5
  6747                           fsr1l	equ	0xFE1
  6748                           indf2	equ	0xFDF
  6749                           postinc2	equ	0xFDE
  6750                           postdec2	equ	0xFDD
  6751                           fsr2h	equ	0xFDA
  6752                           fsr2l	equ	0xFD9
  6753                           status	equ	0xFD8
  6754                           
  6755 ;; *************** function _I2C_Master_Init *****************
  6756 ;; Defined at:
  6757 ;;		line 15 in file "I2C.c"
  6758 ;; Parameters:    Size  Location     Type
  6759 ;;  c               4   13[BANK0 ] const unsigned long 
  6760 ;; Auto vars:     Size  Location     Type
  6761 ;;		None
  6762 ;; Return value:  Size  Location     Type
  6763 ;;                  1    wreg      void 
  6764 ;; Registers used:
  6765 ;;		wreg, status,2, status,0, cstack
  6766 ;; Tracked objects:
  6767 ;;		On entry : 0/0
  6768 ;;		On exit  : 0/0
  6769 ;;		Unchanged: 0/0
  6770 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6771 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6772 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6773 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6774 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6775 ;;Total ram usage:        8 bytes
  6776 ;; Hardware stack levels used:    1
  6777 ;; Hardware stack levels required when called:    8
  6778 ;; This function calls:
  6779 ;;		___lldiv
  6780 ;; This function is called by:
  6781 ;;		_main
  6782 ;;		_loadRTC
  6783 ;; This function uses a non-reentrant model
  6784 ;;
  6785                           
  6786                           	psect	text17
  6787  004C1C                     __ptext17:
  6788                           	opt stack 0
  6789  004C1C                     _I2C_Master_Init:
  6790                           	opt stack 20
  6791                           
  6792                           ;I2C.c: 18: SSPSTAT = 0b00000000;
  6793                           
  6794                           ;incstack = 0
  6795  004C1C  0E00               	movlw	0
  6796  004C1E  6EC7               	movwf	4039,c	;volatile
  6797                           
  6798                           ;I2C.c: 19: SSPCON1 = 0b00101000;
  6799  004C20  0E28               	movlw	40
  6800  004C22  6EC6               	movwf	4038,c	;volatile
  6801                           
  6802                           ;I2C.c: 20: SSPCON2 = 0b00000000;
  6803  004C24  0E00               	movlw	0
  6804  004C26  6EC5               	movwf	4037,c	;volatile
  6805                           
  6806                           ;I2C.c: 21: SSPADD = (32000000/(4*c))-1;
  6807  004C28  0E00               	movlw	0
  6808  004C2A  0100               	movlb	0	; () banked
  6809  004C2C  6F80               	movwf	___lldiv@dividend& (0+255),b
  6810  004C2E  0E48               	movlw	72
  6811  004C30  6F81               	movwf	(___lldiv@dividend+1)& (0+255),b
  6812  004C32  0EE8               	movlw	232
  6813  004C34  6F82               	movwf	(___lldiv@dividend+2)& (0+255),b
  6814  004C36  0E01               	movlw	1
  6815  004C38  6F83               	movwf	(___lldiv@dividend+3)& (0+255),b
  6816  004C3A  C08D  F091         	movff	I2C_Master_Init@c,??_I2C_Master_Init
  6817  004C3E  C08E  F092         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
  6818  004C42  C08F  F093         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
  6819  004C46  C090  F094         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
  6820  004C4A  0E02               	movlw	2
  6821  004C4C                     u5475:
  6822  004C4C  90D8               	bcf	status,0,c
  6823  004C4E  0100               	movlb	0	; () banked
  6824  004C50  3791               	rlcf	??_I2C_Master_Init& (0+255),f,b
  6825  004C52  3792               	rlcf	(??_I2C_Master_Init+1)& (0+255),f,b
  6826  004C54  3793               	rlcf	(??_I2C_Master_Init+2)& (0+255),f,b
  6827  004C56  3794               	rlcf	(??_I2C_Master_Init+3)& (0+255),f,b
  6828  004C58  2EE8               	decfsz	wreg,f,c
  6829  004C5A  D7F8               	goto	u5475
  6830  004C5C  C091  F084         	movff	??_I2C_Master_Init,___lldiv@divisor
  6831  004C60  C092  F085         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  6832  004C64  C093  F086         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  6833  004C68  C094  F087         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  6834  004C6C  EC43  F022         	call	___lldiv	;wreg free
  6835  004C70  0100               	movlb	0	; () banked
  6836  004C72  0580               	decf	?___lldiv& (0+255),w,b
  6837  004C74  6EC8               	movwf	4040,c	;volatile
  6838                           
  6839                           ; BSR set to: 0
  6840                           ;I2C.c: 22: TRISC3 = 1;
  6841  004C76  8694               	bsf	3988,3,c	;volatile
  6842                           
  6843                           ; BSR set to: 0
  6844                           ;I2C.c: 23: TRISC4 = 1;
  6845  004C78  8894               	bsf	3988,4,c	;volatile
  6846                           
  6847                           ; BSR set to: 0
  6848  004C7A  0012               	return		;funcret
  6849  004C7C                     __end_of_I2C_Master_Init:
  6850                           	opt stack 0
  6851                           tblptru	equ	0xFF8
  6852                           tblptrh	equ	0xFF7
  6853                           tblptrl	equ	0xFF6
  6854                           tablat	equ	0xFF5
  6855                           prodh	equ	0xFF4
  6856                           prodl	equ	0xFF3
  6857                           intcon	equ	0xFF2
  6858                           intcon2	equ	0xFF1
  6859                           intcon3	equ	0xFF0
  6860                           postinc0	equ	0xFEE
  6861                           wreg	equ	0xFE8
  6862                           postdec1	equ	0xFE5
  6863                           fsr1l	equ	0xFE1
  6864                           indf2	equ	0xFDF
  6865                           postinc2	equ	0xFDE
  6866                           postdec2	equ	0xFDD
  6867                           fsr2h	equ	0xFDA
  6868                           fsr2l	equ	0xFD9
  6869                           status	equ	0xFD8
  6870                           
  6871 ;; *************** function ___lldiv *****************
  6872 ;; Defined at:
  6873 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lldiv.c"
  6874 ;; Parameters:    Size  Location     Type
  6875 ;;  dividend        4    0[BANK0 ] unsigned long 
  6876 ;;  divisor         4    4[BANK0 ] unsigned long 
  6877 ;; Auto vars:     Size  Location     Type
  6878 ;;  quotient        4    8[BANK0 ] unsigned long 
  6879 ;;  counter         1   12[BANK0 ] unsigned char 
  6880 ;; Return value:  Size  Location     Type
  6881 ;;                  4    0[BANK0 ] unsigned long 
  6882 ;; Registers used:
  6883 ;;		wreg, status,2, status,0
  6884 ;; Tracked objects:
  6885 ;;		On entry : 0/0
  6886 ;;		On exit  : 0/0
  6887 ;;		Unchanged: 0/0
  6888 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6889 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6890 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6891 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6892 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6893 ;;Total ram usage:       13 bytes
  6894 ;; Hardware stack levels used:    1
  6895 ;; Hardware stack levels required when called:    7
  6896 ;; This function calls:
  6897 ;;		Nothing
  6898 ;; This function is called by:
  6899 ;;		_I2C_Master_Init
  6900 ;; This function uses a non-reentrant model
  6901 ;;
  6902                           
  6903                           	psect	text18
  6904  004486                     __ptext18:
  6905                           	opt stack 0
  6906  004486                     ___lldiv:
  6907                           	opt stack 20
  6908                           
  6909                           ; BSR set to: 0
  6910                           ;incstack = 0
  6911  004486  0E00               	movlw	0
  6912  004488  0100               	movlb	0	; () banked
  6913  00448A  6F88               	movwf	___lldiv@quotient& (0+255),b
  6914  00448C  0E00               	movlw	0
  6915  00448E  6F89               	movwf	(___lldiv@quotient+1)& (0+255),b
  6916  004490  0E00               	movlw	0
  6917  004492  6F8A               	movwf	(___lldiv@quotient+2)& (0+255),b
  6918  004494  0E00               	movlw	0
  6919  004496  6F8B               	movwf	(___lldiv@quotient+3)& (0+255),b
  6920                           
  6921                           ; BSR set to: 0
  6922  004498  0100               	movlb	0	; () banked
  6923  00449A  5184               	movf	___lldiv@divisor& (0+255),w,b
  6924  00449C  0100               	movlb	0	; () banked
  6925  00449E  1185               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
  6926  0044A0  0100               	movlb	0	; () banked
  6927  0044A2  1186               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
  6928  0044A4  0100               	movlb	0	; () banked
  6929  0044A6  1187               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
  6930  0044A8  B4D8               	btfsc	status,2,c
  6931  0044AA  D042               	goto	l1864
  6932                           
  6933                           ; BSR set to: 0
  6934  0044AC  0E01               	movlw	1
  6935  0044AE  0100               	movlb	0	; () banked
  6936  0044B0  6F8C               	movwf	___lldiv@counter& (0+255),b
  6937  0044B2  D008               	goto	l6612
  6938  0044B4                     l6610:
  6939                           
  6940                           ; BSR set to: 0
  6941  0044B4  0100               	movlb	0	; () banked
  6942  0044B6  90D8               	bcf	status,0,c
  6943  0044B8  3784               	rlcf	___lldiv@divisor& (0+255),f,b
  6944  0044BA  3785               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
  6945  0044BC  3786               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
  6946  0044BE  3787               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
  6947  0044C0  0100               	movlb	0	; () banked
  6948  0044C2  2B8C               	incf	___lldiv@counter& (0+255),f,b
  6949  0044C4                     l6612:
  6950                           
  6951                           ; BSR set to: 0
  6952  0044C4  0100               	movlb	0	; () banked
  6953  0044C6  AF87               	btfss	(___lldiv@divisor+3)& (0+255),7,b
  6954  0044C8  D7F5               	goto	l6610
  6955  0044CA                     l6614:
  6956                           
  6957                           ; BSR set to: 0
  6958  0044CA  0100               	movlb	0	; () banked
  6959  0044CC  90D8               	bcf	status,0,c
  6960  0044CE  3788               	rlcf	___lldiv@quotient& (0+255),f,b
  6961  0044D0  3789               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
  6962  0044D2  378A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
  6963  0044D4  378B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
  6964                           
  6965                           ; BSR set to: 0
  6966  0044D6  0100               	movlb	0	; () banked
  6967  0044D8  5184               	movf	___lldiv@divisor& (0+255),w,b
  6968  0044DA  0100               	movlb	0	; () banked
  6969  0044DC  5D80               	subwf	___lldiv@dividend& (0+255),w,b
  6970  0044DE  0100               	movlb	0	; () banked
  6971  0044E0  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  6972  0044E2  0100               	movlb	0	; () banked
  6973  0044E4  5981               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
  6974  0044E6  0100               	movlb	0	; () banked
  6975  0044E8  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  6976  0044EA  0100               	movlb	0	; () banked
  6977  0044EC  5982               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
  6978  0044EE  0100               	movlb	0	; () banked
  6979  0044F0  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  6980  0044F2  0100               	movlb	0	; () banked
  6981  0044F4  5983               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
  6982  0044F6  A0D8               	btfss	status,0,c
  6983  0044F8  D012               	goto	l6622
  6984                           
  6985                           ; BSR set to: 0
  6986  0044FA  0100               	movlb	0	; () banked
  6987  0044FC  5184               	movf	___lldiv@divisor& (0+255),w,b
  6988  0044FE  0100               	movlb	0	; () banked
  6989  004500  5F80               	subwf	___lldiv@dividend& (0+255),f,b
  6990  004502  0100               	movlb	0	; () banked
  6991  004504  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  6992  004506  0100               	movlb	0	; () banked
  6993  004508  5B81               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
  6994  00450A  0100               	movlb	0	; () banked
  6995  00450C  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  6996  00450E  0100               	movlb	0	; () banked
  6997  004510  5B82               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
  6998  004512  0100               	movlb	0	; () banked
  6999  004514  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  7000  004516  0100               	movlb	0	; () banked
  7001  004518  5B83               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
  7002                           
  7003                           ; BSR set to: 0
  7004  00451A  0100               	movlb	0	; () banked
  7005  00451C  8188               	bsf	___lldiv@quotient& (0+255),0,b
  7006  00451E                     l6622:
  7007                           
  7008                           ; BSR set to: 0
  7009  00451E  0100               	movlb	0	; () banked
  7010  004520  90D8               	bcf	status,0,c
  7011  004522  3387               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
  7012  004524  3386               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
  7013  004526  3385               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
  7014  004528  3384               	rrcf	___lldiv@divisor& (0+255),f,b
  7015                           
  7016                           ; BSR set to: 0
  7017  00452A  0100               	movlb	0	; () banked
  7018  00452C  2F8C               	decfsz	___lldiv@counter& (0+255),f,b
  7019  00452E  D7CD               	goto	l6614
  7020  004530                     l1864:
  7021                           
  7022                           ; BSR set to: 0
  7023  004530  C088  F080         	movff	___lldiv@quotient,?___lldiv
  7024  004534  C089  F081         	movff	___lldiv@quotient+1,?___lldiv+1
  7025  004538  C08A  F082         	movff	___lldiv@quotient+2,?___lldiv+2
  7026  00453C  C08B  F083         	movff	___lldiv@quotient+3,?___lldiv+3
  7027                           
  7028                           ; BSR set to: 0
  7029  004540  0012               	return		;funcret
  7030  004542                     __end_of___lldiv:
  7031                           	opt stack 0
  7032                           tblptru	equ	0xFF8
  7033                           tblptrh	equ	0xFF7
  7034                           tblptrl	equ	0xFF6
  7035                           tablat	equ	0xFF5
  7036                           prodh	equ	0xFF4
  7037                           prodl	equ	0xFF3
  7038                           intcon	equ	0xFF2
  7039                           intcon2	equ	0xFF1
  7040                           intcon3	equ	0xFF0
  7041                           postinc0	equ	0xFEE
  7042                           wreg	equ	0xFE8
  7043                           postdec1	equ	0xFE5
  7044                           fsr1l	equ	0xFE1
  7045                           indf2	equ	0xFDF
  7046                           postinc2	equ	0xFDE
  7047                           postdec2	equ	0xFDD
  7048                           fsr2h	equ	0xFDA
  7049                           fsr2l	equ	0xFD9
  7050                           status	equ	0xFD8
  7051                           
  7052 ;; *************** function _change_state_to_menu_start *****************
  7053 ;; Defined at:
  7054 ;;		line 477 in file "UI.c"
  7055 ;; Parameters:    Size  Location     Type
  7056 ;;		None
  7057 ;; Auto vars:     Size  Location     Type
  7058 ;;		None
  7059 ;; Return value:  Size  Location     Type
  7060 ;;                  1    wreg      void 
  7061 ;; Registers used:
  7062 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7063 ;; Tracked objects:
  7064 ;;		On entry : 0/0
  7065 ;;		On exit  : 0/0
  7066 ;;		Unchanged: 0/0
  7067 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7068 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7069 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7070 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7071 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7072 ;;Total ram usage:        0 bytes
  7073 ;; Hardware stack levels used:    1
  7074 ;; Hardware stack levels required when called:   11
  7075 ;; This function calls:
  7076 ;;		_lcdInst
  7077 ;;		_printRTC
  7078 ;;		_printf
  7079 ;; This function is called by:
  7080 ;;		_initUI
  7081 ;; This function uses a non-reentrant model
  7082 ;;
  7083                           
  7084                           	psect	text19
  7085  0052A4                     __ptext19:
  7086                           	opt stack 0
  7087  0052A4                     _change_state_to_menu_start:
  7088                           	opt stack 18
  7089                           
  7090                           ;UI.c: 478: cur_state = 0;
  7091                           
  7092                           ; BSR set to: 0
  7093                           ;incstack = 0
  7094  0052A4  0E00               	movlw	0
  7095  0052A6  0100               	movlb	0	; () banked
  7096  0052A8  6FED               	movwf	(_cur_state+1)& (0+255),b
  7097  0052AA  0E00               	movlw	0
  7098  0052AC  6FEC               	movwf	_cur_state& (0+255),b
  7099                           
  7100                           ; BSR set to: 0
  7101                           ;UI.c: 480: lcdInst(0b10000000);;
  7102  0052AE  0E80               	movlw	128
  7103  0052B0  EC72  F02A         	call	_lcdInst
  7104                           
  7105                           ;UI.c: 481: printRTC();
  7106  0052B4  EC9B  F013         	call	_printRTC	;wreg free
  7107                           
  7108                           ;UI.c: 482: lcdInst(0b11000000);;
  7109  0052B8  0EC0               	movlw	192
  7110  0052BA  EC72  F02A         	call	_lcdInst
  7111                           
  7112                           ;UI.c: 483: printf("PUSH TO CONTINUE");
  7113  0052BE  0E01               	movlw	low STR_30
  7114  0052C0  0100               	movlb	0	; () banked
  7115  0052C2  6F8E               	movwf	printf@f& (0+255),b
  7116  0052C4  0EFE               	movlw	high STR_30
  7117  0052C6  0100               	movlb	0	; () banked
  7118  0052C8  6F8F               	movwf	(printf@f+1)& (0+255),b
  7119  0052CA  EC1E  F00B         	call	_printf	;wreg free
  7120  0052CE  0012               	return		;funcret
  7121  0052D0                     __end_of_change_state_to_menu_start:
  7122                           	opt stack 0
  7123                           tblptru	equ	0xFF8
  7124                           tblptrh	equ	0xFF7
  7125                           tblptrl	equ	0xFF6
  7126                           tablat	equ	0xFF5
  7127                           prodh	equ	0xFF4
  7128                           prodl	equ	0xFF3
  7129                           intcon	equ	0xFF2
  7130                           intcon2	equ	0xFF1
  7131                           intcon3	equ	0xFF0
  7132                           postinc0	equ	0xFEE
  7133                           wreg	equ	0xFE8
  7134                           postdec1	equ	0xFE5
  7135                           fsr1l	equ	0xFE1
  7136                           indf2	equ	0xFDF
  7137                           postinc2	equ	0xFDE
  7138                           postdec2	equ	0xFDD
  7139                           fsr2h	equ	0xFDA
  7140                           fsr2l	equ	0xFD9
  7141                           status	equ	0xFD8
  7142                           
  7143 ;; *************** function _initTime *****************
  7144 ;; Defined at:
  7145 ;;		line 17 in file "RTC.c"
  7146 ;; Parameters:    Size  Location     Type
  7147 ;;  s               1    wreg     unsigned char 
  7148 ;;  m               1    0[BANK0 ] unsigned char 
  7149 ;;  h               1    1[BANK0 ] unsigned char 
  7150 ;;  w               1    2[BANK0 ] unsigned char 
  7151 ;;  DD              1    3[BANK0 ] unsigned char 
  7152 ;;  MM              1    4[BANK0 ] unsigned char 
  7153 ;;  YY              1    5[BANK0 ] unsigned char 
  7154 ;; Auto vars:     Size  Location     Type
  7155 ;;  s               1    6[BANK0 ] unsigned char 
  7156 ;; Return value:  Size  Location     Type
  7157 ;;                  1    wreg      void 
  7158 ;; Registers used:
  7159 ;;		wreg
  7160 ;; Tracked objects:
  7161 ;;		On entry : 0/0
  7162 ;;		On exit  : 0/0
  7163 ;;		Unchanged: 0/0
  7164 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7165 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7166 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7167 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7168 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7169 ;;Total ram usage:        7 bytes
  7170 ;; Hardware stack levels used:    1
  7171 ;; Hardware stack levels required when called:    7
  7172 ;; This function calls:
  7173 ;;		Nothing
  7174 ;; This function is called by:
  7175 ;;		_main
  7176 ;; This function uses a non-reentrant model
  7177 ;;
  7178                           
  7179                           	psect	text20
  7180  005408                     __ptext20:
  7181                           	opt stack 0
  7182  005408                     _initTime:
  7183                           	opt stack 23
  7184                           
  7185                           ;incstack = 0
  7186                           ;initTime@s stored from wreg
  7187  005408  0100               	movlb	0	; () banked
  7188  00540A  6F86               	movwf	initTime@s& (0+255),b
  7189                           
  7190                           ;RTC.c: 19: time[0] = s;
  7191  00540C  C086  F11C         	movff	initTime@s,_time
  7192                           
  7193                           ;RTC.c: 20: time[1] = m;
  7194  005410  C080  F11D         	movff	initTime@m,_time+1
  7195                           
  7196                           ;RTC.c: 21: time[2] = h;
  7197  005414  C081  F11E         	movff	initTime@h,_time+2
  7198                           
  7199                           ;RTC.c: 22: time[3] = w;
  7200  005418  C082  F11F         	movff	initTime@w,_time+3
  7201                           
  7202                           ;RTC.c: 23: time[4] = DD;
  7203  00541C  C083  F120         	movff	initTime@DD,_time+4
  7204                           
  7205                           ;RTC.c: 24: time[5] = MM;
  7206  005420  C084  F121         	movff	initTime@MM,_time+5
  7207                           
  7208                           ;RTC.c: 25: time[6] = YY;
  7209  005424  C085  F122         	movff	initTime@YY,_time+6
  7210  005428  0012               	return		;funcret
  7211  00542A                     __end_of_initTime:
  7212                           	opt stack 0
  7213                           tblptru	equ	0xFF8
  7214                           tblptrh	equ	0xFF7
  7215                           tblptrl	equ	0xFF6
  7216                           tablat	equ	0xFF5
  7217                           prodh	equ	0xFF4
  7218                           prodl	equ	0xFF3
  7219                           intcon	equ	0xFF2
  7220                           intcon2	equ	0xFF1
  7221                           intcon3	equ	0xFF0
  7222                           postinc0	equ	0xFEE
  7223                           wreg	equ	0xFE8
  7224                           postdec1	equ	0xFE5
  7225                           fsr1l	equ	0xFE1
  7226                           indf2	equ	0xFDF
  7227                           postinc2	equ	0xFDE
  7228                           postdec2	equ	0xFDD
  7229                           fsr2h	equ	0xFDA
  7230                           fsr2l	equ	0xFD9
  7231                           status	equ	0xFD8
  7232                           
  7233 ;; *************** function _initLCD *****************
  7234 ;; Defined at:
  7235 ;;		line 48 in file "lcd.c"
  7236 ;; Parameters:    Size  Location     Type
  7237 ;;		None
  7238 ;; Auto vars:     Size  Location     Type
  7239 ;;		None
  7240 ;; Return value:  Size  Location     Type
  7241 ;;                  1    wreg      void 
  7242 ;; Registers used:
  7243 ;;		wreg, status,2, status,0, cstack
  7244 ;; Tracked objects:
  7245 ;;		On entry : 0/0
  7246 ;;		On exit  : 0/0
  7247 ;;		Unchanged: 0/0
  7248 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7249 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7250 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7251 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7252 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7253 ;;Total ram usage:        1 bytes
  7254 ;; Hardware stack levels used:    1
  7255 ;; Hardware stack levels required when called:    9
  7256 ;; This function calls:
  7257 ;;		_lcdInst
  7258 ;; This function is called by:
  7259 ;;		_main
  7260 ;; This function uses a non-reentrant model
  7261 ;;
  7262                           
  7263                           	psect	text21
  7264  004E66                     __ptext21:
  7265                           	opt stack 0
  7266  004E66                     _initLCD:
  7267                           	opt stack 21
  7268                           
  7269                           ;lcd.c: 49: _delay((unsigned long)((15)*(32000000/4000.0)));
  7270                           
  7271                           ;incstack = 0
  7272  004E66  0E9C               	movlw	156
  7273  004E68  0100               	movlb	0	; () banked
  7274  004E6A  6F83               	movwf	??_initLCD& (0+255),b
  7275  004E6C  0ED7               	movlw	215
  7276  004E6E                     u9477:
  7277  004E6E  2EE8               	decfsz	wreg,f,c
  7278  004E70  D7FE               	bra	u9477
  7279  004E72  2F83               	decfsz	??_initLCD& (0+255),f,b
  7280  004E74  D7FC               	bra	u9477
  7281                           
  7282                           ;lcd.c: 50: lcdInst(0b00110011);
  7283  004E76  0E33               	movlw	51
  7284  004E78  EC72  F02A         	call	_lcdInst
  7285                           
  7286                           ;lcd.c: 51: lcdInst(0b00110010);
  7287  004E7C  0E32               	movlw	50
  7288  004E7E  EC72  F02A         	call	_lcdInst
  7289                           
  7290                           ;lcd.c: 53: lcdInst(0b00101000);
  7291  004E82  0E28               	movlw	40
  7292  004E84  EC72  F02A         	call	_lcdInst
  7293                           
  7294                           ;lcd.c: 54: lcdInst(0b00001100);
  7295  004E88  0E0C               	movlw	12
  7296  004E8A  EC72  F02A         	call	_lcdInst
  7297                           
  7298                           ;lcd.c: 55: lcdInst(0b00000110);
  7299  004E8E  0E06               	movlw	6
  7300  004E90  EC72  F02A         	call	_lcdInst
  7301                           
  7302                           ;lcd.c: 56: lcdInst(0b00000001);
  7303  004E94  0E01               	movlw	1
  7304  004E96  EC72  F02A         	call	_lcdInst
  7305                           
  7306                           ;lcd.c: 57: _delay((unsigned long)((15)*(32000000/4000.0)));
  7307  004E9A  0E9C               	movlw	156
  7308  004E9C  0100               	movlb	0	; () banked
  7309  004E9E  6F83               	movwf	??_initLCD& (0+255),b
  7310  004EA0  0ED7               	movlw	215
  7311  004EA2                     u9487:
  7312  004EA2  2EE8               	decfsz	wreg,f,c
  7313  004EA4  D7FE               	bra	u9487
  7314  004EA6  2F83               	decfsz	??_initLCD& (0+255),f,b
  7315  004EA8  D7FC               	bra	u9487
  7316  004EAA  0012               	return		;funcret
  7317  004EAC                     __end_of_initLCD:
  7318                           	opt stack 0
  7319                           tblptru	equ	0xFF8
  7320                           tblptrh	equ	0xFF7
  7321                           tblptrl	equ	0xFF6
  7322                           tablat	equ	0xFF5
  7323                           prodh	equ	0xFF4
  7324                           prodl	equ	0xFF3
  7325                           intcon	equ	0xFF2
  7326                           intcon2	equ	0xFF1
  7327                           intcon3	equ	0xFF0
  7328                           postinc0	equ	0xFEE
  7329                           wreg	equ	0xFE8
  7330                           postdec1	equ	0xFE5
  7331                           fsr1l	equ	0xFE1
  7332                           indf2	equ	0xFDF
  7333                           postinc2	equ	0xFDE
  7334                           postdec2	equ	0xFDD
  7335                           fsr2h	equ	0xFDA
  7336                           fsr2l	equ	0xFD9
  7337                           status	equ	0xFD8
  7338                           
  7339 ;; *************** function _UI *****************
  7340 ;; Defined at:
  7341 ;;		line 76 in file "UI.c"
  7342 ;; Parameters:    Size  Location     Type
  7343 ;;		None
  7344 ;; Auto vars:     Size  Location     Type
  7345 ;;  i               1   73[BANK0 ] unsigned char 
  7346 ;;  i               1   85[BANK0 ] unsigned char 
  7347 ;;  i               1   84[BANK0 ] unsigned char 
  7348 ;;  i               1   83[BANK0 ] unsigned char 
  7349 ;;  i               1   82[BANK0 ] unsigned char 
  7350 ;;  i               1   81[BANK0 ] unsigned char 
  7351 ;;  i               1   80[BANK0 ] unsigned char 
  7352 ;;  i               1   79[BANK0 ] unsigned char 
  7353 ;;  i               1   78[BANK0 ] unsigned char 
  7354 ;;  i               1   77[BANK0 ] unsigned char 
  7355 ;;  i               1   76[BANK0 ] unsigned char 
  7356 ;;  i               1   75[BANK0 ] unsigned char 
  7357 ;;  i               1   74[BANK0 ] unsigned char 
  7358 ;;  month           4   86[BANK0 ] unsigned char [4]
  7359 ;;  i               1   72[BANK0 ] unsigned char 
  7360 ;; Return value:  Size  Location     Type
  7361 ;;                  1    wreg      void 
  7362 ;; Registers used:
  7363 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7364 ;; Tracked objects:
  7365 ;;		On entry : 0/0
  7366 ;;		On exit  : 0/0
  7367 ;;		Unchanged: 0/0
  7368 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7369 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7370 ;;      Locals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7371 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7372 ;;      Totals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7373 ;;Total ram usage:       22 bytes
  7374 ;; Hardware stack levels used:    1
  7375 ;; Hardware stack levels required when called:   11
  7376 ;; This function calls:
  7377 ;;		___awdiv
  7378 ;;		___awmod
  7379 ;;		_change_state_to_menu_12
  7380 ;;		_change_state_to_menu_22
  7381 ;;		_lcdInst
  7382 ;;		_printRTC
  7383 ;;		_printf
  7384 ;;		_strcpy
  7385 ;; This function is called by:
  7386 ;;		_main
  7387 ;; This function uses a non-reentrant model
  7388 ;;
  7389                           
  7390                           	psect	text22
  7391  000012                     __ptext22:
  7392                           	opt stack 0
  7393  000012                     _UI:
  7394                           	opt stack 19
  7395                           
  7396                           ;UI.c: 77: if(machine_state == DoneSorting_state){
  7397                           
  7398                           ;incstack = 0
  7399  000012  0E02               	movlw	2
  7400  000014  0100               	movlb	0	; () banked
  7401  000016  19FC               	xorwf	_machine_state& (0+255),w,b
  7402  000018  A4D8               	btfss	status,2,c
  7403  00001A  D086               	goto	l8802
  7404                           
  7405                           ; BSR set to: 0
  7406                           ;UI.c: 78: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  7407  00001C  0E01               	movlw	1
  7408  00001E  EC72  F02A         	call	_lcdInst
  7409  000022  0E68               	movlw	104
  7410  000024  0100               	movlb	0	; () banked
  7411  000026  6FC4               	movwf	??_UI& (0+255),b
  7412  000028  0EE4               	movlw	228
  7413  00002A                     u9497:
  7414  00002A  2EE8               	decfsz	wreg,f,c
  7415  00002C  D7FE               	bra	u9497
  7416  00002E  2FC4               	decfsz	??_UI& (0+255),f,b
  7417  000030  D7FC               	bra	u9497
  7418  000032  F000               	nop	
  7419                           
  7420                           ;UI.c: 79: lcdInst(0b10000000);;
  7421  000034  0E80               	movlw	128
  7422  000036  EC72  F02A         	call	_lcdInst
  7423                           
  7424                           ;UI.c: 80: printf("RESULTS IN LOG %d", sel+1);
  7425  00003A  0E69               	movlw	low STR_1
  7426  00003C  0100               	movlb	0	; () banked
  7427  00003E  6F8E               	movwf	printf@f& (0+255),b
  7428  000040  0EFB               	movlw	high STR_1
  7429  000042  0100               	movlb	0	; () banked
  7430  000044  6F8F               	movwf	(printf@f+1)& (0+255),b
  7431  000046  0E01               	movlw	1
  7432  000048  0100               	movlb	0	; () banked
  7433  00004A  25FD               	addwf	_sel& (0+255),w,b
  7434  00004C  0100               	movlb	0	; () banked
  7435  00004E  6F90               	movwf	(?_printf+2)& (0+255),b
  7436  000050  0100               	movlb	0	; () banked
  7437  000052  6B91               	clrf	(?_printf+3)& (0+255),b
  7438  000054  0E00               	movlw	0
  7439  000056  2391               	addwfc	(?_printf+3)& (0+255),f,b
  7440  000058  EC1E  F00B         	call	_printf	;wreg free
  7441                           
  7442                           ;UI.c: 81: lcdInst(0b11000000);;
  7443  00005C  0EC0               	movlw	192
  7444  00005E  EC72  F02A         	call	_lcdInst
  7445                           
  7446                           ;UI.c: 82: printf("TIME: %d:%02d", (total_time % 3600) / 60, (total_time % 3600) % 60);
  7447  000062  0E0E               	movlw	14
  7448  000064  0100               	movlb	0	; () banked
  7449  000066  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  7450  000068  0E10               	movlw	16
  7451  00006A  6F82               	movwf	___awmod@divisor& (0+255),b
  7452  00006C  C0FA  F080         	movff	_total_time,___awmod@dividend
  7453  000070  C0FB  F081         	movff	_total_time+1,___awmod@dividend+1
  7454  000074  ECF6  F022         	call	___awmod	;wreg free
  7455  000078  C080  F0C6         	movff	?___awmod,_UI$2412
  7456  00007C  C081  F0C7         	movff	?___awmod+1,_UI$2412+1
  7457                           
  7458                           ;UI.c: 82: printf("TIME: %d:%02d", (total_time % 3600) / 60, (total_time % 3600) % 60);
  7459  000080  0E31               	movlw	low STR_2
  7460  000082  0100               	movlb	0	; () banked
  7461  000084  6F8E               	movwf	printf@f& (0+255),b
  7462  000086  0EFF               	movlw	high STR_2
  7463  000088  0100               	movlb	0	; () banked
  7464  00008A  6F8F               	movwf	(printf@f+1)& (0+255),b
  7465  00008C  0E0E               	movlw	14
  7466  00008E  0100               	movlb	0	; () banked
  7467  000090  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  7468  000092  0E10               	movlw	16
  7469  000094  6F82               	movwf	___awmod@divisor& (0+255),b
  7470  000096  C0FA  F080         	movff	_total_time,___awmod@dividend
  7471  00009A  C0FB  F081         	movff	_total_time+1,___awmod@dividend+1
  7472  00009E  ECF6  F022         	call	___awmod	;wreg free
  7473  0000A2  C080  F086         	movff	?___awmod,___awdiv@dividend
  7474  0000A6  C081  F087         	movff	?___awmod+1,___awdiv@dividend+1
  7475  0000AA  0E00               	movlw	0
  7476  0000AC  0100               	movlb	0	; () banked
  7477  0000AE  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  7478  0000B0  0E3C               	movlw	60
  7479  0000B2  6F88               	movwf	___awdiv@divisor& (0+255),b
  7480  0000B4  ECE4  F021         	call	___awdiv	;wreg free
  7481  0000B8  C086  F090         	movff	?___awdiv,?_printf+2
  7482  0000BC  C087  F091         	movff	?___awdiv+1,?_printf+3
  7483  0000C0  C0C6  F080         	movff	_UI$2412,___awmod@dividend
  7484  0000C4  C0C7  F081         	movff	_UI$2412+1,___awmod@dividend+1
  7485  0000C8  0E00               	movlw	0
  7486  0000CA  0100               	movlb	0	; () banked
  7487  0000CC  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  7488  0000CE  0E3C               	movlw	60
  7489  0000D0  6F82               	movwf	___awmod@divisor& (0+255),b
  7490  0000D2  ECF6  F022         	call	___awmod	;wreg free
  7491  0000D6  C080  F092         	movff	?___awmod,?_printf+4
  7492  0000DA  C081  F093         	movff	?___awmod+1,?_printf+5
  7493  0000DE  EC1E  F00B         	call	_printf	;wreg free
  7494  0000E2                     l180:
  7495  0000E2  B281               	btfsc	3969,1,c	;volatile
  7496  0000E4  D7FE               	goto	l180
  7497  0000E6                     l183:
  7498  0000E6  A281               	btfss	3969,1,c	;volatile
  7499  0000E8  D7FE               	goto	l183
  7500                           
  7501                           ;UI.c: 86: }
  7502                           ;UI.c: 87: if(cur_state == 12){
  7503  0000EA  0E0C               	movlw	12
  7504  0000EC  0100               	movlb	0	; () banked
  7505  0000EE  19EC               	xorwf	_cur_state& (0+255),w,b
  7506  0000F0  0100               	movlb	0	; () banked
  7507  0000F2  11ED               	iorwf	(_cur_state+1)& (0+255),w,b
  7508  0000F4  A4D8               	btfss	status,2,c
  7509  0000F6  D003               	goto	l8796
  7510                           
  7511                           ; BSR set to: 0
  7512                           ;UI.c: 88: change_state_to_menu_12();
  7513  0000F8  ECB0  F027         	call	_change_state_to_menu_12	;wreg free
  7514                           
  7515                           ;UI.c: 89: }
  7516  0000FC  D002               	goto	l188
  7517  0000FE                     l8796:
  7518                           
  7519                           ;UI.c: 90: else{
  7520                           ;UI.c: 91: change_state_to_menu_22();
  7521  0000FE  EC94  F027         	call	_change_state_to_menu_22	;wreg free
  7522  000102                     l188:
  7523  000102  B281               	btfsc	3969,1,c	;volatile
  7524  000104  D7FE               	goto	l188
  7525                           
  7526                           ;UI.c: 94: _delay((unsigned long)((100)*(32000000/4000.0)));
  7527  000106  0E05               	movlw	5
  7528  000108  0100               	movlb	0	; () banked
  7529  00010A  6FC5               	movwf	(??_UI+1)& (0+255),b
  7530  00010C  0E0F               	movlw	15
  7531  00010E  0100               	movlb	0	; () banked
  7532  000110  6FC4               	movwf	??_UI& (0+255),b
  7533  000112  0EF1               	movlw	241
  7534  000114                     u9507:
  7535  000114  2EE8               	decfsz	wreg,f,c
  7536  000116  D7FE               	bra	u9507
  7537  000118  2FC4               	decfsz	??_UI& (0+255),f,b
  7538  00011A  D7FC               	bra	u9507
  7539  00011C  2FC5               	decfsz	(??_UI+1)& (0+255),f,b
  7540  00011E  D7FA               	bra	u9507
  7541                           
  7542                           ;UI.c: 95: machine_state = UI_state;
  7543  000120  0E00               	movlw	0
  7544  000122  0100               	movlb	0	; () banked
  7545  000124  6FFC               	movwf	_machine_state& (0+255),b
  7546                           
  7547                           ;UI.c: 96: }
  7548  000126  D3D0               	goto	l9122
  7549  000128                     l8802:
  7550                           
  7551                           ; BSR set to: 0
  7552                           ;UI.c: 97: else if(cur_state == 0){
  7553  000128  0100               	movlb	0	; () banked
  7554  00012A  51EC               	movf	_cur_state& (0+255),w,b
  7555  00012C  0100               	movlb	0	; () banked
  7556  00012E  11ED               	iorwf	(_cur_state+1)& (0+255),w,b
  7557  000130  A4D8               	btfss	status,2,c
  7558  000132  D3CA               	goto	l9122
  7559                           
  7560                           ; BSR set to: 0
  7561                           ;UI.c: 98: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
  7562  000134  0E00               	movlw	0
  7563  000136  0100               	movlb	0	; () banked
  7564  000138  6FC8               	movwf	UI@i& (0+255),b
  7565  00013A                     l8806:
  7566                           
  7567                           ; BSR set to: 0
  7568  00013A  0E63               	movlw	99
  7569  00013C  0100               	movlb	0	; () banked
  7570  00013E  65C8               	cpfsgt	UI@i& (0+255),b
  7571  000140  D001               	goto	l8810
  7572  000142  D00C               	goto	l8814
  7573  000144                     l8810:
  7574                           
  7575                           ; BSR set to: 0
  7576  000144  0E68               	movlw	104
  7577  000146  0100               	movlb	0	; () banked
  7578  000148  6FC4               	movwf	??_UI& (0+255),b
  7579  00014A  0EE4               	movlw	228
  7580  00014C                     u9517:
  7581  00014C  2EE8               	decfsz	wreg,f,c
  7582  00014E  D7FE               	bra	u9517
  7583  000150  2FC4               	decfsz	??_UI& (0+255),f,b
  7584  000152  D7FC               	bra	u9517
  7585  000154  F000               	nop	
  7586  000156  0100               	movlb	0	; () banked
  7587  000158  2BC8               	incf	UI@i& (0+255),f,b
  7588  00015A  D7EF               	goto	l8806
  7589  00015C                     l8814:
  7590                           
  7591                           ; BSR set to: 0
  7592                           ;UI.c: 99: if(cur_state == 0){
  7593  00015C  0100               	movlb	0	; () banked
  7594  00015E  51EC               	movf	_cur_state& (0+255),w,b
  7595  000160  0100               	movlb	0	; () banked
  7596  000162  11ED               	iorwf	(_cur_state+1)& (0+255),w,b
  7597  000164  A4D8               	btfss	status,2,c
  7598  000166  D3B0               	goto	l9122
  7599                           
  7600                           ; BSR set to: 0
  7601                           ;UI.c: 100: printRTC();
  7602  000168  EC9B  F013         	call	_printRTC	;wreg free
  7603                           
  7604                           ;UI.c: 101: }
  7605                           ;UI.c: 102: }
  7606                           ;UI.c: 103: while(logstate){
  7607  00016C  D3AD               	goto	l9122
  7608  00016E                     l8818:
  7609                           
  7610                           ;UI.c: 105: if(!log_completion){
  7611  00016E  5063               	movf	_log_completion,w,c
  7612  000170  1064               	iorwf	_log_completion+1,w,c
  7613  000172  A4D8               	btfss	status,2,c
  7614  000174  D041               	goto	l8848
  7615                           
  7616                           ;UI.c: 106: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  7617  000176  0E01               	movlw	1
  7618  000178  EC72  F02A         	call	_lcdInst
  7619  00017C  0E68               	movlw	104
  7620  00017E  0100               	movlb	0	; () banked
  7621  000180  6FC4               	movwf	??_UI& (0+255),b
  7622  000182  0EE4               	movlw	228
  7623  000184                     u9527:
  7624  000184  2EE8               	decfsz	wreg,f,c
  7625  000186  D7FE               	bra	u9527
  7626  000188  2FC4               	decfsz	??_UI& (0+255),f,b
  7627  00018A  D7FC               	bra	u9527
  7628  00018C  F000               	nop	
  7629                           
  7630                           ;UI.c: 107: lcdInst(0b10000000);;
  7631  00018E  0E80               	movlw	128
  7632  000190  EC72  F02A         	call	_lcdInst
  7633                           
  7634                           ;UI.c: 108: printf("-- LOG %2d HERE--", log);
  7635  000194  0E57               	movlw	low STR_3
  7636  000196  0100               	movlb	0	; () banked
  7637  000198  6F8E               	movwf	printf@f& (0+255),b
  7638  00019A  0EFB               	movlw	high STR_3
  7639  00019C  0100               	movlb	0	; () banked
  7640  00019E  6F8F               	movwf	(printf@f+1)& (0+255),b
  7641  0001A0  C0F4  F090         	movff	_log,?_printf+2
  7642  0001A4  C0F5  F091         	movff	_log+1,?_printf+3
  7643  0001A8  EC1E  F00B         	call	_printf	;wreg free
  7644                           
  7645                           ;UI.c: 109: lcdInst(0b11000000);;
  7646  0001AC  0EC0               	movlw	192
  7647  0001AE  EC72  F02A         	call	_lcdInst
  7648                           
  7649                           ;UI.c: 110: printf("DIDN'T COMPLETE");
  7650  0001B2  0E54               	movlw	low STR_4
  7651  0001B4  0100               	movlb	0	; () banked
  7652  0001B6  6F8E               	movwf	printf@f& (0+255),b
  7653  0001B8  0EFE               	movlw	high STR_4
  7654  0001BA  0100               	movlb	0	; () banked
  7655  0001BC  6F8F               	movwf	(printf@f+1)& (0+255),b
  7656  0001BE  EC1E  F00B         	call	_printf	;wreg free
  7657  0001C2                     l8832:
  7658  0001C2  0E00               	movlw	0
  7659  0001C4  0100               	movlb	0	; () banked
  7660  0001C6  6FC9               	movwf	UI@i_409& (0+255),b
  7661  0001C8                     l8834:
  7662                           
  7663                           ; BSR set to: 0
  7664  0001C8  0E63               	movlw	99
  7665  0001CA  0100               	movlb	0	; () banked
  7666  0001CC  65C9               	cpfsgt	UI@i_409& (0+255),b
  7667  0001CE  D001               	goto	l8838
  7668  0001D0  D00C               	goto	l8842
  7669  0001D2                     l8838:
  7670                           
  7671                           ; BSR set to: 0
  7672  0001D2  0E68               	movlw	104
  7673  0001D4  0100               	movlb	0	; () banked
  7674  0001D6  6FC4               	movwf	??_UI& (0+255),b
  7675  0001D8  0EE4               	movlw	228
  7676  0001DA                     u9537:
  7677  0001DA  2EE8               	decfsz	wreg,f,c
  7678  0001DC  D7FE               	bra	u9537
  7679  0001DE  2FC4               	decfsz	??_UI& (0+255),f,b
  7680  0001E0  D7FC               	bra	u9537
  7681  0001E2  F000               	nop	
  7682  0001E4  0100               	movlb	0	; () banked
  7683  0001E6  2BC9               	incf	UI@i_409& (0+255),f,b
  7684  0001E8  D7EF               	goto	l8834
  7685  0001EA                     l8842:
  7686                           
  7687                           ; BSR set to: 0
  7688  0001EA  0100               	movlb	0	; () banked
  7689  0001EC  51F8               	movf	_logstate& (0+255),w,b
  7690  0001EE  0100               	movlb	0	; () banked
  7691  0001F0  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  7692  0001F2  B4D8               	btfsc	status,2,c
  7693  0001F4  0012               	return	
  7694  0001F6  D7E5               	goto	l8832
  7695  0001F8                     l8848:
  7696                           
  7697                           ;UI.c: 114: else{
  7698                           ;UI.c: 115: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  7699  0001F8  0E01               	movlw	1
  7700  0001FA  EC72  F02A         	call	_lcdInst
  7701  0001FE  0E68               	movlw	104
  7702  000200  0100               	movlb	0	; () banked
  7703  000202  6FC4               	movwf	??_UI& (0+255),b
  7704  000204  0EE4               	movlw	228
  7705  000206                     u9547:
  7706  000206  2EE8               	decfsz	wreg,f,c
  7707  000208  D7FE               	bra	u9547
  7708  00020A  2FC4               	decfsz	??_UI& (0+255),f,b
  7709  00020C  D7FC               	bra	u9547
  7710  00020E  F000               	nop	
  7711                           
  7712                           ;UI.c: 116: lcdInst(0b10000000);;
  7713  000210  0E80               	movlw	128
  7714  000212  EC72  F02A         	call	_lcdInst
  7715                           
  7716                           ;UI.c: 117: printf("-- LOG %2d HERE--", log);
  7717  000216  0E57               	movlw	low STR_3
  7718  000218  0100               	movlb	0	; () banked
  7719  00021A  6F8E               	movwf	printf@f& (0+255),b
  7720  00021C  0EFB               	movlw	high STR_3
  7721  00021E  0100               	movlb	0	; () banked
  7722  000220  6F8F               	movwf	(printf@f+1)& (0+255),b
  7723  000222  C0F4  F090         	movff	_log,?_printf+2
  7724  000226  C0F5  F091         	movff	_log+1,?_printf+3
  7725  00022A  EC1E  F00B         	call	_printf	;wreg free
  7726                           
  7727                           ;UI.c: 118: lcdInst(0b11000000);;
  7728  00022E  0EC0               	movlw	192
  7729  000230  EC72  F02A         	call	_lcdInst
  7730                           
  7731                           ;UI.c: 119: printf("PAUSE < | BACK >");
  7732  000234  0EF0               	movlw	low STR_6
  7733  000236  0100               	movlb	0	; () banked
  7734  000238  6F8E               	movwf	printf@f& (0+255),b
  7735  00023A  0EFD               	movlw	high STR_6
  7736  00023C  0100               	movlb	0	; () banked
  7737  00023E  6F8F               	movwf	(printf@f+1)& (0+255),b
  7738  000240  EC1E  F00B         	call	_printf	;wreg free
  7739                           
  7740                           ;UI.c: 121: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7741  000244  0E00               	movlw	0
  7742  000246  0100               	movlb	0	; () banked
  7743  000248  6FCA               	movwf	UI@i_412& (0+255),b
  7744  00024A                     l8862:
  7745                           
  7746                           ; BSR set to: 0
  7747  00024A  0E63               	movlw	99
  7748  00024C  0100               	movlb	0	; () banked
  7749  00024E  65CA               	cpfsgt	UI@i_412& (0+255),b
  7750  000250  D001               	goto	l8866
  7751  000252  D00C               	goto	l8870
  7752  000254                     l8866:
  7753                           
  7754                           ; BSR set to: 0
  7755  000254  0E68               	movlw	104
  7756  000256  0100               	movlb	0	; () banked
  7757  000258  6FC4               	movwf	??_UI& (0+255),b
  7758  00025A  0EE4               	movlw	228
  7759  00025C                     u9557:
  7760  00025C  2EE8               	decfsz	wreg,f,c
  7761  00025E  D7FE               	bra	u9557
  7762  000260  2FC4               	decfsz	??_UI& (0+255),f,b
  7763  000262  D7FC               	bra	u9557
  7764  000264  F000               	nop	
  7765  000266  0100               	movlb	0	; () banked
  7766  000268  2BCA               	incf	UI@i_412& (0+255),f,b
  7767  00026A  D7EF               	goto	l8862
  7768  00026C                     l8870:
  7769                           
  7770                           ; BSR set to: 0
  7771  00026C  0100               	movlb	0	; () banked
  7772  00026E  51F8               	movf	_logstate& (0+255),w,b
  7773  000270  0100               	movlb	0	; () banked
  7774  000272  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  7775  000274  B4D8               	btfsc	status,2,c
  7776  000276  0012               	return	
  7777                           
  7778                           ; BSR set to: 0
  7779                           ;UI.c: 122: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7780                           
  7781                           ; BSR set to: 0
  7782                           
  7783                           ; BSR set to: 0
  7784  000278  0E00               	movlw	0
  7785  00027A  0100               	movlb	0	; () banked
  7786  00027C  6FCB               	movwf	UI@i_413& (0+255),b
  7787  00027E                     l8876:
  7788                           
  7789                           ; BSR set to: 0
  7790  00027E  0E63               	movlw	99
  7791  000280  0100               	movlb	0	; () banked
  7792  000282  65CB               	cpfsgt	UI@i_413& (0+255),b
  7793  000284  D001               	goto	l8880
  7794  000286  D00C               	goto	l8884
  7795  000288                     l8880:
  7796                           
  7797                           ; BSR set to: 0
  7798  000288  0E68               	movlw	104
  7799  00028A  0100               	movlb	0	; () banked
  7800  00028C  6FC4               	movwf	??_UI& (0+255),b
  7801  00028E  0EE4               	movlw	228
  7802  000290                     u9567:
  7803  000290  2EE8               	decfsz	wreg,f,c
  7804  000292  D7FE               	bra	u9567
  7805  000294  2FC4               	decfsz	??_UI& (0+255),f,b
  7806  000296  D7FC               	bra	u9567
  7807  000298  F000               	nop	
  7808  00029A  0100               	movlb	0	; () banked
  7809  00029C  2BCB               	incf	UI@i_413& (0+255),f,b
  7810  00029E  D7EF               	goto	l8876
  7811  0002A0                     l8884:
  7812                           
  7813                           ; BSR set to: 0
  7814  0002A0  0100               	movlb	0	; () banked
  7815  0002A2  51F8               	movf	_logstate& (0+255),w,b
  7816  0002A4  0100               	movlb	0	; () banked
  7817  0002A6  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  7818  0002A8  B4D8               	btfsc	status,2,c
  7819  0002AA  0012               	return	
  7820                           
  7821                           ; BSR set to: 0
  7822                           ;UI.c: 124: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  7823                           
  7824                           ; BSR set to: 0
  7825                           
  7826                           ; BSR set to: 0
  7827  0002AC  0E01               	movlw	1
  7828  0002AE  EC72  F02A         	call	_lcdInst
  7829  0002B2  0E68               	movlw	104
  7830  0002B4  0100               	movlb	0	; () banked
  7831  0002B6  6FC4               	movwf	??_UI& (0+255),b
  7832  0002B8  0EE4               	movlw	228
  7833  0002BA                     u9577:
  7834  0002BA  2EE8               	decfsz	wreg,f,c
  7835  0002BC  D7FE               	bra	u9577
  7836  0002BE  2FC4               	decfsz	??_UI& (0+255),f,b
  7837  0002C0  D7FC               	bra	u9577
  7838  0002C2  F000               	nop	
  7839                           
  7840                           ;UI.c: 125: lcdInst(0b10000000);;
  7841  0002C4  0E80               	movlw	128
  7842  0002C6  EC72  F02A         	call	_lcdInst
  7843                           
  7844                           ;UI.c: 126: printf("START:");
  7845  0002CA  0EC3               	movlw	low STR_7
  7846  0002CC  0100               	movlb	0	; () banked
  7847  0002CE  6F8E               	movwf	printf@f& (0+255),b
  7848  0002D0  0EFF               	movlw	high STR_7
  7849  0002D2  0100               	movlb	0	; () banked
  7850  0002D4  6F8F               	movwf	(printf@f+1)& (0+255),b
  7851  0002D6  EC1E  F00B         	call	_printf	;wreg free
  7852                           
  7853                           ;UI.c: 127: lcdInst(0b11000000);;
  7854  0002DA  0EC0               	movlw	192
  7855  0002DC  EC72  F02A         	call	_lcdInst
  7856                           
  7857                           ;UI.c: 128: char month[] = "MMM";
  7858  0002E0  C147  F0D6         	movff	UI@F3241,UI@month
  7859  0002E4  C148  F0D7         	movff	UI@F3241+1,UI@month+1
  7860  0002E8  C149  F0D8         	movff	UI@F3241+2,UI@month+2
  7861  0002EC  C14A  F0D9         	movff	UI@F3241+3,UI@month+3
  7862                           
  7863                           ;UI.c: 129: switch(log_startTime[5]){
  7864  0002F0  D0C3               	goto	l8928
  7865  0002F2                     l8900:
  7866                           
  7867                           ;UI.c: 131: strcpy(month, "JAN");
  7868  0002F2  0ED6               	movlw	low UI@month
  7869  0002F4  0100               	movlb	0	; () banked
  7870  0002F6  6F80               	movwf	strcpy@to& (0+255),b
  7871  0002F8  0E00               	movlw	high UI@month
  7872  0002FA  0100               	movlb	0	; () banked
  7873  0002FC  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7874  0002FE  0EDA               	movlw	low STR_8
  7875  000300  0100               	movlb	0	; () banked
  7876  000302  6F82               	movwf	strcpy@from& (0+255),b
  7877  000304  0EFF               	movlw	high STR_8
  7878  000306  0100               	movlb	0	; () banked
  7879  000308  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7880  00030A  ECCC  F027         	call	_strcpy	;wreg free
  7881                           
  7882                           ;UI.c: 132: break;
  7883  00030E  D0E6               	goto	l8930
  7884  000310                     l8902:
  7885                           
  7886                           ;UI.c: 134: strcpy(month, "FEB");
  7887  000310  0ED6               	movlw	low UI@month
  7888  000312  0100               	movlb	0	; () banked
  7889  000314  6F80               	movwf	strcpy@to& (0+255),b
  7890  000316  0E00               	movlw	high UI@month
  7891  000318  0100               	movlb	0	; () banked
  7892  00031A  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7893  00031C  0ECA               	movlw	low STR_9
  7894  00031E  0100               	movlb	0	; () banked
  7895  000320  6F82               	movwf	strcpy@from& (0+255),b
  7896  000322  0EFF               	movlw	high STR_9
  7897  000324  0100               	movlb	0	; () banked
  7898  000326  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7899  000328  ECCC  F027         	call	_strcpy	;wreg free
  7900                           
  7901                           ;UI.c: 135: break;
  7902  00032C  D0D7               	goto	l8930
  7903  00032E                     l8904:
  7904                           
  7905                           ;UI.c: 137: strcpy(month, "MAR");
  7906  00032E  0ED6               	movlw	low UI@month
  7907  000330  0100               	movlb	0	; () banked
  7908  000332  6F80               	movwf	strcpy@to& (0+255),b
  7909  000334  0E00               	movlw	high UI@month
  7910  000336  0100               	movlb	0	; () banked
  7911  000338  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7912  00033A  0EE6               	movlw	low STR_10
  7913  00033C  0100               	movlb	0	; () banked
  7914  00033E  6F82               	movwf	strcpy@from& (0+255),b
  7915  000340  0EFF               	movlw	high STR_10
  7916  000342  0100               	movlb	0	; () banked
  7917  000344  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7918  000346  ECCC  F027         	call	_strcpy	;wreg free
  7919                           
  7920                           ;UI.c: 138: break;
  7921  00034A  D0C8               	goto	l8930
  7922  00034C                     l8906:
  7923                           
  7924                           ;UI.c: 140: strcpy(month, "APR");
  7925  00034C  0ED6               	movlw	low UI@month
  7926  00034E  0100               	movlb	0	; () banked
  7927  000350  6F80               	movwf	strcpy@to& (0+255),b
  7928  000352  0E00               	movlw	high UI@month
  7929  000354  0100               	movlb	0	; () banked
  7930  000356  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7931  000358  0EEA               	movlw	low STR_11
  7932  00035A  0100               	movlb	0	; () banked
  7933  00035C  6F82               	movwf	strcpy@from& (0+255),b
  7934  00035E  0EFF               	movlw	high STR_11
  7935  000360  0100               	movlb	0	; () banked
  7936  000362  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7937  000364  ECCC  F027         	call	_strcpy	;wreg free
  7938                           
  7939                           ;UI.c: 141: break;
  7940  000368  D0B9               	goto	l8930
  7941  00036A                     l8908:
  7942                           
  7943                           ;UI.c: 143: strcpy(month, "MAY");
  7944  00036A  0ED6               	movlw	low UI@month
  7945  00036C  0100               	movlb	0	; () banked
  7946  00036E  6F80               	movwf	strcpy@to& (0+255),b
  7947  000370  0E00               	movlw	high UI@month
  7948  000372  0100               	movlb	0	; () banked
  7949  000374  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7950  000376  0EFA               	movlw	low STR_12
  7951  000378  0100               	movlb	0	; () banked
  7952  00037A  6F82               	movwf	strcpy@from& (0+255),b
  7953  00037C  0EFF               	movlw	high STR_12
  7954  00037E  0100               	movlb	0	; () banked
  7955  000380  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7956  000382  ECCC  F027         	call	_strcpy	;wreg free
  7957                           
  7958                           ;UI.c: 144: break;
  7959  000386  D0AA               	goto	l8930
  7960  000388                     l8910:
  7961                           
  7962                           ;UI.c: 146: strcpy(month, "JUN");
  7963  000388  0ED6               	movlw	low UI@month
  7964  00038A  0100               	movlb	0	; () banked
  7965  00038C  6F80               	movwf	strcpy@to& (0+255),b
  7966  00038E  0E00               	movlw	high UI@month
  7967  000390  0100               	movlb	0	; () banked
  7968  000392  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7969  000394  0EDE               	movlw	low STR_13
  7970  000396  0100               	movlb	0	; () banked
  7971  000398  6F82               	movwf	strcpy@from& (0+255),b
  7972  00039A  0EFF               	movlw	high STR_13
  7973  00039C  0100               	movlb	0	; () banked
  7974  00039E  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7975  0003A0  ECCC  F027         	call	_strcpy	;wreg free
  7976                           
  7977                           ;UI.c: 147: break;
  7978  0003A4  D09B               	goto	l8930
  7979  0003A6                     l8912:
  7980                           
  7981                           ;UI.c: 149: strcpy(month, "JUL");
  7982  0003A6  0ED6               	movlw	low UI@month
  7983  0003A8  0100               	movlb	0	; () banked
  7984  0003AA  6F80               	movwf	strcpy@to& (0+255),b
  7985  0003AC  0E00               	movlw	high UI@month
  7986  0003AE  0100               	movlb	0	; () banked
  7987  0003B0  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7988  0003B2  0ED6               	movlw	low STR_14
  7989  0003B4  0100               	movlb	0	; () banked
  7990  0003B6  6F82               	movwf	strcpy@from& (0+255),b
  7991  0003B8  0EFF               	movlw	high STR_14
  7992  0003BA  0100               	movlb	0	; () banked
  7993  0003BC  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7994  0003BE  ECCC  F027         	call	_strcpy	;wreg free
  7995                           
  7996                           ;UI.c: 150: break;
  7997  0003C2  D08C               	goto	l8930
  7998  0003C4                     l8914:
  7999                           
  8000                           ;UI.c: 152: strcpy(month, "AUG");
  8001  0003C4  0ED6               	movlw	low UI@month
  8002  0003C6  0100               	movlb	0	; () banked
  8003  0003C8  6F80               	movwf	strcpy@to& (0+255),b
  8004  0003CA  0E00               	movlw	high UI@month
  8005  0003CC  0100               	movlb	0	; () banked
  8006  0003CE  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8007  0003D0  0ED2               	movlw	low STR_15
  8008  0003D2  0100               	movlb	0	; () banked
  8009  0003D4  6F82               	movwf	strcpy@from& (0+255),b
  8010  0003D6  0EFF               	movlw	high STR_15
  8011  0003D8  0100               	movlb	0	; () banked
  8012  0003DA  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8013  0003DC  ECCC  F027         	call	_strcpy	;wreg free
  8014                           
  8015                           ;UI.c: 153: break;
  8016  0003E0  D07D               	goto	l8930
  8017  0003E2                     l8916:
  8018                           
  8019                           ;UI.c: 155: strcpy(month, "SEP");
  8020  0003E2  0ED6               	movlw	low UI@month
  8021  0003E4  0100               	movlb	0	; () banked
  8022  0003E6  6F80               	movwf	strcpy@to& (0+255),b
  8023  0003E8  0E00               	movlw	high UI@month
  8024  0003EA  0100               	movlb	0	; () banked
  8025  0003EC  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8026  0003EE  0EE2               	movlw	low STR_16
  8027  0003F0  0100               	movlb	0	; () banked
  8028  0003F2  6F82               	movwf	strcpy@from& (0+255),b
  8029  0003F4  0EFF               	movlw	high STR_16
  8030  0003F6  0100               	movlb	0	; () banked
  8031  0003F8  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8032  0003FA  ECCC  F027         	call	_strcpy	;wreg free
  8033                           
  8034                           ;UI.c: 156: break;
  8035  0003FE  D06E               	goto	l8930
  8036  000400                     l8918:
  8037                           
  8038                           ;UI.c: 158: strcpy(month, "OCT");
  8039  000400  0ED6               	movlw	low UI@month
  8040  000402  0100               	movlb	0	; () banked
  8041  000404  6F80               	movwf	strcpy@to& (0+255),b
  8042  000406  0E00               	movlw	high UI@month
  8043  000408  0100               	movlb	0	; () banked
  8044  00040A  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8045  00040C  0EF2               	movlw	low STR_17
  8046  00040E  0100               	movlb	0	; () banked
  8047  000410  6F82               	movwf	strcpy@from& (0+255),b
  8048  000412  0EFF               	movlw	high STR_17
  8049  000414  0100               	movlb	0	; () banked
  8050  000416  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8051  000418  ECCC  F027         	call	_strcpy	;wreg free
  8052                           
  8053                           ;UI.c: 159: break;
  8054  00041C  D05F               	goto	l8930
  8055  00041E                     l8920:
  8056                           
  8057                           ;UI.c: 161: strcpy(month, "NOV");
  8058  00041E  0ED6               	movlw	low UI@month
  8059  000420  0100               	movlb	0	; () banked
  8060  000422  6F80               	movwf	strcpy@to& (0+255),b
  8061  000424  0E00               	movlw	high UI@month
  8062  000426  0100               	movlb	0	; () banked
  8063  000428  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8064  00042A  0EF6               	movlw	low STR_18
  8065  00042C  0100               	movlb	0	; () banked
  8066  00042E  6F82               	movwf	strcpy@from& (0+255),b
  8067  000430  0EFF               	movlw	high STR_18
  8068  000432  0100               	movlb	0	; () banked
  8069  000434  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8070  000436  ECCC  F027         	call	_strcpy	;wreg free
  8071                           
  8072                           ;UI.c: 162: break;
  8073  00043A  D050               	goto	l8930
  8074  00043C                     l8922:
  8075                           
  8076                           ;UI.c: 164: strcpy(month, "DEC");
  8077  00043C  0ED6               	movlw	low UI@month
  8078  00043E  0100               	movlb	0	; () banked
  8079  000440  6F80               	movwf	strcpy@to& (0+255),b
  8080  000442  0E00               	movlw	high UI@month
  8081  000444  0100               	movlb	0	; () banked
  8082  000446  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8083  000448  0ECE               	movlw	low STR_19
  8084  00044A  0100               	movlb	0	; () banked
  8085  00044C  6F82               	movwf	strcpy@from& (0+255),b
  8086  00044E  0EFF               	movlw	high STR_19
  8087  000450  0100               	movlb	0	; () banked
  8088  000452  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8089  000454  ECCC  F027         	call	_strcpy	;wreg free
  8090                           
  8091                           ;UI.c: 165: break;
  8092  000458  D041               	goto	l8930
  8093  00045A                     l8924:
  8094                           
  8095                           ;UI.c: 167: strcpy(month, "ERR");
  8096  00045A  0ED6               	movlw	low UI@month
  8097  00045C  0100               	movlb	0	; () banked
  8098  00045E  6F80               	movwf	strcpy@to& (0+255),b
  8099  000460  0E00               	movlw	high UI@month
  8100  000462  0100               	movlb	0	; () banked
  8101  000464  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8102  000466  0EEE               	movlw	low STR_20
  8103  000468  0100               	movlb	0	; () banked
  8104  00046A  6F82               	movwf	strcpy@from& (0+255),b
  8105  00046C  0EFF               	movlw	high STR_20
  8106  00046E  0100               	movlb	0	; () banked
  8107  000470  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8108  000472  ECCC  F027         	call	_strcpy	;wreg free
  8109                           
  8110                           ;UI.c: 169: }
  8111                           
  8112                           ;UI.c: 168: break;
  8113  000476  D032               	goto	l8930
  8114  000478                     l8928:
  8115  000478  EE21  F00A         	lfsr	2,_log_startTime+10
  8116  00047C  CFDE F0C4          	movff	postinc2,??_UI
  8117  000480  CFDD F0C5          	movff	postdec2,??_UI+1
  8118                           
  8119                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8120                           ; Switch size 1, requested type "space"
  8121                           ; Number of cases is 1, Range of values is 0 to 0
  8122                           ; switch strategies available:
  8123                           ; Name         Instructions Cycles
  8124                           ; simple_byte            4     3 (average)
  8125                           ;	Chosen strategy is simple_byte
  8126  000484  0100               	movlb	0	; () banked
  8127  000486  51C5               	movf	(??_UI+1)& (0+255),w,b
  8128  000488  0A00               	xorlw	0	; case 0
  8129  00048A  A4D8               	btfss	status,2,c
  8130  00048C  D7E6               	goto	l8924
  8131                           
  8132                           ; BSR set to: 0
  8133                           ; Switch size 1, requested type "space"
  8134                           ; Number of cases is 12, Range of values is 1 to 12
  8135                           ; switch strategies available:
  8136                           ; Name         Instructions Cycles
  8137                           ; simple_byte           37    19 (average)
  8138                           ;	Chosen strategy is simple_byte
  8139  00048E  0100               	movlb	0	; () banked
  8140  000490  51C4               	movf	??_UI& (0+255),w,b
  8141  000492  0A01               	xorlw	1	; case 1
  8142  000494  B4D8               	btfsc	status,2,c
  8143  000496  D72D               	goto	l8900
  8144  000498  0A03               	xorlw	3	; case 2
  8145  00049A  B4D8               	btfsc	status,2,c
  8146  00049C  D739               	goto	l8902
  8147  00049E  0A01               	xorlw	1	; case 3
  8148  0004A0  B4D8               	btfsc	status,2,c
  8149  0004A2  D745               	goto	l8904
  8150  0004A4  0A07               	xorlw	7	; case 4
  8151  0004A6  B4D8               	btfsc	status,2,c
  8152  0004A8  D751               	goto	l8906
  8153  0004AA  0A01               	xorlw	1	; case 5
  8154  0004AC  B4D8               	btfsc	status,2,c
  8155  0004AE  D75D               	goto	l8908
  8156  0004B0  0A03               	xorlw	3	; case 6
  8157  0004B2  B4D8               	btfsc	status,2,c
  8158  0004B4  D769               	goto	l8910
  8159  0004B6  0A01               	xorlw	1	; case 7
  8160  0004B8  B4D8               	btfsc	status,2,c
  8161  0004BA  D775               	goto	l8912
  8162  0004BC  0A0F               	xorlw	15	; case 8
  8163  0004BE  B4D8               	btfsc	status,2,c
  8164  0004C0  D781               	goto	l8914
  8165  0004C2  0A01               	xorlw	1	; case 9
  8166  0004C4  B4D8               	btfsc	status,2,c
  8167  0004C6  D78D               	goto	l8916
  8168  0004C8  0A03               	xorlw	3	; case 10
  8169  0004CA  B4D8               	btfsc	status,2,c
  8170  0004CC  D799               	goto	l8918
  8171  0004CE  0A01               	xorlw	1	; case 11
  8172  0004D0  B4D8               	btfsc	status,2,c
  8173  0004D2  D7A5               	goto	l8920
  8174  0004D4  0A07               	xorlw	7	; case 12
  8175  0004D6  B4D8               	btfsc	status,2,c
  8176  0004D8  D7B1               	goto	l8922
  8177  0004DA  D7BF               	goto	l8924
  8178  0004DC                     l8930:
  8179                           
  8180                           ;UI.c: 170: printf("%02d%s | %02d:%02d:%02d", log_startTime[4],month,log_startTime[2],lo
      +                          g_startTime[1],log_startTime[0]);
  8181  0004DC  0ED0               	movlw	low STR_21
  8182  0004DE  0100               	movlb	0	; () banked
  8183  0004E0  6F8E               	movwf	printf@f& (0+255),b
  8184  0004E2  0EFA               	movlw	high STR_21
  8185  0004E4  0100               	movlb	0	; () banked
  8186  0004E6  6F8F               	movwf	(printf@f+1)& (0+255),b
  8187  0004E8  C108  F090         	movff	_log_startTime+8,?_printf+2
  8188  0004EC  C109  F091         	movff	_log_startTime+9,?_printf+3
  8189  0004F0  0ED6               	movlw	low UI@month
  8190  0004F2  0100               	movlb	0	; () banked
  8191  0004F4  6F92               	movwf	(?_printf+4)& (0+255),b
  8192  0004F6  0E00               	movlw	high UI@month
  8193  0004F8  0100               	movlb	0	; () banked
  8194  0004FA  6F93               	movwf	(?_printf+5)& (0+255),b
  8195  0004FC  C104  F094         	movff	_log_startTime+4,?_printf+6
  8196  000500  C105  F095         	movff	_log_startTime+5,?_printf+7
  8197  000504  C102  F096         	movff	_log_startTime+2,?_printf+8
  8198  000508  C103  F097         	movff	_log_startTime+3,?_printf+9
  8199  00050C  C100  F098         	movff	_log_startTime,?_printf+10
  8200  000510  C101  F099         	movff	_log_startTime+1,?_printf+11
  8201  000514  EC1E  F00B         	call	_printf	;wreg free
  8202                           
  8203                           ;UI.c: 172: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  8204  000518  0E00               	movlw	0
  8205  00051A  0100               	movlb	0	; () banked
  8206  00051C  6FCC               	movwf	UI@i_431& (0+255),b
  8207  00051E                     l8934:
  8208                           
  8209                           ; BSR set to: 0
  8210  00051E  0E63               	movlw	99
  8211  000520  0100               	movlb	0	; () banked
  8212  000522  65CC               	cpfsgt	UI@i_431& (0+255),b
  8213  000524  D001               	goto	l8938
  8214  000526  D00C               	goto	l8942
  8215  000528                     l8938:
  8216                           
  8217                           ; BSR set to: 0
  8218  000528  0E68               	movlw	104
  8219  00052A  0100               	movlb	0	; () banked
  8220  00052C  6FC4               	movwf	??_UI& (0+255),b
  8221  00052E  0EE4               	movlw	228
  8222  000530                     u9587:
  8223  000530  2EE8               	decfsz	wreg,f,c
  8224  000532  D7FE               	bra	u9587
  8225  000534  2FC4               	decfsz	??_UI& (0+255),f,b
  8226  000536  D7FC               	bra	u9587
  8227  000538  F000               	nop	
  8228  00053A  0100               	movlb	0	; () banked
  8229  00053C  2BCC               	incf	UI@i_431& (0+255),f,b
  8230  00053E  D7EF               	goto	l8934
  8231  000540                     l8942:
  8232                           
  8233                           ; BSR set to: 0
  8234  000540  0100               	movlb	0	; () banked
  8235  000542  51F8               	movf	_logstate& (0+255),w,b
  8236  000544  0100               	movlb	0	; () banked
  8237  000546  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  8238  000548  B4D8               	btfsc	status,2,c
  8239  00054A  0012               	return	
  8240                           
  8241                           ; BSR set to: 0
  8242                           ;UI.c: 173: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  8243                           
  8244                           ; BSR set to: 0
  8245                           
  8246                           ; BSR set to: 0
  8247  00054C  0E00               	movlw	0
  8248  00054E  0100               	movlb	0	; () banked
  8249  000550  6FCD               	movwf	UI@i_432& (0+255),b
  8250  000552                     l8948:
  8251                           
  8252                           ; BSR set to: 0
  8253  000552  0E63               	movlw	99
  8254  000554  0100               	movlb	0	; () banked
  8255  000556  65CD               	cpfsgt	UI@i_432& (0+255),b
  8256  000558  D001               	goto	l8952
  8257  00055A  D00C               	goto	l8956
  8258  00055C                     l8952:
  8259                           
  8260                           ; BSR set to: 0
  8261  00055C  0E68               	movlw	104
  8262  00055E  0100               	movlb	0	; () banked
  8263  000560  6FC4               	movwf	??_UI& (0+255),b
  8264  000562  0EE4               	movlw	228
  8265  000564                     u9597:
  8266  000564  2EE8               	decfsz	wreg,f,c
  8267  000566  D7FE               	bra	u9597
  8268  000568  2FC4               	decfsz	??_UI& (0+255),f,b
  8269  00056A  D7FC               	bra	u9597
  8270  00056C  F000               	nop	
  8271  00056E  0100               	movlb	0	; () banked
  8272  000570  2BCD               	incf	UI@i_432& (0+255),f,b
  8273  000572  D7EF               	goto	l8948
  8274  000574                     l8956:
  8275                           
  8276                           ; BSR set to: 0
  8277  000574  0100               	movlb	0	; () banked
  8278  000576  51F8               	movf	_logstate& (0+255),w,b
  8279  000578  0100               	movlb	0	; () banked
  8280  00057A  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  8281  00057C  B4D8               	btfsc	status,2,c
  8282  00057E  0012               	return	
  8283                           
  8284                           ; BSR set to: 0
  8285                           ;UI.c: 175: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  8286                           
  8287                           ; BSR set to: 0
  8288                           
  8289                           ; BSR set to: 0
  8290  000580  0E01               	movlw	1
  8291  000582  EC72  F02A         	call	_lcdInst
  8292  000586  0E68               	movlw	104
  8293  000588  0100               	movlb	0	; () banked
  8294  00058A  6FC4               	movwf	??_UI& (0+255),b
  8295  00058C  0EE4               	movlw	228
  8296  00058E                     u9607:
  8297  00058E  2EE8               	decfsz	wreg,f,c
  8298  000590  D7FE               	bra	u9607
  8299  000592  2FC4               	decfsz	??_UI& (0+255),f,b
  8300  000594  D7FC               	bra	u9607
  8301  000596  F000               	nop	
  8302                           
  8303                           ;UI.c: 176: lcdInst(0b10000000);;
  8304  000598  0E80               	movlw	128
  8305  00059A  EC72  F02A         	call	_lcdInst
  8306                           
  8307                           ;UI.c: 177: printf("DURATION:");
  8308  00059E  0E9A               	movlw	low STR_22
  8309  0005A0  0100               	movlb	0	; () banked
  8310  0005A2  6F8E               	movwf	printf@f& (0+255),b
  8311  0005A4  0EFF               	movlw	high STR_22
  8312  0005A6  0100               	movlb	0	; () banked
  8313  0005A8  6F8F               	movwf	(printf@f+1)& (0+255),b
  8314  0005AA  EC1E  F00B         	call	_printf	;wreg free
  8315                           
  8316                           ;UI.c: 178: lcdInst(0b11000000);;
  8317  0005AE  0EC0               	movlw	192
  8318  0005B0  EC72  F02A         	call	_lcdInst
  8319                           
  8320                           ;UI.c: 179: printf("%d MIN %d SEC", (log_total_time % 3600) / 60, (log_total_time % 3600
      +                          ) % 60);
  8321  0005B4  0E0E               	movlw	14
  8322  0005B6  0100               	movlb	0	; () banked
  8323  0005B8  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  8324  0005BA  0E10               	movlw	16
  8325  0005BC  6F82               	movwf	___awmod@divisor& (0+255),b
  8326  0005BE  C0F6  F080         	movff	_log_total_time,___awmod@dividend
  8327  0005C2  C0F7  F081         	movff	_log_total_time+1,___awmod@dividend+1
  8328  0005C6  ECF6  F022         	call	___awmod	;wreg free
  8329  0005CA  C080  F0C6         	movff	?___awmod,_UI$2412
  8330  0005CE  C081  F0C7         	movff	?___awmod+1,_UI$2412+1
  8331                           
  8332                           ;UI.c: 179: printf("%d MIN %d SEC", (log_total_time % 3600) / 60, (log_total_time % 3600
      +                          ) % 60);
  8333  0005D2  0E23               	movlw	low STR_23
  8334  0005D4  0100               	movlb	0	; () banked
  8335  0005D6  6F8E               	movwf	printf@f& (0+255),b
  8336  0005D8  0EFF               	movlw	high STR_23
  8337  0005DA  0100               	movlb	0	; () banked
  8338  0005DC  6F8F               	movwf	(printf@f+1)& (0+255),b
  8339  0005DE  0E0E               	movlw	14
  8340  0005E0  0100               	movlb	0	; () banked
  8341  0005E2  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  8342  0005E4  0E10               	movlw	16
  8343  0005E6  6F82               	movwf	___awmod@divisor& (0+255),b
  8344  0005E8  C0F6  F080         	movff	_log_total_time,___awmod@dividend
  8345  0005EC  C0F7  F081         	movff	_log_total_time+1,___awmod@dividend+1
  8346  0005F0  ECF6  F022         	call	___awmod	;wreg free
  8347  0005F4  C080  F086         	movff	?___awmod,___awdiv@dividend
  8348  0005F8  C081  F087         	movff	?___awmod+1,___awdiv@dividend+1
  8349  0005FC  0E00               	movlw	0
  8350  0005FE  0100               	movlb	0	; () banked
  8351  000600  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  8352  000602  0E3C               	movlw	60
  8353  000604  6F88               	movwf	___awdiv@divisor& (0+255),b
  8354  000606  ECE4  F021         	call	___awdiv	;wreg free
  8355  00060A  C086  F090         	movff	?___awdiv,?_printf+2
  8356  00060E  C087  F091         	movff	?___awdiv+1,?_printf+3
  8357  000612  C0C6  F080         	movff	_UI$2412,___awmod@dividend
  8358  000616  C0C7  F081         	movff	_UI$2412+1,___awmod@dividend+1
  8359  00061A  0E00               	movlw	0
  8360  00061C  0100               	movlb	0	; () banked
  8361  00061E  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  8362  000620  0E3C               	movlw	60
  8363  000622  6F82               	movwf	___awmod@divisor& (0+255),b
  8364  000624  ECF6  F022         	call	___awmod	;wreg free
  8365  000628  C080  F092         	movff	?___awmod,?_printf+4
  8366  00062C  C081  F093         	movff	?___awmod+1,?_printf+5
  8367  000630  EC1E  F00B         	call	_printf	;wreg free
  8368                           
  8369                           ;UI.c: 181: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  8370  000634  0E00               	movlw	0
  8371  000636  0100               	movlb	0	; () banked
  8372  000638  6FCE               	movwf	UI@i_435& (0+255),b
  8373  00063A                     l8976:
  8374                           
  8375                           ; BSR set to: 0
  8376  00063A  0E63               	movlw	99
  8377  00063C  0100               	movlb	0	; () banked
  8378  00063E  65CE               	cpfsgt	UI@i_435& (0+255),b
  8379  000640  D001               	goto	l8980
  8380  000642  D00C               	goto	l8984
  8381  000644                     l8980:
  8382                           
  8383                           ; BSR set to: 0
  8384  000644  0E68               	movlw	104
  8385  000646  0100               	movlb	0	; () banked
  8386  000648  6FC4               	movwf	??_UI& (0+255),b
  8387  00064A  0EE4               	movlw	228
  8388  00064C                     u9617:
  8389  00064C  2EE8               	decfsz	wreg,f,c
  8390  00064E  D7FE               	bra	u9617
  8391  000650  2FC4               	decfsz	??_UI& (0+255),f,b
  8392  000652  D7FC               	bra	u9617
  8393  000654  F000               	nop	
  8394  000656  0100               	movlb	0	; () banked
  8395  000658  2BCE               	incf	UI@i_435& (0+255),f,b
  8396  00065A  D7EF               	goto	l8976
  8397  00065C                     l8984:
  8398                           
  8399                           ; BSR set to: 0
  8400  00065C  0100               	movlb	0	; () banked
  8401  00065E  51F8               	movf	_logstate& (0+255),w,b
  8402  000660  0100               	movlb	0	; () banked
  8403  000662  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  8404  000664  B4D8               	btfsc	status,2,c
  8405  000666  0012               	return	
  8406                           
  8407                           ; BSR set to: 0
  8408                           ;UI.c: 182: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  8409                           
  8410                           ; BSR set to: 0
  8411                           
  8412                           ; BSR set to: 0
  8413  000668  0E00               	movlw	0
  8414  00066A  0100               	movlb	0	; () banked
  8415  00066C  6FCF               	movwf	UI@i_436& (0+255),b
  8416  00066E                     l8990:
  8417                           
  8418                           ; BSR set to: 0
  8419  00066E  0E63               	movlw	99
  8420  000670  0100               	movlb	0	; () banked
  8421  000672  65CF               	cpfsgt	UI@i_436& (0+255),b
  8422  000674  D001               	goto	l8994
  8423  000676  D00C               	goto	l8998
  8424  000678                     l8994:
  8425                           
  8426                           ; BSR set to: 0
  8427  000678  0E68               	movlw	104
  8428  00067A  0100               	movlb	0	; () banked
  8429  00067C  6FC4               	movwf	??_UI& (0+255),b
  8430  00067E  0EE4               	movlw	228
  8431  000680                     u9627:
  8432  000680  2EE8               	decfsz	wreg,f,c
  8433  000682  D7FE               	bra	u9627
  8434  000684  2FC4               	decfsz	??_UI& (0+255),f,b
  8435  000686  D7FC               	bra	u9627
  8436  000688  F000               	nop	
  8437  00068A  0100               	movlb	0	; () banked
  8438  00068C  2BCF               	incf	UI@i_436& (0+255),f,b
  8439  00068E  D7EF               	goto	l8990
  8440  000690                     l8998:
  8441                           
  8442                           ; BSR set to: 0
  8443  000690  0100               	movlb	0	; () banked
  8444  000692  51F8               	movf	_logstate& (0+255),w,b
  8445  000694  0100               	movlb	0	; () banked
  8446  000696  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  8447  000698  B4D8               	btfsc	status,2,c
  8448  00069A  0012               	return	
  8449                           
  8450                           ; BSR set to: 0
  8451                           ;UI.c: 184: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  8452                           
  8453                           ; BSR set to: 0
  8454                           
  8455                           ; BSR set to: 0
  8456  00069C  0E01               	movlw	1
  8457  00069E  EC72  F02A         	call	_lcdInst
  8458  0006A2  0E68               	movlw	104
  8459  0006A4  0100               	movlb	0	; () banked
  8460  0006A6  6FC4               	movwf	??_UI& (0+255),b
  8461  0006A8  0EE4               	movlw	228
  8462  0006AA                     u9637:
  8463  0006AA  2EE8               	decfsz	wreg,f,c
  8464  0006AC  D7FE               	bra	u9637
  8465  0006AE  2FC4               	decfsz	??_UI& (0+255),f,b
  8466  0006B0  D7FC               	bra	u9637
  8467  0006B2  F000               	nop	
  8468                           
  8469                           ;UI.c: 185: lcdInst(0b10000000);;
  8470  0006B4  0E80               	movlw	128
  8471  0006B6  EC72  F02A         	call	_lcdInst
  8472                           
  8473                           ;UI.c: 186: printf(" -- POP  CAN -- ");
  8474  0006BA  0E46               	movlw	low STR_24
  8475  0006BC  0100               	movlb	0	; () banked
  8476  0006BE  6F8E               	movwf	printf@f& (0+255),b
  8477  0006C0  0EFD               	movlw	high STR_24
  8478  0006C2  0100               	movlb	0	; () banked
  8479  0006C4  6F8F               	movwf	(printf@f+1)& (0+255),b
  8480  0006C6  EC1E  F00B         	call	_printf	;wreg free
  8481                           
  8482                           ;UI.c: 187: lcdInst(0b11000000);;
  8483  0006CA  0EC0               	movlw	192
  8484  0006CC  EC72  F02A         	call	_lcdInst
  8485                           
  8486                           ;UI.c: 188: printf("NTAB: %d|TAB: %d", log_count_pop_no_tab, log_count_pop_w_tab);
  8487  0006D0  0E23               	movlw	low STR_25
  8488  0006D2  0100               	movlb	0	; () banked
  8489  0006D4  6F8E               	movwf	printf@f& (0+255),b
  8490  0006D6  0EFE               	movlw	high STR_25
  8491  0006D8  0100               	movlb	0	; () banked
  8492  0006DA  6F8F               	movwf	(printf@f+1)& (0+255),b
  8493  0006DC  C065  F090         	movff	_log_count_pop_no_tab,?_printf+2
  8494  0006E0  C066  F091         	movff	_log_count_pop_no_tab+1,?_printf+3
  8495  0006E4  C067  F092         	movff	_log_count_pop_w_tab,?_printf+4
  8496  0006E8  C068  F093         	movff	_log_count_pop_w_tab+1,?_printf+5
  8497  0006EC  EC1E  F00B         	call	_printf	;wreg free
  8498                           
  8499                           ;UI.c: 190: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  8500  0006F0  0E00               	movlw	0
  8501  0006F2  0100               	movlb	0	; () banked
  8502  0006F4  6FD0               	movwf	UI@i_439& (0+255),b
  8503  0006F6                     l9016:
  8504                           
  8505                           ; BSR set to: 0
  8506  0006F6  0E63               	movlw	99
  8507  0006F8  0100               	movlb	0	; () banked
  8508  0006FA  65D0               	cpfsgt	UI@i_439& (0+255),b
  8509  0006FC  D001               	goto	l9020
  8510  0006FE  D00C               	goto	l9024
  8511  000700                     l9020:
  8512                           
  8513                           ; BSR set to: 0
  8514  000700  0E68               	movlw	104
  8515  000702  0100               	movlb	0	; () banked
  8516  000704  6FC4               	movwf	??_UI& (0+255),b
  8517  000706  0EE4               	movlw	228
  8518  000708                     u9647:
  8519  000708  2EE8               	decfsz	wreg,f,c
  8520  00070A  D7FE               	bra	u9647
  8521  00070C  2FC4               	decfsz	??_UI& (0+255),f,b
  8522  00070E  D7FC               	bra	u9647
  8523  000710  F000               	nop	
  8524  000712  0100               	movlb	0	; () banked
  8525  000714  2BD0               	incf	UI@i_439& (0+255),f,b
  8526  000716  D7EF               	goto	l9016
  8527  000718                     l9024:
  8528                           
  8529                           ; BSR set to: 0
  8530  000718  0100               	movlb	0	; () banked
  8531  00071A  51F8               	movf	_logstate& (0+255),w,b
  8532  00071C  0100               	movlb	0	; () banked
  8533  00071E  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  8534  000720  B4D8               	btfsc	status,2,c
  8535  000722  0012               	return	
  8536                           
  8537                           ; BSR set to: 0
  8538                           ;UI.c: 191: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  8539                           
  8540                           ; BSR set to: 0
  8541                           
  8542                           ; BSR set to: 0
  8543  000724  0E00               	movlw	0
  8544  000726  0100               	movlb	0	; () banked
  8545  000728  6FD1               	movwf	UI@i_440& (0+255),b
  8546  00072A                     l9030:
  8547                           
  8548                           ; BSR set to: 0
  8549  00072A  0E63               	movlw	99
  8550  00072C  0100               	movlb	0	; () banked
  8551  00072E  65D1               	cpfsgt	UI@i_440& (0+255),b
  8552  000730  D001               	goto	l9034
  8553  000732  D00C               	goto	l9038
  8554  000734                     l9034:
  8555                           
  8556                           ; BSR set to: 0
  8557  000734  0E68               	movlw	104
  8558  000736  0100               	movlb	0	; () banked
  8559  000738  6FC4               	movwf	??_UI& (0+255),b
  8560  00073A  0EE4               	movlw	228
  8561  00073C                     u9657:
  8562  00073C  2EE8               	decfsz	wreg,f,c
  8563  00073E  D7FE               	bra	u9657
  8564  000740  2FC4               	decfsz	??_UI& (0+255),f,b
  8565  000742  D7FC               	bra	u9657
  8566  000744  F000               	nop	
  8567  000746  0100               	movlb	0	; () banked
  8568  000748  2BD1               	incf	UI@i_440& (0+255),f,b
  8569  00074A  D7EF               	goto	l9030
  8570  00074C                     l9038:
  8571                           
  8572                           ; BSR set to: 0
  8573  00074C  0100               	movlb	0	; () banked
  8574  00074E  51F8               	movf	_logstate& (0+255),w,b
  8575  000750  0100               	movlb	0	; () banked
  8576  000752  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  8577  000754  B4D8               	btfsc	status,2,c
  8578  000756  0012               	return	
  8579                           
  8580                           ; BSR set to: 0
  8581                           ;UI.c: 193: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  8582                           
  8583                           ; BSR set to: 0
  8584                           
  8585                           ; BSR set to: 0
  8586  000758  0E01               	movlw	1
  8587  00075A  EC72  F02A         	call	_lcdInst
  8588  00075E  0E68               	movlw	104
  8589  000760  0100               	movlb	0	; () banked
  8590  000762  6FC4               	movwf	??_UI& (0+255),b
  8591  000764  0EE4               	movlw	228
  8592  000766                     u9667:
  8593  000766  2EE8               	decfsz	wreg,f,c
  8594  000768  D7FE               	bra	u9667
  8595  00076A  2FC4               	decfsz	??_UI& (0+255),f,b
  8596  00076C  D7FC               	bra	u9667
  8597  00076E  F000               	nop	
  8598                           
  8599                           ;UI.c: 194: lcdInst(0b10000000);;
  8600  000770  0E80               	movlw	128
  8601  000772  EC72  F02A         	call	_lcdInst
  8602                           
  8603                           ;UI.c: 195: printf(" -- SOUP CAN -- ");
  8604  000776  0E57               	movlw	low STR_26
  8605  000778  0100               	movlb	0	; () banked
  8606  00077A  6F8E               	movwf	printf@f& (0+255),b
  8607  00077C  0EFD               	movlw	high STR_26
  8608  00077E  0100               	movlb	0	; () banked
  8609  000780  6F8F               	movwf	(printf@f+1)& (0+255),b
  8610  000782  EC1E  F00B         	call	_printf	;wreg free
  8611                           
  8612                           ;UI.c: 196: lcdInst(0b11000000);;
  8613  000786  0EC0               	movlw	192
  8614  000788  EC72  F02A         	call	_lcdInst
  8615                           
  8616                           ;UI.c: 197: printf("NLAB: %d|LAB: %d", log_count_can_no_lab, log_count_can_w_lab);
  8617  00078C  0E12               	movlw	low STR_27
  8618  00078E  0100               	movlb	0	; () banked
  8619  000790  6F8E               	movwf	printf@f& (0+255),b
  8620  000792  0EFE               	movlw	high STR_27
  8621  000794  0100               	movlb	0	; () banked
  8622  000796  6F8F               	movwf	(printf@f+1)& (0+255),b
  8623  000798  C13F  F090         	movff	_log_count_can_no_lab,?_printf+2
  8624  00079C  C140  F091         	movff	_log_count_can_no_lab+1,?_printf+3
  8625  0007A0  C141  F092         	movff	_log_count_can_w_lab,?_printf+4
  8626  0007A4  C142  F093         	movff	_log_count_can_w_lab+1,?_printf+5
  8627  0007A8  EC1E  F00B         	call	_printf	;wreg free
  8628                           
  8629                           ;UI.c: 199: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  8630  0007AC  0E00               	movlw	0
  8631  0007AE  0100               	movlb	0	; () banked
  8632  0007B0  6FD2               	movwf	UI@i_443& (0+255),b
  8633  0007B2                     l9056:
  8634                           
  8635                           ; BSR set to: 0
  8636  0007B2  0E63               	movlw	99
  8637  0007B4  0100               	movlb	0	; () banked
  8638  0007B6  65D2               	cpfsgt	UI@i_443& (0+255),b
  8639  0007B8  D001               	goto	l9060
  8640  0007BA  D00C               	goto	l9064
  8641  0007BC                     l9060:
  8642                           
  8643                           ; BSR set to: 0
  8644  0007BC  0E68               	movlw	104
  8645  0007BE  0100               	movlb	0	; () banked
  8646  0007C0  6FC4               	movwf	??_UI& (0+255),b
  8647  0007C2  0EE4               	movlw	228
  8648  0007C4                     u9677:
  8649  0007C4  2EE8               	decfsz	wreg,f,c
  8650  0007C6  D7FE               	bra	u9677
  8651  0007C8  2FC4               	decfsz	??_UI& (0+255),f,b
  8652  0007CA  D7FC               	bra	u9677
  8653  0007CC  F000               	nop	
  8654  0007CE  0100               	movlb	0	; () banked
  8655  0007D0  2BD2               	incf	UI@i_443& (0+255),f,b
  8656  0007D2  D7EF               	goto	l9056
  8657  0007D4                     l9064:
  8658                           
  8659                           ; BSR set to: 0
  8660  0007D4  0100               	movlb	0	; () banked
  8661  0007D6  51F8               	movf	_logstate& (0+255),w,b
  8662  0007D8  0100               	movlb	0	; () banked
  8663  0007DA  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  8664  0007DC  B4D8               	btfsc	status,2,c
  8665  0007DE  0012               	return	
  8666                           
  8667                           ; BSR set to: 0
  8668                           ;UI.c: 200: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  8669                           
  8670                           ; BSR set to: 0
  8671                           
  8672                           ; BSR set to: 0
  8673  0007E0  0E00               	movlw	0
  8674  0007E2  0100               	movlb	0	; () banked
  8675  0007E4  6FD3               	movwf	UI@i_444& (0+255),b
  8676  0007E6                     l9070:
  8677                           
  8678                           ; BSR set to: 0
  8679  0007E6  0E63               	movlw	99
  8680  0007E8  0100               	movlb	0	; () banked
  8681  0007EA  65D3               	cpfsgt	UI@i_444& (0+255),b
  8682  0007EC  D001               	goto	l9074
  8683  0007EE  D00C               	goto	l9078
  8684  0007F0                     l9074:
  8685                           
  8686                           ; BSR set to: 0
  8687  0007F0  0E68               	movlw	104
  8688  0007F2  0100               	movlb	0	; () banked
  8689  0007F4  6FC4               	movwf	??_UI& (0+255),b
  8690  0007F6  0EE4               	movlw	228
  8691  0007F8                     u9687:
  8692  0007F8  2EE8               	decfsz	wreg,f,c
  8693  0007FA  D7FE               	bra	u9687
  8694  0007FC  2FC4               	decfsz	??_UI& (0+255),f,b
  8695  0007FE  D7FC               	bra	u9687
  8696  000800  F000               	nop	
  8697  000802  0100               	movlb	0	; () banked
  8698  000804  2BD3               	incf	UI@i_444& (0+255),f,b
  8699  000806  D7EF               	goto	l9070
  8700  000808                     l9078:
  8701                           
  8702                           ; BSR set to: 0
  8703  000808  0100               	movlb	0	; () banked
  8704  00080A  51F8               	movf	_logstate& (0+255),w,b
  8705  00080C  0100               	movlb	0	; () banked
  8706  00080E  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  8707  000810  B4D8               	btfsc	status,2,c
  8708  000812  0012               	return	
  8709                           
  8710                           ; BSR set to: 0
  8711                           ;UI.c: 202: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  8712                           
  8713                           ; BSR set to: 0
  8714                           
  8715                           ; BSR set to: 0
  8716  000814  0E01               	movlw	1
  8717  000816  EC72  F02A         	call	_lcdInst
  8718  00081A  0E68               	movlw	104
  8719  00081C  0100               	movlb	0	; () banked
  8720  00081E  6FC4               	movwf	??_UI& (0+255),b
  8721  000820  0EE4               	movlw	228
  8722  000822                     u9697:
  8723  000822  2EE8               	decfsz	wreg,f,c
  8724  000824  D7FE               	bra	u9697
  8725  000826  2FC4               	decfsz	??_UI& (0+255),f,b
  8726  000828  D7FC               	bra	u9697
  8727  00082A  F000               	nop	
  8728                           
  8729                           ;UI.c: 203: lcdInst(0b10000000);;
  8730  00082C  0E80               	movlw	128
  8731  00082E  EC72  F02A         	call	_lcdInst
  8732                           
  8733                           ;UI.c: 204: printf("-- TOTAL CANS --");
  8734  000832  0E68               	movlw	low STR_28
  8735  000834  0100               	movlb	0	; () banked
  8736  000836  6F8E               	movwf	printf@f& (0+255),b
  8737  000838  0EFD               	movlw	high STR_28
  8738  00083A  0100               	movlb	0	; () banked
  8739  00083C  6F8F               	movwf	(printf@f+1)& (0+255),b
  8740  00083E  EC1E  F00B         	call	_printf	;wreg free
  8741                           
  8742                           ;UI.c: 205: lcdInst(0b11000000);;
  8743  000842  0EC0               	movlw	192
  8744  000844  EC72  F02A         	call	_lcdInst
  8745                           
  8746                           ;UI.c: 206: printf("%d", log_count_total);
  8747  000848  0E20               	movlw	low (STR_27+14)
  8748  00084A  0100               	movlb	0	; () banked
  8749  00084C  6F8E               	movwf	printf@f& (0+255),b
  8750  00084E  0EFE               	movlw	high (STR_27+14)
  8751  000850  0100               	movlb	0	; () banked
  8752  000852  6F8F               	movwf	(printf@f+1)& (0+255),b
  8753  000854  C143  F090         	movff	_log_count_total,?_printf+2
  8754  000858  C144  F091         	movff	_log_count_total+1,?_printf+3
  8755  00085C  EC1E  F00B         	call	_printf	;wreg free
  8756                           
  8757                           ;UI.c: 208: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  8758  000860  0E00               	movlw	0
  8759  000862  0100               	movlb	0	; () banked
  8760  000864  6FD4               	movwf	UI@i_447& (0+255),b
  8761  000866                     l9096:
  8762                           
  8763                           ; BSR set to: 0
  8764  000866  0E63               	movlw	99
  8765  000868  0100               	movlb	0	; () banked
  8766  00086A  65D4               	cpfsgt	UI@i_447& (0+255),b
  8767  00086C  D001               	goto	l9100
  8768  00086E  D00C               	goto	l9104
  8769  000870                     l9100:
  8770                           
  8771                           ; BSR set to: 0
  8772  000870  0E68               	movlw	104
  8773  000872  0100               	movlb	0	; () banked
  8774  000874  6FC4               	movwf	??_UI& (0+255),b
  8775  000876  0EE4               	movlw	228
  8776  000878                     u9707:
  8777  000878  2EE8               	decfsz	wreg,f,c
  8778  00087A  D7FE               	bra	u9707
  8779  00087C  2FC4               	decfsz	??_UI& (0+255),f,b
  8780  00087E  D7FC               	bra	u9707
  8781  000880  F000               	nop	
  8782  000882  0100               	movlb	0	; () banked
  8783  000884  2BD4               	incf	UI@i_447& (0+255),f,b
  8784  000886  D7EF               	goto	l9096
  8785  000888                     l9104:
  8786                           
  8787                           ; BSR set to: 0
  8788  000888  0100               	movlb	0	; () banked
  8789  00088A  51F8               	movf	_logstate& (0+255),w,b
  8790  00088C  0100               	movlb	0	; () banked
  8791  00088E  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  8792  000890  B4D8               	btfsc	status,2,c
  8793  000892  0012               	return	
  8794                           
  8795                           ; BSR set to: 0
  8796                           ;UI.c: 209: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  8797                           
  8798                           ; BSR set to: 0
  8799                           
  8800                           ; BSR set to: 0
  8801  000894  0E00               	movlw	0
  8802  000896  0100               	movlb	0	; () banked
  8803  000898  6FD5               	movwf	UI@i_448& (0+255),b
  8804  00089A                     l9110:
  8805                           
  8806                           ; BSR set to: 0
  8807  00089A  0E63               	movlw	99
  8808  00089C  0100               	movlb	0	; () banked
  8809  00089E  65D5               	cpfsgt	UI@i_448& (0+255),b
  8810  0008A0  D001               	goto	l9114
  8811  0008A2  D00C               	goto	l9118
  8812  0008A4                     l9114:
  8813                           
  8814                           ; BSR set to: 0
  8815  0008A4  0E68               	movlw	104
  8816  0008A6  0100               	movlb	0	; () banked
  8817  0008A8  6FC4               	movwf	??_UI& (0+255),b
  8818  0008AA  0EE4               	movlw	228
  8819  0008AC                     u9717:
  8820  0008AC  2EE8               	decfsz	wreg,f,c
  8821  0008AE  D7FE               	bra	u9717
  8822  0008B0  2FC4               	decfsz	??_UI& (0+255),f,b
  8823  0008B2  D7FC               	bra	u9717
  8824  0008B4  F000               	nop	
  8825  0008B6  0100               	movlb	0	; () banked
  8826  0008B8  2BD5               	incf	UI@i_448& (0+255),f,b
  8827  0008BA  D7EF               	goto	l9110
  8828  0008BC                     l9118:
  8829                           
  8830                           ; BSR set to: 0
  8831  0008BC  0100               	movlb	0	; () banked
  8832  0008BE  51F8               	movf	_logstate& (0+255),w,b
  8833  0008C0  0100               	movlb	0	; () banked
  8834  0008C2  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  8835  0008C4  B4D8               	btfsc	status,2,c
  8836  0008C6  0012               	return	
  8837  0008C8                     l9122:
  8838  0008C8  0100               	movlb	0	; () banked
  8839  0008CA  51F8               	movf	_logstate& (0+255),w,b
  8840  0008CC  0100               	movlb	0	; () banked
  8841  0008CE  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  8842  0008D0  B4D8               	btfsc	status,2,c
  8843  0008D2  0012               	return	
  8844  0008D4  D44C               	goto	l8818
  8845  0008D6                     __end_of_UI:
  8846                           	opt stack 0
  8847                           tblptru	equ	0xFF8
  8848                           tblptrh	equ	0xFF7
  8849                           tblptrl	equ	0xFF6
  8850                           tablat	equ	0xFF5
  8851                           prodh	equ	0xFF4
  8852                           prodl	equ	0xFF3
  8853                           intcon	equ	0xFF2
  8854                           intcon2	equ	0xFF1
  8855                           intcon3	equ	0xFF0
  8856                           postinc0	equ	0xFEE
  8857                           wreg	equ	0xFE8
  8858                           postdec1	equ	0xFE5
  8859                           fsr1l	equ	0xFE1
  8860                           indf2	equ	0xFDF
  8861                           postinc2	equ	0xFDE
  8862                           postdec2	equ	0xFDD
  8863                           fsr2h	equ	0xFDA
  8864                           fsr2l	equ	0xFD9
  8865                           status	equ	0xFD8
  8866                           
  8867 ;; *************** function _printRTC *****************
  8868 ;; Defined at:
  8869 ;;		line 63 in file "RTC.c"
  8870 ;; Parameters:    Size  Location     Type
  8871 ;;		None
  8872 ;; Auto vars:     Size  Location     Type
  8873 ;;  i               2   66[BANK0 ] int 
  8874 ;;  INT_time       14   46[BANK0 ] int [7]
  8875 ;;  month           4   62[BANK0 ] unsigned char [4]
  8876 ;;  RTC_month       2   60[BANK0 ] int 
  8877 ;; Return value:  Size  Location     Type
  8878 ;;                  1    wreg      void 
  8879 ;; Registers used:
  8880 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8881 ;; Tracked objects:
  8882 ;;		On entry : 0/0
  8883 ;;		On exit  : 0/0
  8884 ;;		Unchanged: 0/0
  8885 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8886 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8887 ;;      Locals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8888 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8889 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8890 ;;Total ram usage:       25 bytes
  8891 ;; Hardware stack levels used:    1
  8892 ;; Hardware stack levels required when called:   10
  8893 ;; This function calls:
  8894 ;;		_getRTC
  8895 ;;		_lcdInst
  8896 ;;		_printf
  8897 ;;		_strcpy
  8898 ;; This function is called by:
  8899 ;;		_UI
  8900 ;;		_change_state_to_menu_start
  8901 ;; This function uses a non-reentrant model
  8902 ;;
  8903                           
  8904                           	psect	text23
  8905  002736                     __ptext23:
  8906                           	opt stack 0
  8907  002736                     _printRTC:
  8908                           	opt stack 18
  8909                           
  8910                           ;RTC.c: 64: getRTC();
  8911                           
  8912                           ; BSR set to: 0
  8913                           ;incstack = 0
  8914  002736  EC8D  F023         	call	_getRTC	;wreg free
  8915                           
  8916                           ;RTC.c: 65: char month[] = "MMM";
  8917  00273A  C14B  F0BE         	movff	printRTC@F3231,printRTC@month
  8918  00273E  C14C  F0BF         	movff	printRTC@F3231+1,printRTC@month+1
  8919  002742  C14D  F0C0         	movff	printRTC@F3231+2,printRTC@month+2
  8920  002746  C14E  F0C1         	movff	printRTC@F3231+3,printRTC@month+3
  8921                           
  8922                           ;RTC.c: 66: int INT_time[7];
  8923                           ;RTC.c: 67: for(int i = 0; i < 7; i++){
  8924  00274A  0E00               	movlw	0
  8925  00274C  0100               	movlb	0	; () banked
  8926  00274E  6FC3               	movwf	(printRTC@i+1)& (0+255),b
  8927  002750  0E00               	movlw	0
  8928  002752  6FC2               	movwf	printRTC@i& (0+255),b
  8929                           
  8930                           ; BSR set to: 0
  8931  002754  0100               	movlb	0	; () banked
  8932  002756  BFC3               	btfsc	(printRTC@i+1)& (0+255),7,b
  8933  002758  D008               	goto	l6818
  8934  00275A  0100               	movlb	0	; () banked
  8935  00275C  51C3               	movf	(printRTC@i+1)& (0+255),w,b
  8936  00275E  E146               	bnz	l618
  8937  002760  0E07               	movlw	7
  8938  002762  0100               	movlb	0	; () banked
  8939  002764  5DC2               	subwf	printRTC@i& (0+255),w,b
  8940  002766  B0D8               	btfsc	status,0,c
  8941  002768  D041               	goto	l618
  8942  00276A                     l6818:
  8943                           
  8944                           ; BSR set to: 0
  8945                           ;RTC.c: 68: INT_time[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
  8946  00276A  0E1C               	movlw	low _time
  8947  00276C  0100               	movlb	0	; () banked
  8948  00276E  25C2               	addwf	printRTC@i& (0+255),w,b
  8949  002770  6ED9               	movwf	fsr2l,c
  8950  002772  0E01               	movlw	high _time
  8951  002774  0100               	movlb	0	; () banked
  8952  002776  21C3               	addwfc	(printRTC@i+1)& (0+255),w,b
  8953  002778  6EDA               	movwf	fsr2h,c
  8954  00277A  50DF               	movf	indf2,w,c
  8955  00277C  0100               	movlb	0	; () banked
  8956  00277E  6FAB               	movwf	??_printRTC& (0+255),b
  8957  002780  0100               	movlb	0	; () banked
  8958  002782  3BAB               	swapf	??_printRTC& (0+255),f,b
  8959  002784  0E0F               	movlw	15
  8960  002786  17AB               	andwf	??_printRTC& (0+255),f,b
  8961  002788  0E0F               	movlw	15
  8962  00278A  0100               	movlb	0	; () banked
  8963  00278C  17AB               	andwf	??_printRTC& (0+255),f,b
  8964  00278E  0100               	movlb	0	; () banked
  8965  002790  51AB               	movf	??_printRTC& (0+255),w,b
  8966  002792  0D0A               	mullw	10
  8967  002794  0E1C               	movlw	low _time
  8968  002796  0100               	movlb	0	; () banked
  8969  002798  25C2               	addwf	printRTC@i& (0+255),w,b
  8970  00279A  6ED9               	movwf	fsr2l,c
  8971  00279C  0E01               	movlw	high _time
  8972  00279E  0100               	movlb	0	; () banked
  8973  0027A0  21C3               	addwfc	(printRTC@i+1)& (0+255),w,b
  8974  0027A2  6EDA               	movwf	fsr2h,c
  8975  0027A4  50DF               	movf	indf2,w,c
  8976  0027A6  0B0F               	andlw	15
  8977  0027A8  0100               	movlb	0	; () banked
  8978  0027AA  6FAC               	movwf	(??_printRTC+1)& (0+255),b
  8979  0027AC  6BAD               	clrf	(??_printRTC+2)& (0+255),b
  8980  0027AE  50F3               	movf	prodl,w,c
  8981  0027B0  0100               	movlb	0	; () banked
  8982  0027B2  27AC               	addwf	(??_printRTC+1)& (0+255),f,b
  8983  0027B4  50F4               	movf	prodh,w,c
  8984  0027B6  0100               	movlb	0	; () banked
  8985  0027B8  23AD               	addwfc	(??_printRTC+2)& (0+255),f,b
  8986  0027BA  90D8               	bcf	status,0,c
  8987  0027BC  0100               	movlb	0	; () banked
  8988  0027BE  35C2               	rlcf	printRTC@i& (0+255),w,b
  8989  0027C0  6ED9               	movwf	fsr2l,c
  8990  0027C2  0100               	movlb	0	; () banked
  8991  0027C4  35C3               	rlcf	(printRTC@i+1)& (0+255),w,b
  8992  0027C6  6EDA               	movwf	fsr2h,c
  8993  0027C8  0EAE               	movlw	low printRTC@INT_time
  8994  0027CA  26D9               	addwf	fsr2l,f,c
  8995  0027CC  0E00               	movlw	high printRTC@INT_time
  8996  0027CE  22DA               	addwfc	fsr2h,f,c
  8997  0027D0  C0AC  FFDE         	movff	??_printRTC+1,postinc2
  8998  0027D4  C0AD  FFDD         	movff	??_printRTC+2,postdec2
  8999                           
  9000                           ; BSR set to: 0
  9001  0027D8  0100               	movlb	0	; () banked
  9002  0027DA  4BC2               	infsnz	printRTC@i& (0+255),f,b
  9003  0027DC  2BC3               	incf	(printRTC@i+1)& (0+255),f,b
  9004                           
  9005                           ; BSR set to: 0
  9006  0027DE  0100               	movlb	0	; () banked
  9007  0027E0  BFC3               	btfsc	(printRTC@i+1)& (0+255),7,b
  9008  0027E2  D7C3               	goto	l6818
  9009  0027E4  0100               	movlb	0	; () banked
  9010  0027E6  51C3               	movf	(printRTC@i+1)& (0+255),w,b
  9011  0027E8  E101               	bnz	u5490
  9012  0027EA  D7BA               	goto	L8
  9013  0027EC                     u5490:
  9014  0027EC                     l618:
  9015                           
  9016                           ; BSR set to: 0
  9017                           ;RTC.c: 69: }
  9018                           ;RTC.c: 70: int RTC_month = INT_time[5];
  9019  0027EC  C0B8  F0BC         	movff	printRTC@INT_time+10,printRTC@RTC_month
  9020  0027F0  C0B9  F0BD         	movff	printRTC@INT_time+11,printRTC@RTC_month+1
  9021                           
  9022                           ;RTC.c: 72: switch(RTC_month){
  9023  0027F4  D0B4               	goto	l6850
  9024  0027F6                     l6824:
  9025                           
  9026                           ; BSR set to: 0
  9027                           ;RTC.c: 74: strcpy(month, "JAN");
  9028  0027F6  0EBE               	movlw	low printRTC@month
  9029  0027F8  0100               	movlb	0	; () banked
  9030  0027FA  6F80               	movwf	strcpy@to& (0+255),b
  9031  0027FC  0E00               	movlw	high printRTC@month
  9032  0027FE  0100               	movlb	0	; () banked
  9033  002800  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9034  002802  0EDA               	movlw	low STR_8
  9035  002804  0100               	movlb	0	; () banked
  9036  002806  6F82               	movwf	strcpy@from& (0+255),b
  9037  002808  0EFF               	movlw	high STR_8
  9038  00280A  0100               	movlb	0	; () banked
  9039  00280C  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9040  00280E  ECCC  F027         	call	_strcpy	;wreg free
  9041                           
  9042                           ;RTC.c: 75: break;
  9043  002812  D0D4               	goto	l6852
  9044  002814                     l6826:
  9045                           
  9046                           ;RTC.c: 77: strcpy(month, "FEB");
  9047  002814  0EBE               	movlw	low printRTC@month
  9048  002816  0100               	movlb	0	; () banked
  9049  002818  6F80               	movwf	strcpy@to& (0+255),b
  9050  00281A  0E00               	movlw	high printRTC@month
  9051  00281C  0100               	movlb	0	; () banked
  9052  00281E  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9053  002820  0ECA               	movlw	low STR_9
  9054  002822  0100               	movlb	0	; () banked
  9055  002824  6F82               	movwf	strcpy@from& (0+255),b
  9056  002826  0EFF               	movlw	high STR_9
  9057  002828  0100               	movlb	0	; () banked
  9058  00282A  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9059  00282C  ECCC  F027         	call	_strcpy	;wreg free
  9060                           
  9061                           ;RTC.c: 78: break;
  9062  002830  D0C5               	goto	l6852
  9063  002832                     l6828:
  9064                           
  9065                           ;RTC.c: 80: strcpy(month, "MAR");
  9066  002832  0EBE               	movlw	low printRTC@month
  9067  002834  0100               	movlb	0	; () banked
  9068  002836  6F80               	movwf	strcpy@to& (0+255),b
  9069  002838  0E00               	movlw	high printRTC@month
  9070  00283A  0100               	movlb	0	; () banked
  9071  00283C  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9072  00283E  0EE6               	movlw	low STR_10
  9073  002840  0100               	movlb	0	; () banked
  9074  002842  6F82               	movwf	strcpy@from& (0+255),b
  9075  002844  0EFF               	movlw	high STR_10
  9076  002846  0100               	movlb	0	; () banked
  9077  002848  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9078  00284A  ECCC  F027         	call	_strcpy	;wreg free
  9079                           
  9080                           ;RTC.c: 81: break;
  9081  00284E  D0B6               	goto	l6852
  9082  002850                     l6830:
  9083                           
  9084                           ;RTC.c: 83: strcpy(month, "APR");
  9085  002850  0EBE               	movlw	low printRTC@month
  9086  002852  0100               	movlb	0	; () banked
  9087  002854  6F80               	movwf	strcpy@to& (0+255),b
  9088  002856  0E00               	movlw	high printRTC@month
  9089  002858  0100               	movlb	0	; () banked
  9090  00285A  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9091  00285C  0EEA               	movlw	low STR_11
  9092  00285E  0100               	movlb	0	; () banked
  9093  002860  6F82               	movwf	strcpy@from& (0+255),b
  9094  002862  0EFF               	movlw	high STR_11
  9095  002864  0100               	movlb	0	; () banked
  9096  002866  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9097  002868  ECCC  F027         	call	_strcpy	;wreg free
  9098                           
  9099                           ;RTC.c: 84: break;
  9100  00286C  D0A7               	goto	l6852
  9101  00286E                     l6832:
  9102                           
  9103                           ;RTC.c: 86: strcpy(month, "MAY");
  9104  00286E  0EBE               	movlw	low printRTC@month
  9105  002870  0100               	movlb	0	; () banked
  9106  002872  6F80               	movwf	strcpy@to& (0+255),b
  9107  002874  0E00               	movlw	high printRTC@month
  9108  002876  0100               	movlb	0	; () banked
  9109  002878  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9110  00287A  0EFA               	movlw	low STR_12
  9111  00287C  0100               	movlb	0	; () banked
  9112  00287E  6F82               	movwf	strcpy@from& (0+255),b
  9113  002880  0EFF               	movlw	high STR_12
  9114  002882  0100               	movlb	0	; () banked
  9115  002884  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9116  002886  ECCC  F027         	call	_strcpy	;wreg free
  9117                           
  9118                           ;RTC.c: 87: break;
  9119  00288A  D098               	goto	l6852
  9120  00288C                     l6834:
  9121                           
  9122                           ;RTC.c: 89: strcpy(month, "JUN");
  9123  00288C  0EBE               	movlw	low printRTC@month
  9124  00288E  0100               	movlb	0	; () banked
  9125  002890  6F80               	movwf	strcpy@to& (0+255),b
  9126  002892  0E00               	movlw	high printRTC@month
  9127  002894  0100               	movlb	0	; () banked
  9128  002896  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9129  002898  0EDE               	movlw	low STR_13
  9130  00289A  0100               	movlb	0	; () banked
  9131  00289C  6F82               	movwf	strcpy@from& (0+255),b
  9132  00289E  0EFF               	movlw	high STR_13
  9133  0028A0  0100               	movlb	0	; () banked
  9134  0028A2  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9135  0028A4  ECCC  F027         	call	_strcpy	;wreg free
  9136                           
  9137                           ;RTC.c: 90: break;
  9138  0028A8  D089               	goto	l6852
  9139  0028AA                     l6836:
  9140                           
  9141                           ;RTC.c: 92: strcpy(month, "JUL");
  9142  0028AA  0EBE               	movlw	low printRTC@month
  9143  0028AC  0100               	movlb	0	; () banked
  9144  0028AE  6F80               	movwf	strcpy@to& (0+255),b
  9145  0028B0  0E00               	movlw	high printRTC@month
  9146  0028B2  0100               	movlb	0	; () banked
  9147  0028B4  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9148  0028B6  0ED6               	movlw	low STR_14
  9149  0028B8  0100               	movlb	0	; () banked
  9150  0028BA  6F82               	movwf	strcpy@from& (0+255),b
  9151  0028BC  0EFF               	movlw	high STR_14
  9152  0028BE  0100               	movlb	0	; () banked
  9153  0028C0  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9154  0028C2  ECCC  F027         	call	_strcpy	;wreg free
  9155                           
  9156                           ;RTC.c: 93: break;
  9157  0028C6  D07A               	goto	l6852
  9158  0028C8                     l6838:
  9159                           
  9160                           ;RTC.c: 95: strcpy(month, "AUG");
  9161  0028C8  0EBE               	movlw	low printRTC@month
  9162  0028CA  0100               	movlb	0	; () banked
  9163  0028CC  6F80               	movwf	strcpy@to& (0+255),b
  9164  0028CE  0E00               	movlw	high printRTC@month
  9165  0028D0  0100               	movlb	0	; () banked
  9166  0028D2  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9167  0028D4  0ED2               	movlw	low STR_15
  9168  0028D6  0100               	movlb	0	; () banked
  9169  0028D8  6F82               	movwf	strcpy@from& (0+255),b
  9170  0028DA  0EFF               	movlw	high STR_15
  9171  0028DC  0100               	movlb	0	; () banked
  9172  0028DE  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9173  0028E0  ECCC  F027         	call	_strcpy	;wreg free
  9174                           
  9175                           ;RTC.c: 96: break;
  9176  0028E4  D06B               	goto	l6852
  9177  0028E6                     l6840:
  9178                           
  9179                           ;RTC.c: 98: strcpy(month, "SEP");
  9180  0028E6  0EBE               	movlw	low printRTC@month
  9181  0028E8  0100               	movlb	0	; () banked
  9182  0028EA  6F80               	movwf	strcpy@to& (0+255),b
  9183  0028EC  0E00               	movlw	high printRTC@month
  9184  0028EE  0100               	movlb	0	; () banked
  9185  0028F0  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9186  0028F2  0EE2               	movlw	low STR_16
  9187  0028F4  0100               	movlb	0	; () banked
  9188  0028F6  6F82               	movwf	strcpy@from& (0+255),b
  9189  0028F8  0EFF               	movlw	high STR_16
  9190  0028FA  0100               	movlb	0	; () banked
  9191  0028FC  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9192  0028FE  ECCC  F027         	call	_strcpy	;wreg free
  9193                           
  9194                           ;RTC.c: 99: break;
  9195  002902  D05C               	goto	l6852
  9196  002904                     l6842:
  9197                           
  9198                           ;RTC.c: 101: strcpy(month, "OCT");
  9199  002904  0EBE               	movlw	low printRTC@month
  9200  002906  0100               	movlb	0	; () banked
  9201  002908  6F80               	movwf	strcpy@to& (0+255),b
  9202  00290A  0E00               	movlw	high printRTC@month
  9203  00290C  0100               	movlb	0	; () banked
  9204  00290E  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9205  002910  0EF2               	movlw	low STR_17
  9206  002912  0100               	movlb	0	; () banked
  9207  002914  6F82               	movwf	strcpy@from& (0+255),b
  9208  002916  0EFF               	movlw	high STR_17
  9209  002918  0100               	movlb	0	; () banked
  9210  00291A  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9211  00291C  ECCC  F027         	call	_strcpy	;wreg free
  9212                           
  9213                           ;RTC.c: 102: break;
  9214  002920  D04D               	goto	l6852
  9215  002922                     l6844:
  9216                           
  9217                           ;RTC.c: 104: strcpy(month, "NOV");
  9218  002922  0EBE               	movlw	low printRTC@month
  9219  002924  0100               	movlb	0	; () banked
  9220  002926  6F80               	movwf	strcpy@to& (0+255),b
  9221  002928  0E00               	movlw	high printRTC@month
  9222  00292A  0100               	movlb	0	; () banked
  9223  00292C  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9224  00292E  0EF6               	movlw	low STR_18
  9225  002930  0100               	movlb	0	; () banked
  9226  002932  6F82               	movwf	strcpy@from& (0+255),b
  9227  002934  0EFF               	movlw	high STR_18
  9228  002936  0100               	movlb	0	; () banked
  9229  002938  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9230  00293A  ECCC  F027         	call	_strcpy	;wreg free
  9231                           
  9232                           ;RTC.c: 105: break;
  9233  00293E  D03E               	goto	l6852
  9234  002940                     l6846:
  9235                           
  9236                           ;RTC.c: 107: strcpy(month, "DEC");
  9237  002940  0EBE               	movlw	low printRTC@month
  9238  002942  0100               	movlb	0	; () banked
  9239  002944  6F80               	movwf	strcpy@to& (0+255),b
  9240  002946  0E00               	movlw	high printRTC@month
  9241  002948  0100               	movlb	0	; () banked
  9242  00294A  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9243  00294C  0ECE               	movlw	low STR_19
  9244  00294E  0100               	movlb	0	; () banked
  9245  002950  6F82               	movwf	strcpy@from& (0+255),b
  9246  002952  0EFF               	movlw	high STR_19
  9247  002954  0100               	movlb	0	; () banked
  9248  002956  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9249  002958  ECCC  F027         	call	_strcpy	;wreg free
  9250                           
  9251                           ;RTC.c: 109: }
  9252                           
  9253                           ;RTC.c: 108: break;
  9254  00295C  D02F               	goto	l6852
  9255  00295E                     l6850:
  9256  00295E  C0BC  F0AB         	movff	printRTC@RTC_month,??_printRTC
  9257  002962  C0BD  F0AC         	movff	printRTC@RTC_month+1,??_printRTC+1
  9258                           
  9259                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9260                           ; Switch size 1, requested type "space"
  9261                           ; Number of cases is 1, Range of values is 0 to 0
  9262                           ; switch strategies available:
  9263                           ; Name         Instructions Cycles
  9264                           ; simple_byte            4     3 (average)
  9265                           ;	Chosen strategy is simple_byte
  9266  002966  0100               	movlb	0	; () banked
  9267  002968  51AC               	movf	(??_printRTC+1)& (0+255),w,b
  9268  00296A  0A00               	xorlw	0	; case 0
  9269  00296C  A4D8               	btfss	status,2,c
  9270  00296E  D026               	goto	l6852
  9271                           
  9272                           ; BSR set to: 0
  9273                           ; Switch size 1, requested type "space"
  9274                           ; Number of cases is 12, Range of values is 1 to 12
  9275                           ; switch strategies available:
  9276                           ; Name         Instructions Cycles
  9277                           ; simple_byte           37    19 (average)
  9278                           ;	Chosen strategy is simple_byte
  9279  002970  0100               	movlb	0	; () banked
  9280  002972  51AB               	movf	??_printRTC& (0+255),w,b
  9281  002974  0A01               	xorlw	1	; case 1
  9282  002976  B4D8               	btfsc	status,2,c
  9283  002978  D73E               	goto	l6824
  9284  00297A  0A03               	xorlw	3	; case 2
  9285  00297C  B4D8               	btfsc	status,2,c
  9286  00297E  D74A               	goto	l6826
  9287  002980  0A01               	xorlw	1	; case 3
  9288  002982  B4D8               	btfsc	status,2,c
  9289  002984  D756               	goto	l6828
  9290  002986  0A07               	xorlw	7	; case 4
  9291  002988  B4D8               	btfsc	status,2,c
  9292  00298A  D762               	goto	l6830
  9293  00298C  0A01               	xorlw	1	; case 5
  9294  00298E  B4D8               	btfsc	status,2,c
  9295  002990  D76E               	goto	l6832
  9296  002992  0A03               	xorlw	3	; case 6
  9297  002994  B4D8               	btfsc	status,2,c
  9298  002996  D77A               	goto	l6834
  9299  002998  0A01               	xorlw	1	; case 7
  9300  00299A  B4D8               	btfsc	status,2,c
  9301  00299C  D786               	goto	l6836
  9302  00299E  0A0F               	xorlw	15	; case 8
  9303  0029A0  B4D8               	btfsc	status,2,c
  9304  0029A2  D792               	goto	l6838
  9305  0029A4  0A01               	xorlw	1	; case 9
  9306  0029A6  B4D8               	btfsc	status,2,c
  9307  0029A8  D79E               	goto	l6840
  9308  0029AA  0A03               	xorlw	3	; case 10
  9309  0029AC  B4D8               	btfsc	status,2,c
  9310  0029AE  D7AA               	goto	l6842
  9311  0029B0  0A01               	xorlw	1	; case 11
  9312  0029B2  B4D8               	btfsc	status,2,c
  9313  0029B4  D7B6               	goto	l6844
  9314  0029B6  0A07               	xorlw	7	; case 12
  9315  0029B8  B4D8               	btfsc	status,2,c
  9316  0029BA  D7C2               	goto	l6846
  9317  0029BC                     l6852:
  9318                           
  9319                           ;RTC.c: 110: lcdInst(0b10000000);;
  9320  0029BC  0E80               	movlw	128
  9321  0029BE  EC72  F02A         	call	_lcdInst
  9322                           
  9323                           ;RTC.c: 111: printf("%02d%s | %02d:%02d:%02d", INT_time[4],month,INT_time[2],INT_time[1]
      +                          ,INT_time[0]);
  9324  0029C2  0ED0               	movlw	low STR_21
  9325  0029C4  0100               	movlb	0	; () banked
  9326  0029C6  6F8E               	movwf	printf@f& (0+255),b
  9327  0029C8  0EFA               	movlw	high STR_21
  9328  0029CA  0100               	movlb	0	; () banked
  9329  0029CC  6F8F               	movwf	(printf@f+1)& (0+255),b
  9330  0029CE  C0B6  F090         	movff	printRTC@INT_time+8,?_printf+2
  9331  0029D2  C0B7  F091         	movff	printRTC@INT_time+9,?_printf+3
  9332  0029D6  0EBE               	movlw	low printRTC@month
  9333  0029D8  0100               	movlb	0	; () banked
  9334  0029DA  6F92               	movwf	(?_printf+4)& (0+255),b
  9335  0029DC  0E00               	movlw	high printRTC@month
  9336  0029DE  0100               	movlb	0	; () banked
  9337  0029E0  6F93               	movwf	(?_printf+5)& (0+255),b
  9338  0029E2  C0B2  F094         	movff	printRTC@INT_time+4,?_printf+6
  9339  0029E6  C0B3  F095         	movff	printRTC@INT_time+5,?_printf+7
  9340  0029EA  C0B0  F096         	movff	printRTC@INT_time+2,?_printf+8
  9341  0029EE  C0B1  F097         	movff	printRTC@INT_time+3,?_printf+9
  9342  0029F2  C0AE  F098         	movff	printRTC@INT_time,?_printf+10
  9343  0029F6  C0AF  F099         	movff	printRTC@INT_time+1,?_printf+11
  9344  0029FA  EC1E  F00B         	call	_printf	;wreg free
  9345  0029FE  0012               	return		;funcret
  9346  002A00                     __end_of_printRTC:
  9347                           	opt stack 0
  9348                           tblptru	equ	0xFF8
  9349                           tblptrh	equ	0xFF7
  9350                           tblptrl	equ	0xFF6
  9351                           tablat	equ	0xFF5
  9352                           prodh	equ	0xFF4
  9353                           prodl	equ	0xFF3
  9354                           intcon	equ	0xFF2
  9355                           intcon2	equ	0xFF1
  9356                           intcon3	equ	0xFF0
  9357                           postinc0	equ	0xFEE
  9358                           wreg	equ	0xFE8
  9359                           postdec1	equ	0xFE5
  9360                           fsr1l	equ	0xFE1
  9361                           indf2	equ	0xFDF
  9362                           postinc2	equ	0xFDE
  9363                           postdec2	equ	0xFDD
  9364                           fsr2h	equ	0xFDA
  9365                           fsr2l	equ	0xFD9
  9366                           status	equ	0xFD8
  9367                           
  9368 ;; *************** function _strcpy *****************
  9369 ;; Defined at:
  9370 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strcpy.c"
  9371 ;; Parameters:    Size  Location     Type
  9372 ;;  to              2    0[BANK0 ] PTR unsigned char 
  9373 ;;		 -> printRTC@month(4), UI@month(4), 
  9374 ;;  from            2    2[BANK0 ] PTR const unsigned char 
  9375 ;;		 -> STR_62(4), STR_61(4), STR_60(4), STR_59(4), 
  9376 ;;		 -> STR_58(4), STR_57(4), STR_56(4), STR_55(4), 
  9377 ;;		 -> STR_54(4), STR_53(4), STR_52(4), STR_51(4), 
  9378 ;;		 -> STR_20(4), STR_19(4), STR_18(4), STR_17(4), 
  9379 ;;		 -> STR_16(4), STR_15(4), STR_14(4), STR_13(4), 
  9380 ;;		 -> STR_12(4), STR_11(4), STR_10(4), STR_9(4), 
  9381 ;;		 -> STR_8(4), 
  9382 ;; Auto vars:     Size  Location     Type
  9383 ;;  cp              2    4[BANK0 ] PTR unsigned char 
  9384 ;;		 -> printRTC@month(4), UI@month(4), 
  9385 ;; Return value:  Size  Location     Type
  9386 ;;                  2    0[BANK0 ] PTR unsigned char 
  9387 ;; Registers used:
  9388 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  9389 ;; Tracked objects:
  9390 ;;		On entry : 0/0
  9391 ;;		On exit  : 0/0
  9392 ;;		Unchanged: 0/0
  9393 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9394 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9395 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9396 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9397 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9398 ;;Total ram usage:        6 bytes
  9399 ;; Hardware stack levels used:    1
  9400 ;; Hardware stack levels required when called:    7
  9401 ;; This function calls:
  9402 ;;		Nothing
  9403 ;; This function is called by:
  9404 ;;		_UI
  9405 ;;		_printRTC
  9406 ;; This function uses a non-reentrant model
  9407 ;;
  9408                           
  9409                           	psect	text24
  9410  004F98                     __ptext24:
  9411                           	opt stack 0
  9412  004F98                     _strcpy:
  9413                           	opt stack 20
  9414                           
  9415                           ;incstack = 0
  9416  004F98  C080  F084         	movff	strcpy@to,strcpy@cp
  9417  004F9C  C081  F085         	movff	strcpy@to+1,strcpy@cp+1
  9418  004FA0  D006               	goto	l6558
  9419  004FA2                     l6556:
  9420  004FA2  0100               	movlb	0	; () banked
  9421  004FA4  4B84               	infsnz	strcpy@cp& (0+255),f,b
  9422  004FA6  2B85               	incf	(strcpy@cp+1)& (0+255),f,b
  9423  004FA8  0100               	movlb	0	; () banked
  9424  004FAA  4B82               	infsnz	strcpy@from& (0+255),f,b
  9425  004FAC  2B83               	incf	(strcpy@from+1)& (0+255),f,b
  9426  004FAE                     l6558:
  9427  004FAE  C082  FFF6         	movff	strcpy@from,tblptrl
  9428  004FB2  C083  FFF7         	movff	strcpy@from+1,tblptrh
  9429  004FB6                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  9430  004FB6  6AF8               	clrf	tblptru,c
  9431  004FB8                     	endif
  9432  004FB8                     	if	0	;tblptru may be non-zero
  9433  004FB8                     	endif
  9434  004FB8  C084  FFD9         	movff	strcpy@cp,fsr2l
  9435  004FBC  C085  FFDA         	movff	strcpy@cp+1,fsr2h
  9436  004FC0  0008               	tblrd		*
  9437  004FC2  CFF5 FFDF          	movff	tablat,indf2
  9438  004FC6  50DF               	movf	indf2,w,c
  9439  004FC8  B4D8               	btfsc	status,2,c
  9440  004FCA  0012               	return	
  9441  004FCC  D7EA               	goto	l6556
  9442  004FCE                     __end_of_strcpy:
  9443                           	opt stack 0
  9444                           tblptru	equ	0xFF8
  9445                           tblptrh	equ	0xFF7
  9446                           tblptrl	equ	0xFF6
  9447                           tablat	equ	0xFF5
  9448                           prodh	equ	0xFF4
  9449                           prodl	equ	0xFF3
  9450                           intcon	equ	0xFF2
  9451                           intcon2	equ	0xFF1
  9452                           intcon3	equ	0xFF0
  9453                           postinc0	equ	0xFEE
  9454                           wreg	equ	0xFE8
  9455                           postdec1	equ	0xFE5
  9456                           fsr1l	equ	0xFE1
  9457                           indf2	equ	0xFDF
  9458                           postinc2	equ	0xFDE
  9459                           postdec2	equ	0xFDD
  9460                           fsr2h	equ	0xFDA
  9461                           fsr2l	equ	0xFD9
  9462                           status	equ	0xFD8
  9463                           
  9464 ;; *************** function _getRTC *****************
  9465 ;; Defined at:
  9466 ;;		line 44 in file "RTC.c"
  9467 ;; Parameters:    Size  Location     Type
  9468 ;;		None
  9469 ;; Auto vars:     Size  Location     Type
  9470 ;;  i               2    3[BANK0 ] int 
  9471 ;; Return value:  Size  Location     Type
  9472 ;;                  1    wreg      void 
  9473 ;; Registers used:
  9474 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9475 ;; Tracked objects:
  9476 ;;		On entry : 0/0
  9477 ;;		On exit  : 0/0
  9478 ;;		Unchanged: 0/0
  9479 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9480 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9481 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9482 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9483 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9484 ;;Total ram usage:        2 bytes
  9485 ;; Hardware stack levels used:    1
  9486 ;; Hardware stack levels required when called:    9
  9487 ;; This function calls:
  9488 ;;		_I2C_Master_Read
  9489 ;;		_I2C_Master_Start
  9490 ;;		_I2C_Master_Stop
  9491 ;;		_I2C_Master_Write
  9492 ;; This function is called by:
  9493 ;;		_printRTC
  9494 ;;		_initSortTimer
  9495 ;; This function uses a non-reentrant model
  9496 ;;
  9497                           
  9498                           	psect	text25
  9499  00471A                     __ptext25:
  9500                           	opt stack 0
  9501  00471A                     _getRTC:
  9502                           	opt stack 18
  9503                           
  9504                           ;RTC.c: 48: I2C_Master_Start();
  9505                           
  9506                           ;incstack = 0
  9507  00471A  EC98  F02A         	call	_I2C_Master_Start	;wreg free
  9508                           
  9509                           ;RTC.c: 49: I2C_Master_Write(0b11010000);
  9510  00471E  0E00               	movlw	0
  9511  004720  0100               	movlb	0	; () banked
  9512  004722  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  9513  004724  0ED0               	movlw	208
  9514  004726  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  9515  004728  EC86  F02A         	call	_I2C_Master_Write	;wreg free
  9516                           
  9517                           ;RTC.c: 50: I2C_Master_Write(0x00);
  9518  00472C  0E00               	movlw	0
  9519  00472E  0100               	movlb	0	; () banked
  9520  004730  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  9521  004732  0E00               	movlw	0
  9522  004734  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  9523  004736  EC86  F02A         	call	_I2C_Master_Write	;wreg free
  9524                           
  9525                           ;RTC.c: 51: I2C_Master_Stop();
  9526  00473A  EC94  F02A         	call	_I2C_Master_Stop	;wreg free
  9527                           
  9528                           ;RTC.c: 54: I2C_Master_Start();
  9529  00473E  EC98  F02A         	call	_I2C_Master_Start	;wreg free
  9530                           
  9531                           ;RTC.c: 55: I2C_Master_Write(0b11010001);
  9532  004742  0E00               	movlw	0
  9533  004744  0100               	movlb	0	; () banked
  9534  004746  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  9535  004748  0ED1               	movlw	209
  9536  00474A  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  9537  00474C  EC86  F02A         	call	_I2C_Master_Write	;wreg free
  9538                           
  9539                           ;RTC.c: 56: for(int i = 0; i < 6; i++){
  9540  004750  0E00               	movlw	0
  9541  004752  0100               	movlb	0	; () banked
  9542  004754  6F84               	movwf	(getRTC@i+1)& (0+255),b
  9543  004756  0E00               	movlw	0
  9544  004758  6F83               	movwf	getRTC@i& (0+255),b
  9545  00475A                     l6564:
  9546                           
  9547                           ; BSR set to: 0
  9548  00475A  0100               	movlb	0	; () banked
  9549  00475C  BF84               	btfsc	(getRTC@i+1)& (0+255),7,b
  9550  00475E  D008               	goto	l6568
  9551  004760  0100               	movlb	0	; () banked
  9552  004762  5184               	movf	(getRTC@i+1)& (0+255),w,b
  9553  004764  E115               	bnz	l6574
  9554  004766  0E06               	movlw	6
  9555  004768  0100               	movlb	0	; () banked
  9556  00476A  5D83               	subwf	getRTC@i& (0+255),w,b
  9557  00476C  B0D8               	btfsc	status,0,c
  9558  00476E  D010               	goto	l6574
  9559  004770                     l6568:
  9560                           
  9561                           ; BSR set to: 0
  9562                           ;RTC.c: 57: time[i] = I2C_Master_Read(1);
  9563  004770  0E1C               	movlw	low _time
  9564  004772  0100               	movlb	0	; () banked
  9565  004774  2583               	addwf	getRTC@i& (0+255),w,b
  9566  004776  6ED9               	movwf	fsr2l,c
  9567  004778  0E01               	movlw	high _time
  9568  00477A  0100               	movlb	0	; () banked
  9569  00477C  2184               	addwfc	(getRTC@i+1)& (0+255),w,b
  9570  00477E  6EDA               	movwf	fsr2h,c
  9571  004780  0E01               	movlw	1
  9572  004782  EC24  F029         	call	_I2C_Master_Read
  9573  004786  6EDF               	movwf	indf2,c
  9574  004788  0100               	movlb	0	; () banked
  9575  00478A  4B83               	infsnz	getRTC@i& (0+255),f,b
  9576  00478C  2B84               	incf	(getRTC@i+1)& (0+255),f,b
  9577  00478E  D7E5               	goto	l6564
  9578  004790                     l6574:
  9579                           
  9580                           ; BSR set to: 0
  9581                           ;RTC.c: 58: }
  9582                           ;RTC.c: 59: time[6] = I2C_Master_Read(0);
  9583  004790  0E00               	movlw	0
  9584  004792  EC24  F029         	call	_I2C_Master_Read
  9585  004796  0101               	movlb	1	; () banked
  9586  004798  6F22               	movwf	(_time+6)& (0+255),b
  9587                           
  9588                           ;RTC.c: 60: I2C_Master_Stop();
  9589  00479A  EC94  F02A         	call	_I2C_Master_Stop	;wreg free
  9590  00479E  0012               	return		;funcret
  9591  0047A0                     __end_of_getRTC:
  9592                           	opt stack 0
  9593                           tblptru	equ	0xFF8
  9594                           tblptrh	equ	0xFF7
  9595                           tblptrl	equ	0xFF6
  9596                           tablat	equ	0xFF5
  9597                           prodh	equ	0xFF4
  9598                           prodl	equ	0xFF3
  9599                           intcon	equ	0xFF2
  9600                           intcon2	equ	0xFF1
  9601                           intcon3	equ	0xFF0
  9602                           postinc0	equ	0xFEE
  9603                           wreg	equ	0xFE8
  9604                           postdec1	equ	0xFE5
  9605                           fsr1l	equ	0xFE1
  9606                           indf2	equ	0xFDF
  9607                           postinc2	equ	0xFDE
  9608                           postdec2	equ	0xFDD
  9609                           fsr2h	equ	0xFDA
  9610                           fsr2l	equ	0xFD9
  9611                           status	equ	0xFD8
  9612                           
  9613 ;; *************** function _I2C_Master_Write *****************
  9614 ;; Defined at:
  9615 ;;		line 49 in file "I2C.c"
  9616 ;; Parameters:    Size  Location     Type
  9617 ;;  d               2    1[BANK0 ] unsigned int 
  9618 ;; Auto vars:     Size  Location     Type
  9619 ;;		None
  9620 ;; Return value:  Size  Location     Type
  9621 ;;                  1    wreg      void 
  9622 ;; Registers used:
  9623 ;;		wreg, status,2, status,0, cstack
  9624 ;; Tracked objects:
  9625 ;;		On entry : 0/0
  9626 ;;		On exit  : 0/0
  9627 ;;		Unchanged: 0/0
  9628 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9629 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9630 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9631 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9632 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9633 ;;Total ram usage:        2 bytes
  9634 ;; Hardware stack levels used:    1
  9635 ;; Hardware stack levels required when called:    8
  9636 ;; This function calls:
  9637 ;;		_I2C_Master_Wait
  9638 ;; This function is called by:
  9639 ;;		_loadRTC
  9640 ;;		_getRTC
  9641 ;; This function uses a non-reentrant model
  9642 ;;
  9643                           
  9644                           	psect	text26
  9645  00550C                     __ptext26:
  9646                           	opt stack 0
  9647  00550C                     _I2C_Master_Write:
  9648                           	opt stack 18
  9649                           
  9650                           ;I2C.c: 51: I2C_Master_Wait();
  9651                           
  9652                           ;incstack = 0
  9653  00550C  EC57  F02A         	call	_I2C_Master_Wait	;wreg free
  9654                           
  9655                           ;I2C.c: 52: SSPBUF = d;
  9656  005510  C081  FFC9         	movff	I2C_Master_Write@d,4041	;volatile
  9657  005514  0012               	return		;funcret
  9658  005516                     __end_of_I2C_Master_Write:
  9659                           	opt stack 0
  9660                           tblptru	equ	0xFF8
  9661                           tblptrh	equ	0xFF7
  9662                           tblptrl	equ	0xFF6
  9663                           tablat	equ	0xFF5
  9664                           prodh	equ	0xFF4
  9665                           prodl	equ	0xFF3
  9666                           intcon	equ	0xFF2
  9667                           intcon2	equ	0xFF1
  9668                           intcon3	equ	0xFF0
  9669                           postinc0	equ	0xFEE
  9670                           wreg	equ	0xFE8
  9671                           postdec1	equ	0xFE5
  9672                           fsr1l	equ	0xFE1
  9673                           indf2	equ	0xFDF
  9674                           postinc2	equ	0xFDE
  9675                           postdec2	equ	0xFDD
  9676                           fsr2h	equ	0xFDA
  9677                           fsr2l	equ	0xFD9
  9678                           status	equ	0xFD8
  9679                           
  9680 ;; *************** function _I2C_Master_Stop *****************
  9681 ;; Defined at:
  9682 ;;		line 43 in file "I2C.c"
  9683 ;; Parameters:    Size  Location     Type
  9684 ;;		None
  9685 ;; Auto vars:     Size  Location     Type
  9686 ;;		None
  9687 ;; Return value:  Size  Location     Type
  9688 ;;                  1    wreg      void 
  9689 ;; Registers used:
  9690 ;;		wreg, status,2, status,0, cstack
  9691 ;; Tracked objects:
  9692 ;;		On entry : 0/0
  9693 ;;		On exit  : 0/0
  9694 ;;		Unchanged: 0/0
  9695 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9696 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9697 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9698 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9699 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9700 ;;Total ram usage:        0 bytes
  9701 ;; Hardware stack levels used:    1
  9702 ;; Hardware stack levels required when called:    8
  9703 ;; This function calls:
  9704 ;;		_I2C_Master_Wait
  9705 ;; This function is called by:
  9706 ;;		_loadRTC
  9707 ;;		_getRTC
  9708 ;; This function uses a non-reentrant model
  9709 ;;
  9710                           
  9711                           	psect	text27
  9712  005528                     __ptext27:
  9713                           	opt stack 0
  9714  005528                     _I2C_Master_Stop:
  9715                           	opt stack 18
  9716                           
  9717                           ;I2C.c: 45: I2C_Master_Wait();
  9718                           
  9719                           ;incstack = 0
  9720  005528  EC57  F02A         	call	_I2C_Master_Wait	;wreg free
  9721                           
  9722                           ;I2C.c: 46: PEN = 1;
  9723  00552C  84C5               	bsf	4037,2,c	;volatile
  9724  00552E  0012               	return		;funcret
  9725  005530                     __end_of_I2C_Master_Stop:
  9726                           	opt stack 0
  9727                           tblptru	equ	0xFF8
  9728                           tblptrh	equ	0xFF7
  9729                           tblptrl	equ	0xFF6
  9730                           tablat	equ	0xFF5
  9731                           prodh	equ	0xFF4
  9732                           prodl	equ	0xFF3
  9733                           intcon	equ	0xFF2
  9734                           intcon2	equ	0xFF1
  9735                           intcon3	equ	0xFF0
  9736                           postinc0	equ	0xFEE
  9737                           wreg	equ	0xFE8
  9738                           postdec1	equ	0xFE5
  9739                           fsr1l	equ	0xFE1
  9740                           indf2	equ	0xFDF
  9741                           postinc2	equ	0xFDE
  9742                           postdec2	equ	0xFDD
  9743                           fsr2h	equ	0xFDA
  9744                           fsr2l	equ	0xFD9
  9745                           status	equ	0xFD8
  9746                           
  9747 ;; *************** function _I2C_Master_Start *****************
  9748 ;; Defined at:
  9749 ;;		line 31 in file "I2C.c"
  9750 ;; Parameters:    Size  Location     Type
  9751 ;;		None
  9752 ;; Auto vars:     Size  Location     Type
  9753 ;;		None
  9754 ;; Return value:  Size  Location     Type
  9755 ;;                  1    wreg      void 
  9756 ;; Registers used:
  9757 ;;		wreg, status,2, status,0, cstack
  9758 ;; Tracked objects:
  9759 ;;		On entry : 0/0
  9760 ;;		On exit  : 0/0
  9761 ;;		Unchanged: 0/0
  9762 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9763 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9764 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9765 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9766 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9767 ;;Total ram usage:        0 bytes
  9768 ;; Hardware stack levels used:    1
  9769 ;; Hardware stack levels required when called:    8
  9770 ;; This function calls:
  9771 ;;		_I2C_Master_Wait
  9772 ;; This function is called by:
  9773 ;;		_loadRTC
  9774 ;;		_getRTC
  9775 ;; This function uses a non-reentrant model
  9776 ;;
  9777                           
  9778                           	psect	text28
  9779  005530                     __ptext28:
  9780                           	opt stack 0
  9781  005530                     _I2C_Master_Start:
  9782                           	opt stack 18
  9783                           
  9784                           ;I2C.c: 33: I2C_Master_Wait();
  9785                           
  9786                           ;incstack = 0
  9787  005530  EC57  F02A         	call	_I2C_Master_Wait	;wreg free
  9788                           
  9789                           ;I2C.c: 34: SEN = 1;
  9790  005534  80C5               	bsf	4037,0,c	;volatile
  9791  005536  0012               	return		;funcret
  9792  005538                     __end_of_I2C_Master_Start:
  9793                           	opt stack 0
  9794                           tblptru	equ	0xFF8
  9795                           tblptrh	equ	0xFF7
  9796                           tblptrl	equ	0xFF6
  9797                           tablat	equ	0xFF5
  9798                           prodh	equ	0xFF4
  9799                           prodl	equ	0xFF3
  9800                           intcon	equ	0xFF2
  9801                           intcon2	equ	0xFF1
  9802                           intcon3	equ	0xFF0
  9803                           postinc0	equ	0xFEE
  9804                           wreg	equ	0xFE8
  9805                           postdec1	equ	0xFE5
  9806                           fsr1l	equ	0xFE1
  9807                           indf2	equ	0xFDF
  9808                           postinc2	equ	0xFDE
  9809                           postdec2	equ	0xFDD
  9810                           fsr2h	equ	0xFDA
  9811                           fsr2l	equ	0xFD9
  9812                           status	equ	0xFD8
  9813                           
  9814 ;; *************** function _I2C_Master_Read *****************
  9815 ;; Defined at:
  9816 ;;		line 55 in file "I2C.c"
  9817 ;; Parameters:    Size  Location     Type
  9818 ;;  a               1    wreg     unsigned char 
  9819 ;; Auto vars:     Size  Location     Type
  9820 ;;  a               1    1[BANK0 ] unsigned char 
  9821 ;;  temp            1    2[BANK0 ] unsigned char 
  9822 ;; Return value:  Size  Location     Type
  9823 ;;                  1    wreg      unsigned char 
  9824 ;; Registers used:
  9825 ;;		wreg, status,2, status,0, cstack
  9826 ;; Tracked objects:
  9827 ;;		On entry : 0/0
  9828 ;;		On exit  : 0/0
  9829 ;;		Unchanged: 0/0
  9830 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9831 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9832 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9833 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9834 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9835 ;;Total ram usage:        2 bytes
  9836 ;; Hardware stack levels used:    1
  9837 ;; Hardware stack levels required when called:    8
  9838 ;; This function calls:
  9839 ;;		_I2C_Master_Wait
  9840 ;; This function is called by:
  9841 ;;		_getRTC
  9842 ;; This function uses a non-reentrant model
  9843 ;;
  9844                           
  9845                           	psect	text29
  9846  005248                     __ptext29:
  9847                           	opt stack 0
  9848  005248                     _I2C_Master_Read:
  9849                           	opt stack 18
  9850                           
  9851                           ;incstack = 0
  9852                           ;I2C_Master_Read@a stored from wreg
  9853  005248  0100               	movlb	0	; () banked
  9854  00524A  6F81               	movwf	I2C_Master_Read@a& (0+255),b
  9855                           
  9856                           ;I2C.c: 57: unsigned char temp;
  9857                           ;I2C.c: 58: I2C_Master_Wait();
  9858  00524C  EC57  F02A         	call	_I2C_Master_Wait	;wreg free
  9859                           
  9860                           ;I2C.c: 59: RCEN = 1;
  9861  005250  86C5               	bsf	4037,3,c	;volatile
  9862                           
  9863                           ;I2C.c: 60: I2C_Master_Wait();
  9864  005252  EC57  F02A         	call	_I2C_Master_Wait	;wreg free
  9865                           
  9866                           ;I2C.c: 61: temp = SSPBUF;
  9867  005256  CFC9 F082          	movff	4041,I2C_Master_Read@temp	;volatile
  9868                           
  9869                           ;I2C.c: 62: I2C_Master_Wait();
  9870  00525A  EC57  F02A         	call	_I2C_Master_Wait	;wreg free
  9871                           
  9872                           ;I2C.c: 63: ACKDT = (a)?0:1;
  9873  00525E  0100               	movlb	0	; () banked
  9874  005260  5181               	movf	I2C_Master_Read@a& (0+255),w,b
  9875  005262  0100               	movlb	0	; () banked
  9876  005264  A4D8               	btfss	status,2,c
  9877  005266  D002               	goto	u4580
  9878  005268  8AC5               	bsf	4037,5,c	;volatile
  9879  00526A  D001               	goto	l6252
  9880  00526C                     u4580:
  9881  00526C  9AC5               	bcf	4037,5,c	;volatile
  9882  00526E                     l6252:
  9883                           
  9884                           ;I2C.c: 64: ACKEN = 1;
  9885  00526E  88C5               	bsf	4037,4,c	;volatile
  9886                           
  9887                           ;I2C.c: 65: return temp;
  9888  005270  0100               	movlb	0	; () banked
  9889  005272  5182               	movf	I2C_Master_Read@temp& (0+255),w,b
  9890  005274  0012               	return	
  9891  005276                     __end_of_I2C_Master_Read:
  9892                           	opt stack 0
  9893                           tblptru	equ	0xFF8
  9894                           tblptrh	equ	0xFF7
  9895                           tblptrl	equ	0xFF6
  9896                           tablat	equ	0xFF5
  9897                           prodh	equ	0xFF4
  9898                           prodl	equ	0xFF3
  9899                           intcon	equ	0xFF2
  9900                           intcon2	equ	0xFF1
  9901                           intcon3	equ	0xFF0
  9902                           postinc0	equ	0xFEE
  9903                           wreg	equ	0xFE8
  9904                           postdec1	equ	0xFE5
  9905                           fsr1l	equ	0xFE1
  9906                           indf2	equ	0xFDF
  9907                           postinc2	equ	0xFDE
  9908                           postdec2	equ	0xFDD
  9909                           fsr2h	equ	0xFDA
  9910                           fsr2l	equ	0xFD9
  9911                           status	equ	0xFD8
  9912                           
  9913 ;; *************** function _I2C_Master_Wait *****************
  9914 ;; Defined at:
  9915 ;;		line 26 in file "I2C.c"
  9916 ;; Parameters:    Size  Location     Type
  9917 ;;		None
  9918 ;; Auto vars:     Size  Location     Type
  9919 ;;		None
  9920 ;; Return value:  Size  Location     Type
  9921 ;;                  1    wreg      void 
  9922 ;; Registers used:
  9923 ;;		wreg, status,2, status,0
  9924 ;; Tracked objects:
  9925 ;;		On entry : 0/0
  9926 ;;		On exit  : 0/0
  9927 ;;		Unchanged: 0/0
  9928 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9929 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9930 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9931 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9932 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9933 ;;Total ram usage:        1 bytes
  9934 ;; Hardware stack levels used:    1
  9935 ;; Hardware stack levels required when called:    7
  9936 ;; This function calls:
  9937 ;;		Nothing
  9938 ;; This function is called by:
  9939 ;;		_I2C_Master_Start
  9940 ;;		_I2C_Master_Stop
  9941 ;;		_I2C_Master_Write
  9942 ;;		_I2C_Master_Read
  9943 ;;		_I2C_Master_RepeatedStart
  9944 ;; This function uses a non-reentrant model
  9945 ;;
  9946                           
  9947                           	psect	text30
  9948  0054AE                     __ptext30:
  9949                           	opt stack 0
  9950  0054AE                     _I2C_Master_Wait:
  9951                           	opt stack 18
  9952  0054AE                     l66:
  9953  0054AE  B4C7               	btfsc	4039,2,c	;volatile
  9954  0054B0  D7FE               	goto	l66
  9955  0054B2  CFC5 F080          	movff	4037,??_I2C_Master_Wait	;volatile
  9956  0054B6  0E1F               	movlw	31
  9957  0054B8  0100               	movlb	0	; () banked
  9958  0054BA  1780               	andwf	??_I2C_Master_Wait& (0+255),f,b
  9959  0054BC  B4D8               	btfsc	status,2,c
  9960  0054BE  0012               	return	
  9961  0054C0  D7F6               	goto	l66
  9962  0054C2                     __end_of_I2C_Master_Wait:
  9963                           	opt stack 0
  9964                           tblptru	equ	0xFF8
  9965                           tblptrh	equ	0xFF7
  9966                           tblptrl	equ	0xFF6
  9967                           tablat	equ	0xFF5
  9968                           prodh	equ	0xFF4
  9969                           prodl	equ	0xFF3
  9970                           intcon	equ	0xFF2
  9971                           intcon2	equ	0xFF1
  9972                           intcon3	equ	0xFF0
  9973                           postinc0	equ	0xFEE
  9974                           wreg	equ	0xFE8
  9975                           postdec1	equ	0xFE5
  9976                           fsr1l	equ	0xFE1
  9977                           indf2	equ	0xFDF
  9978                           postinc2	equ	0xFDE
  9979                           postdec2	equ	0xFDD
  9980                           fsr2h	equ	0xFDA
  9981                           fsr2l	equ	0xFD9
  9982                           status	equ	0xFD8
  9983                           
  9984 ;; *************** function _change_state_to_menu_22 *****************
  9985 ;; Defined at:
  9986 ;;		line 501 in file "UI.c"
  9987 ;; Parameters:    Size  Location     Type
  9988 ;;		None
  9989 ;; Auto vars:     Size  Location     Type
  9990 ;;		None
  9991 ;; Return value:  Size  Location     Type
  9992 ;;                  1    wreg      void 
  9993 ;; Registers used:
  9994 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9995 ;; Tracked objects:
  9996 ;;		On entry : 0/0
  9997 ;;		On exit  : 0/0
  9998 ;;		Unchanged: 0/0
  9999 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10000 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10001 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10002 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10003 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10004 ;;Total ram usage:        0 bytes
 10005 ;; Hardware stack levels used:    1
 10006 ;; Hardware stack levels required when called:   10
 10007 ;; This function calls:
 10008 ;;		_lcdInst
 10009 ;;		_printf
 10010 ;; This function is called by:
 10011 ;;		_UI
 10012 ;; This function uses a non-reentrant model
 10013 ;;
 10014                           
 10015                           	psect	text31
 10016  004F28                     __ptext31:
 10017                           	opt stack 0
 10018  004F28                     _change_state_to_menu_22:
 10019                           	opt stack 19
 10020                           
 10021                           ;UI.c: 502: cur_state = 22;
 10022                           
 10023                           ; BSR set to: 0
 10024                           ;incstack = 0
 10025  004F28  0E00               	movlw	0
 10026  004F2A  0100               	movlb	0	; () banked
 10027  004F2C  6FED               	movwf	(_cur_state+1)& (0+255),b
 10028  004F2E  0E16               	movlw	22
 10029  004F30  6FEC               	movwf	_cur_state& (0+255),b
 10030                           
 10031                           ; BSR set to: 0
 10032                           ;UI.c: 504: lcdInst(0b10000000);;
 10033  004F32  0E80               	movlw	128
 10034  004F34  EC72  F02A         	call	_lcdInst
 10035                           
 10036                           ;UI.c: 505: printf("2. SORT        <");
 10037  004F38  0ECE               	movlw	low STR_34
 10038  004F3A  0100               	movlb	0	; () banked
 10039  004F3C  6F8E               	movwf	printf@f& (0+255),b
 10040  004F3E  0EFD               	movlw	high STR_34
 10041  004F40  0100               	movlb	0	; () banked
 10042  004F42  6F8F               	movwf	(printf@f+1)& (0+255),b
 10043  004F44  EC1E  F00B         	call	_printf	;wreg free
 10044                           
 10045                           ;UI.c: 506: lcdInst(0b11000000);;
 10046  004F48  0EC0               	movlw	192
 10047  004F4A  EC72  F02A         	call	_lcdInst
 10048                           
 10049                           ;UI.c: 507: printf("3. LOGS         ");
 10050  004F4E  0E13               	movlw	low STR_36
 10051  004F50  0100               	movlb	0	; () banked
 10052  004F52  6F8E               	movwf	printf@f& (0+255),b
 10053  004F54  0EFD               	movlw	high STR_36
 10054  004F56  0100               	movlb	0	; () banked
 10055  004F58  6F8F               	movwf	(printf@f+1)& (0+255),b
 10056  004F5A  EC1E  F00B         	call	_printf	;wreg free
 10057  004F5E  0012               	return		;funcret
 10058  004F60                     __end_of_change_state_to_menu_22:
 10059                           	opt stack 0
 10060                           tblptru	equ	0xFF8
 10061                           tblptrh	equ	0xFF7
 10062                           tblptrl	equ	0xFF6
 10063                           tablat	equ	0xFF5
 10064                           prodh	equ	0xFF4
 10065                           prodl	equ	0xFF3
 10066                           intcon	equ	0xFF2
 10067                           intcon2	equ	0xFF1
 10068                           intcon3	equ	0xFF0
 10069                           postinc0	equ	0xFEE
 10070                           wreg	equ	0xFE8
 10071                           postdec1	equ	0xFE5
 10072                           fsr1l	equ	0xFE1
 10073                           indf2	equ	0xFDF
 10074                           postinc2	equ	0xFDE
 10075                           postdec2	equ	0xFDD
 10076                           fsr2h	equ	0xFDA
 10077                           fsr2l	equ	0xFD9
 10078                           status	equ	0xFD8
 10079                           
 10080 ;; *************** function _change_state_to_menu_12 *****************
 10081 ;; Defined at:
 10082 ;;		line 493 in file "UI.c"
 10083 ;; Parameters:    Size  Location     Type
 10084 ;;		None
 10085 ;; Auto vars:     Size  Location     Type
 10086 ;;		None
 10087 ;; Return value:  Size  Location     Type
 10088 ;;                  1    wreg      void 
 10089 ;; Registers used:
 10090 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10091 ;; Tracked objects:
 10092 ;;		On entry : 0/0
 10093 ;;		On exit  : 0/0
 10094 ;;		Unchanged: 0/0
 10095 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10096 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10097 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10098 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10099 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10100 ;;Total ram usage:        0 bytes
 10101 ;; Hardware stack levels used:    1
 10102 ;; Hardware stack levels required when called:   10
 10103 ;; This function calls:
 10104 ;;		_lcdInst
 10105 ;;		_printf
 10106 ;; This function is called by:
 10107 ;;		_UI
 10108 ;; This function uses a non-reentrant model
 10109 ;;
 10110                           
 10111                           	psect	text32
 10112  004F60                     __ptext32:
 10113                           	opt stack 0
 10114  004F60                     _change_state_to_menu_12:
 10115                           	opt stack 19
 10116                           
 10117                           ;UI.c: 494: cur_state = 12;
 10118                           
 10119                           ;incstack = 0
 10120  004F60  0E00               	movlw	0
 10121  004F62  0100               	movlb	0	; () banked
 10122  004F64  6FED               	movwf	(_cur_state+1)& (0+255),b
 10123  004F66  0E0C               	movlw	12
 10124  004F68  6FEC               	movwf	_cur_state& (0+255),b
 10125                           
 10126                           ; BSR set to: 0
 10127                           ;UI.c: 496: lcdInst(0b10000000);;
 10128  004F6A  0E80               	movlw	128
 10129  004F6C  EC72  F02A         	call	_lcdInst
 10130                           
 10131                           ;UI.c: 497: printf("1. DATE/TIME    ");
 10132  004F70  0E35               	movlw	low STR_33
 10133  004F72  0100               	movlb	0	; () banked
 10134  004F74  6F8E               	movwf	printf@f& (0+255),b
 10135  004F76  0EFD               	movlw	high STR_33
 10136  004F78  0100               	movlb	0	; () banked
 10137  004F7A  6F8F               	movwf	(printf@f+1)& (0+255),b
 10138  004F7C  EC1E  F00B         	call	_printf	;wreg free
 10139                           
 10140                           ;UI.c: 498: lcdInst(0b11000000);;
 10141  004F80  0EC0               	movlw	192
 10142  004F82  EC72  F02A         	call	_lcdInst
 10143                           
 10144                           ;UI.c: 499: printf("2. SORT        <");
 10145  004F86  0ECE               	movlw	low STR_34
 10146  004F88  0100               	movlb	0	; () banked
 10147  004F8A  6F8E               	movwf	printf@f& (0+255),b
 10148  004F8C  0EFD               	movlw	high STR_34
 10149  004F8E  0100               	movlb	0	; () banked
 10150  004F90  6F8F               	movwf	(printf@f+1)& (0+255),b
 10151  004F92  EC1E  F00B         	call	_printf	;wreg free
 10152  004F96  0012               	return		;funcret
 10153  004F98                     __end_of_change_state_to_menu_12:
 10154                           	opt stack 0
 10155                           tblptru	equ	0xFF8
 10156                           tblptrh	equ	0xFF7
 10157                           tblptrl	equ	0xFF6
 10158                           tablat	equ	0xFF5
 10159                           prodh	equ	0xFF4
 10160                           prodl	equ	0xFF3
 10161                           intcon	equ	0xFF2
 10162                           intcon2	equ	0xFF1
 10163                           intcon3	equ	0xFF0
 10164                           postinc0	equ	0xFEE
 10165                           wreg	equ	0xFE8
 10166                           postdec1	equ	0xFE5
 10167                           fsr1l	equ	0xFE1
 10168                           indf2	equ	0xFDF
 10169                           postinc2	equ	0xFDE
 10170                           postdec2	equ	0xFDD
 10171                           fsr2h	equ	0xFDA
 10172                           fsr2l	equ	0xFD9
 10173                           status	equ	0xFD8
 10174                           
 10175 ;; *************** function ___awmod *****************
 10176 ;; Defined at:
 10177 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
 10178 ;; Parameters:    Size  Location     Type
 10179 ;;  dividend        2    0[BANK0 ] int 
 10180 ;;  divisor         2    2[BANK0 ] int 
 10181 ;; Auto vars:     Size  Location     Type
 10182 ;;  sign            1    5[BANK0 ] unsigned char 
 10183 ;;  counter         1    4[BANK0 ] unsigned char 
 10184 ;; Return value:  Size  Location     Type
 10185 ;;                  2    0[BANK0 ] int 
 10186 ;; Registers used:
 10187 ;;		wreg, status,2, status,0
 10188 ;; Tracked objects:
 10189 ;;		On entry : 0/0
 10190 ;;		On exit  : 0/0
 10191 ;;		Unchanged: 0/0
 10192 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10193 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10194 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10195 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10196 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10197 ;;Total ram usage:        6 bytes
 10198 ;; Hardware stack levels used:    1
 10199 ;; Hardware stack levels required when called:    7
 10200 ;; This function calls:
 10201 ;;		Nothing
 10202 ;; This function is called by:
 10203 ;;		_UI
 10204 ;; This function uses a non-reentrant model
 10205 ;;
 10206                           
 10207                           	psect	text33
 10208  0045EC                     __ptext33:
 10209                           	opt stack 0
 10210  0045EC                     ___awmod:
 10211                           	opt stack 22
 10212                           
 10213                           ;incstack = 0
 10214  0045EC  0E00               	movlw	0
 10215  0045EE  0100               	movlb	0	; () banked
 10216  0045F0  6F85               	movwf	___awmod@sign& (0+255),b
 10217                           
 10218                           ; BSR set to: 0
 10219  0045F2  0100               	movlb	0	; () banked
 10220  0045F4  AF81               	btfss	(___awmod@dividend+1)& (0+255),7,b
 10221  0045F6  D008               	goto	l8704
 10222                           
 10223                           ; BSR set to: 0
 10224  0045F8  0100               	movlb	0	; () banked
 10225  0045FA  6D80               	negf	___awmod@dividend& (0+255),b
 10226  0045FC  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
 10227  0045FE  B0D8               	btfsc	status,0,c
 10228  004600  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
 10229                           
 10230                           ; BSR set to: 0
 10231  004602  0E01               	movlw	1
 10232  004604  0100               	movlb	0	; () banked
 10233  004606  6F85               	movwf	___awmod@sign& (0+255),b
 10234  004608                     l8704:
 10235                           
 10236                           ; BSR set to: 0
 10237  004608  0100               	movlb	0	; () banked
 10238  00460A  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
 10239  00460C  D005               	goto	l8708
 10240                           
 10241                           ; BSR set to: 0
 10242  00460E  0100               	movlb	0	; () banked
 10243  004610  6D82               	negf	___awmod@divisor& (0+255),b
 10244  004612  1F83               	comf	(___awmod@divisor+1)& (0+255),f,b
 10245  004614  B0D8               	btfsc	status,0,c
 10246  004616  2B83               	incf	(___awmod@divisor+1)& (0+255),f,b
 10247  004618                     l8708:
 10248                           
 10249                           ; BSR set to: 0
 10250  004618  0100               	movlb	0	; () banked
 10251  00461A  5182               	movf	___awmod@divisor& (0+255),w,b
 10252  00461C  0100               	movlb	0	; () banked
 10253  00461E  1183               	iorwf	(___awmod@divisor+1)& (0+255),w,b
 10254  004620  B4D8               	btfsc	status,2,c
 10255  004622  D026               	goto	l8724
 10256                           
 10257                           ; BSR set to: 0
 10258  004624  0E01               	movlw	1
 10259  004626  0100               	movlb	0	; () banked
 10260  004628  6F84               	movwf	___awmod@counter& (0+255),b
 10261  00462A  D006               	goto	l8714
 10262  00462C                     l8712:
 10263                           
 10264                           ; BSR set to: 0
 10265  00462C  0100               	movlb	0	; () banked
 10266  00462E  90D8               	bcf	status,0,c
 10267  004630  3782               	rlcf	___awmod@divisor& (0+255),f,b
 10268  004632  3783               	rlcf	(___awmod@divisor+1)& (0+255),f,b
 10269  004634  0100               	movlb	0	; () banked
 10270  004636  2B84               	incf	___awmod@counter& (0+255),f,b
 10271  004638                     l8714:
 10272                           
 10273                           ; BSR set to: 0
 10274  004638  0100               	movlb	0	; () banked
 10275  00463A  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
 10276  00463C  D7F7               	goto	l8712
 10277  00463E                     l8716:
 10278                           
 10279                           ; BSR set to: 0
 10280  00463E  0100               	movlb	0	; () banked
 10281  004640  5182               	movf	___awmod@divisor& (0+255),w,b
 10282  004642  0100               	movlb	0	; () banked
 10283  004644  5D80               	subwf	___awmod@dividend& (0+255),w,b
 10284  004646  0100               	movlb	0	; () banked
 10285  004648  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
 10286  00464A  0100               	movlb	0	; () banked
 10287  00464C  5981               	subwfb	(___awmod@dividend+1)& (0+255),w,b
 10288  00464E  A0D8               	btfss	status,0,c
 10289  004650  D008               	goto	l8720
 10290                           
 10291                           ; BSR set to: 0
 10292  004652  0100               	movlb	0	; () banked
 10293  004654  5182               	movf	___awmod@divisor& (0+255),w,b
 10294  004656  0100               	movlb	0	; () banked
 10295  004658  5F80               	subwf	___awmod@dividend& (0+255),f,b
 10296  00465A  0100               	movlb	0	; () banked
 10297  00465C  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
 10298  00465E  0100               	movlb	0	; () banked
 10299  004660  5B81               	subwfb	(___awmod@dividend+1)& (0+255),f,b
 10300  004662                     l8720:
 10301                           
 10302                           ; BSR set to: 0
 10303  004662  0100               	movlb	0	; () banked
 10304  004664  90D8               	bcf	status,0,c
 10305  004666  3383               	rrcf	(___awmod@divisor+1)& (0+255),f,b
 10306  004668  3382               	rrcf	___awmod@divisor& (0+255),f,b
 10307                           
 10308                           ; BSR set to: 0
 10309  00466A  0100               	movlb	0	; () banked
 10310  00466C  2F84               	decfsz	___awmod@counter& (0+255),f,b
 10311  00466E  D7E7               	goto	l8716
 10312  004670                     l8724:
 10313                           
 10314                           ; BSR set to: 0
 10315  004670  0100               	movlb	0	; () banked
 10316  004672  5185               	movf	___awmod@sign& (0+255),w,b
 10317  004674  0100               	movlb	0	; () banked
 10318  004676  B4D8               	btfsc	status,2,c
 10319  004678  D005               	goto	l8728
 10320                           
 10321                           ; BSR set to: 0
 10322  00467A  0100               	movlb	0	; () banked
 10323  00467C  6D80               	negf	___awmod@dividend& (0+255),b
 10324  00467E  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
 10325  004680  B0D8               	btfsc	status,0,c
 10326  004682  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
 10327  004684                     l8728:
 10328                           
 10329                           ; BSR set to: 0
 10330  004684  C080  F080         	movff	___awmod@dividend,?___awmod
 10331  004688  C081  F081         	movff	___awmod@dividend+1,?___awmod+1
 10332  00468C  0012               	return	
 10333  00468E                     __end_of___awmod:
 10334                           	opt stack 0
 10335                           tblptru	equ	0xFF8
 10336                           tblptrh	equ	0xFF7
 10337                           tblptrl	equ	0xFF6
 10338                           tablat	equ	0xFF5
 10339                           prodh	equ	0xFF4
 10340                           prodl	equ	0xFF3
 10341                           intcon	equ	0xFF2
 10342                           intcon2	equ	0xFF1
 10343                           intcon3	equ	0xFF0
 10344                           postinc0	equ	0xFEE
 10345                           wreg	equ	0xFE8
 10346                           postdec1	equ	0xFE5
 10347                           fsr1l	equ	0xFE1
 10348                           indf2	equ	0xFDF
 10349                           postinc2	equ	0xFDE
 10350                           postdec2	equ	0xFDD
 10351                           fsr2h	equ	0xFDA
 10352                           fsr2l	equ	0xFD9
 10353                           status	equ	0xFD8
 10354                           
 10355 ;; *************** function ___awdiv *****************
 10356 ;; Defined at:
 10357 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awdiv.c"
 10358 ;; Parameters:    Size  Location     Type
 10359 ;;  dividend        2    6[BANK0 ] int 
 10360 ;;  divisor         2    8[BANK0 ] int 
 10361 ;; Auto vars:     Size  Location     Type
 10362 ;;  quotient        2   12[BANK0 ] int 
 10363 ;;  sign            1   11[BANK0 ] unsigned char 
 10364 ;;  counter         1   10[BANK0 ] unsigned char 
 10365 ;; Return value:  Size  Location     Type
 10366 ;;                  2    6[BANK0 ] int 
 10367 ;; Registers used:
 10368 ;;		wreg, status,2, status,0
 10369 ;; Tracked objects:
 10370 ;;		On entry : 0/0
 10371 ;;		On exit  : 0/0
 10372 ;;		Unchanged: 0/0
 10373 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10374 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10375 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10376 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10377 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10378 ;;Total ram usage:        8 bytes
 10379 ;; Hardware stack levels used:    1
 10380 ;; Hardware stack levels required when called:    7
 10381 ;; This function calls:
 10382 ;;		Nothing
 10383 ;; This function is called by:
 10384 ;;		_UI
 10385 ;; This function uses a non-reentrant model
 10386 ;;
 10387                           
 10388                           	psect	text34
 10389  0043C8                     __ptext34:
 10390                           	opt stack 0
 10391  0043C8                     ___awdiv:
 10392                           	opt stack 22
 10393                           
 10394                           ; BSR set to: 0
 10395                           ;incstack = 0
 10396  0043C8  0E00               	movlw	0
 10397  0043CA  0100               	movlb	0	; () banked
 10398  0043CC  6F8B               	movwf	___awdiv@sign& (0+255),b
 10399                           
 10400                           ; BSR set to: 0
 10401  0043CE  0100               	movlb	0	; () banked
 10402  0043D0  AF89               	btfss	(___awdiv@divisor+1)& (0+255),7,b
 10403  0043D2  D008               	goto	l8660
 10404                           
 10405                           ; BSR set to: 0
 10406  0043D4  0100               	movlb	0	; () banked
 10407  0043D6  6D88               	negf	___awdiv@divisor& (0+255),b
 10408  0043D8  1F89               	comf	(___awdiv@divisor+1)& (0+255),f,b
 10409  0043DA  B0D8               	btfsc	status,0,c
 10410  0043DC  2B89               	incf	(___awdiv@divisor+1)& (0+255),f,b
 10411                           
 10412                           ; BSR set to: 0
 10413  0043DE  0E01               	movlw	1
 10414  0043E0  0100               	movlb	0	; () banked
 10415  0043E2  6F8B               	movwf	___awdiv@sign& (0+255),b
 10416  0043E4                     l8660:
 10417                           
 10418                           ; BSR set to: 0
 10419  0043E4  0100               	movlb	0	; () banked
 10420  0043E6  AF87               	btfss	(___awdiv@dividend+1)& (0+255),7,b
 10421  0043E8  D008               	goto	l8666
 10422                           
 10423                           ; BSR set to: 0
 10424  0043EA  0100               	movlb	0	; () banked
 10425  0043EC  6D86               	negf	___awdiv@dividend& (0+255),b
 10426  0043EE  1F87               	comf	(___awdiv@dividend+1)& (0+255),f,b
 10427  0043F0  B0D8               	btfsc	status,0,c
 10428  0043F2  2B87               	incf	(___awdiv@dividend+1)& (0+255),f,b
 10429                           
 10430                           ; BSR set to: 0
 10431  0043F4  0E01               	movlw	1
 10432  0043F6  0100               	movlb	0	; () banked
 10433  0043F8  1B8B               	xorwf	___awdiv@sign& (0+255),f,b
 10434  0043FA                     l8666:
 10435                           
 10436                           ; BSR set to: 0
 10437  0043FA  0E00               	movlw	0
 10438  0043FC  0100               	movlb	0	; () banked
 10439  0043FE  6F8D               	movwf	(___awdiv@quotient+1)& (0+255),b
 10440  004400  0E00               	movlw	0
 10441  004402  6F8C               	movwf	___awdiv@quotient& (0+255),b
 10442                           
 10443                           ; BSR set to: 0
 10444  004404  0100               	movlb	0	; () banked
 10445  004406  5188               	movf	___awdiv@divisor& (0+255),w,b
 10446  004408  0100               	movlb	0	; () banked
 10447  00440A  1189               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
 10448  00440C  B4D8               	btfsc	status,2,c
 10449  00440E  D02C               	goto	l8688
 10450                           
 10451                           ; BSR set to: 0
 10452  004410  0E01               	movlw	1
 10453  004412  0100               	movlb	0	; () banked
 10454  004414  6F8A               	movwf	___awdiv@counter& (0+255),b
 10455  004416  D006               	goto	l8674
 10456  004418                     l8672:
 10457                           
 10458                           ; BSR set to: 0
 10459  004418  0100               	movlb	0	; () banked
 10460  00441A  90D8               	bcf	status,0,c
 10461  00441C  3788               	rlcf	___awdiv@divisor& (0+255),f,b
 10462  00441E  3789               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
 10463  004420  0100               	movlb	0	; () banked
 10464  004422  2B8A               	incf	___awdiv@counter& (0+255),f,b
 10465  004424                     l8674:
 10466                           
 10467                           ; BSR set to: 0
 10468  004424  0100               	movlb	0	; () banked
 10469  004426  AF89               	btfss	(___awdiv@divisor+1)& (0+255),7,b
 10470  004428  D7F7               	goto	l8672
 10471  00442A                     l8676:
 10472                           
 10473                           ; BSR set to: 0
 10474  00442A  0100               	movlb	0	; () banked
 10475  00442C  90D8               	bcf	status,0,c
 10476  00442E  378C               	rlcf	___awdiv@quotient& (0+255),f,b
 10477  004430  378D               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
 10478                           
 10479                           ; BSR set to: 0
 10480  004432  0100               	movlb	0	; () banked
 10481  004434  5188               	movf	___awdiv@divisor& (0+255),w,b
 10482  004436  0100               	movlb	0	; () banked
 10483  004438  5D86               	subwf	___awdiv@dividend& (0+255),w,b
 10484  00443A  0100               	movlb	0	; () banked
 10485  00443C  5189               	movf	(___awdiv@divisor+1)& (0+255),w,b
 10486  00443E  0100               	movlb	0	; () banked
 10487  004440  5987               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
 10488  004442  A0D8               	btfss	status,0,c
 10489  004444  D00A               	goto	l8684
 10490                           
 10491                           ; BSR set to: 0
 10492  004446  0100               	movlb	0	; () banked
 10493  004448  5188               	movf	___awdiv@divisor& (0+255),w,b
 10494  00444A  0100               	movlb	0	; () banked
 10495  00444C  5F86               	subwf	___awdiv@dividend& (0+255),f,b
 10496  00444E  0100               	movlb	0	; () banked
 10497  004450  5189               	movf	(___awdiv@divisor+1)& (0+255),w,b
 10498  004452  0100               	movlb	0	; () banked
 10499  004454  5B87               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
 10500                           
 10501                           ; BSR set to: 0
 10502  004456  0100               	movlb	0	; () banked
 10503  004458  818C               	bsf	___awdiv@quotient& (0+255),0,b
 10504  00445A                     l8684:
 10505                           
 10506                           ; BSR set to: 0
 10507  00445A  0100               	movlb	0	; () banked
 10508  00445C  90D8               	bcf	status,0,c
 10509  00445E  3389               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
 10510  004460  3388               	rrcf	___awdiv@divisor& (0+255),f,b
 10511                           
 10512                           ; BSR set to: 0
 10513  004462  0100               	movlb	0	; () banked
 10514  004464  2F8A               	decfsz	___awdiv@counter& (0+255),f,b
 10515  004466  D7E1               	goto	l8676
 10516  004468                     l8688:
 10517                           
 10518                           ; BSR set to: 0
 10519  004468  0100               	movlb	0	; () banked
 10520  00446A  518B               	movf	___awdiv@sign& (0+255),w,b
 10521  00446C  0100               	movlb	0	; () banked
 10522  00446E  B4D8               	btfsc	status,2,c
 10523  004470  D005               	goto	l8692
 10524                           
 10525                           ; BSR set to: 0
 10526  004472  0100               	movlb	0	; () banked
 10527  004474  6D8C               	negf	___awdiv@quotient& (0+255),b
 10528  004476  1F8D               	comf	(___awdiv@quotient+1)& (0+255),f,b
 10529  004478  B0D8               	btfsc	status,0,c
 10530  00447A  2B8D               	incf	(___awdiv@quotient+1)& (0+255),f,b
 10531  00447C                     l8692:
 10532                           
 10533                           ; BSR set to: 0
 10534  00447C  C08C  F086         	movff	___awdiv@quotient,?___awdiv
 10535  004480  C08D  F087         	movff	___awdiv@quotient+1,?___awdiv+1
 10536  004484  0012               	return	
 10537  004486                     __end_of___awdiv:
 10538                           	opt stack 0
 10539                           tblptru	equ	0xFF8
 10540                           tblptrh	equ	0xFF7
 10541                           tblptrl	equ	0xFF6
 10542                           tablat	equ	0xFF5
 10543                           prodh	equ	0xFF4
 10544                           prodl	equ	0xFF3
 10545                           intcon	equ	0xFF2
 10546                           intcon2	equ	0xFF1
 10547                           intcon3	equ	0xFF0
 10548                           postinc0	equ	0xFEE
 10549                           wreg	equ	0xFE8
 10550                           postdec1	equ	0xFE5
 10551                           fsr1l	equ	0xFE1
 10552                           indf2	equ	0xFDF
 10553                           postinc2	equ	0xFDE
 10554                           postdec2	equ	0xFDD
 10555                           fsr2h	equ	0xFDA
 10556                           fsr2l	equ	0xFD9
 10557                           status	equ	0xFD8
 10558                           
 10559 ;; *************** function _Test *****************
 10560 ;; Defined at:
 10561 ;;		line 30 in file "Test.c"
 10562 ;; Parameters:    Size  Location     Type
 10563 ;;		None
 10564 ;; Auto vars:     Size  Location     Type
 10565 ;;		None
 10566 ;; Return value:  Size  Location     Type
 10567 ;;                  1    wreg      void 
 10568 ;; Registers used:
 10569 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10570 ;; Tracked objects:
 10571 ;;		On entry : 0/0
 10572 ;;		On exit  : 0/0
 10573 ;;		Unchanged: 0/0
 10574 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10575 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10576 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10577 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10578 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10579 ;;Total ram usage:        2 bytes
 10580 ;; Hardware stack levels used:    1
 10581 ;; Hardware stack levels required when called:   11
 10582 ;; This function calls:
 10583 ;;		_BlockerTest
 10584 ;;		_BothServos
 10585 ;;		_EEPROMTest
 10586 ;;		_PlatformTest
 10587 ;;		_PortTestDC
 10588 ;;		_SpeedTest
 10589 ;;		_actuatorTest
 10590 ;;		_algorithmTest
 10591 ;;		_arm
 10592 ;;		_lcdInst
 10593 ;;		_printf
 10594 ;;		_sensorTest
 10595 ;; This function is called by:
 10596 ;;		_main
 10597 ;; This function uses a non-reentrant model
 10598 ;;
 10599                           
 10600                           	psect	text35
 10601  003D9E                     __ptext35:
 10602                           	opt stack 0
 10603  003D9E                     _Test:
 10604                           	opt stack 19
 10605                           
 10606                           ;Test.c: 32: while(machine_state == Testing_state){
 10607                           
 10608                           ; BSR set to: 0
 10609                           ;incstack = 0
 10610  003D9E  D07C               	goto	l9452
 10611  003DA0                     l9412:
 10612                           
 10613                           ;Test.c: 33: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b10
      +                          000000);;
 10614  003DA0  0E01               	movlw	1
 10615  003DA2  EC72  F02A         	call	_lcdInst
 10616  003DA6  0E68               	movlw	104
 10617  003DA8  0100               	movlb	0	; () banked
 10618  003DAA  6FC6               	movwf	??_Test& (0+255),b
 10619  003DAC  0EE4               	movlw	228
 10620  003DAE                     u9727:
 10621  003DAE  2EE8               	decfsz	wreg,f,c
 10622  003DB0  D7FE               	bra	u9727
 10623  003DB2  2FC6               	decfsz	??_Test& (0+255),f,b
 10624  003DB4  D7FC               	bra	u9727
 10625  003DB6  F000               	nop	
 10626  003DB8  0E80               	movlw	128
 10627  003DBA  EC72  F02A         	call	_lcdInst
 10628                           
 10629                           ;Test.c: 34: printf("2.SNR|4.HI|5.MED");
 10630  003DBE  0E8B               	movlw	low STR_68
 10631  003DC0  0100               	movlb	0	; () banked
 10632  003DC2  6F8E               	movwf	printf@f& (0+255),b
 10633  003DC4  0EFC               	movlw	high STR_68
 10634  003DC6  0100               	movlb	0	; () banked
 10635  003DC8  6F8F               	movwf	(printf@f+1)& (0+255),b
 10636  003DCA  EC1E  F00B         	call	_printf	;wreg free
 10637                           
 10638                           ;Test.c: 35: lcdInst(0b11000000);;
 10639  003DCE  0EC0               	movlw	192
 10640  003DD0  EC72  F02A         	call	_lcdInst
 10641                           
 10642                           ;Test.c: 36: printf("B.PLA|8.SV|9.BLK");
 10643  003DD4  0E9C               	movlw	low STR_69
 10644  003DD6  0100               	movlb	0	; () banked
 10645  003DD8  6F8E               	movwf	printf@f& (0+255),b
 10646  003DDA  0EFC               	movlw	high STR_69
 10647  003DDC  0100               	movlb	0	; () banked
 10648  003DDE  6F8F               	movwf	(printf@f+1)& (0+255),b
 10649  003DE0  EC1E  F00B         	call	_printf	;wreg free
 10650  003DE4                     l1200:
 10651  003DE4  A281               	btfss	3969,1,c	;volatile
 10652  003DE6  D7FE               	goto	l1200
 10653                           
 10654                           ;Test.c: 38: var = PORTB >> 4;
 10655  003DE8  CF81 F0C6          	movff	3969,??_Test	;volatile
 10656  003DEC  0100               	movlb	0	; () banked
 10657  003DEE  3BC6               	swapf	??_Test& (0+255),f,b
 10658  003DF0  0E0F               	movlw	15
 10659  003DF2  17C6               	andwf	??_Test& (0+255),f,b
 10660  003DF4  0100               	movlb	0	; () banked
 10661  003DF6  51C6               	movf	??_Test& (0+255),w,b
 10662  003DF8  0101               	movlb	1	; () banked
 10663  003DFA  6F45               	movwf	_var& (0+255),b
 10664  003DFC  6B46               	clrf	(_var+1)& (0+255),b
 10665                           
 10666                           ; BSR set to: 1
 10667                           ;Test.c: 39: var++;
 10668  003DFE  0101               	movlb	1	; () banked
 10669  003E00  4B45               	infsnz	_var& (0+255),f,b
 10670  003E02  2B46               	incf	(_var+1)& (0+255),f,b
 10671  003E04                     l1203:
 10672  003E04  A281               	btfss	3969,1,c	;volatile
 10673  003E06  D01F               	goto	l9450
 10674  003E08  D7FD               	goto	l1203
 10675  003E0A                     l9428:
 10676                           
 10677                           ;Test.c: 43: algorithmTest();
 10678  003E0A  ECB8  F020         	call	_algorithmTest	;wreg free
 10679                           
 10680                           ;Test.c: 44: break;
 10681  003E0E  D044               	goto	l9452
 10682  003E10                     l9430:
 10683                           
 10684                           ;Test.c: 46: sensorTest();
 10685  003E10  ECB6  F010         	call	_sensorTest	;wreg free
 10686                           
 10687                           ;Test.c: 47: break;
 10688  003E14  D041               	goto	l9452
 10689  003E16                     l9432:
 10690                           
 10691                           ;Test.c: 49: actuatorTest();
 10692  003E16  EC6B  F004         	call	_actuatorTest	;wreg free
 10693                           
 10694                           ;Test.c: 50: break;
 10695  003E1A  D03E               	goto	l9452
 10696  003E1C                     l9434:
 10697                           
 10698                           ;Test.c: 52: arm();
 10699  003E1C  EC52  F01F         	call	_arm	;wreg free
 10700                           
 10701                           ;Test.c: 53: break;
 10702  003E20  D03B               	goto	l9452
 10703  003E22                     l9436:
 10704                           
 10705                           ;Test.c: 55: PortTestDC();
 10706  003E22  EC3E  F026         	call	_PortTestDC	;wreg free
 10707                           
 10708                           ;Test.c: 56: break;
 10709  003E26  D038               	goto	l9452
 10710  003E28                     l9438:
 10711                           
 10712                           ;Test.c: 59: SpeedTest();
 10713  003E28  EC13  F024         	call	_SpeedTest	;wreg free
 10714                           
 10715                           ;Test.c: 60: break;
 10716  003E2C  D035               	goto	l9452
 10717  003E2E                     l9440:
 10718                           
 10719                           ;Test.c: 62: EEPROMTest();
 10720  003E2E  ECA4  F02A         	call	_EEPROMTest	;wreg free
 10721                           
 10722                           ;Test.c: 63: break;
 10723  003E32  D032               	goto	l9452
 10724  003E34                     l9442:
 10725                           
 10726                           ;Test.c: 65: PlatformTest();
 10727  003E34  EC35  F012         	call	_PlatformTest	;wreg free
 10728                           
 10729                           ;Test.c: 66: break;
 10730  003E38  D02F               	goto	l9452
 10731  003E3A                     l9444:
 10732                           
 10733                           ;Test.c: 68: BothServos();
 10734  003E3A  EC3A  F00D         	call	_BothServos	;wreg free
 10735                           
 10736                           ;Test.c: 69: break;
 10737  003E3E  D02C               	goto	l9452
 10738  003E40                     l9446:
 10739                           
 10740                           ;Test.c: 71: BlockerTest();
 10741  003E40  ECDB  F01C         	call	_BlockerTest	;wreg free
 10742                           
 10743                           ;Test.c: 75: }
 10744                           
 10745                           ;Test.c: 74: break;
 10746                           
 10747                           ;Test.c: 73: default:
 10748                           
 10749                           ;Test.c: 72: break;
 10750  003E44  D029               	goto	l9452
 10751  003E46                     l9450:
 10752  003E46  C145  F0C6         	movff	_var,??_Test
 10753  003E4A  C146  F0C7         	movff	_var+1,??_Test+1
 10754                           
 10755                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 10756                           ; Switch size 1, requested type "space"
 10757                           ; Number of cases is 1, Range of values is 0 to 0
 10758                           ; switch strategies available:
 10759                           ; Name         Instructions Cycles
 10760                           ; simple_byte            4     3 (average)
 10761                           ;	Chosen strategy is simple_byte
 10762  003E4E  0100               	movlb	0	; () banked
 10763  003E50  51C7               	movf	(??_Test+1)& (0+255),w,b
 10764  003E52  0A00               	xorlw	0	; case 0
 10765  003E54  A4D8               	btfss	status,2,c
 10766  003E56  D020               	goto	l9452
 10767                           
 10768                           ; BSR set to: 0
 10769                           ; Switch size 1, requested type "space"
 10770                           ; Number of cases is 10, Range of values is 1 to 11
 10771                           ; switch strategies available:
 10772                           ; Name         Instructions Cycles
 10773                           ; simple_byte           31    16 (average)
 10774                           ;	Chosen strategy is simple_byte
 10775  003E58  0100               	movlb	0	; () banked
 10776  003E5A  51C6               	movf	??_Test& (0+255),w,b
 10777  003E5C  0A01               	xorlw	1	; case 1
 10778  003E5E  B4D8               	btfsc	status,2,c
 10779  003E60  D7D4               	goto	l9428
 10780  003E62  0A03               	xorlw	3	; case 2
 10781  003E64  B4D8               	btfsc	status,2,c
 10782  003E66  D7D4               	goto	l9430
 10783  003E68  0A01               	xorlw	1	; case 3
 10784  003E6A  B4D8               	btfsc	status,2,c
 10785  003E6C  D7D4               	goto	l9432
 10786  003E6E  0A07               	xorlw	7	; case 4
 10787  003E70  B4D8               	btfsc	status,2,c
 10788  003E72  D7D4               	goto	l9434
 10789  003E74  0A01               	xorlw	1	; case 5
 10790  003E76  B4D8               	btfsc	status,2,c
 10791  003E78  D7D4               	goto	l9436
 10792  003E7A  0A03               	xorlw	3	; case 6
 10793  003E7C  B4D8               	btfsc	status,2,c
 10794  003E7E  D7D4               	goto	l9438
 10795  003E80  0A01               	xorlw	1	; case 7
 10796  003E82  B4D8               	btfsc	status,2,c
 10797  003E84  D7D4               	goto	l9440
 10798  003E86  0A0F               	xorlw	15	; case 8
 10799  003E88  B4D8               	btfsc	status,2,c
 10800  003E8A  D7D4               	goto	l9442
 10801  003E8C  0A02               	xorlw	2	; case 10
 10802  003E8E  B4D8               	btfsc	status,2,c
 10803  003E90  D7D4               	goto	l9444
 10804  003E92  0A01               	xorlw	1	; case 11
 10805  003E94  B4D8               	btfsc	status,2,c
 10806  003E96  D7D4               	goto	l9446
 10807  003E98                     l9452:
 10808  003E98  0E03               	movlw	3
 10809  003E9A  0100               	movlb	0	; () banked
 10810  003E9C  19FC               	xorwf	_machine_state& (0+255),w,b
 10811  003E9E  A4D8               	btfss	status,2,c
 10812  003EA0  0012               	return	
 10813  003EA2  D77E               	goto	l9412
 10814  003EA4                     __end_of_Test:
 10815                           	opt stack 0
 10816                           tblptru	equ	0xFF8
 10817                           tblptrh	equ	0xFF7
 10818                           tblptrl	equ	0xFF6
 10819                           tablat	equ	0xFF5
 10820                           prodh	equ	0xFF4
 10821                           prodl	equ	0xFF3
 10822                           intcon	equ	0xFF2
 10823                           intcon2	equ	0xFF1
 10824                           intcon3	equ	0xFF0
 10825                           postinc0	equ	0xFEE
 10826                           wreg	equ	0xFE8
 10827                           postdec1	equ	0xFE5
 10828                           fsr1l	equ	0xFE1
 10829                           indf2	equ	0xFDF
 10830                           postinc2	equ	0xFDE
 10831                           postdec2	equ	0xFDD
 10832                           fsr2h	equ	0xFDA
 10833                           fsr2l	equ	0xFD9
 10834                           status	equ	0xFD8
 10835                           
 10836 ;; *************** function _sensorTest *****************
 10837 ;; Defined at:
 10838 ;;		line 123 in file "Test.c"
 10839 ;; Parameters:    Size  Location     Type
 10840 ;;		None
 10841 ;; Auto vars:     Size  Location     Type
 10842 ;;  res             2   45[BANK0 ] int 
 10843 ;; Return value:  Size  Location     Type
 10844 ;;                  1    wreg      void 
 10845 ;; Registers used:
 10846 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10847 ;; Tracked objects:
 10848 ;;		On entry : 0/0
 10849 ;;		On exit  : 0/0
 10850 ;;		Unchanged: 0/0
 10851 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10852 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10853 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10854 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10855 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10856 ;;Total ram usage:        4 bytes
 10857 ;; Hardware stack levels used:    1
 10858 ;; Hardware stack levels required when called:   10
 10859 ;; This function calls:
 10860 ;;		_lcdInst
 10861 ;;		_printf
 10862 ;;		_readADC
 10863 ;;		_readMAG
 10864 ;; This function is called by:
 10865 ;;		_Test
 10866 ;; This function uses a non-reentrant model
 10867 ;;
 10868                           
 10869                           	psect	text36
 10870  00216C                     __ptext36:
 10871                           	opt stack 0
 10872  00216C                     _sensorTest:
 10873                           	opt stack 19
 10874                           
 10875                           ;Test.c: 125: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 10876                           
 10877                           ; BSR set to: 0
 10878                           ;incstack = 0
 10879  00216C  0E01               	movlw	1
 10880  00216E  EC72  F02A         	call	_lcdInst
 10881  002172  0E68               	movlw	104
 10882  002174  0100               	movlb	0	; () banked
 10883  002176  6FAB               	movwf	??_sensorTest& (0+255),b
 10884  002178  0EE4               	movlw	228
 10885  00217A                     u9737:
 10886  00217A  2EE8               	decfsz	wreg,f,c
 10887  00217C  D7FE               	bra	u9737
 10888  00217E  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 10889  002180  D7FC               	bra	u9737
 10890  002182  F000               	nop	
 10891  002184  0E80               	movlw	128
 10892  002186  EC72  F02A         	call	_lcdInst
 10893                           
 10894                           ;Test.c: 126: printf("SENSORS");
 10895  00218A  0EAD               	movlw	low STR_77
 10896  00218C  0100               	movlb	0	; () banked
 10897  00218E  6F8E               	movwf	printf@f& (0+255),b
 10898  002190  0EFF               	movlw	high STR_77
 10899  002192  0100               	movlb	0	; () banked
 10900  002194  6F8F               	movwf	(printf@f+1)& (0+255),b
 10901  002196  EC1E  F00B         	call	_printf	;wreg free
 10902                           
 10903                           ;Test.c: 127: lcdInst(0b11000000);;
 10904  00219A  0EC0               	movlw	192
 10905  00219C  EC72  F02A         	call	_lcdInst
 10906                           
 10907                           ;Test.c: 128: printf("PUSH TO START");
 10908  0021A0  0E15               	movlw	low STR_71
 10909  0021A2  0100               	movlb	0	; () banked
 10910  0021A4  6F8E               	movwf	printf@f& (0+255),b
 10911  0021A6  0EFF               	movlw	high STR_71
 10912  0021A8  0100               	movlb	0	; () banked
 10913  0021AA  6F8F               	movwf	(printf@f+1)& (0+255),b
 10914  0021AC  EC1E  F00B         	call	_printf	;wreg free
 10915                           
 10916                           ;Test.c: 129: _delay((unsigned long)((100)*(32000000/4000.0)));
 10917  0021B0  0E05               	movlw	5
 10918  0021B2  0100               	movlb	0	; () banked
 10919  0021B4  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 10920  0021B6  0E0F               	movlw	15
 10921  0021B8  0100               	movlb	0	; () banked
 10922  0021BA  6FAB               	movwf	??_sensorTest& (0+255),b
 10923  0021BC  0EF1               	movlw	241
 10924  0021BE                     u9747:
 10925  0021BE  2EE8               	decfsz	wreg,f,c
 10926  0021C0  D7FE               	bra	u9747
 10927  0021C2  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 10928  0021C4  D7FC               	bra	u9747
 10929  0021C6  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 10930  0021C8  D7FA               	bra	u9747
 10931  0021CA                     l1232:
 10932  0021CA  A281               	btfss	3969,1,c	;volatile
 10933  0021CC  D7FE               	goto	l1232
 10934  0021CE                     l1235:
 10935  0021CE  B281               	btfsc	3969,1,c	;volatile
 10936  0021D0  D7FE               	goto	l1235
 10937                           
 10938                           ;Test.c: 132: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 10939  0021D2  0E01               	movlw	1
 10940  0021D4  EC72  F02A         	call	_lcdInst
 10941  0021D8  0E68               	movlw	104
 10942  0021DA  0100               	movlb	0	; () banked
 10943  0021DC  6FAB               	movwf	??_sensorTest& (0+255),b
 10944  0021DE  0EE4               	movlw	228
 10945  0021E0                     u9757:
 10946  0021E0  2EE8               	decfsz	wreg,f,c
 10947  0021E2  D7FE               	bra	u9757
 10948  0021E4  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 10949  0021E6  D7FC               	bra	u9757
 10950  0021E8  F000               	nop	
 10951  0021EA  0E80               	movlw	128
 10952  0021EC  EC72  F02A         	call	_lcdInst
 10953                           
 10954                           ;Test.c: 137: printf("TST: IR SNSR");
 10955  0021F0  0E3F               	movlw	low STR_79
 10956  0021F2  0100               	movlb	0	; () banked
 10957  0021F4  6F8E               	movwf	printf@f& (0+255),b
 10958  0021F6  0EFF               	movlw	high STR_79
 10959  0021F8  0100               	movlb	0	; () banked
 10960  0021FA  6F8F               	movwf	(printf@f+1)& (0+255),b
 10961  0021FC  EC1E  F00B         	call	_printf	;wreg free
 10962                           
 10963                           ;Test.c: 138: _delay((unsigned long)((100)*(32000000/4000.0)));
 10964  002200  0E05               	movlw	5
 10965  002202  0100               	movlb	0	; () banked
 10966  002204  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 10967  002206  0E0F               	movlw	15
 10968  002208  0100               	movlb	0	; () banked
 10969  00220A  6FAB               	movwf	??_sensorTest& (0+255),b
 10970  00220C  0EF1               	movlw	241
 10971  00220E                     u9767:
 10972  00220E  2EE8               	decfsz	wreg,f,c
 10973  002210  D7FE               	bra	u9767
 10974  002212  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 10975  002214  D7FC               	bra	u9767
 10976  002216  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 10977  002218  D7FA               	bra	u9767
 10978                           
 10979                           ;Test.c: 139: LATCbits.LATC5 = 1;
 10980  00221A  8A8B               	bsf	3979,5,c	;volatile
 10981                           
 10982                           ;Test.c: 141: while(PORTBbits.RB1 == 0){
 10983  00221C  D05C               	goto	l7818
 10984  00221E                     l7800:
 10985                           
 10986                           ;Test.c: 142: readADC(0);
 10987  00221E  0E00               	movlw	0
 10988  002220  EC68  F029         	call	_readADC
 10989                           
 10990                           ;Test.c: 143: int res = ADRESH<<8 | ADRESL;
 10991  002224  50C3               	movf	4035,w,c	;volatile
 10992  002226  CFC4 F0AB          	movff	4036,??_sensorTest	;volatile
 10993  00222A  0100               	movlb	0	; () banked
 10994  00222C  6BAC               	clrf	(??_sensorTest+1)& (0+255),b
 10995  00222E  C0AB  F0AC         	movff	??_sensorTest,??_sensorTest+1
 10996  002232  0100               	movlb	0	; () banked
 10997  002234  6BAB               	clrf	??_sensorTest& (0+255),b
 10998  002236  0100               	movlb	0	; () banked
 10999  002238  11AB               	iorwf	??_sensorTest& (0+255),w,b
 11000  00223A  0100               	movlb	0	; () banked
 11001  00223C  6FAD               	movwf	sensorTest@res& (0+255),b
 11002  00223E  0100               	movlb	0	; () banked
 11003  002240  51AC               	movf	(??_sensorTest+1)& (0+255),w,b
 11004  002242  0100               	movlb	0	; () banked
 11005  002244  6FAE               	movwf	(sensorTest@res+1)& (0+255),b
 11006                           
 11007                           ; BSR set to: 0
 11008                           ;Test.c: 144: IR_signal = (res > 800) ? 1 : 0;
 11009  002246  0100               	movlb	0	; () banked
 11010  002248  BFAE               	btfsc	(sensorTest@res+1)& (0+255),7,b
 11011  00224A  D00A               	goto	u6370
 11012  00224C  0E21               	movlw	33
 11013  00224E  0100               	movlb	0	; () banked
 11014  002250  5DAD               	subwf	sensorTest@res& (0+255),w,b
 11015  002252  0E03               	movlw	3
 11016  002254  0100               	movlb	0	; () banked
 11017  002256  59AE               	subwfb	(sensorTest@res+1)& (0+255),w,b
 11018  002258  A0D8               	btfss	status,0,c
 11019  00225A  D002               	goto	u6370
 11020  00225C  0E01               	movlw	1
 11021  00225E  D001               	goto	u6380
 11022  002260                     u6370:
 11023  002260  0E00               	movlw	0
 11024  002262                     u6380:
 11025  002262  0100               	movlb	0	; () banked
 11026  002264  6FE6               	movwf	_IR_signal& (0+255),b
 11027  002266  6BE7               	clrf	(_IR_signal+1)& (0+255),b
 11028                           
 11029                           ;Test.c: 146: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 11030  002268  0E01               	movlw	1
 11031  00226A  EC72  F02A         	call	_lcdInst
 11032  00226E  0E68               	movlw	104
 11033  002270  0100               	movlb	0	; () banked
 11034  002272  6FAB               	movwf	??_sensorTest& (0+255),b
 11035  002274  0EE4               	movlw	228
 11036  002276                     u9777:
 11037  002276  2EE8               	decfsz	wreg,f,c
 11038  002278  D7FE               	bra	u9777
 11039  00227A  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 11040  00227C  D7FC               	bra	u9777
 11041  00227E  F000               	nop	
 11042  002280  0E80               	movlw	128
 11043  002282  EC72  F02A         	call	_lcdInst
 11044                           
 11045                           ;Test.c: 147: printf("IR_signal: %d ", IR_signal);
 11046  002286  0E64               	movlw	low STR_80
 11047  002288  0100               	movlb	0	; () banked
 11048  00228A  6F8E               	movwf	printf@f& (0+255),b
 11049  00228C  0EFE               	movlw	high STR_80
 11050  00228E  0100               	movlb	0	; () banked
 11051  002290  6F8F               	movwf	(printf@f+1)& (0+255),b
 11052  002292  C0E6  F090         	movff	_IR_signal,?_printf+2
 11053  002296  C0E7  F091         	movff	_IR_signal+1,?_printf+3
 11054  00229A  EC1E  F00B         	call	_printf	;wreg free
 11055                           
 11056                           ;Test.c: 148: lcdInst(0b11000000);;
 11057  00229E  0EC0               	movlw	192
 11058  0022A0  EC72  F02A         	call	_lcdInst
 11059                           
 11060                           ;Test.c: 149: printf("%d", res);
 11061  0022A4  0E20               	movlw	low (STR_27+14)
 11062  0022A6  0100               	movlb	0	; () banked
 11063  0022A8  6F8E               	movwf	printf@f& (0+255),b
 11064  0022AA  0EFE               	movlw	high (STR_27+14)
 11065  0022AC  0100               	movlb	0	; () banked
 11066  0022AE  6F8F               	movwf	(printf@f+1)& (0+255),b
 11067  0022B0  C0AD  F090         	movff	sensorTest@res,?_printf+2
 11068  0022B4  C0AE  F091         	movff	sensorTest@res+1,?_printf+3
 11069  0022B8  EC1E  F00B         	call	_printf	;wreg free
 11070                           
 11071                           ;Test.c: 150: _delay((unsigned long)((100)*(32000000/4000.0)));
 11072  0022BC  0E05               	movlw	5
 11073  0022BE  0100               	movlb	0	; () banked
 11074  0022C0  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 11075  0022C2  0E0F               	movlw	15
 11076  0022C4  0100               	movlb	0	; () banked
 11077  0022C6  6FAB               	movwf	??_sensorTest& (0+255),b
 11078  0022C8  0EF1               	movlw	241
 11079  0022CA                     u9787:
 11080  0022CA  2EE8               	decfsz	wreg,f,c
 11081  0022CC  D7FE               	bra	u9787
 11082  0022CE  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 11083  0022D0  D7FC               	bra	u9787
 11084  0022D2  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 11085  0022D4  D7FA               	bra	u9787
 11086  0022D6                     l7818:
 11087  0022D6  A281               	btfss	3969,1,c	;volatile
 11088  0022D8  D7A2               	goto	l7800
 11089                           
 11090                           ;Test.c: 151: }
 11091                           ;Test.c: 152: LATCbits.LATC5 = 0;
 11092  0022DA  9A8B               	bcf	3979,5,c	;volatile
 11093                           
 11094                           ;Test.c: 160: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 11095  0022DC  0E01               	movlw	1
 11096  0022DE  EC72  F02A         	call	_lcdInst
 11097  0022E2  0E68               	movlw	104
 11098  0022E4  0100               	movlb	0	; () banked
 11099  0022E6  6FAB               	movwf	??_sensorTest& (0+255),b
 11100  0022E8  0EE4               	movlw	228
 11101  0022EA                     u9797:
 11102  0022EA  2EE8               	decfsz	wreg,f,c
 11103  0022EC  D7FE               	bra	u9797
 11104  0022EE  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 11105  0022F0  D7FC               	bra	u9797
 11106  0022F2  F000               	nop	
 11107  0022F4  0E80               	movlw	128
 11108  0022F6  EC72  F02A         	call	_lcdInst
 11109                           
 11110                           ;Test.c: 161: printf("TST: MAGNETISM");
 11111  0022FA  0E91               	movlw	low STR_82
 11112  0022FC  0100               	movlb	0	; () banked
 11113  0022FE  6F8E               	movwf	printf@f& (0+255),b
 11114  002300  0EFE               	movlw	high STR_82
 11115  002302  0100               	movlb	0	; () banked
 11116  002304  6F8F               	movwf	(printf@f+1)& (0+255),b
 11117  002306  EC1E  F00B         	call	_printf	;wreg free
 11118                           
 11119                           ;Test.c: 162: _delay((unsigned long)((100)*(32000000/4000.0)));
 11120  00230A  0E05               	movlw	5
 11121  00230C  0100               	movlb	0	; () banked
 11122  00230E  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 11123  002310  0E0F               	movlw	15
 11124  002312  0100               	movlb	0	; () banked
 11125  002314  6FAB               	movwf	??_sensorTest& (0+255),b
 11126  002316  0EF1               	movlw	241
 11127  002318                     u9807:
 11128  002318  2EE8               	decfsz	wreg,f,c
 11129  00231A  D7FE               	bra	u9807
 11130  00231C  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 11131  00231E  D7FC               	bra	u9807
 11132  002320  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 11133  002322  D7FA               	bra	u9807
 11134                           
 11135                           ;Test.c: 163: while(PORTBbits.RB1 == 0){
 11136  002324  D021               	goto	l7836
 11137  002326                     l7830:
 11138                           
 11139                           ;Test.c: 164: readMAG();
 11140  002326  EC0D  F027         	call	_readMAG	;wreg free
 11141                           
 11142                           ;Test.c: 165: lcdInst(0b10000000);;
 11143  00232A  0E80               	movlw	128
 11144  00232C  EC72  F02A         	call	_lcdInst
 11145                           
 11146                           ;Test.c: 166: lcdInst(0b11000000);;
 11147  002330  0EC0               	movlw	192
 11148  002332  EC72  F02A         	call	_lcdInst
 11149                           
 11150                           ;Test.c: 167: printf("MAG_signal: %d ", MAG_signal);
 11151  002336  0E34               	movlw	low STR_83
 11152  002338  0100               	movlb	0	; () banked
 11153  00233A  6F8E               	movwf	printf@f& (0+255),b
 11154  00233C  0EFE               	movlw	high STR_83
 11155  00233E  0100               	movlb	0	; () banked
 11156  002340  6F8F               	movwf	(printf@f+1)& (0+255),b
 11157  002342  C0E8  F090         	movff	_MAG_signal,?_printf+2
 11158  002346  C0E9  F091         	movff	_MAG_signal+1,?_printf+3
 11159  00234A  EC1E  F00B         	call	_printf	;wreg free
 11160                           
 11161                           ;Test.c: 168: _delay((unsigned long)((100)*(32000000/4000.0)));
 11162  00234E  0E05               	movlw	5
 11163  002350  0100               	movlb	0	; () banked
 11164  002352  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 11165  002354  0E0F               	movlw	15
 11166  002356  0100               	movlb	0	; () banked
 11167  002358  6FAB               	movwf	??_sensorTest& (0+255),b
 11168  00235A  0EF1               	movlw	241
 11169  00235C                     u9817:
 11170  00235C  2EE8               	decfsz	wreg,f,c
 11171  00235E  D7FE               	bra	u9817
 11172  002360  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 11173  002362  D7FC               	bra	u9817
 11174  002364  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 11175  002366  D7FA               	bra	u9817
 11176  002368                     l7836:
 11177  002368  A281               	btfss	3969,1,c	;volatile
 11178  00236A  D7DD               	goto	l7830
 11179                           
 11180                           ;Test.c: 169: }
 11181                           ;Test.c: 174: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 11182  00236C  0E01               	movlw	1
 11183  00236E  EC72  F02A         	call	_lcdInst
 11184  002372  0E68               	movlw	104
 11185  002374  0100               	movlb	0	; () banked
 11186  002376  6FAB               	movwf	??_sensorTest& (0+255),b
 11187  002378  0EE4               	movlw	228
 11188  00237A                     u9827:
 11189  00237A  2EE8               	decfsz	wreg,f,c
 11190  00237C  D7FE               	bra	u9827
 11191  00237E  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 11192  002380  D7FC               	bra	u9827
 11193  002382  F000               	nop	
 11194  002384  0E80               	movlw	128
 11195  002386  EC72  F02A         	call	_lcdInst
 11196                           
 11197                           ;Test.c: 175: printf("TST: COND");
 11198  00238A  0E86               	movlw	low STR_84
 11199  00238C  0100               	movlb	0	; () banked
 11200  00238E  6F8E               	movwf	printf@f& (0+255),b
 11201  002390  0EFF               	movlw	high STR_84
 11202  002392  0100               	movlb	0	; () banked
 11203  002394  6F8F               	movwf	(printf@f+1)& (0+255),b
 11204  002396  EC1E  F00B         	call	_printf	;wreg free
 11205                           
 11206                           ;Test.c: 176: _delay((unsigned long)((100)*(32000000/4000.0)));
 11207  00239A  0E05               	movlw	5
 11208  00239C  0100               	movlb	0	; () banked
 11209  00239E  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 11210  0023A0  0E0F               	movlw	15
 11211  0023A2  0100               	movlb	0	; () banked
 11212  0023A4  6FAB               	movwf	??_sensorTest& (0+255),b
 11213  0023A6  0EF1               	movlw	241
 11214  0023A8                     u9837:
 11215  0023A8  2EE8               	decfsz	wreg,f,c
 11216  0023AA  D7FE               	bra	u9837
 11217  0023AC  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 11218  0023AE  D7FC               	bra	u9837
 11219  0023B0  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 11220  0023B2  D7FA               	bra	u9837
 11221  0023B4                     l7848:
 11222                           
 11223                           ;Test.c: 178: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 11224  0023B4  0E01               	movlw	1
 11225  0023B6  EC72  F02A         	call	_lcdInst
 11226  0023BA  0E68               	movlw	104
 11227  0023BC  0100               	movlb	0	; () banked
 11228  0023BE  6FAB               	movwf	??_sensorTest& (0+255),b
 11229  0023C0  0EE4               	movlw	228
 11230  0023C2                     u9847:
 11231  0023C2  2EE8               	decfsz	wreg,f,c
 11232  0023C4  D7FE               	bra	u9847
 11233  0023C6  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 11234  0023C8  D7FC               	bra	u9847
 11235  0023CA  F000               	nop	
 11236  0023CC  0E80               	movlw	128
 11237  0023CE  EC72  F02A         	call	_lcdInst
 11238                           
 11239                           ;Test.c: 179: printf("TST: COND");
 11240  0023D2  0E86               	movlw	low STR_84
 11241  0023D4  0100               	movlb	0	; () banked
 11242  0023D6  6F8E               	movwf	printf@f& (0+255),b
 11243  0023D8  0EFF               	movlw	high STR_84
 11244  0023DA  0100               	movlb	0	; () banked
 11245  0023DC  6F8F               	movwf	(printf@f+1)& (0+255),b
 11246  0023DE  EC1E  F00B         	call	_printf	;wreg free
 11247                           
 11248                           ;Test.c: 180: while(PORTBbits.RB1 == 0){
 11249  0023E2  D01B               	goto	l7860
 11250  0023E4                     l7856:
 11251                           
 11252                           ;Test.c: 184: lcdInst(0b10000000);;lcdInst(0b11000000);;
 11253  0023E4  0E80               	movlw	128
 11254  0023E6  EC72  F02A         	call	_lcdInst
 11255  0023EA  0EC0               	movlw	192
 11256  0023EC  EC72  F02A         	call	_lcdInst
 11257                           
 11258                           ;Test.c: 185: printf("COND: %d", PORTAbits.RA2);
 11259  0023F0  0EA4               	movlw	low STR_86
 11260  0023F2  0100               	movlb	0	; () banked
 11261  0023F4  6F8E               	movwf	printf@f& (0+255),b
 11262  0023F6  0EFF               	movlw	high STR_86
 11263  0023F8  0100               	movlb	0	; () banked
 11264  0023FA  6F8F               	movwf	(printf@f+1)& (0+255),b
 11265  0023FC  A480               	btfss	3968,2,c	;volatile
 11266  0023FE  D004               	goto	u6410
 11267  002400  0100               	movlb	0	; () banked
 11268  002402  6BAB               	clrf	??_sensorTest& (0+255),b
 11269  002404  2BAB               	incf	??_sensorTest& (0+255),f,b
 11270  002406  D002               	goto	u6418
 11271  002408                     u6410:
 11272  002408  0100               	movlb	0	; () banked
 11273  00240A  6BAB               	clrf	??_sensorTest& (0+255),b
 11274  00240C                     u6418:
 11275  00240C  0100               	movlb	0	; () banked
 11276  00240E  51AB               	movf	??_sensorTest& (0+255),w,b
 11277  002410  0100               	movlb	0	; () banked
 11278  002412  6F90               	movwf	(?_printf+2)& (0+255),b
 11279  002414  6B91               	clrf	(?_printf+3)& (0+255),b
 11280  002416  EC1E  F00B         	call	_printf	;wreg free
 11281  00241A                     l7860:
 11282  00241A  A281               	btfss	3969,1,c	;volatile
 11283  00241C  D7E3               	goto	l7856
 11284                           
 11285                           ;Test.c: 186: }
 11286                           ;Test.c: 187: if(PORTB >> 4 == 0b1111){
 11287  00241E  3881               	swapf	3969,w,c	;volatile
 11288  002420  0B0F               	andlw	15
 11289  002422  0A0F               	xorlw	15
 11290  002424  B4D8               	btfsc	status,2,c
 11291  002426  0012               	return	
 11292                           
 11293                           ;Test.c: 190: else{
 11294                           ;Test.c: 191: LATAbits.LATA3 = 1;
 11295                           
 11296                           ;Test.c: 189: }
 11297                           
 11298                           ;Test.c: 188: break;
 11299  002428  8689               	bsf	3977,3,c	;volatile
 11300                           
 11301                           ;Test.c: 192: while(PORTBbits.RB1 == 1){
 11302  00242A  D01B               	goto	l7872
 11303  00242C                     l7868:
 11304                           
 11305                           ;Test.c: 194: lcdInst(0b10000000);;lcdInst(0b11000000);;
 11306  00242C  0E80               	movlw	128
 11307  00242E  EC72  F02A         	call	_lcdInst
 11308  002432  0EC0               	movlw	192
 11309  002434  EC72  F02A         	call	_lcdInst
 11310                           
 11311                           ;Test.c: 195: printf("COND: %d", PORTAbits.RA2);
 11312  002438  0EA4               	movlw	low STR_86
 11313  00243A  0100               	movlb	0	; () banked
 11314  00243C  6F8E               	movwf	printf@f& (0+255),b
 11315  00243E  0EFF               	movlw	high STR_86
 11316  002440  0100               	movlb	0	; () banked
 11317  002442  6F8F               	movwf	(printf@f+1)& (0+255),b
 11318  002444  A480               	btfss	3968,2,c	;volatile
 11319  002446  D004               	goto	u6440
 11320  002448  0100               	movlb	0	; () banked
 11321  00244A  6BAB               	clrf	??_sensorTest& (0+255),b
 11322  00244C  2BAB               	incf	??_sensorTest& (0+255),f,b
 11323  00244E  D002               	goto	u6448
 11324  002450                     u6440:
 11325  002450  0100               	movlb	0	; () banked
 11326  002452  6BAB               	clrf	??_sensorTest& (0+255),b
 11327  002454                     u6448:
 11328  002454  0100               	movlb	0	; () banked
 11329  002456  51AB               	movf	??_sensorTest& (0+255),w,b
 11330  002458  0100               	movlb	0	; () banked
 11331  00245A  6F90               	movwf	(?_printf+2)& (0+255),b
 11332  00245C  6B91               	clrf	(?_printf+3)& (0+255),b
 11333  00245E  EC1E  F00B         	call	_printf	;wreg free
 11334  002462                     l7872:
 11335  002462  B281               	btfsc	3969,1,c	;volatile
 11336  002464  D7E3               	goto	l7868
 11337                           
 11338                           ;Test.c: 196: }
 11339                           ;Test.c: 197: LATAbits.LATA3 = !1;
 11340  002466  9689               	bcf	3977,3,c	;volatile
 11341  002468  D7A5               	goto	l7848
 11342  00246A                     __end_of_sensorTest:
 11343                           	opt stack 0
 11344                           tblptru	equ	0xFF8
 11345                           tblptrh	equ	0xFF7
 11346                           tblptrl	equ	0xFF6
 11347                           tablat	equ	0xFF5
 11348                           prodh	equ	0xFF4
 11349                           prodl	equ	0xFF3
 11350                           intcon	equ	0xFF2
 11351                           intcon2	equ	0xFF1
 11352                           intcon3	equ	0xFF0
 11353                           postinc0	equ	0xFEE
 11354                           wreg	equ	0xFE8
 11355                           postdec1	equ	0xFE5
 11356                           fsr1l	equ	0xFE1
 11357                           indf2	equ	0xFDF
 11358                           postinc2	equ	0xFDE
 11359                           postdec2	equ	0xFDD
 11360                           fsr2h	equ	0xFDA
 11361                           fsr2l	equ	0xFD9
 11362                           status	equ	0xFD8
 11363                           
 11364 ;; *************** function _readMAG *****************
 11365 ;; Defined at:
 11366 ;;		line 29 in file "ADCFunctionality.c"
 11367 ;; Parameters:    Size  Location     Type
 11368 ;;		None
 11369 ;; Auto vars:     Size  Location     Type
 11370 ;;  res             2    4[BANK0 ] int 
 11371 ;; Return value:  Size  Location     Type
 11372 ;;                  1    wreg      void 
 11373 ;; Registers used:
 11374 ;;		wreg, status,2, status,0, cstack
 11375 ;; Tracked objects:
 11376 ;;		On entry : 0/0
 11377 ;;		On exit  : 0/0
 11378 ;;		Unchanged: 0/0
 11379 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11380 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11381 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11382 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11383 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11384 ;;Total ram usage:        4 bytes
 11385 ;; Hardware stack levels used:    1
 11386 ;; Hardware stack levels required when called:    8
 11387 ;; This function calls:
 11388 ;;		_readADC
 11389 ;; This function is called by:
 11390 ;;		_getMAG
 11391 ;;		_sensorTest
 11392 ;; This function uses a non-reentrant model
 11393 ;;
 11394                           
 11395                           	psect	text37
 11396  004E1A                     __ptext37:
 11397                           	opt stack 0
 11398  004E1A                     _readMAG:
 11399                           	opt stack 19
 11400                           
 11401                           ;ADCFunctionality.c: 30: readADC(1);
 11402                           
 11403                           ;incstack = 0
 11404  004E1A  0E01               	movlw	1
 11405  004E1C  EC68  F029         	call	_readADC
 11406                           
 11407                           ;ADCFunctionality.c: 31: int res = ADRESH<<8 | ADRESL;
 11408  004E20  50C3               	movf	4035,w,c	;volatile
 11409  004E22  CFC4 F082          	movff	4036,??_readMAG	;volatile
 11410  004E26  0100               	movlb	0	; () banked
 11411  004E28  6B83               	clrf	(??_readMAG+1)& (0+255),b
 11412  004E2A  C082  F083         	movff	??_readMAG,??_readMAG+1
 11413  004E2E  0100               	movlb	0	; () banked
 11414  004E30  6B82               	clrf	??_readMAG& (0+255),b
 11415  004E32  0100               	movlb	0	; () banked
 11416  004E34  1182               	iorwf	??_readMAG& (0+255),w,b
 11417  004E36  0100               	movlb	0	; () banked
 11418  004E38  6F84               	movwf	readMAG@res& (0+255),b
 11419  004E3A  0100               	movlb	0	; () banked
 11420  004E3C  5183               	movf	(??_readMAG+1)& (0+255),w,b
 11421  004E3E  0100               	movlb	0	; () banked
 11422  004E40  6F85               	movwf	(readMAG@res+1)& (0+255),b
 11423                           
 11424                           ; BSR set to: 0
 11425                           ;ADCFunctionality.c: 32: MAG_signal = (res < 150) ? 1 : 0;
 11426  004E42  0100               	movlb	0	; () banked
 11427  004E44  BF85               	btfsc	(readMAG@res+1)& (0+255),7,b
 11428  004E46  D008               	goto	u4801
 11429  004E48  0100               	movlb	0	; () banked
 11430  004E4A  5185               	movf	(readMAG@res+1)& (0+255),w,b
 11431  004E4C  E107               	bnz	u4800
 11432  004E4E  0E96               	movlw	150
 11433  004E50  0100               	movlb	0	; () banked
 11434  004E52  5D84               	subwf	readMAG@res& (0+255),w,b
 11435  004E54  B0D8               	btfsc	status,0,c
 11436  004E56  D002               	goto	u4800
 11437  004E58                     u4801:
 11438  004E58  0E01               	movlw	1
 11439  004E5A  D001               	goto	u4810
 11440  004E5C                     u4800:
 11441  004E5C  0E00               	movlw	0
 11442  004E5E                     u4810:
 11443  004E5E  0100               	movlb	0	; () banked
 11444  004E60  6FE8               	movwf	_MAG_signal& (0+255),b
 11445  004E62  6BE9               	clrf	(_MAG_signal+1)& (0+255),b
 11446                           
 11447                           ; BSR set to: 0
 11448  004E64  0012               	return		;funcret
 11449  004E66                     __end_of_readMAG:
 11450                           	opt stack 0
 11451                           tblptru	equ	0xFF8
 11452                           tblptrh	equ	0xFF7
 11453                           tblptrl	equ	0xFF6
 11454                           tablat	equ	0xFF5
 11455                           prodh	equ	0xFF4
 11456                           prodl	equ	0xFF3
 11457                           intcon	equ	0xFF2
 11458                           intcon2	equ	0xFF1
 11459                           intcon3	equ	0xFF0
 11460                           postinc0	equ	0xFEE
 11461                           wreg	equ	0xFE8
 11462                           postdec1	equ	0xFE5
 11463                           fsr1l	equ	0xFE1
 11464                           indf2	equ	0xFDF
 11465                           postinc2	equ	0xFDE
 11466                           postdec2	equ	0xFDD
 11467                           fsr2h	equ	0xFDA
 11468                           fsr2l	equ	0xFD9
 11469                           status	equ	0xFD8
 11470                           
 11471 ;; *************** function _arm *****************
 11472 ;; Defined at:
 11473 ;;		line 632 in file "Test.c"
 11474 ;; Parameters:    Size  Location     Type
 11475 ;;		None
 11476 ;; Auto vars:     Size  Location     Type
 11477 ;;  on              2   44[BANK0 ] int 
 11478 ;; Return value:  Size  Location     Type
 11479 ;;                  1    wreg      void 
 11480 ;; Registers used:
 11481 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11482 ;; Tracked objects:
 11483 ;;		On entry : 0/0
 11484 ;;		On exit  : 0/0
 11485 ;;		Unchanged: 0/0
 11486 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11487 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11488 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11489 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11490 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11491 ;;Total ram usage:        3 bytes
 11492 ;; Hardware stack levels used:    1
 11493 ;; Hardware stack levels required when called:   10
 11494 ;; This function calls:
 11495 ;;		_initServos
 11496 ;;		_lcdInst
 11497 ;;		_printf
 11498 ;;		_stopSignals
 11499 ;; This function is called by:
 11500 ;;		_Test
 11501 ;; This function uses a non-reentrant model
 11502 ;;
 11503                           
 11504                           	psect	text38
 11505  003EA4                     __ptext38:
 11506                           	opt stack 0
 11507  003EA4                     _arm:
 11508                           	opt stack 19
 11509                           
 11510                           ;Test.c: 633: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 11511                           
 11512                           ; BSR set to: 0
 11513                           ;incstack = 0
 11514  003EA4  0E01               	movlw	1
 11515  003EA6  EC72  F02A         	call	_lcdInst
 11516  003EAA  0E68               	movlw	104
 11517  003EAC  0100               	movlb	0	; () banked
 11518  003EAE  6FAB               	movwf	??_arm& (0+255),b
 11519  003EB0  0EE4               	movlw	228
 11520  003EB2                     u9857:
 11521  003EB2  2EE8               	decfsz	wreg,f,c
 11522  003EB4  D7FE               	bra	u9857
 11523  003EB6  2FAB               	decfsz	??_arm& (0+255),f,b
 11524  003EB8  D7FC               	bra	u9857
 11525  003EBA  F000               	nop	
 11526  003EBC  0E80               	movlw	128
 11527  003EBE  EC72  F02A         	call	_lcdInst
 11528                           
 11529                           ;Test.c: 634: printf("D WILL RETURN   ");
 11530  003EC2  0EF2               	movlw	low STR_116
 11531  003EC4  0100               	movlb	0	; () banked
 11532  003EC6  6F8E               	movwf	printf@f& (0+255),b
 11533  003EC8  0EFB               	movlw	high STR_116
 11534  003ECA  0100               	movlb	0	; () banked
 11535  003ECC  6F8F               	movwf	(printf@f+1)& (0+255),b
 11536  003ECE  EC1E  F00B         	call	_printf	;wreg free
 11537                           
 11538                           ;Test.c: 635: lcdInst(0b11000000);;
 11539  003ED2  0EC0               	movlw	192
 11540  003ED4  EC72  F02A         	call	_lcdInst
 11541                           
 11542                           ;Test.c: 636: printf("ELSE TOGGLES ARM");
 11543  003ED8  0EAD               	movlw	low STR_125
 11544  003EDA  0100               	movlb	0	; () banked
 11545  003EDC  6F8E               	movwf	printf@f& (0+255),b
 11546  003EDE  0EFC               	movlw	high STR_125
 11547  003EE0  0100               	movlb	0	; () banked
 11548  003EE2  6F8F               	movwf	(printf@f+1)& (0+255),b
 11549  003EE4  EC1E  F00B         	call	_printf	;wreg free
 11550                           
 11551                           ;Test.c: 638: (INTCONbits.GIE = 1);
 11552  003EE8  8EF2               	bsf	intcon,7,c	;volatile
 11553                           
 11554                           ;Test.c: 639: machine_state = Sorting_state;
 11555  003EEA  0E01               	movlw	1
 11556  003EEC  0100               	movlb	0	; () banked
 11557  003EEE  6FFC               	movwf	_machine_state& (0+255),b
 11558                           
 11559                           ; BSR set to: 0
 11560                           ;Test.c: 640: was_low_2 = 0;
 11561  003EF0  0E00               	movlw	0
 11562  003EF2  6E7A               	movwf	_was_low_2+1,c	;volatile
 11563  003EF4  0E00               	movlw	0
 11564  003EF6  6E79               	movwf	_was_low_2,c	;volatile
 11565                           
 11566                           ; BSR set to: 0
 11567                           ;Test.c: 641: f_arm_position = 2;
 11568  003EF8  0E00               	movlw	0
 11569  003EFA  0100               	movlb	0	; () banked
 11570  003EFC  6FEF               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
 11571  003EFE  0E02               	movlw	2
 11572  003F00  6FEE               	movwf	_f_arm_position& (0+255),b	;volatile
 11573                           
 11574                           ; BSR set to: 0
 11575                           ;Test.c: 642: timer2_counter = 0;
 11576  003F02  0E00               	movlw	0
 11577  003F04  6E74               	movwf	_timer2_counter+1,c	;volatile
 11578  003F06  0E00               	movlw	0
 11579  003F08  6E73               	movwf	_timer2_counter,c	;volatile
 11580                           
 11581                           ; BSR set to: 0
 11582                           ;Test.c: 643: initServos();
 11583  003F0A  EC55  F024         	call	_initServos	;wreg free
 11584                           
 11585                           ;Test.c: 644: TMR1ON = 0;
 11586  003F0E  90CD               	bcf	4045,0,c	;volatile
 11587                           
 11588                           ;Test.c: 645: TMR3ON = 0;
 11589  003F10  90B1               	bcf	4017,0,c	;volatile
 11590                           
 11591                           ;Test.c: 647: int on = 0;
 11592  003F12  0E00               	movlw	0
 11593  003F14  0100               	movlb	0	; () banked
 11594  003F16  6FAD               	movwf	(arm@on+1)& (0+255),b
 11595  003F18  0E00               	movlw	0
 11596  003F1A  6FAC               	movwf	arm@on& (0+255),b
 11597  003F1C                     l8328:
 11598                           
 11599                           ;Test.c: 649: if(on){
 11600  003F1C  0100               	movlb	0	; () banked
 11601  003F1E  51AC               	movf	arm@on& (0+255),w,b
 11602  003F20  0100               	movlb	0	; () banked
 11603  003F22  11AD               	iorwf	(arm@on+1)& (0+255),w,b
 11604  003F24  B4D8               	btfsc	status,2,c
 11605  003F26  D01C               	goto	l8340
 11606                           
 11607                           ; BSR set to: 0
 11608                           ;Test.c: 650: on = !on;
 11609  003F28  0100               	movlb	0	; () banked
 11610  003F2A  51AC               	movf	arm@on& (0+255),w,b
 11611  003F2C  0100               	movlb	0	; () banked
 11612  003F2E  11AD               	iorwf	(arm@on+1)& (0+255),w,b
 11613  003F30  A4D8               	btfss	status,2,c
 11614  003F32  D002               	goto	u7030
 11615  003F34  0E01               	movlw	1
 11616  003F36  D001               	goto	u7040
 11617  003F38                     u7030:
 11618  003F38  0E00               	movlw	0
 11619  003F3A                     u7040:
 11620  003F3A  0100               	movlb	0	; () banked
 11621  003F3C  6FAC               	movwf	arm@on& (0+255),b
 11622  003F3E  6BAD               	clrf	(arm@on+1)& (0+255),b
 11623                           
 11624                           ;Test.c: 651: while(PORTBbits.RB1 == 0){
 11625  003F40  D005               	goto	l8334
 11626  003F42                     l8332:
 11627                           
 11628                           ; BSR set to: 0
 11629                           ;Test.c: 652: f_arm_position = 0;
 11630  003F42  0E00               	movlw	0
 11631  003F44  0100               	movlb	0	; () banked
 11632  003F46  6FEF               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
 11633  003F48  0E00               	movlw	0
 11634  003F4A  6FEE               	movwf	_f_arm_position& (0+255),b	;volatile
 11635  003F4C                     l8334:
 11636                           
 11637                           ; BSR set to: 0
 11638  003F4C  A281               	btfss	3969,1,c	;volatile
 11639  003F4E  D7F9               	goto	l8332
 11640                           
 11641                           ; BSR set to: 0
 11642                           ;Test.c: 653: }
 11643                           ;Test.c: 654: if(PORTB >> 4 == 0b1111){
 11644                           
 11645                           ; BSR set to: 0
 11646  003F50  3881               	swapf	3969,w,c	;volatile
 11647  003F52  0B0F               	andlw	15
 11648  003F54  0A0F               	xorlw	15
 11649  003F56  B4D8               	btfsc	status,2,c
 11650  003F58  D01F               	goto	l1427
 11651  003F5A                     l1428:
 11652  003F5A  A281               	btfss	3969,1,c	;volatile
 11653  003F5C  D7DF               	goto	l8328
 11654  003F5E  D7FD               	goto	l1428
 11655  003F60                     l8340:
 11656                           
 11657                           ;Test.c: 659: else{
 11658                           ;Test.c: 660: on = !on;
 11659  003F60  0100               	movlb	0	; () banked
 11660  003F62  51AC               	movf	arm@on& (0+255),w,b
 11661  003F64  0100               	movlb	0	; () banked
 11662  003F66  11AD               	iorwf	(arm@on+1)& (0+255),w,b
 11663  003F68  A4D8               	btfss	status,2,c
 11664  003F6A  D002               	goto	u7080
 11665  003F6C  0E01               	movlw	1
 11666  003F6E  D001               	goto	u7090
 11667  003F70                     u7080:
 11668  003F70  0E00               	movlw	0
 11669  003F72                     u7090:
 11670  003F72  0100               	movlb	0	; () banked
 11671  003F74  6FAC               	movwf	arm@on& (0+255),b
 11672  003F76  6BAD               	clrf	(arm@on+1)& (0+255),b
 11673                           
 11674                           ;Test.c: 661: while(PORTBbits.RB1 == 0){
 11675  003F78  D005               	goto	l8344
 11676  003F7A                     l8342:
 11677                           
 11678                           ; BSR set to: 0
 11679                           ;Test.c: 662: f_arm_position = 1;
 11680  003F7A  0E00               	movlw	0
 11681  003F7C  0100               	movlb	0	; () banked
 11682  003F7E  6FEF               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
 11683  003F80  0E01               	movlw	1
 11684  003F82  6FEE               	movwf	_f_arm_position& (0+255),b	;volatile
 11685  003F84                     l8344:
 11686                           
 11687                           ; BSR set to: 0
 11688  003F84  A281               	btfss	3969,1,c	;volatile
 11689  003F86  D7F9               	goto	l8342
 11690                           
 11691                           ; BSR set to: 0
 11692                           ;Test.c: 663: }
 11693                           ;Test.c: 664: if(PORTB >> 4 == 0b1111){
 11694                           
 11695                           ; BSR set to: 0
 11696  003F88  3881               	swapf	3969,w,c	;volatile
 11697  003F8A  0B0F               	andlw	15
 11698  003F8C  0A0F               	xorlw	15
 11699  003F8E  B4D8               	btfsc	status,2,c
 11700  003F90  D003               	goto	l1427
 11701  003F92                     l1436:
 11702  003F92  A281               	btfss	3969,1,c	;volatile
 11703  003F94  D7C3               	goto	l8328
 11704  003F96  D7FD               	goto	l1436
 11705  003F98                     l1427:
 11706                           
 11707                           ; BSR set to: 0
 11708                           ;Test.c: 668: }
 11709                           ;Test.c: 669: }
 11710                           ;Test.c: 671: (INTCONbits.GIE = 0);
 11711  003F98  9EF2               	bcf	intcon,7,c	;volatile
 11712                           
 11713                           ; BSR set to: 0
 11714                           ;Test.c: 672: stopSignals();
 11715  003F9A  EC24  F02A         	call	_stopSignals	;wreg free
 11716                           
 11717                           ;Test.c: 673: machine_state = Testing_state;
 11718  003F9E  0E03               	movlw	3
 11719  003FA0  0100               	movlb	0	; () banked
 11720  003FA2  6FFC               	movwf	_machine_state& (0+255),b
 11721                           
 11722                           ; BSR set to: 0
 11723  003FA4  0012               	return		;funcret
 11724  003FA6                     __end_of_arm:
 11725                           	opt stack 0
 11726                           tblptru	equ	0xFF8
 11727                           tblptrh	equ	0xFF7
 11728                           tblptrl	equ	0xFF6
 11729                           tablat	equ	0xFF5
 11730                           prodh	equ	0xFF4
 11731                           prodl	equ	0xFF3
 11732                           intcon	equ	0xFF2
 11733                           intcon2	equ	0xFF1
 11734                           intcon3	equ	0xFF0
 11735                           postinc0	equ	0xFEE
 11736                           wreg	equ	0xFE8
 11737                           postdec1	equ	0xFE5
 11738                           fsr1l	equ	0xFE1
 11739                           indf2	equ	0xFDF
 11740                           postinc2	equ	0xFDE
 11741                           postdec2	equ	0xFDD
 11742                           fsr2h	equ	0xFDA
 11743                           fsr2l	equ	0xFD9
 11744                           status	equ	0xFD8
 11745                           
 11746 ;; *************** function _algorithmTest *****************
 11747 ;; Defined at:
 11748 ;;		line 79 in file "Test.c"
 11749 ;; Parameters:    Size  Location     Type
 11750 ;;		None
 11751 ;; Auto vars:     Size  Location     Type
 11752 ;;		None
 11753 ;; Return value:  Size  Location     Type
 11754 ;;                  1    wreg      void 
 11755 ;; Registers used:
 11756 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11757 ;; Tracked objects:
 11758 ;;		On entry : 0/0
 11759 ;;		On exit  : 0/0
 11760 ;;		Unchanged: 0/0
 11761 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11762 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11763 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11764 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11765 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11766 ;;Total ram usage:        2 bytes
 11767 ;; Hardware stack levels used:    1
 11768 ;; Hardware stack levels required when called:   10
 11769 ;; This function calls:
 11770 ;;		_lcdInst
 11771 ;;		_printf
 11772 ;; This function is called by:
 11773 ;;		_Test
 11774 ;; This function uses a non-reentrant model
 11775 ;;
 11776                           
 11777                           	psect	text39
 11778  004170                     __ptext39:
 11779                           	opt stack 0
 11780  004170                     _algorithmTest:
 11781                           	opt stack 19
 11782                           
 11783                           ;Test.c: 81: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b10
      +                          000000);;
 11784                           
 11785                           ; BSR set to: 0
 11786                           ;incstack = 0
 11787  004170  0E01               	movlw	1
 11788  004172  EC72  F02A         	call	_lcdInst
 11789  004176  0E68               	movlw	104
 11790  004178  0100               	movlb	0	; () banked
 11791  00417A  6FAB               	movwf	??_algorithmTest& (0+255),b
 11792  00417C  0EE4               	movlw	228
 11793  00417E                     u9867:
 11794  00417E  2EE8               	decfsz	wreg,f,c
 11795  004180  D7FE               	bra	u9867
 11796  004182  2FAB               	decfsz	??_algorithmTest& (0+255),f,b
 11797  004184  D7FC               	bra	u9867
 11798  004186  F000               	nop	
 11799  004188  0E80               	movlw	128
 11800  00418A  EC72  F02A         	call	_lcdInst
 11801                           
 11802                           ;Test.c: 82: printf("ALGORITHM TEST");
 11803  00418E  0EDC               	movlw	low STR_70
 11804  004190  0100               	movlb	0	; () banked
 11805  004192  6F8E               	movwf	printf@f& (0+255),b
 11806  004194  0EFE               	movlw	high STR_70
 11807  004196  0100               	movlb	0	; () banked
 11808  004198  6F8F               	movwf	(printf@f+1)& (0+255),b
 11809  00419A  EC1E  F00B         	call	_printf	;wreg free
 11810                           
 11811                           ;Test.c: 83: lcdInst(0b11000000);;
 11812  00419E  0EC0               	movlw	192
 11813  0041A0  EC72  F02A         	call	_lcdInst
 11814                           
 11815                           ;Test.c: 84: printf("PUSH TO START");
 11816  0041A4  0E15               	movlw	low STR_71
 11817  0041A6  0100               	movlb	0	; () banked
 11818  0041A8  6F8E               	movwf	printf@f& (0+255),b
 11819  0041AA  0EFF               	movlw	high STR_71
 11820  0041AC  0100               	movlb	0	; () banked
 11821  0041AE  6F8F               	movwf	(printf@f+1)& (0+255),b
 11822  0041B0  EC1E  F00B         	call	_printf	;wreg free
 11823                           
 11824                           ;Test.c: 85: _delay((unsigned long)((100)*(32000000/4000.0)));
 11825  0041B4  0E05               	movlw	5
 11826  0041B6  0100               	movlb	0	; () banked
 11827  0041B8  6FAC               	movwf	(??_algorithmTest+1)& (0+255),b
 11828  0041BA  0E0F               	movlw	15
 11829  0041BC  0100               	movlb	0	; () banked
 11830  0041BE  6FAB               	movwf	??_algorithmTest& (0+255),b
 11831  0041C0  0EF1               	movlw	241
 11832  0041C2                     u9877:
 11833  0041C2  2EE8               	decfsz	wreg,f,c
 11834  0041C4  D7FE               	bra	u9877
 11835  0041C6  2FAB               	decfsz	??_algorithmTest& (0+255),f,b
 11836  0041C8  D7FC               	bra	u9877
 11837  0041CA  2FAC               	decfsz	(??_algorithmTest+1)& (0+255),f,b
 11838  0041CC  D7FA               	bra	u9877
 11839  0041CE                     l1223:
 11840  0041CE  A281               	btfss	3969,1,c	;volatile
 11841  0041D0  D7FE               	goto	l1223
 11842  0041D2                     l1226:
 11843  0041D2  B281               	btfsc	3969,1,c	;volatile
 11844  0041D4  D7FE               	goto	l1226
 11845                           
 11846                           ;Test.c: 88: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b10
      +                          000000);;
 11847  0041D6  0E01               	movlw	1
 11848  0041D8  EC72  F02A         	call	_lcdInst
 11849  0041DC  0E68               	movlw	104
 11850  0041DE  0100               	movlb	0	; () banked
 11851  0041E0  6FAB               	movwf	??_algorithmTest& (0+255),b
 11852  0041E2  0EE4               	movlw	228
 11853  0041E4                     u9887:
 11854  0041E4  2EE8               	decfsz	wreg,f,c
 11855  0041E6  D7FE               	bra	u9887
 11856  0041E8  2FAB               	decfsz	??_algorithmTest& (0+255),f,b
 11857  0041EA  D7FC               	bra	u9887
 11858  0041EC  F000               	nop	
 11859  0041EE  0E80               	movlw	128
 11860  0041F0  EC72  F02A         	call	_lcdInst
 11861                           
 11862                           ;Test.c: 93: printf("ALG1: 9 POPNOTAB");
 11863  0041F4  0E58               	movlw	low STR_72
 11864  0041F6  0100               	movlb	0	; () banked
 11865  0041F8  6F8E               	movwf	printf@f& (0+255),b
 11866  0041FA  0EFC               	movlw	high STR_72
 11867  0041FC  0100               	movlb	0	; () banked
 11868  0041FE  6F8F               	movwf	(printf@f+1)& (0+255),b
 11869  004200  EC1E  F00B         	call	_printf	;wreg free
 11870                           
 11871                           ;Test.c: 100: printf("ALG2: 12 CANS");
 11872  004204  0EF9               	movlw	low STR_73
 11873  004206  0100               	movlb	0	; () banked
 11874  004208  6F8E               	movwf	printf@f& (0+255),b
 11875  00420A  0EFE               	movlw	high STR_73
 11876  00420C  0100               	movlb	0	; () banked
 11877  00420E  6F8F               	movwf	(printf@f+1)& (0+255),b
 11878  004210  EC1E  F00B         	call	_printf	;wreg free
 11879                           
 11880                           ;Test.c: 109: printf("ALG3: 1 CAN");
 11881  004214  0E59               	movlw	low STR_74
 11882  004216  0100               	movlb	0	; () banked
 11883  004218  6F8E               	movwf	printf@f& (0+255),b
 11884  00421A  0EFF               	movlw	high STR_74
 11885  00421C  0100               	movlb	0	; () banked
 11886  00421E  6F8F               	movwf	(printf@f+1)& (0+255),b
 11887  004220  EC1E  F00B         	call	_printf	;wreg free
 11888                           
 11889                           ;Test.c: 115: printf("ALG4: ALL CANS");
 11890  004224  0EBE               	movlw	low STR_75
 11891  004226  0100               	movlb	0	; () banked
 11892  004228  6F8E               	movwf	printf@f& (0+255),b
 11893  00422A  0EFE               	movlw	high STR_75
 11894  00422C  0100               	movlb	0	; () banked
 11895  00422E  6F8F               	movwf	(printf@f+1)& (0+255),b
 11896  004230  EC1E  F00B         	call	_printf	;wreg free
 11897                           
 11898                           ;Test.c: 120: printf("ALG5: NO CANS");
 11899  004234  0E07               	movlw	low STR_76
 11900  004236  0100               	movlb	0	; () banked
 11901  004238  6F8E               	movwf	printf@f& (0+255),b
 11902  00423A  0EFF               	movlw	high STR_76
 11903  00423C  0100               	movlb	0	; () banked
 11904  00423E  6F8F               	movwf	(printf@f+1)& (0+255),b
 11905  004240  EC1E  F00B         	call	_printf	;wreg free
 11906  004244  0012               	return		;funcret
 11907  004246                     __end_of_algorithmTest:
 11908                           	opt stack 0
 11909                           tblptru	equ	0xFF8
 11910                           tblptrh	equ	0xFF7
 11911                           tblptrl	equ	0xFF6
 11912                           tablat	equ	0xFF5
 11913                           prodh	equ	0xFF4
 11914                           prodl	equ	0xFF3
 11915                           intcon	equ	0xFF2
 11916                           intcon2	equ	0xFF1
 11917                           intcon3	equ	0xFF0
 11918                           postinc0	equ	0xFEE
 11919                           wreg	equ	0xFE8
 11920                           postdec1	equ	0xFE5
 11921                           fsr1l	equ	0xFE1
 11922                           indf2	equ	0xFDF
 11923                           postinc2	equ	0xFDE
 11924                           postdec2	equ	0xFDD
 11925                           fsr2h	equ	0xFDA
 11926                           fsr2l	equ	0xFD9
 11927                           status	equ	0xFD8
 11928                           
 11929 ;; *************** function _actuatorTest *****************
 11930 ;; Defined at:
 11931 ;;		line 202 in file "Test.c"
 11932 ;; Parameters:    Size  Location     Type
 11933 ;;		None
 11934 ;; Auto vars:     Size  Location     Type
 11935 ;;  i               1   45[BANK0 ] unsigned char 
 11936 ;;  i               1   67[BANK0 ] unsigned char 
 11937 ;;  i               1   66[BANK0 ] unsigned char 
 11938 ;;  i               1   65[BANK0 ] unsigned char 
 11939 ;;  i               1   64[BANK0 ] unsigned char 
 11940 ;;  i               1   63[BANK0 ] unsigned char 
 11941 ;;  i               1   62[BANK0 ] unsigned char 
 11942 ;;  i               1   61[BANK0 ] unsigned char 
 11943 ;;  i               1   60[BANK0 ] unsigned char 
 11944 ;;  i               1   59[BANK0 ] unsigned char 
 11945 ;;  i               1   58[BANK0 ] unsigned char 
 11946 ;;  i               1   57[BANK0 ] unsigned char 
 11947 ;;  i               1   56[BANK0 ] unsigned char 
 11948 ;;  i               1   55[BANK0 ] unsigned char 
 11949 ;;  i               1   54[BANK0 ] unsigned char 
 11950 ;;  i               1   53[BANK0 ] unsigned char 
 11951 ;;  i               1   52[BANK0 ] unsigned char 
 11952 ;;  i               1   51[BANK0 ] unsigned char 
 11953 ;;  i               1   50[BANK0 ] unsigned char 
 11954 ;;  i               1   49[BANK0 ] unsigned char 
 11955 ;;  i               1   48[BANK0 ] unsigned char 
 11956 ;;  i               1   47[BANK0 ] unsigned char 
 11957 ;;  i               1   46[BANK0 ] unsigned char 
 11958 ;;  i               2   68[BANK0 ] int 
 11959 ;; Return value:  Size  Location     Type
 11960 ;;                  1    wreg      void 
 11961 ;; Registers used:
 11962 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11963 ;; Tracked objects:
 11964 ;;		On entry : 0/0
 11965 ;;		On exit  : 0/0
 11966 ;;		Unchanged: 0/0
 11967 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11968 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11969 ;;      Locals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11970 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11971 ;;      Totals:         0      27       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11972 ;;Total ram usage:       27 bytes
 11973 ;; Hardware stack levels used:    1
 11974 ;; Hardware stack levels required when called:   10
 11975 ;; This function calls:
 11976 ;;		_lcdInst
 11977 ;;		_printf
 11978 ;;		_updateServoPosition
 11979 ;; This function is called by:
 11980 ;;		_Test
 11981 ;; This function uses a non-reentrant model
 11982 ;;
 11983                           
 11984                           	psect	text40
 11985  0008D6                     __ptext40:
 11986                           	opt stack 0
 11987  0008D6                     _actuatorTest:
 11988                           	opt stack 19
 11989                           
 11990                           ;Test.c: 204: int i = 0;
 11991                           
 11992                           ;incstack = 0
 11993  0008D6  0E00               	movlw	0
 11994  0008D8  0100               	movlb	0	; () banked
 11995  0008DA  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 11996  0008DC  0E00               	movlw	0
 11997  0008DE  6FC4               	movwf	actuatorTest@i& (0+255),b
 11998                           
 11999                           ; BSR set to: 0
 12000                           ;Test.c: 206: (INTCONbits.GIE = 1);
 12001  0008E0  8EF2               	bsf	intcon,7,c	;volatile
 12002                           
 12003                           ; BSR set to: 0
 12004                           ;Test.c: 207: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12005  0008E2  0E01               	movlw	1
 12006  0008E4  EC72  F02A         	call	_lcdInst
 12007  0008E8  0E68               	movlw	104
 12008  0008EA  0100               	movlb	0	; () banked
 12009  0008EC  6FAB               	movwf	??_actuatorTest& (0+255),b
 12010  0008EE  0EE4               	movlw	228
 12011  0008F0                     u9897:
 12012  0008F0  2EE8               	decfsz	wreg,f,c
 12013  0008F2  D7FE               	bra	u9897
 12014  0008F4  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12015  0008F6  D7FC               	bra	u9897
 12016  0008F8  F000               	nop	
 12017  0008FA  0E80               	movlw	128
 12018  0008FC  EC72  F02A         	call	_lcdInst
 12019                           
 12020                           ;Test.c: 208: printf("ACTUATORS");
 12021  000900  0E90               	movlw	low STR_88
 12022  000902  0100               	movlb	0	; () banked
 12023  000904  6F8E               	movwf	printf@f& (0+255),b
 12024  000906  0EFF               	movlw	high STR_88
 12025  000908  0100               	movlb	0	; () banked
 12026  00090A  6F8F               	movwf	(printf@f+1)& (0+255),b
 12027  00090C  EC1E  F00B         	call	_printf	;wreg free
 12028                           
 12029                           ;Test.c: 209: lcdInst(0b11000000);;
 12030  000910  0EC0               	movlw	192
 12031  000912  EC72  F02A         	call	_lcdInst
 12032                           
 12033                           ;Test.c: 210: printf("PUSH TO START");
 12034  000916  0E15               	movlw	low STR_71
 12035  000918  0100               	movlb	0	; () banked
 12036  00091A  6F8E               	movwf	printf@f& (0+255),b
 12037  00091C  0EFF               	movlw	high STR_71
 12038  00091E  0100               	movlb	0	; () banked
 12039  000920  6F8F               	movwf	(printf@f+1)& (0+255),b
 12040  000922  EC1E  F00B         	call	_printf	;wreg free
 12041                           
 12042                           ;Test.c: 211: _delay((unsigned long)((100)*(32000000/4000.0)));
 12043  000926  0E05               	movlw	5
 12044  000928  0100               	movlb	0	; () banked
 12045  00092A  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 12046  00092C  0E0F               	movlw	15
 12047  00092E  0100               	movlb	0	; () banked
 12048  000930  6FAB               	movwf	??_actuatorTest& (0+255),b
 12049  000932  0EF1               	movlw	241
 12050  000934                     u9907:
 12051  000934  2EE8               	decfsz	wreg,f,c
 12052  000936  D7FE               	bra	u9907
 12053  000938  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12054  00093A  D7FC               	bra	u9907
 12055  00093C  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 12056  00093E  D7FA               	bra	u9907
 12057  000940                     l1258:
 12058  000940  A281               	btfss	3969,1,c	;volatile
 12059  000942  D7FE               	goto	l1258
 12060  000944                     l1261:
 12061  000944  B281               	btfsc	3969,1,c	;volatile
 12062  000946  D7FE               	goto	l1261
 12063                           
 12064                           ;Test.c: 214: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12065  000948  0E01               	movlw	1
 12066  00094A  EC72  F02A         	call	_lcdInst
 12067  00094E  0E68               	movlw	104
 12068  000950  0100               	movlb	0	; () banked
 12069  000952  6FAB               	movwf	??_actuatorTest& (0+255),b
 12070  000954  0EE4               	movlw	228
 12071  000956                     u9917:
 12072  000956  2EE8               	decfsz	wreg,f,c
 12073  000958  D7FE               	bra	u9917
 12074  00095A  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12075  00095C  D7FC               	bra	u9917
 12076  00095E  F000               	nop	
 12077  000960  0E80               	movlw	128
 12078  000962  EC72  F02A         	call	_lcdInst
 12079                           
 12080                           ;Test.c: 219: printf("TST: DC MOTORS");
 12081  000966  0ECD               	movlw	low STR_90
 12082  000968  0100               	movlb	0	; () banked
 12083  00096A  6F8E               	movwf	printf@f& (0+255),b
 12084  00096C  0EFE               	movlw	high STR_90
 12085  00096E  0100               	movlb	0	; () banked
 12086  000970  6F8F               	movwf	(printf@f+1)& (0+255),b
 12087  000972  EC1E  F00B         	call	_printf	;wreg free
 12088                           
 12089                           ;Test.c: 220: lcdInst(0b11000000);;
 12090  000976  0EC0               	movlw	192
 12091  000978  EC72  F02A         	call	_lcdInst
 12092                           
 12093                           ;Test.c: 221: printf("PIN RA5 HIGH.");
 12094  00097C  0EEB               	movlw	low STR_91
 12095  00097E  0100               	movlb	0	; () banked
 12096  000980  6F8E               	movwf	printf@f& (0+255),b
 12097  000982  0EFE               	movlw	high STR_91
 12098  000984  0100               	movlb	0	; () banked
 12099  000986  6F8F               	movwf	(printf@f+1)& (0+255),b
 12100  000988  EC1E  F00B         	call	_printf	;wreg free
 12101                           
 12102                           ;Test.c: 222: LATBbits.LATB2 = 1;
 12103  00098C  848A               	bsf	3978,2,c	;volatile
 12104                           
 12105                           ;Test.c: 223: for(i=0;i<5;i++){for(char i=0;i<100;i++){_delay((unsigned long)((10)*(3200
      +                          0000/4000.0)));};}
 12106  00098E  0E00               	movlw	0
 12107  000990  0100               	movlb	0	; () banked
 12108  000992  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 12109  000994  0E00               	movlw	0
 12110  000996  6FC4               	movwf	actuatorTest@i& (0+255),b
 12111                           
 12112                           ; BSR set to: 0
 12113  000998  0100               	movlb	0	; () banked
 12114  00099A  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 12115  00099C  D008               	goto	l7912
 12116  00099E  0100               	movlb	0	; () banked
 12117  0009A0  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 12118  0009A2  E123               	bnz	l1265
 12119  0009A4  0E05               	movlw	5
 12120  0009A6  0100               	movlb	0	; () banked
 12121  0009A8  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 12122  0009AA  B0D8               	btfsc	status,0,c
 12123  0009AC  D01E               	goto	l1265
 12124  0009AE                     l7912:
 12125                           
 12126                           ; BSR set to: 0
 12127  0009AE  0E00               	movlw	0
 12128  0009B0  0100               	movlb	0	; () banked
 12129  0009B2  6FAD               	movwf	actuatorTest@i_1729& (0+255),b
 12130  0009B4                     l7914:
 12131                           
 12132                           ; BSR set to: 0
 12133  0009B4  0E63               	movlw	99
 12134  0009B6  0100               	movlb	0	; () banked
 12135  0009B8  65AD               	cpfsgt	actuatorTest@i_1729& (0+255),b
 12136  0009BA  D001               	goto	l7918
 12137  0009BC  D00C               	goto	l7922
 12138  0009BE                     l7918:
 12139                           
 12140                           ; BSR set to: 0
 12141  0009BE  0E68               	movlw	104
 12142  0009C0  0100               	movlb	0	; () banked
 12143  0009C2  6FAB               	movwf	??_actuatorTest& (0+255),b
 12144  0009C4  0EE4               	movlw	228
 12145  0009C6                     u9927:
 12146  0009C6  2EE8               	decfsz	wreg,f,c
 12147  0009C8  D7FE               	bra	u9927
 12148  0009CA  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12149  0009CC  D7FC               	bra	u9927
 12150  0009CE  F000               	nop	
 12151  0009D0  0100               	movlb	0	; () banked
 12152  0009D2  2BAD               	incf	actuatorTest@i_1729& (0+255),f,b
 12153  0009D4  D7EF               	goto	l7914
 12154  0009D6                     l7922:
 12155                           
 12156                           ; BSR set to: 0
 12157  0009D6  0100               	movlb	0	; () banked
 12158  0009D8  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 12159  0009DA  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 12160                           
 12161                           ; BSR set to: 0
 12162  0009DC  0100               	movlb	0	; () banked
 12163  0009DE  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 12164  0009E0  D7E6               	goto	l7912
 12165  0009E2  0100               	movlb	0	; () banked
 12166  0009E4  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 12167  0009E6  E101               	bnz	u6510
 12168  0009E8  D7DD               	goto	L9
 12169  0009EA                     u6510:
 12170  0009EA                     l1265:
 12171                           
 12172                           ; BSR set to: 0
 12173                           ;Test.c: 224: LATBbits.LATB2 = 0;
 12174  0009EA  948A               	bcf	3978,2,c	;volatile
 12175                           
 12176                           ; BSR set to: 0
 12177                           ;Test.c: 225: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12178  0009EC  0E01               	movlw	1
 12179  0009EE  EC72  F02A         	call	_lcdInst
 12180  0009F2  0E68               	movlw	104
 12181  0009F4  0100               	movlb	0	; () banked
 12182  0009F6  6FAB               	movwf	??_actuatorTest& (0+255),b
 12183  0009F8  0EE4               	movlw	228
 12184  0009FA                     u9937:
 12185  0009FA  2EE8               	decfsz	wreg,f,c
 12186  0009FC  D7FE               	bra	u9937
 12187  0009FE  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12188  000A00  D7FC               	bra	u9937
 12189  000A02  F000               	nop	
 12190  000A04  0E80               	movlw	128
 12191  000A06  EC72  F02A         	call	_lcdInst
 12192                           
 12193                           ;Test.c: 231: printf("TST: COND SOLN'D");
 12194  000A0A  0E69               	movlw	low STR_92
 12195  000A0C  0100               	movlb	0	; () banked
 12196  000A0E  6F8E               	movwf	printf@f& (0+255),b
 12197  000A10  0EFC               	movlw	high STR_92
 12198  000A12  0100               	movlb	0	; () banked
 12199  000A14  6F8F               	movwf	(printf@f+1)& (0+255),b
 12200  000A16  EC1E  F00B         	call	_printf	;wreg free
 12201                           
 12202                           ;Test.c: 232: lcdInst(0b11000000);;
 12203  000A1A  0EC0               	movlw	192
 12204  000A1C  EC72  F02A         	call	_lcdInst
 12205                           
 12206                           ;Test.c: 233: printf("PIN RA3...");
 12207  000A20  0E65               	movlw	low STR_93
 12208  000A22  0100               	movlb	0	; () banked
 12209  000A24  6F8E               	movwf	printf@f& (0+255),b
 12210  000A26  0EFF               	movlw	high STR_93
 12211  000A28  0100               	movlb	0	; () banked
 12212  000A2A  6F8F               	movwf	(printf@f+1)& (0+255),b
 12213  000A2C  EC1E  F00B         	call	_printf	;wreg free
 12214                           
 12215                           ;Test.c: 234: for(i=0;i<5;i++){
 12216  000A30  0E00               	movlw	0
 12217  000A32  0100               	movlb	0	; () banked
 12218  000A34  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 12219  000A36  0E00               	movlw	0
 12220  000A38  6FC4               	movwf	actuatorTest@i& (0+255),b
 12221                           
 12222                           ; BSR set to: 0
 12223  000A3A  0100               	movlb	0	; () banked
 12224  000A3C  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 12225  000A3E  D008               	goto	l1268
 12226  000A40  0100               	movlb	0	; () banked
 12227  000A42  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 12228  000A44  E12C               	bnz	l1269
 12229  000A46  0E05               	movlw	5
 12230  000A48  0100               	movlb	0	; () banked
 12231  000A4A  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 12232  000A4C  B0D8               	btfsc	status,0,c
 12233  000A4E  D027               	goto	l1269
 12234  000A50                     l1268:
 12235                           
 12236                           ; BSR set to: 0
 12237                           ;Test.c: 235: LATAbits.LATA3 = 1;
 12238  000A50  8689               	bsf	3977,3,c	;volatile
 12239                           
 12240                           ; BSR set to: 0
 12241                           ;Test.c: 236: _delay((unsigned long)((300)*(32000000/4000.0)));
 12242  000A52  0E0D               	movlw	13
 12243  000A54  0100               	movlb	0	; () banked
 12244  000A56  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 12245  000A58  0E2D               	movlw	45
 12246  000A5A  0100               	movlb	0	; () banked
 12247  000A5C  6FAB               	movwf	??_actuatorTest& (0+255),b
 12248  000A5E  0ED7               	movlw	215
 12249  000A60                     u9947:
 12250  000A60  2EE8               	decfsz	wreg,f,c
 12251  000A62  D7FE               	bra	u9947
 12252  000A64  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12253  000A66  D7FC               	bra	u9947
 12254  000A68  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 12255  000A6A  D7FA               	bra	u9947
 12256  000A6C  D000               	nop2	
 12257                           
 12258                           ;Test.c: 237: LATAbits.LATA3 = !1;
 12259  000A6E  9689               	bcf	3977,3,c	;volatile
 12260                           
 12261                           ;Test.c: 238: _delay((unsigned long)((1000-300)*(32000000/4000.0)));
 12262  000A70  0E1D               	movlw	29
 12263  000A72  0100               	movlb	0	; () banked
 12264  000A74  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 12265  000A76  0E69               	movlw	105
 12266  000A78  0100               	movlb	0	; () banked
 12267  000A7A  6FAB               	movwf	??_actuatorTest& (0+255),b
 12268  000A7C  0EA5               	movlw	165
 12269  000A7E                     u9957:
 12270  000A7E  2EE8               	decfsz	wreg,f,c
 12271  000A80  D7FE               	bra	u9957
 12272  000A82  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12273  000A84  D7FC               	bra	u9957
 12274  000A86  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 12275  000A88  D7FA               	bra	u9957
 12276  000A8A  0100               	movlb	0	; () banked
 12277  000A8C  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 12278  000A8E  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 12279  000A90  0100               	movlb	0	; () banked
 12280  000A92  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 12281  000A94  D7DD               	goto	l1268
 12282  000A96  0100               	movlb	0	; () banked
 12283  000A98  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 12284  000A9A  E101               	bnz	u6530
 12285  000A9C  D7D4               	goto	L10
 12286  000A9E                     u6530:
 12287  000A9E                     l1269:
 12288                           
 12289                           ; BSR set to: 0
 12290                           ;Test.c: 239: }
 12291                           ;Test.c: 240: LATAbits.LATA3 = !1;
 12292  000A9E  9689               	bcf	3977,3,c	;volatile
 12293                           
 12294                           ; BSR set to: 0
 12295                           ;Test.c: 241: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12296  000AA0  0E01               	movlw	1
 12297  000AA2  EC72  F02A         	call	_lcdInst
 12298  000AA6  0E68               	movlw	104
 12299  000AA8  0100               	movlb	0	; () banked
 12300  000AAA  6FAB               	movwf	??_actuatorTest& (0+255),b
 12301  000AAC  0EE4               	movlw	228
 12302  000AAE                     u9967:
 12303  000AAE  2EE8               	decfsz	wreg,f,c
 12304  000AB0  D7FE               	bra	u9967
 12305  000AB2  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12306  000AB4  D7FC               	bra	u9967
 12307  000AB6  F000               	nop	
 12308  000AB8  0E80               	movlw	128
 12309  000ABA  EC72  F02A         	call	_lcdInst
 12310                           
 12311                           ;Test.c: 247: printf("TST: PUSH SOLN'D");
 12312  000ABE  0E7A               	movlw	low STR_94
 12313  000AC0  0100               	movlb	0	; () banked
 12314  000AC2  6F8E               	movwf	printf@f& (0+255),b
 12315  000AC4  0EFC               	movlw	high STR_94
 12316  000AC6  0100               	movlb	0	; () banked
 12317  000AC8  6F8F               	movwf	(printf@f+1)& (0+255),b
 12318  000ACA  EC1E  F00B         	call	_printf	;wreg free
 12319                           
 12320                           ;Test.c: 248: lcdInst(0b11000000);;
 12321  000ACE  0EC0               	movlw	192
 12322  000AD0  EC72  F02A         	call	_lcdInst
 12323                           
 12324                           ;Test.c: 249: printf("PIN RA4...");
 12325  000AD4  0E70               	movlw	low STR_95
 12326  000AD6  0100               	movlb	0	; () banked
 12327  000AD8  6F8E               	movwf	printf@f& (0+255),b
 12328  000ADA  0EFF               	movlw	high STR_95
 12329  000ADC  0100               	movlb	0	; () banked
 12330  000ADE  6F8F               	movwf	(printf@f+1)& (0+255),b
 12331  000AE0  EC1E  F00B         	call	_printf	;wreg free
 12332                           
 12333                           ;Test.c: 250: for(i=0;i<5;i++){
 12334  000AE4  0E00               	movlw	0
 12335  000AE6  0100               	movlb	0	; () banked
 12336  000AE8  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 12337  000AEA  0E00               	movlw	0
 12338  000AEC  6FC4               	movwf	actuatorTest@i& (0+255),b
 12339                           
 12340                           ; BSR set to: 0
 12341  000AEE  0100               	movlb	0	; () banked
 12342  000AF0  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 12343  000AF2  D008               	goto	l1270
 12344  000AF4  0100               	movlb	0	; () banked
 12345  000AF6  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 12346  000AF8  E12C               	bnz	l1271
 12347  000AFA  0E05               	movlw	5
 12348  000AFC  0100               	movlb	0	; () banked
 12349  000AFE  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 12350  000B00  B0D8               	btfsc	status,0,c
 12351  000B02  D027               	goto	l1271
 12352  000B04                     l1270:
 12353                           
 12354                           ; BSR set to: 0
 12355                           ;Test.c: 251: LATAbits.LATA4 = 1;
 12356  000B04  8889               	bsf	3977,4,c	;volatile
 12357                           
 12358                           ; BSR set to: 0
 12359                           ;Test.c: 252: _delay((unsigned long)((300)*(32000000/4000.0)));
 12360  000B06  0E0D               	movlw	13
 12361  000B08  0100               	movlb	0	; () banked
 12362  000B0A  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 12363  000B0C  0E2D               	movlw	45
 12364  000B0E  0100               	movlb	0	; () banked
 12365  000B10  6FAB               	movwf	??_actuatorTest& (0+255),b
 12366  000B12  0ED7               	movlw	215
 12367  000B14                     u9977:
 12368  000B14  2EE8               	decfsz	wreg,f,c
 12369  000B16  D7FE               	bra	u9977
 12370  000B18  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12371  000B1A  D7FC               	bra	u9977
 12372  000B1C  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 12373  000B1E  D7FA               	bra	u9977
 12374  000B20  D000               	nop2	
 12375                           
 12376                           ;Test.c: 253: LATAbits.LATA4 = !1;
 12377  000B22  9889               	bcf	3977,4,c	;volatile
 12378                           
 12379                           ;Test.c: 254: _delay((unsigned long)((1000-300)*(32000000/4000.0)));
 12380  000B24  0E1D               	movlw	29
 12381  000B26  0100               	movlb	0	; () banked
 12382  000B28  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 12383  000B2A  0E69               	movlw	105
 12384  000B2C  0100               	movlb	0	; () banked
 12385  000B2E  6FAB               	movwf	??_actuatorTest& (0+255),b
 12386  000B30  0EA5               	movlw	165
 12387  000B32                     u9987:
 12388  000B32  2EE8               	decfsz	wreg,f,c
 12389  000B34  D7FE               	bra	u9987
 12390  000B36  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12391  000B38  D7FC               	bra	u9987
 12392  000B3A  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 12393  000B3C  D7FA               	bra	u9987
 12394  000B3E  0100               	movlb	0	; () banked
 12395  000B40  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 12396  000B42  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 12397  000B44  0100               	movlb	0	; () banked
 12398  000B46  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 12399  000B48  D7DD               	goto	l1270
 12400  000B4A  0100               	movlb	0	; () banked
 12401  000B4C  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 12402  000B4E  E101               	bnz	u6550
 12403  000B50  D7D4               	goto	L11
 12404  000B52                     u6550:
 12405  000B52                     l1271:
 12406                           
 12407                           ; BSR set to: 0
 12408                           ;Test.c: 255: }
 12409                           ;Test.c: 256: LATAbits.LATA4 = !1;
 12410  000B52  9889               	bcf	3977,4,c	;volatile
 12411                           
 12412                           ; BSR set to: 0
 12413                           ;Test.c: 257: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12414  000B54  0E01               	movlw	1
 12415  000B56  EC72  F02A         	call	_lcdInst
 12416  000B5A  0E68               	movlw	104
 12417  000B5C  0100               	movlb	0	; () banked
 12418  000B5E  6FAB               	movwf	??_actuatorTest& (0+255),b
 12419  000B60  0EE4               	movlw	228
 12420  000B62                     u9997:
 12421  000B62  2EE8               	decfsz	wreg,f,c
 12422  000B64  D7FE               	bra	u9997
 12423  000B66  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12424  000B68  D7FC               	bra	u9997
 12425  000B6A  F000               	nop	
 12426  000B6C  0E80               	movlw	128
 12427  000B6E  EC72  F02A         	call	_lcdInst
 12428                           
 12429                           ;Test.c: 260: machine_state = Sorting_state;
 12430  000B72  0E01               	movlw	1
 12431  000B74  0100               	movlb	0	; () banked
 12432  000B76  6FFC               	movwf	_machine_state& (0+255),b
 12433                           
 12434                           ; BSR set to: 0
 12435                           ;Test.c: 261: was_low_1 = 0;
 12436  000B78  0E00               	movlw	0
 12437  000B7A  6E78               	movwf	_was_low_1+1,c	;volatile
 12438  000B7C  0E00               	movlw	0
 12439  000B7E  6E77               	movwf	_was_low_1,c	;volatile
 12440                           
 12441                           ; BSR set to: 0
 12442                           ;Test.c: 262: was_low_1 = 0;
 12443  000B80  0E00               	movlw	0
 12444  000B82  6E78               	movwf	_was_low_1+1,c	;volatile
 12445  000B84  0E00               	movlw	0
 12446  000B86  6E77               	movwf	_was_low_1,c	;volatile
 12447                           
 12448                           ; BSR set to: 0
 12449                           ;Test.c: 269: printf("TST: PAN SERVO");
 12450  000B88  0EAF               	movlw	low STR_96
 12451  000B8A  0100               	movlb	0	; () banked
 12452  000B8C  6F8E               	movwf	printf@f& (0+255),b
 12453  000B8E  0EFE               	movlw	high STR_96
 12454  000B90  0100               	movlb	0	; () banked
 12455  000B92  6F8F               	movwf	(printf@f+1)& (0+255),b
 12456  000B94  EC1E  F00B         	call	_printf	;wreg free
 12457                           
 12458                           ;Test.c: 270: lcdInst(0b11000000);;
 12459  000B98  0EC0               	movlw	192
 12460  000B9A  EC72  F02A         	call	_lcdInst
 12461                           
 12462                           ;Test.c: 271: printf("MIDDLE -- 2s    ");
 12463  000B9E  0ED0               	movlw	low STR_97
 12464  000BA0  0100               	movlb	0	; () banked
 12465  000BA2  6F8E               	movwf	printf@f& (0+255),b
 12466  000BA4  0EFB               	movlw	high STR_97
 12467  000BA6  0100               	movlb	0	; () banked
 12468  000BA8  6F8F               	movwf	(printf@f+1)& (0+255),b
 12469  000BAA  EC1E  F00B         	call	_printf	;wreg free
 12470                           
 12471                           ;Test.c: 272: updateServoPosition(1200, 1);
 12472  000BAE  0E04               	movlw	4
 12473  000BB0  0100               	movlb	0	; () banked
 12474  000BB2  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12475  000BB4  0EB0               	movlw	176
 12476  000BB6  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12477  000BB8  0E00               	movlw	0
 12478  000BBA  0100               	movlb	0	; () banked
 12479  000BBC  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12480  000BBE  0E01               	movlw	1
 12481  000BC0  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12482  000BC2  ECD0  F023         	call	_updateServoPosition	;wreg free
 12483                           
 12484                           ;Test.c: 273: TMR1ON = 1;
 12485  000BC6  80CD               	bsf	4045,0,c	;volatile
 12486                           
 12487                           ;Test.c: 274: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12488  000BC8  0E00               	movlw	0
 12489  000BCA  0100               	movlb	0	; () banked
 12490  000BCC  6FAE               	movwf	actuatorTest@i_1736& (0+255),b
 12491  000BCE                     l7998:
 12492                           
 12493                           ; BSR set to: 0
 12494  000BCE  0E63               	movlw	99
 12495  000BD0  0100               	movlb	0	; () banked
 12496  000BD2  65AE               	cpfsgt	actuatorTest@i_1736& (0+255),b
 12497  000BD4  D001               	goto	l8002
 12498  000BD6  D00C               	goto	l8006
 12499  000BD8                     l8002:
 12500                           
 12501                           ; BSR set to: 0
 12502  000BD8  0E68               	movlw	104
 12503  000BDA  0100               	movlb	0	; () banked
 12504  000BDC  6FAB               	movwf	??_actuatorTest& (0+255),b
 12505  000BDE  0EE4               	movlw	228
 12506  000BE0                     u10007:
 12507  000BE0  2EE8               	decfsz	wreg,f,c
 12508  000BE2  D7FE               	bra	u10007
 12509  000BE4  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12510  000BE6  D7FC               	bra	u10007
 12511  000BE8  F000               	nop	
 12512  000BEA  0100               	movlb	0	; () banked
 12513  000BEC  2BAE               	incf	actuatorTest@i_1736& (0+255),f,b
 12514  000BEE  D7EF               	goto	l7998
 12515  000BF0                     l8006:
 12516                           
 12517                           ; BSR set to: 0
 12518  000BF0  0E00               	movlw	0
 12519  000BF2  0100               	movlb	0	; () banked
 12520  000BF4  6FAF               	movwf	actuatorTest@i_1737& (0+255),b
 12521  000BF6                     l8008:
 12522                           
 12523                           ; BSR set to: 0
 12524  000BF6  0E63               	movlw	99
 12525  000BF8  0100               	movlb	0	; () banked
 12526  000BFA  65AF               	cpfsgt	actuatorTest@i_1737& (0+255),b
 12527  000BFC  D001               	goto	l8012
 12528  000BFE  D00C               	goto	l8016
 12529  000C00                     l8012:
 12530                           
 12531                           ; BSR set to: 0
 12532  000C00  0E68               	movlw	104
 12533  000C02  0100               	movlb	0	; () banked
 12534  000C04  6FAB               	movwf	??_actuatorTest& (0+255),b
 12535  000C06  0EE4               	movlw	228
 12536  000C08                     u10017:
 12537  000C08  2EE8               	decfsz	wreg,f,c
 12538  000C0A  D7FE               	bra	u10017
 12539  000C0C  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12540  000C0E  D7FC               	bra	u10017
 12541  000C10  F000               	nop	
 12542  000C12  0100               	movlb	0	; () banked
 12543  000C14  2BAF               	incf	actuatorTest@i_1737& (0+255),f,b
 12544  000C16  D7EF               	goto	l8008
 12545  000C18                     l8016:
 12546                           
 12547                           ; BSR set to: 0
 12548                           ;Test.c: 276: lcdInst(0b10000000);;lcdInst(0b11000000);;
 12549  000C18  0E80               	movlw	128
 12550  000C1A  EC72  F02A         	call	_lcdInst
 12551  000C1E  0EC0               	movlw	192
 12552  000C20  EC72  F02A         	call	_lcdInst
 12553                           
 12554                           ;Test.c: 277: printf("RIGHT -- 2s     ");
 12555  000C24  0EBF               	movlw	low STR_98
 12556  000C26  0100               	movlb	0	; () banked
 12557  000C28  6F8E               	movwf	printf@f& (0+255),b
 12558  000C2A  0EFB               	movlw	high STR_98
 12559  000C2C  0100               	movlb	0	; () banked
 12560  000C2E  6F8F               	movwf	(printf@f+1)& (0+255),b
 12561  000C30  EC1E  F00B         	call	_printf	;wreg free
 12562                           
 12563                           ;Test.c: 278: updateServoPosition(500, 1);
 12564  000C34  0E01               	movlw	1
 12565  000C36  0100               	movlb	0	; () banked
 12566  000C38  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12567  000C3A  0EF4               	movlw	244
 12568  000C3C  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12569  000C3E  0E00               	movlw	0
 12570  000C40  0100               	movlb	0	; () banked
 12571  000C42  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12572  000C44  0E01               	movlw	1
 12573  000C46  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12574  000C48  ECD0  F023         	call	_updateServoPosition	;wreg free
 12575                           
 12576                           ;Test.c: 279: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12577  000C4C  0E00               	movlw	0
 12578  000C4E  0100               	movlb	0	; () banked
 12579  000C50  6FB0               	movwf	actuatorTest@i_1739& (0+255),b
 12580  000C52                     l8024:
 12581                           
 12582                           ; BSR set to: 0
 12583  000C52  0E63               	movlw	99
 12584  000C54  0100               	movlb	0	; () banked
 12585  000C56  65B0               	cpfsgt	actuatorTest@i_1739& (0+255),b
 12586  000C58  D001               	goto	l8028
 12587  000C5A  D00C               	goto	l8032
 12588  000C5C                     l8028:
 12589                           
 12590                           ; BSR set to: 0
 12591  000C5C  0E68               	movlw	104
 12592  000C5E  0100               	movlb	0	; () banked
 12593  000C60  6FAB               	movwf	??_actuatorTest& (0+255),b
 12594  000C62  0EE4               	movlw	228
 12595  000C64                     u10027:
 12596  000C64  2EE8               	decfsz	wreg,f,c
 12597  000C66  D7FE               	bra	u10027
 12598  000C68  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12599  000C6A  D7FC               	bra	u10027
 12600  000C6C  F000               	nop	
 12601  000C6E  0100               	movlb	0	; () banked
 12602  000C70  2BB0               	incf	actuatorTest@i_1739& (0+255),f,b
 12603  000C72  D7EF               	goto	l8024
 12604  000C74                     l8032:
 12605                           
 12606                           ; BSR set to: 0
 12607  000C74  0E00               	movlw	0
 12608  000C76  0100               	movlb	0	; () banked
 12609  000C78  6FB1               	movwf	actuatorTest@i_1740& (0+255),b
 12610  000C7A                     l8034:
 12611                           
 12612                           ; BSR set to: 0
 12613  000C7A  0E63               	movlw	99
 12614  000C7C  0100               	movlb	0	; () banked
 12615  000C7E  65B1               	cpfsgt	actuatorTest@i_1740& (0+255),b
 12616  000C80  D001               	goto	l8038
 12617  000C82  D00C               	goto	l8042
 12618  000C84                     l8038:
 12619                           
 12620                           ; BSR set to: 0
 12621  000C84  0E68               	movlw	104
 12622  000C86  0100               	movlb	0	; () banked
 12623  000C88  6FAB               	movwf	??_actuatorTest& (0+255),b
 12624  000C8A  0EE4               	movlw	228
 12625  000C8C                     u10037:
 12626  000C8C  2EE8               	decfsz	wreg,f,c
 12627  000C8E  D7FE               	bra	u10037
 12628  000C90  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12629  000C92  D7FC               	bra	u10037
 12630  000C94  F000               	nop	
 12631  000C96  0100               	movlb	0	; () banked
 12632  000C98  2BB1               	incf	actuatorTest@i_1740& (0+255),f,b
 12633  000C9A  D7EF               	goto	l8034
 12634  000C9C                     l8042:
 12635                           
 12636                           ; BSR set to: 0
 12637                           ;Test.c: 281: lcdInst(0b10000000);;lcdInst(0b11000000);;
 12638  000C9C  0E80               	movlw	128
 12639  000C9E  EC72  F02A         	call	_lcdInst
 12640  000CA2  0EC0               	movlw	192
 12641  000CA4  EC72  F02A         	call	_lcdInst
 12642                           
 12643                           ;Test.c: 282: printf("LEFT -- 2s      ");
 12644  000CA8  0E9D               	movlw	low STR_99
 12645  000CAA  0100               	movlb	0	; () banked
 12646  000CAC  6F8E               	movwf	printf@f& (0+255),b
 12647  000CAE  0EFB               	movlw	high STR_99
 12648  000CB0  0100               	movlb	0	; () banked
 12649  000CB2  6F8F               	movwf	(printf@f+1)& (0+255),b
 12650  000CB4  EC1E  F00B         	call	_printf	;wreg free
 12651                           
 12652                           ;Test.c: 283: updateServoPosition(2400, 1);
 12653  000CB8  0E09               	movlw	9
 12654  000CBA  0100               	movlb	0	; () banked
 12655  000CBC  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12656  000CBE  0E60               	movlw	96
 12657  000CC0  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12658  000CC2  0E00               	movlw	0
 12659  000CC4  0100               	movlb	0	; () banked
 12660  000CC6  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12661  000CC8  0E01               	movlw	1
 12662  000CCA  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12663  000CCC  ECD0  F023         	call	_updateServoPosition	;wreg free
 12664                           
 12665                           ;Test.c: 284: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12666  000CD0  0E00               	movlw	0
 12667  000CD2  0100               	movlb	0	; () banked
 12668  000CD4  6FB2               	movwf	actuatorTest@i_1742& (0+255),b
 12669  000CD6                     l8050:
 12670                           
 12671                           ; BSR set to: 0
 12672  000CD6  0E63               	movlw	99
 12673  000CD8  0100               	movlb	0	; () banked
 12674  000CDA  65B2               	cpfsgt	actuatorTest@i_1742& (0+255),b
 12675  000CDC  D001               	goto	l8054
 12676  000CDE  D00C               	goto	l8058
 12677  000CE0                     l8054:
 12678                           
 12679                           ; BSR set to: 0
 12680  000CE0  0E68               	movlw	104
 12681  000CE2  0100               	movlb	0	; () banked
 12682  000CE4  6FAB               	movwf	??_actuatorTest& (0+255),b
 12683  000CE6  0EE4               	movlw	228
 12684  000CE8                     u10047:
 12685  000CE8  2EE8               	decfsz	wreg,f,c
 12686  000CEA  D7FE               	bra	u10047
 12687  000CEC  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12688  000CEE  D7FC               	bra	u10047
 12689  000CF0  F000               	nop	
 12690  000CF2  0100               	movlb	0	; () banked
 12691  000CF4  2BB2               	incf	actuatorTest@i_1742& (0+255),f,b
 12692  000CF6  D7EF               	goto	l8050
 12693  000CF8                     l8058:
 12694                           
 12695                           ; BSR set to: 0
 12696  000CF8  0E00               	movlw	0
 12697  000CFA  0100               	movlb	0	; () banked
 12698  000CFC  6FB3               	movwf	actuatorTest@i_1743& (0+255),b
 12699  000CFE                     l8060:
 12700                           
 12701                           ; BSR set to: 0
 12702  000CFE  0E63               	movlw	99
 12703  000D00  0100               	movlb	0	; () banked
 12704  000D02  65B3               	cpfsgt	actuatorTest@i_1743& (0+255),b
 12705  000D04  D001               	goto	l8064
 12706  000D06  D00C               	goto	l8068
 12707  000D08                     l8064:
 12708                           
 12709                           ; BSR set to: 0
 12710  000D08  0E68               	movlw	104
 12711  000D0A  0100               	movlb	0	; () banked
 12712  000D0C  6FAB               	movwf	??_actuatorTest& (0+255),b
 12713  000D0E  0EE4               	movlw	228
 12714  000D10                     u10057:
 12715  000D10  2EE8               	decfsz	wreg,f,c
 12716  000D12  D7FE               	bra	u10057
 12717  000D14  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12718  000D16  D7FC               	bra	u10057
 12719  000D18  F000               	nop	
 12720  000D1A  0100               	movlb	0	; () banked
 12721  000D1C  2BB3               	incf	actuatorTest@i_1743& (0+255),f,b
 12722  000D1E  D7EF               	goto	l8060
 12723  000D20                     l8068:
 12724                           
 12725                           ; BSR set to: 0
 12726                           ;Test.c: 286: lcdInst(0b10000000);;lcdInst(0b11000000);;
 12727  000D20  0E80               	movlw	128
 12728  000D22  EC72  F02A         	call	_lcdInst
 12729  000D26  0EC0               	movlw	192
 12730  000D28  EC72  F02A         	call	_lcdInst
 12731                           
 12732                           ;Test.c: 287: printf("MID-LEFT -- 2s  ");
 12733  000D2C  0E25               	movlw	low STR_100
 12734  000D2E  0100               	movlb	0	; () banked
 12735  000D30  6F8E               	movwf	printf@f& (0+255),b
 12736  000D32  0EFC               	movlw	high STR_100
 12737  000D34  0100               	movlb	0	; () banked
 12738  000D36  6F8F               	movwf	(printf@f+1)& (0+255),b
 12739  000D38  EC1E  F00B         	call	_printf	;wreg free
 12740                           
 12741                           ;Test.c: 288: updateServoPosition(1670, 1);
 12742  000D3C  0E06               	movlw	6
 12743  000D3E  0100               	movlb	0	; () banked
 12744  000D40  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12745  000D42  0E86               	movlw	134
 12746  000D44  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12747  000D46  0E00               	movlw	0
 12748  000D48  0100               	movlb	0	; () banked
 12749  000D4A  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12750  000D4C  0E01               	movlw	1
 12751  000D4E  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12752  000D50  ECD0  F023         	call	_updateServoPosition	;wreg free
 12753                           
 12754                           ;Test.c: 289: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12755  000D54  0E00               	movlw	0
 12756  000D56  0100               	movlb	0	; () banked
 12757  000D58  6FB4               	movwf	actuatorTest@i_1745& (0+255),b
 12758  000D5A                     l8076:
 12759                           
 12760                           ; BSR set to: 0
 12761  000D5A  0E63               	movlw	99
 12762  000D5C  0100               	movlb	0	; () banked
 12763  000D5E  65B4               	cpfsgt	actuatorTest@i_1745& (0+255),b
 12764  000D60  D001               	goto	l8080
 12765  000D62  D00C               	goto	l8084
 12766  000D64                     l8080:
 12767                           
 12768                           ; BSR set to: 0
 12769  000D64  0E68               	movlw	104
 12770  000D66  0100               	movlb	0	; () banked
 12771  000D68  6FAB               	movwf	??_actuatorTest& (0+255),b
 12772  000D6A  0EE4               	movlw	228
 12773  000D6C                     u10067:
 12774  000D6C  2EE8               	decfsz	wreg,f,c
 12775  000D6E  D7FE               	bra	u10067
 12776  000D70  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12777  000D72  D7FC               	bra	u10067
 12778  000D74  F000               	nop	
 12779  000D76  0100               	movlb	0	; () banked
 12780  000D78  2BB4               	incf	actuatorTest@i_1745& (0+255),f,b
 12781  000D7A  D7EF               	goto	l8076
 12782  000D7C                     l8084:
 12783                           
 12784                           ; BSR set to: 0
 12785  000D7C  0E00               	movlw	0
 12786  000D7E  0100               	movlb	0	; () banked
 12787  000D80  6FB5               	movwf	actuatorTest@i_1746& (0+255),b
 12788  000D82                     l8086:
 12789                           
 12790                           ; BSR set to: 0
 12791  000D82  0E63               	movlw	99
 12792  000D84  0100               	movlb	0	; () banked
 12793  000D86  65B5               	cpfsgt	actuatorTest@i_1746& (0+255),b
 12794  000D88  D001               	goto	l8090
 12795  000D8A  D00C               	goto	l8094
 12796  000D8C                     l8090:
 12797                           
 12798                           ; BSR set to: 0
 12799  000D8C  0E68               	movlw	104
 12800  000D8E  0100               	movlb	0	; () banked
 12801  000D90  6FAB               	movwf	??_actuatorTest& (0+255),b
 12802  000D92  0EE4               	movlw	228
 12803  000D94                     u10077:
 12804  000D94  2EE8               	decfsz	wreg,f,c
 12805  000D96  D7FE               	bra	u10077
 12806  000D98  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12807  000D9A  D7FC               	bra	u10077
 12808  000D9C  F000               	nop	
 12809  000D9E  0100               	movlb	0	; () banked
 12810  000DA0  2BB5               	incf	actuatorTest@i_1746& (0+255),f,b
 12811  000DA2  D7EF               	goto	l8086
 12812  000DA4                     l8094:
 12813                           
 12814                           ; BSR set to: 0
 12815                           ;Test.c: 291: lcdInst(0b10000000);;lcdInst(0b11000000);;
 12816  000DA4  0E80               	movlw	128
 12817  000DA6  EC72  F02A         	call	_lcdInst
 12818  000DAA  0EC0               	movlw	192
 12819  000DAC  EC72  F02A         	call	_lcdInst
 12820                           
 12821                           ;Test.c: 292: printf("MID-RIGHT -- 2s ");
 12822  000DB0  0E36               	movlw	low STR_101
 12823  000DB2  0100               	movlb	0	; () banked
 12824  000DB4  6F8E               	movwf	printf@f& (0+255),b
 12825  000DB6  0EFC               	movlw	high STR_101
 12826  000DB8  0100               	movlb	0	; () banked
 12827  000DBA  6F8F               	movwf	(printf@f+1)& (0+255),b
 12828  000DBC  EC1E  F00B         	call	_printf	;wreg free
 12829                           
 12830                           ;Test.c: 293: updateServoPosition(850, 1);
 12831  000DC0  0E03               	movlw	3
 12832  000DC2  0100               	movlb	0	; () banked
 12833  000DC4  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12834  000DC6  0E52               	movlw	82
 12835  000DC8  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12836  000DCA  0E00               	movlw	0
 12837  000DCC  0100               	movlb	0	; () banked
 12838  000DCE  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12839  000DD0  0E01               	movlw	1
 12840  000DD2  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12841  000DD4  ECD0  F023         	call	_updateServoPosition	;wreg free
 12842                           
 12843                           ;Test.c: 294: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12844  000DD8  0E00               	movlw	0
 12845  000DDA  0100               	movlb	0	; () banked
 12846  000DDC  6FB6               	movwf	actuatorTest@i_1748& (0+255),b
 12847  000DDE                     l8102:
 12848                           
 12849                           ; BSR set to: 0
 12850  000DDE  0E63               	movlw	99
 12851  000DE0  0100               	movlb	0	; () banked
 12852  000DE2  65B6               	cpfsgt	actuatorTest@i_1748& (0+255),b
 12853  000DE4  D001               	goto	l8106
 12854  000DE6  D00C               	goto	l8110
 12855  000DE8                     l8106:
 12856                           
 12857                           ; BSR set to: 0
 12858  000DE8  0E68               	movlw	104
 12859  000DEA  0100               	movlb	0	; () banked
 12860  000DEC  6FAB               	movwf	??_actuatorTest& (0+255),b
 12861  000DEE  0EE4               	movlw	228
 12862  000DF0                     u10087:
 12863  000DF0  2EE8               	decfsz	wreg,f,c
 12864  000DF2  D7FE               	bra	u10087
 12865  000DF4  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12866  000DF6  D7FC               	bra	u10087
 12867  000DF8  F000               	nop	
 12868  000DFA  0100               	movlb	0	; () banked
 12869  000DFC  2BB6               	incf	actuatorTest@i_1748& (0+255),f,b
 12870  000DFE  D7EF               	goto	l8102
 12871  000E00                     l8110:
 12872                           
 12873                           ; BSR set to: 0
 12874  000E00  0E00               	movlw	0
 12875  000E02  0100               	movlb	0	; () banked
 12876  000E04  6FB7               	movwf	actuatorTest@i_1749& (0+255),b
 12877  000E06                     l8112:
 12878                           
 12879                           ; BSR set to: 0
 12880  000E06  0E63               	movlw	99
 12881  000E08  0100               	movlb	0	; () banked
 12882  000E0A  65B7               	cpfsgt	actuatorTest@i_1749& (0+255),b
 12883  000E0C  D001               	goto	l8116
 12884  000E0E  D00C               	goto	l8120
 12885  000E10                     l8116:
 12886                           
 12887                           ; BSR set to: 0
 12888  000E10  0E68               	movlw	104
 12889  000E12  0100               	movlb	0	; () banked
 12890  000E14  6FAB               	movwf	??_actuatorTest& (0+255),b
 12891  000E16  0EE4               	movlw	228
 12892  000E18                     u10097:
 12893  000E18  2EE8               	decfsz	wreg,f,c
 12894  000E1A  D7FE               	bra	u10097
 12895  000E1C  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12896  000E1E  D7FC               	bra	u10097
 12897  000E20  F000               	nop	
 12898  000E22  0100               	movlb	0	; () banked
 12899  000E24  2BB7               	incf	actuatorTest@i_1749& (0+255),f,b
 12900  000E26  D7EF               	goto	l8112
 12901  000E28                     l8120:
 12902                           
 12903                           ; BSR set to: 0
 12904                           ;Test.c: 296: lcdInst(0b10000000);;lcdInst(0b11000000);;
 12905  000E28  0E80               	movlw	128
 12906  000E2A  EC72  F02A         	call	_lcdInst
 12907  000E2E  0EC0               	movlw	192
 12908  000E30  EC72  F02A         	call	_lcdInst
 12909                           
 12910                           ;Test.c: 297: printf("MID -- 2s       ");
 12911  000E34  0E7B               	movlw	low STR_102
 12912  000E36  0100               	movlb	0	; () banked
 12913  000E38  6F8E               	movwf	printf@f& (0+255),b
 12914  000E3A  0EFB               	movlw	high STR_102
 12915  000E3C  0100               	movlb	0	; () banked
 12916  000E3E  6F8F               	movwf	(printf@f+1)& (0+255),b
 12917  000E40  EC1E  F00B         	call	_printf	;wreg free
 12918                           
 12919                           ;Test.c: 298: updateServoPosition(1200, 1);
 12920  000E44  0E04               	movlw	4
 12921  000E46  0100               	movlb	0	; () banked
 12922  000E48  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12923  000E4A  0EB0               	movlw	176
 12924  000E4C  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12925  000E4E  0E00               	movlw	0
 12926  000E50  0100               	movlb	0	; () banked
 12927  000E52  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12928  000E54  0E01               	movlw	1
 12929  000E56  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12930  000E58  ECD0  F023         	call	_updateServoPosition	;wreg free
 12931                           
 12932                           ;Test.c: 299: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12933  000E5C  0E00               	movlw	0
 12934  000E5E  0100               	movlb	0	; () banked
 12935  000E60  6FB8               	movwf	actuatorTest@i_1751& (0+255),b
 12936  000E62                     l8128:
 12937                           
 12938                           ; BSR set to: 0
 12939  000E62  0E63               	movlw	99
 12940  000E64  0100               	movlb	0	; () banked
 12941  000E66  65B8               	cpfsgt	actuatorTest@i_1751& (0+255),b
 12942  000E68  D001               	goto	l8132
 12943  000E6A  D00C               	goto	l8136
 12944  000E6C                     l8132:
 12945                           
 12946                           ; BSR set to: 0
 12947  000E6C  0E68               	movlw	104
 12948  000E6E  0100               	movlb	0	; () banked
 12949  000E70  6FAB               	movwf	??_actuatorTest& (0+255),b
 12950  000E72  0EE4               	movlw	228
 12951  000E74                     u10107:
 12952  000E74  2EE8               	decfsz	wreg,f,c
 12953  000E76  D7FE               	bra	u10107
 12954  000E78  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12955  000E7A  D7FC               	bra	u10107
 12956  000E7C  F000               	nop	
 12957  000E7E  0100               	movlb	0	; () banked
 12958  000E80  2BB8               	incf	actuatorTest@i_1751& (0+255),f,b
 12959  000E82  D7EF               	goto	l8128
 12960  000E84                     l8136:
 12961                           
 12962                           ; BSR set to: 0
 12963  000E84  0E00               	movlw	0
 12964  000E86  0100               	movlb	0	; () banked
 12965  000E88  6FB9               	movwf	actuatorTest@i_1752& (0+255),b
 12966  000E8A                     l8138:
 12967                           
 12968                           ; BSR set to: 0
 12969  000E8A  0E63               	movlw	99
 12970  000E8C  0100               	movlb	0	; () banked
 12971  000E8E  65B9               	cpfsgt	actuatorTest@i_1752& (0+255),b
 12972  000E90  D001               	goto	l8142
 12973  000E92  D00C               	goto	l1295
 12974  000E94                     l8142:
 12975                           
 12976                           ; BSR set to: 0
 12977  000E94  0E68               	movlw	104
 12978  000E96  0100               	movlb	0	; () banked
 12979  000E98  6FAB               	movwf	??_actuatorTest& (0+255),b
 12980  000E9A  0EE4               	movlw	228
 12981  000E9C                     u10117:
 12982  000E9C  2EE8               	decfsz	wreg,f,c
 12983  000E9E  D7FE               	bra	u10117
 12984  000EA0  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12985  000EA2  D7FC               	bra	u10117
 12986  000EA4  F000               	nop	
 12987  000EA6  0100               	movlb	0	; () banked
 12988  000EA8  2BB9               	incf	actuatorTest@i_1752& (0+255),f,b
 12989  000EAA  D7EF               	goto	l8138
 12990  000EAC                     l1295:
 12991                           
 12992                           ; BSR set to: 0
 12993                           ;Test.c: 300: TMR1ON = 0;
 12994  000EAC  90CD               	bcf	4045,0,c	;volatile
 12995                           
 12996                           ; BSR set to: 0
 12997                           ;Test.c: 307: printf("TST: TILT SERVO");
 12998  000EAE  0E44               	movlw	low STR_103
 12999  000EB0  0100               	movlb	0	; () banked
 13000  000EB2  6F8E               	movwf	printf@f& (0+255),b
 13001  000EB4  0EFE               	movlw	high STR_103
 13002  000EB6  0100               	movlb	0	; () banked
 13003  000EB8  6F8F               	movwf	(printf@f+1)& (0+255),b
 13004  000EBA  EC1E  F00B         	call	_printf	;wreg free
 13005                           
 13006                           ;Test.c: 308: lcdInst(0b11000000);;
 13007  000EBE  0EC0               	movlw	192
 13008  000EC0  EC72  F02A         	call	_lcdInst
 13009                           
 13010                           ;Test.c: 309: printf("LEVEL -- 2s     ");
 13011  000EC4  0EAE               	movlw	low STR_104
 13012  000EC6  0100               	movlb	0	; () banked
 13013  000EC8  6F8E               	movwf	printf@f& (0+255),b
 13014  000ECA  0EFB               	movlw	high STR_104
 13015  000ECC  0100               	movlb	0	; () banked
 13016  000ECE  6F8F               	movwf	(printf@f+1)& (0+255),b
 13017  000ED0  EC1E  F00B         	call	_printf	;wreg free
 13018                           
 13019                           ;Test.c: 310: updateServoPosition(1050, 3);
 13020  000ED4  0E04               	movlw	4
 13021  000ED6  0100               	movlb	0	; () banked
 13022  000ED8  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13023  000EDA  0E1A               	movlw	26
 13024  000EDC  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13025  000EDE  0E00               	movlw	0
 13026  000EE0  0100               	movlb	0	; () banked
 13027  000EE2  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13028  000EE4  0E03               	movlw	3
 13029  000EE6  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13030  000EE8  ECD0  F023         	call	_updateServoPosition	;wreg free
 13031                           
 13032                           ;Test.c: 311: TMR3ON = 1;
 13033  000EEC  80B1               	bsf	4017,0,c	;volatile
 13034                           
 13035                           ;Test.c: 312: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 13036  000EEE  0E00               	movlw	0
 13037  000EF0  0100               	movlb	0	; () banked
 13038  000EF2  6FBA               	movwf	actuatorTest@i_1755& (0+255),b
 13039  000EF4                     l8156:
 13040                           
 13041                           ; BSR set to: 0
 13042  000EF4  0E63               	movlw	99
 13043  000EF6  0100               	movlb	0	; () banked
 13044  000EF8  65BA               	cpfsgt	actuatorTest@i_1755& (0+255),b
 13045  000EFA  D001               	goto	l8160
 13046  000EFC  D00C               	goto	l8164
 13047  000EFE                     l8160:
 13048                           
 13049                           ; BSR set to: 0
 13050  000EFE  0E68               	movlw	104
 13051  000F00  0100               	movlb	0	; () banked
 13052  000F02  6FAB               	movwf	??_actuatorTest& (0+255),b
 13053  000F04  0EE4               	movlw	228
 13054  000F06                     u10127:
 13055  000F06  2EE8               	decfsz	wreg,f,c
 13056  000F08  D7FE               	bra	u10127
 13057  000F0A  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13058  000F0C  D7FC               	bra	u10127
 13059  000F0E  F000               	nop	
 13060  000F10  0100               	movlb	0	; () banked
 13061  000F12  2BBA               	incf	actuatorTest@i_1755& (0+255),f,b
 13062  000F14  D7EF               	goto	l8156
 13063  000F16                     l8164:
 13064                           
 13065                           ; BSR set to: 0
 13066  000F16  0E00               	movlw	0
 13067  000F18  0100               	movlb	0	; () banked
 13068  000F1A  6FBB               	movwf	actuatorTest@i_1756& (0+255),b
 13069  000F1C                     l8166:
 13070                           
 13071                           ; BSR set to: 0
 13072  000F1C  0E63               	movlw	99
 13073  000F1E  0100               	movlb	0	; () banked
 13074  000F20  65BB               	cpfsgt	actuatorTest@i_1756& (0+255),b
 13075  000F22  D001               	goto	l8170
 13076  000F24  D00C               	goto	l8174
 13077  000F26                     l8170:
 13078                           
 13079                           ; BSR set to: 0
 13080  000F26  0E68               	movlw	104
 13081  000F28  0100               	movlb	0	; () banked
 13082  000F2A  6FAB               	movwf	??_actuatorTest& (0+255),b
 13083  000F2C  0EE4               	movlw	228
 13084  000F2E                     u10137:
 13085  000F2E  2EE8               	decfsz	wreg,f,c
 13086  000F30  D7FE               	bra	u10137
 13087  000F32  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13088  000F34  D7FC               	bra	u10137
 13089  000F36  F000               	nop	
 13090  000F38  0100               	movlb	0	; () banked
 13091  000F3A  2BBB               	incf	actuatorTest@i_1756& (0+255),f,b
 13092  000F3C  D7EF               	goto	l8166
 13093  000F3E                     l8174:
 13094                           
 13095                           ; BSR set to: 0
 13096                           ;Test.c: 314: lcdInst(0b10000000);;lcdInst(0b11000000);;
 13097  000F3E  0E80               	movlw	128
 13098  000F40  EC72  F02A         	call	_lcdInst
 13099  000F44  0EC0               	movlw	192
 13100  000F46  EC72  F02A         	call	_lcdInst
 13101                           
 13102                           ;Test.c: 315: printf("DROP -- 2s      ");
 13103  000F4A  0E8C               	movlw	low STR_105
 13104  000F4C  0100               	movlb	0	; () banked
 13105  000F4E  6F8E               	movwf	printf@f& (0+255),b
 13106  000F50  0EFB               	movlw	high STR_105
 13107  000F52  0100               	movlb	0	; () banked
 13108  000F54  6F8F               	movwf	(printf@f+1)& (0+255),b
 13109  000F56  EC1E  F00B         	call	_printf	;wreg free
 13110                           
 13111                           ;Test.c: 316: updateServoPosition(1260, 3);
 13112  000F5A  0E04               	movlw	4
 13113  000F5C  0100               	movlb	0	; () banked
 13114  000F5E  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13115  000F60  0EEC               	movlw	236
 13116  000F62  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13117  000F64  0E00               	movlw	0
 13118  000F66  0100               	movlb	0	; () banked
 13119  000F68  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13120  000F6A  0E03               	movlw	3
 13121  000F6C  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13122  000F6E  ECD0  F023         	call	_updateServoPosition	;wreg free
 13123                           
 13124                           ;Test.c: 317: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 13125  000F72  0E00               	movlw	0
 13126  000F74  0100               	movlb	0	; () banked
 13127  000F76  6FBC               	movwf	actuatorTest@i_1758& (0+255),b
 13128  000F78                     l8182:
 13129                           
 13130                           ; BSR set to: 0
 13131  000F78  0E63               	movlw	99
 13132  000F7A  0100               	movlb	0	; () banked
 13133  000F7C  65BC               	cpfsgt	actuatorTest@i_1758& (0+255),b
 13134  000F7E  D001               	goto	l8186
 13135  000F80  D00C               	goto	l8190
 13136  000F82                     l8186:
 13137                           
 13138                           ; BSR set to: 0
 13139  000F82  0E68               	movlw	104
 13140  000F84  0100               	movlb	0	; () banked
 13141  000F86  6FAB               	movwf	??_actuatorTest& (0+255),b
 13142  000F88  0EE4               	movlw	228
 13143  000F8A                     u10147:
 13144  000F8A  2EE8               	decfsz	wreg,f,c
 13145  000F8C  D7FE               	bra	u10147
 13146  000F8E  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13147  000F90  D7FC               	bra	u10147
 13148  000F92  F000               	nop	
 13149  000F94  0100               	movlb	0	; () banked
 13150  000F96  2BBC               	incf	actuatorTest@i_1758& (0+255),f,b
 13151  000F98  D7EF               	goto	l8182
 13152  000F9A                     l8190:
 13153                           
 13154                           ; BSR set to: 0
 13155  000F9A  0E00               	movlw	0
 13156  000F9C  0100               	movlb	0	; () banked
 13157  000F9E  6FBD               	movwf	actuatorTest@i_1759& (0+255),b
 13158  000FA0                     l8192:
 13159                           
 13160                           ; BSR set to: 0
 13161  000FA0  0E63               	movlw	99
 13162  000FA2  0100               	movlb	0	; () banked
 13163  000FA4  65BD               	cpfsgt	actuatorTest@i_1759& (0+255),b
 13164  000FA6  D001               	goto	l8196
 13165  000FA8  D00C               	goto	l8200
 13166  000FAA                     l8196:
 13167                           
 13168                           ; BSR set to: 0
 13169  000FAA  0E68               	movlw	104
 13170  000FAC  0100               	movlb	0	; () banked
 13171  000FAE  6FAB               	movwf	??_actuatorTest& (0+255),b
 13172  000FB0  0EE4               	movlw	228
 13173  000FB2                     u10157:
 13174  000FB2  2EE8               	decfsz	wreg,f,c
 13175  000FB4  D7FE               	bra	u10157
 13176  000FB6  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13177  000FB8  D7FC               	bra	u10157
 13178  000FBA  F000               	nop	
 13179  000FBC  0100               	movlb	0	; () banked
 13180  000FBE  2BBD               	incf	actuatorTest@i_1759& (0+255),f,b
 13181  000FC0  D7EF               	goto	l8192
 13182  000FC2                     l8200:
 13183                           
 13184                           ; BSR set to: 0
 13185                           ;Test.c: 319: lcdInst(0b10000000);;lcdInst(0b11000000);;
 13186  000FC2  0E80               	movlw	128
 13187  000FC4  EC72  F02A         	call	_lcdInst
 13188  000FC8  0EC0               	movlw	192
 13189  000FCA  EC72  F02A         	call	_lcdInst
 13190                           
 13191                           ;Test.c: 320: printf("LEVEL -- 2s     ");
 13192  000FCE  0EAE               	movlw	low STR_104
 13193  000FD0  0100               	movlb	0	; () banked
 13194  000FD2  6F8E               	movwf	printf@f& (0+255),b
 13195  000FD4  0EFB               	movlw	high STR_104
 13196  000FD6  0100               	movlb	0	; () banked
 13197  000FD8  6F8F               	movwf	(printf@f+1)& (0+255),b
 13198  000FDA  EC1E  F00B         	call	_printf	;wreg free
 13199                           
 13200                           ;Test.c: 321: updateServoPosition(1050, 3);
 13201  000FDE  0E04               	movlw	4
 13202  000FE0  0100               	movlb	0	; () banked
 13203  000FE2  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13204  000FE4  0E1A               	movlw	26
 13205  000FE6  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13206  000FE8  0E00               	movlw	0
 13207  000FEA  0100               	movlb	0	; () banked
 13208  000FEC  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13209  000FEE  0E03               	movlw	3
 13210  000FF0  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13211  000FF2  ECD0  F023         	call	_updateServoPosition	;wreg free
 13212                           
 13213                           ;Test.c: 322: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 13214  000FF6  0E00               	movlw	0
 13215  000FF8  0100               	movlb	0	; () banked
 13216  000FFA  6FBE               	movwf	actuatorTest@i_1761& (0+255),b
 13217  000FFC                     l8208:
 13218                           
 13219                           ; BSR set to: 0
 13220  000FFC  0E63               	movlw	99
 13221  000FFE  0100               	movlb	0	; () banked
 13222  001000  65BE               	cpfsgt	actuatorTest@i_1761& (0+255),b
 13223  001002  D001               	goto	l8212
 13224  001004  D00C               	goto	l8216
 13225  001006                     l8212:
 13226                           
 13227                           ; BSR set to: 0
 13228  001006  0E68               	movlw	104
 13229  001008  0100               	movlb	0	; () banked
 13230  00100A  6FAB               	movwf	??_actuatorTest& (0+255),b
 13231  00100C  0EE4               	movlw	228
 13232  00100E                     u10167:
 13233  00100E  2EE8               	decfsz	wreg,f,c
 13234  001010  D7FE               	bra	u10167
 13235  001012  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13236  001014  D7FC               	bra	u10167
 13237  001016  F000               	nop	
 13238  001018  0100               	movlb	0	; () banked
 13239  00101A  2BBE               	incf	actuatorTest@i_1761& (0+255),f,b
 13240  00101C  D7EF               	goto	l8208
 13241  00101E                     l8216:
 13242                           
 13243                           ; BSR set to: 0
 13244  00101E  0E00               	movlw	0
 13245  001020  0100               	movlb	0	; () banked
 13246  001022  6FBF               	movwf	actuatorTest@i_1762& (0+255),b
 13247  001024                     l8218:
 13248                           
 13249                           ; BSR set to: 0
 13250  001024  0E63               	movlw	99
 13251  001026  0100               	movlb	0	; () banked
 13252  001028  65BF               	cpfsgt	actuatorTest@i_1762& (0+255),b
 13253  00102A  D001               	goto	l8222
 13254  00102C  D00C               	goto	l1307
 13255  00102E                     l8222:
 13256                           
 13257                           ; BSR set to: 0
 13258  00102E  0E68               	movlw	104
 13259  001030  0100               	movlb	0	; () banked
 13260  001032  6FAB               	movwf	??_actuatorTest& (0+255),b
 13261  001034  0EE4               	movlw	228
 13262  001036                     u10177:
 13263  001036  2EE8               	decfsz	wreg,f,c
 13264  001038  D7FE               	bra	u10177
 13265  00103A  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13266  00103C  D7FC               	bra	u10177
 13267  00103E  F000               	nop	
 13268  001040  0100               	movlb	0	; () banked
 13269  001042  2BBF               	incf	actuatorTest@i_1762& (0+255),f,b
 13270  001044  D7EF               	goto	l8218
 13271  001046                     l1307:
 13272                           
 13273                           ; BSR set to: 0
 13274                           ;Test.c: 323: TMR3ON = 0;
 13275  001046  90B1               	bcf	4017,0,c	;volatile
 13276                           
 13277                           ;Test.c: 324: (INTCONbits.GIE = 0);
 13278  001048  9EF2               	bcf	intcon,7,c	;volatile
 13279                           
 13280                           ; BSR set to: 0
 13281                           ;Test.c: 329: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 13282  00104A  0E01               	movlw	1
 13283  00104C  EC72  F02A         	call	_lcdInst
 13284  001050  0E68               	movlw	104
 13285  001052  0100               	movlb	0	; () banked
 13286  001054  6FAB               	movwf	??_actuatorTest& (0+255),b
 13287  001056  0EE4               	movlw	228
 13288  001058                     u10187:
 13289  001058  2EE8               	decfsz	wreg,f,c
 13290  00105A  D7FE               	bra	u10187
 13291  00105C  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13292  00105E  D7FC               	bra	u10187
 13293  001060  F000               	nop	
 13294  001062  0E80               	movlw	128
 13295  001064  EC72  F02A         	call	_lcdInst
 13296                           
 13297                           ;Test.c: 330: printf("TST: CAM SERVO");
 13298  001068  0EA0               	movlw	low STR_107
 13299  00106A  0100               	movlb	0	; () banked
 13300  00106C  6F8E               	movwf	printf@f& (0+255),b
 13301  00106E  0EFE               	movlw	high STR_107
 13302  001070  0100               	movlb	0	; () banked
 13303  001072  6F8F               	movwf	(printf@f+1)& (0+255),b
 13304  001074  EC1E  F00B         	call	_printf	;wreg free
 13305                           
 13306                           ;Test.c: 331: lcdInst(0b11000000);;
 13307  001078  0EC0               	movlw	192
 13308  00107A  EC72  F02A         	call	_lcdInst
 13309                           
 13310                           ;Test.c: 332: printf("CAM UP  |RC0=1");
 13311  00107E  0E82               	movlw	low STR_108
 13312  001080  0100               	movlb	0	; () banked
 13313  001082  6F8E               	movwf	printf@f& (0+255),b
 13314  001084  0EFE               	movlw	high STR_108
 13315  001086  0100               	movlb	0	; () banked
 13316  001088  6F8F               	movwf	(printf@f+1)& (0+255),b
 13317  00108A  EC1E  F00B         	call	_printf	;wreg free
 13318                           
 13319                           ;Test.c: 333: LATCbits.LATC0 = 1;
 13320  00108E  808B               	bsf	3979,0,c	;volatile
 13321                           
 13322                           ;Test.c: 334: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 13323  001090  0E00               	movlw	0
 13324  001092  0100               	movlb	0	; () banked
 13325  001094  6FC0               	movwf	actuatorTest@i_1765& (0+255),b
 13326  001096                     l8242:
 13327                           
 13328                           ; BSR set to: 0
 13329  001096  0E63               	movlw	99
 13330  001098  0100               	movlb	0	; () banked
 13331  00109A  65C0               	cpfsgt	actuatorTest@i_1765& (0+255),b
 13332  00109C  D001               	goto	l8246
 13333  00109E  D00C               	goto	l8250
 13334  0010A0                     l8246:
 13335                           
 13336                           ; BSR set to: 0
 13337  0010A0  0E68               	movlw	104
 13338  0010A2  0100               	movlb	0	; () banked
 13339  0010A4  6FAB               	movwf	??_actuatorTest& (0+255),b
 13340  0010A6  0EE4               	movlw	228
 13341  0010A8                     u10197:
 13342  0010A8  2EE8               	decfsz	wreg,f,c
 13343  0010AA  D7FE               	bra	u10197
 13344  0010AC  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13345  0010AE  D7FC               	bra	u10197
 13346  0010B0  F000               	nop	
 13347  0010B2  0100               	movlb	0	; () banked
 13348  0010B4  2BC0               	incf	actuatorTest@i_1765& (0+255),f,b
 13349  0010B6  D7EF               	goto	l8242
 13350  0010B8                     l8250:
 13351                           
 13352                           ; BSR set to: 0
 13353  0010B8  0E00               	movlw	0
 13354  0010BA  0100               	movlb	0	; () banked
 13355  0010BC  6FC1               	movwf	actuatorTest@i_1766& (0+255),b
 13356  0010BE                     l8252:
 13357                           
 13358                           ; BSR set to: 0
 13359  0010BE  0E63               	movlw	99
 13360  0010C0  0100               	movlb	0	; () banked
 13361  0010C2  65C1               	cpfsgt	actuatorTest@i_1766& (0+255),b
 13362  0010C4  D001               	goto	l8256
 13363  0010C6  D00C               	goto	l8260
 13364  0010C8                     l8256:
 13365                           
 13366                           ; BSR set to: 0
 13367  0010C8  0E68               	movlw	104
 13368  0010CA  0100               	movlb	0	; () banked
 13369  0010CC  6FAB               	movwf	??_actuatorTest& (0+255),b
 13370  0010CE  0EE4               	movlw	228
 13371  0010D0                     u10207:
 13372  0010D0  2EE8               	decfsz	wreg,f,c
 13373  0010D2  D7FE               	bra	u10207
 13374  0010D4  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13375  0010D6  D7FC               	bra	u10207
 13376  0010D8  F000               	nop	
 13377  0010DA  0100               	movlb	0	; () banked
 13378  0010DC  2BC1               	incf	actuatorTest@i_1766& (0+255),f,b
 13379  0010DE  D7EF               	goto	l8252
 13380  0010E0                     l8260:
 13381                           
 13382                           ; BSR set to: 0
 13383                           ;Test.c: 335: lcdInst(0b10000000);;lcdInst(0b11000000);;
 13384  0010E0  0E80               	movlw	128
 13385  0010E2  EC72  F02A         	call	_lcdInst
 13386  0010E6  0EC0               	movlw	192
 13387  0010E8  EC72  F02A         	call	_lcdInst
 13388                           
 13389                           ;Test.c: 336: printf("CAM DWN |RC0=0");
 13390  0010EC  0E73               	movlw	low STR_109
 13391  0010EE  0100               	movlb	0	; () banked
 13392  0010F0  6F8E               	movwf	printf@f& (0+255),b
 13393  0010F2  0EFE               	movlw	high STR_109
 13394  0010F4  0100               	movlb	0	; () banked
 13395  0010F6  6F8F               	movwf	(printf@f+1)& (0+255),b
 13396  0010F8  EC1E  F00B         	call	_printf	;wreg free
 13397                           
 13398                           ;Test.c: 339: for(i=0;i<10000;i++)
 13399  0010FC  0E00               	movlw	0
 13400  0010FE  0100               	movlb	0	; () banked
 13401  001100  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 13402  001102  0E00               	movlw	0
 13403  001104  6FC4               	movwf	actuatorTest@i& (0+255),b
 13404  001106                     l8266:
 13405                           
 13406                           ; BSR set to: 0
 13407  001106  0100               	movlb	0	; () banked
 13408  001108  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 13409  00110A  D008               	goto	l1312
 13410  00110C  0E10               	movlw	16
 13411  00110E  0100               	movlb	0	; () banked
 13412  001110  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 13413  001112  0E27               	movlw	39
 13414  001114  0100               	movlb	0	; () banked
 13415  001116  59C5               	subwfb	(actuatorTest@i+1)& (0+255),w,b
 13416  001118  B0D8               	btfsc	status,0,c
 13417  00111A  D00D               	goto	l8276
 13418  00111C                     l1312:
 13419                           
 13420                           ; BSR set to: 0
 13421                           ;Test.c: 340: {
 13422                           ;Test.c: 341: LATCbits.LATC0 = 1;
 13423  00111C  808B               	bsf	3979,0,c	;volatile
 13424                           
 13425                           ; BSR set to: 0
 13426                           ;Test.c: 342: _delay((unsigned long)((10)*(32000000/4000000.0)));
 13427  00111E  0E1A               	movlw	26
 13428  001120                     u10217:
 13429  001120  2EE8               	decfsz	wreg,f,c
 13430  001122  D7FE               	bra	u10217
 13431  001124  D000               	nop2	
 13432                           
 13433                           ;Test.c: 343: LATCbits.LATC0 = 0;
 13434  001126  908B               	bcf	3979,0,c	;volatile
 13435                           
 13436                           ;Test.c: 344: _delay((unsigned long)((90)*(32000000/4000000.0)));
 13437  001128  0EF0               	movlw	240
 13438  00112A                     u10227:
 13439  00112A  2EE8               	decfsz	wreg,f,c
 13440  00112C  D7FE               	bra	u10227
 13441  00112E  0100               	movlb	0	; () banked
 13442  001130  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 13443  001132  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 13444  001134  D7E8               	goto	l8266
 13445  001136                     l8276:
 13446                           
 13447                           ; BSR set to: 0
 13448                           ;Test.c: 345: }
 13449                           ;Test.c: 347: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 13450  001136  0E00               	movlw	0
 13451  001138  0100               	movlb	0	; () banked
 13452  00113A  6FC2               	movwf	actuatorTest@i_1768& (0+255),b
 13453  00113C                     l8278:
 13454                           
 13455                           ; BSR set to: 0
 13456  00113C  0E63               	movlw	99
 13457  00113E  0100               	movlb	0	; () banked
 13458  001140  65C2               	cpfsgt	actuatorTest@i_1768& (0+255),b
 13459  001142  D001               	goto	l8282
 13460  001144  D00C               	goto	l8286
 13461  001146                     l8282:
 13462                           
 13463                           ; BSR set to: 0
 13464  001146  0E68               	movlw	104
 13465  001148  0100               	movlb	0	; () banked
 13466  00114A  6FAB               	movwf	??_actuatorTest& (0+255),b
 13467  00114C  0EE4               	movlw	228
 13468  00114E                     u10237:
 13469  00114E  2EE8               	decfsz	wreg,f,c
 13470  001150  D7FE               	bra	u10237
 13471  001152  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13472  001154  D7FC               	bra	u10237
 13473  001156  F000               	nop	
 13474  001158  0100               	movlb	0	; () banked
 13475  00115A  2BC2               	incf	actuatorTest@i_1768& (0+255),f,b
 13476  00115C  D7EF               	goto	l8278
 13477  00115E                     l8286:
 13478                           
 13479                           ; BSR set to: 0
 13480  00115E  0E00               	movlw	0
 13481  001160  0100               	movlb	0	; () banked
 13482  001162  6FC3               	movwf	actuatorTest@i_1769& (0+255),b
 13483  001164                     l8288:
 13484                           
 13485                           ; BSR set to: 0
 13486  001164  0E63               	movlw	99
 13487  001166  0100               	movlb	0	; () banked
 13488  001168  65C3               	cpfsgt	actuatorTest@i_1769& (0+255),b
 13489  00116A  D001               	goto	l8292
 13490  00116C  D00C               	goto	l8296
 13491  00116E                     l8292:
 13492                           
 13493                           ; BSR set to: 0
 13494  00116E  0E68               	movlw	104
 13495  001170  0100               	movlb	0	; () banked
 13496  001172  6FAB               	movwf	??_actuatorTest& (0+255),b
 13497  001174  0EE4               	movlw	228
 13498  001176                     u10247:
 13499  001176  2EE8               	decfsz	wreg,f,c
 13500  001178  D7FE               	bra	u10247
 13501  00117A  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13502  00117C  D7FC               	bra	u10247
 13503  00117E  F000               	nop	
 13504  001180  0100               	movlb	0	; () banked
 13505  001182  2BC3               	incf	actuatorTest@i_1769& (0+255),f,b
 13506  001184  D7EF               	goto	l8288
 13507  001186                     l8296:
 13508                           
 13509                           ; BSR set to: 0
 13510                           ;Test.c: 348: machine_state = Testing_state;
 13511  001186  0E03               	movlw	3
 13512  001188  0100               	movlb	0	; () banked
 13513  00118A  6FFC               	movwf	_machine_state& (0+255),b
 13514                           
 13515                           ; BSR set to: 0
 13516  00118C  0012               	return		;funcret
 13517  00118E                     __end_of_actuatorTest:
 13518                           	opt stack 0
 13519                           tblptru	equ	0xFF8
 13520                           tblptrh	equ	0xFF7
 13521                           tblptrl	equ	0xFF6
 13522                           tablat	equ	0xFF5
 13523                           prodh	equ	0xFF4
 13524                           prodl	equ	0xFF3
 13525                           intcon	equ	0xFF2
 13526                           intcon2	equ	0xFF1
 13527                           intcon3	equ	0xFF0
 13528                           postinc0	equ	0xFEE
 13529                           wreg	equ	0xFE8
 13530                           postdec1	equ	0xFE5
 13531                           fsr1l	equ	0xFE1
 13532                           indf2	equ	0xFDF
 13533                           postinc2	equ	0xFDE
 13534                           postdec2	equ	0xFDD
 13535                           fsr2h	equ	0xFDA
 13536                           fsr2l	equ	0xFD9
 13537                           status	equ	0xFD8
 13538                           
 13539 ;; *************** function _SpeedTest *****************
 13540 ;; Defined at:
 13541 ;;		line 542 in file "Test.c"
 13542 ;; Parameters:    Size  Location     Type
 13543 ;;		None
 13544 ;; Auto vars:     Size  Location     Type
 13545 ;;		None
 13546 ;; Return value:  Size  Location     Type
 13547 ;;                  1    wreg      void 
 13548 ;; Registers used:
 13549 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13550 ;; Tracked objects:
 13551 ;;		On entry : 0/0
 13552 ;;		On exit  : 0/0
 13553 ;;		Unchanged: 0/0
 13554 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13555 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13556 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13557 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13558 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13559 ;;Total ram usage:        1 bytes
 13560 ;; Hardware stack levels used:    1
 13561 ;; Hardware stack levels required when called:   10
 13562 ;; This function calls:
 13563 ;;		_lcdInst
 13564 ;;		_printf
 13565 ;; This function is called by:
 13566 ;;		_Test
 13567 ;; This function uses a non-reentrant model
 13568 ;;
 13569                           
 13570                           	psect	text41
 13571  004826                     __ptext41:
 13572                           	opt stack 0
 13573  004826                     _SpeedTest:
 13574                           	opt stack 19
 13575                           
 13576                           ;Test.c: 544: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 13577                           
 13578                           ; BSR set to: 0
 13579                           ;incstack = 0
 13580  004826  0E01               	movlw	1
 13581  004828  EC72  F02A         	call	_lcdInst
 13582  00482C  0E68               	movlw	104
 13583  00482E  0100               	movlb	0	; () banked
 13584  004830  6FAB               	movwf	??_SpeedTest& (0+255),b
 13585  004832  0EE4               	movlw	228
 13586  004834                     u10257:
 13587  004834  2EE8               	decfsz	wreg,f,c
 13588  004836  D7FE               	bra	u10257
 13589  004838  2FAB               	decfsz	??_SpeedTest& (0+255),f,b
 13590  00483A  D7FC               	bra	u10257
 13591  00483C  F000               	nop	
 13592  00483E  0E80               	movlw	128
 13593  004840  EC72  F02A         	call	_lcdInst
 13594                           
 13595                           ;Test.c: 545: printf("S: D WILL RETURN ");
 13596  004844  0E21               	movlw	low STR_118
 13597  004846  0100               	movlb	0	; () banked
 13598  004848  6F8E               	movwf	printf@f& (0+255),b
 13599  00484A  0EFB               	movlw	high STR_118
 13600  00484C  0100               	movlb	0	; () banked
 13601  00484E  6F8F               	movwf	(printf@f+1)& (0+255),b
 13602  004850  EC1E  F00B         	call	_printf	;wreg free
 13603                           
 13604                           ;Test.c: 546: lcdInst(0b11000000);;
 13605  004854  0EC0               	movlw	192
 13606  004856  EC72  F02A         	call	_lcdInst
 13607                           
 13608                           ;Test.c: 547: printf("OTHER SETS RA5   ");
 13609  00485A  0E0F               	movlw	low STR_119
 13610  00485C  0100               	movlb	0	; () banked
 13611  00485E  6F8E               	movwf	printf@f& (0+255),b
 13612  004860  0EFB               	movlw	high STR_119
 13613  004862  0100               	movlb	0	; () banked
 13614  004864  6F8F               	movwf	(printf@f+1)& (0+255),b
 13615  004866  EC1E  F00B         	call	_printf	;wreg free
 13616  00486A                     l1383:
 13617  00486A  A281               	btfss	3969,1,c	;volatile
 13618  00486C  D7FE               	goto	l1383
 13619                           
 13620                           ;Test.c: 552: }
 13621                           ;Test.c: 553: if(PORTB >> 4 == 0b1111){
 13622  00486E  3881               	swapf	3969,w,c	;volatile
 13623  004870  0B0F               	andlw	15
 13624  004872  0A0F               	xorlw	15
 13625  004874  B4D8               	btfsc	status,2,c
 13626  004876  0012               	return	
 13627  004878  D014               	goto	l8394
 13628  00487A                     l1390:
 13629                           
 13630                           ;Test.c: 558: LATBbits.LATB2 = 1;
 13631  00487A  848A               	bsf	3978,2,c	;volatile
 13632                           
 13633                           ;Test.c: 559: _delay((unsigned long)((5)*(32000000/4000.0)));
 13634  00487C  0E34               	movlw	52
 13635  00487E  0100               	movlb	0	; () banked
 13636  004880  6FAB               	movwf	??_SpeedTest& (0+255),b
 13637  004882  0EF1               	movlw	241
 13638  004884                     u10267:
 13639  004884  2EE8               	decfsz	wreg,f,c
 13640  004886  D7FE               	bra	u10267
 13641  004888  2FAB               	decfsz	??_SpeedTest& (0+255),f,b
 13642  00488A  D7FC               	bra	u10267
 13643  00488C  D000               	nop2	
 13644                           
 13645                           ;Test.c: 560: LATBbits.LATB2 = 0;
 13646  00488E  948A               	bcf	3978,2,c	;volatile
 13647                           
 13648                           ;Test.c: 561: _delay((unsigned long)((5)*(32000000/4000.0)));
 13649  004890  0E34               	movlw	52
 13650  004892  0100               	movlb	0	; () banked
 13651  004894  6FAB               	movwf	??_SpeedTest& (0+255),b
 13652  004896  0EF1               	movlw	241
 13653  004898                     u10277:
 13654  004898  2EE8               	decfsz	wreg,f,c
 13655  00489A  D7FE               	bra	u10277
 13656  00489C  2FAB               	decfsz	??_SpeedTest& (0+255),f,b
 13657  00489E  D7FC               	bra	u10277
 13658  0048A0  D000               	nop2	
 13659  0048A2                     l8394:
 13660  0048A2  B281               	btfsc	3969,1,c	;volatile
 13661  0048A4  D7EA               	goto	l1390
 13662                           
 13663                           ;Test.c: 564: }
 13664                           ;Test.c: 565: LATBbits.LATB2 = 0;
 13665  0048A6  948A               	bcf	3978,2,c	;volatile
 13666  0048A8  D7E0               	goto	l1383
 13667  0048AA                     __end_of_SpeedTest:
 13668                           	opt stack 0
 13669                           tblptru	equ	0xFF8
 13670                           tblptrh	equ	0xFF7
 13671                           tblptrl	equ	0xFF6
 13672                           tablat	equ	0xFF5
 13673                           prodh	equ	0xFF4
 13674                           prodl	equ	0xFF3
 13675                           intcon	equ	0xFF2
 13676                           intcon2	equ	0xFF1
 13677                           intcon3	equ	0xFF0
 13678                           postinc0	equ	0xFEE
 13679                           wreg	equ	0xFE8
 13680                           postdec1	equ	0xFE5
 13681                           fsr1l	equ	0xFE1
 13682                           indf2	equ	0xFDF
 13683                           postinc2	equ	0xFDE
 13684                           postdec2	equ	0xFDD
 13685                           fsr2h	equ	0xFDA
 13686                           fsr2l	equ	0xFD9
 13687                           status	equ	0xFD8
 13688                           
 13689 ;; *************** function _PortTestDC *****************
 13690 ;; Defined at:
 13691 ;;		line 409 in file "Test.c"
 13692 ;; Parameters:    Size  Location     Type
 13693 ;;		None
 13694 ;; Auto vars:     Size  Location     Type
 13695 ;;		None
 13696 ;; Return value:  Size  Location     Type
 13697 ;;                  1    wreg      void 
 13698 ;; Registers used:
 13699 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13700 ;; Tracked objects:
 13701 ;;		On entry : 0/0
 13702 ;;		On exit  : 0/0
 13703 ;;		Unchanged: 0/0
 13704 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13705 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13706 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13707 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13708 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13709 ;;Total ram usage:        1 bytes
 13710 ;; Hardware stack levels used:    1
 13711 ;; Hardware stack levels required when called:   10
 13712 ;; This function calls:
 13713 ;;		_lcdInst
 13714 ;;		_printf
 13715 ;; This function is called by:
 13716 ;;		_Test
 13717 ;; This function uses a non-reentrant model
 13718 ;;
 13719                           
 13720                           	psect	text42
 13721  004C7C                     __ptext42:
 13722                           	opt stack 0
 13723  004C7C                     _PortTestDC:
 13724                           	opt stack 19
 13725                           
 13726                           ;Test.c: 410: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 13727                           
 13728                           ;incstack = 0
 13729  004C7C  0E01               	movlw	1
 13730  004C7E  EC72  F02A         	call	_lcdInst
 13731  004C82  0E68               	movlw	104
 13732  004C84  0100               	movlb	0	; () banked
 13733  004C86  6FAB               	movwf	??_PortTestDC& (0+255),b
 13734  004C88  0EE4               	movlw	228
 13735  004C8A                     u10287:
 13736  004C8A  2EE8               	decfsz	wreg,f,c
 13737  004C8C  D7FE               	bra	u10287
 13738  004C8E  2FAB               	decfsz	??_PortTestDC& (0+255),f,b
 13739  004C90  D7FC               	bra	u10287
 13740  004C92  F000               	nop	
 13741  004C94  0E80               	movlw	128
 13742  004C96  EC72  F02A         	call	_lcdInst
 13743                           
 13744                           ;Test.c: 411: printf("D WILL RETURN    ");
 13745  004C9A  0EFD               	movlw	low STR_111
 13746  004C9C  0100               	movlb	0	; () banked
 13747  004C9E  6F8E               	movwf	printf@f& (0+255),b
 13748  004CA0  0EFA               	movlw	high STR_111
 13749  004CA2  0100               	movlb	0	; () banked
 13750  004CA4  6F8F               	movwf	(printf@f+1)& (0+255),b
 13751  004CA6  EC1E  F00B         	call	_printf	;wreg free
 13752                           
 13753                           ;Test.c: 412: lcdInst(0b11000000);;
 13754  004CAA  0EC0               	movlw	192
 13755  004CAC  EC72  F02A         	call	_lcdInst
 13756                           
 13757                           ;Test.c: 413: printf("OTHER SETS DC   ");
 13758  004CB0  0EE1               	movlw	low STR_112
 13759  004CB2  0100               	movlb	0	; () banked
 13760  004CB4  6F8E               	movwf	printf@f& (0+255),b
 13761  004CB6  0EFB               	movlw	high STR_112
 13762  004CB8  0100               	movlb	0	; () banked
 13763  004CBA  6F8F               	movwf	(printf@f+1)& (0+255),b
 13764  004CBC  EC1E  F00B         	call	_printf	;wreg free
 13765  004CC0                     l1325:
 13766  004CC0  A281               	btfss	3969,1,c	;volatile
 13767  004CC2  D7FE               	goto	l1325
 13768                           
 13769                           ;Test.c: 418: }
 13770                           ;Test.c: 419: if(PORTB >> 4 == 0b1111){
 13771  004CC4  3881               	swapf	3969,w,c	;volatile
 13772  004CC6  0B0F               	andlw	15
 13773  004CC8  0A0F               	xorlw	15
 13774  004CCA  B4D8               	btfsc	status,2,c
 13775  004CCC  0012               	return	
 13776                           
 13777                           ;Test.c: 422: else{
 13778                           ;Test.c: 423: LATBbits.LATB2 = 1;
 13779                           
 13780                           ;Test.c: 421: }
 13781                           
 13782                           ;Test.c: 420: break;
 13783  004CCE  848A               	bsf	3978,2,c	;volatile
 13784  004CD0                     l1331:
 13785  004CD0  B281               	btfsc	3969,1,c	;volatile
 13786  004CD2  D7FE               	goto	l1331
 13787                           
 13788                           ;Test.c: 426: }
 13789                           ;Test.c: 427: LATBbits.LATB2 = 0;
 13790  004CD4  948A               	bcf	3978,2,c	;volatile
 13791  004CD6  D7F4               	goto	l1325
 13792  004CD8                     __end_of_PortTestDC:
 13793                           	opt stack 0
 13794                           tblptru	equ	0xFF8
 13795                           tblptrh	equ	0xFF7
 13796                           tblptrl	equ	0xFF6
 13797                           tablat	equ	0xFF5
 13798                           prodh	equ	0xFF4
 13799                           prodl	equ	0xFF3
 13800                           intcon	equ	0xFF2
 13801                           intcon2	equ	0xFF1
 13802                           intcon3	equ	0xFF0
 13803                           postinc0	equ	0xFEE
 13804                           wreg	equ	0xFE8
 13805                           postdec1	equ	0xFE5
 13806                           fsr1l	equ	0xFE1
 13807                           indf2	equ	0xFDF
 13808                           postinc2	equ	0xFDE
 13809                           postdec2	equ	0xFDD
 13810                           fsr2h	equ	0xFDA
 13811                           fsr2l	equ	0xFD9
 13812                           status	equ	0xFD8
 13813                           
 13814 ;; *************** function _PlatformTest *****************
 13815 ;; Defined at:
 13816 ;;		line 432 in file "Test.c"
 13817 ;; Parameters:    Size  Location     Type
 13818 ;;		None
 13819 ;; Auto vars:     Size  Location     Type
 13820 ;;  i               2   51[BANK0 ] int 
 13821 ;;  i               2   49[BANK0 ] int 
 13822 ;;  res             2   47[BANK0 ] int 
 13823 ;;  res             2   45[BANK0 ] int 
 13824 ;;  on              2   53[BANK0 ] int 
 13825 ;; Return value:  Size  Location     Type
 13826 ;;                  1    wreg      void 
 13827 ;; Registers used:
 13828 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13829 ;; Tracked objects:
 13830 ;;		On entry : 0/0
 13831 ;;		On exit  : 0/0
 13832 ;;		Unchanged: 0/0
 13833 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13834 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13835 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13836 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13837 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13838 ;;Total ram usage:       12 bytes
 13839 ;; Hardware stack levels used:    1
 13840 ;; Hardware stack levels required when called:   10
 13841 ;; This function calls:
 13842 ;;		_initServos
 13843 ;;		_lcdInst
 13844 ;;		_printf
 13845 ;;		_readADC
 13846 ;;		_stopSignals
 13847 ;; This function is called by:
 13848 ;;		_Test
 13849 ;; This function uses a non-reentrant model
 13850 ;;
 13851                           
 13852                           	psect	text43
 13853  00246A                     __ptext43:
 13854                           	opt stack 0
 13855  00246A                     _PlatformTest:
 13856                           	opt stack 19
 13857                           
 13858                           ;Test.c: 433: LATCbits.LATC5 = 1;
 13859                           
 13860                           ;incstack = 0
 13861  00246A  8A8B               	bsf	3979,5,c	;volatile
 13862                           
 13863                           ;Test.c: 435: (INTCONbits.GIE = 1);
 13864  00246C  8EF2               	bsf	intcon,7,c	;volatile
 13865                           
 13866                           ;Test.c: 436: machine_state = Sorting_state;
 13867  00246E  0E01               	movlw	1
 13868  002470  0100               	movlb	0	; () banked
 13869  002472  6FFC               	movwf	_machine_state& (0+255),b
 13870                           
 13871                           ;Test.c: 437: was_low_2 = 0;
 13872  002474  0E00               	movlw	0
 13873  002476  6E7A               	movwf	_was_low_2+1,c	;volatile
 13874  002478  0E00               	movlw	0
 13875  00247A  6E79               	movwf	_was_low_2,c	;volatile
 13876                           
 13877                           ;Test.c: 438: f_arm_position = 2;
 13878  00247C  0E00               	movlw	0
 13879  00247E  0100               	movlb	0	; () banked
 13880  002480  6FEF               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
 13881  002482  0E02               	movlw	2
 13882  002484  6FEE               	movwf	_f_arm_position& (0+255),b	;volatile
 13883                           
 13884                           ;Test.c: 439: timer2_counter = 0;
 13885  002486  0E00               	movlw	0
 13886  002488  6E74               	movwf	_timer2_counter+1,c	;volatile
 13887  00248A  0E00               	movlw	0
 13888  00248C  6E73               	movwf	_timer2_counter,c	;volatile
 13889                           
 13890                           ; BSR set to: 0
 13891                           ;Test.c: 440: initServos();
 13892  00248E  EC55  F024         	call	_initServos	;wreg free
 13893                           
 13894                           ;Test.c: 441: TMR1IF = 0;
 13895  002492  909E               	bcf	3998,0,c	;volatile
 13896                           
 13897                           ;Test.c: 442: TMR1ON = 0;
 13898  002494  90CD               	bcf	4045,0,c	;volatile
 13899                           
 13900                           ;Test.c: 443: TMR3IF = 0;
 13901  002496  92A1               	bcf	4001,1,c	;volatile
 13902                           
 13903                           ;Test.c: 444: TMR3ON = 0;
 13904  002498  90B1               	bcf	4017,0,c	;volatile
 13905                           
 13906                           ;Test.c: 446: int on = 1;
 13907  00249A  0E00               	movlw	0
 13908  00249C  0100               	movlb	0	; () banked
 13909  00249E  6FB6               	movwf	(PlatformTest@on+1)& (0+255),b
 13910  0024A0  0E01               	movlw	1
 13911  0024A2  6FB5               	movwf	PlatformTest@on& (0+255),b
 13912                           
 13913                           ;Test.c: 447: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 13914  0024A4  0E01               	movlw	1
 13915  0024A6  EC72  F02A         	call	_lcdInst
 13916  0024AA  0E68               	movlw	104
 13917  0024AC  0100               	movlb	0	; () banked
 13918  0024AE  6FAB               	movwf	??_PlatformTest& (0+255),b
 13919  0024B0  0EE4               	movlw	228
 13920  0024B2                     u10297:
 13921  0024B2  2EE8               	decfsz	wreg,f,c
 13922  0024B4  D7FE               	bra	u10297
 13923  0024B6  2FAB               	decfsz	??_PlatformTest& (0+255),f,b
 13924  0024B8  D7FC               	bra	u10297
 13925  0024BA  F000               	nop	
 13926  0024BC  0E80               	movlw	128
 13927  0024BE  EC72  F02A         	call	_lcdInst
 13928                           
 13929                           ;Test.c: 448: printf("1: DC | A: ARM  ");
 13930  0024C2  0E14               	movlw	low STR_113
 13931  0024C4  0100               	movlb	0	; () banked
 13932  0024C6  6F8E               	movwf	printf@f& (0+255),b
 13933  0024C8  0EFC               	movlw	high STR_113
 13934  0024CA  0100               	movlb	0	; () banked
 13935  0024CC  6F8F               	movwf	(printf@f+1)& (0+255),b
 13936  0024CE  EC1E  F00B         	call	_printf	;wreg free
 13937                           
 13938                           ;Test.c: 450: while(PORTBbits.RB1 == 0){
 13939  0024D2  D041               	goto	l8428
 13940  0024D4                     l8418:
 13941                           
 13942                           ;Test.c: 451: readADC(0);
 13943  0024D4  0E00               	movlw	0
 13944  0024D6  EC68  F029         	call	_readADC
 13945                           
 13946                           ;Test.c: 452: int res = ADRESH<<8 | ADRESL;
 13947  0024DA  50C3               	movf	4035,w,c	;volatile
 13948  0024DC  CFC4 F0AB          	movff	4036,??_PlatformTest	;volatile
 13949  0024E0  0100               	movlb	0	; () banked
 13950  0024E2  6BAC               	clrf	(??_PlatformTest+1)& (0+255),b
 13951  0024E4  C0AB  F0AC         	movff	??_PlatformTest,??_PlatformTest+1
 13952  0024E8  0100               	movlb	0	; () banked
 13953  0024EA  6BAB               	clrf	??_PlatformTest& (0+255),b
 13954  0024EC  0100               	movlb	0	; () banked
 13955  0024EE  11AB               	iorwf	??_PlatformTest& (0+255),w,b
 13956  0024F0  0100               	movlb	0	; () banked
 13957  0024F2  6FAD               	movwf	PlatformTest@res& (0+255),b
 13958  0024F4  0100               	movlb	0	; () banked
 13959  0024F6  51AC               	movf	(??_PlatformTest+1)& (0+255),w,b
 13960  0024F8  0100               	movlb	0	; () banked
 13961  0024FA  6FAE               	movwf	(PlatformTest@res+1)& (0+255),b
 13962                           
 13963                           ; BSR set to: 0
 13964                           ;Test.c: 453: IR_signal = (res > 800) ? 1 : 0;
 13965  0024FC  0100               	movlb	0	; () banked
 13966  0024FE  BFAE               	btfsc	(PlatformTest@res+1)& (0+255),7,b
 13967  002500  D00A               	goto	u7190
 13968  002502  0E21               	movlw	33
 13969  002504  0100               	movlb	0	; () banked
 13970  002506  5DAD               	subwf	PlatformTest@res& (0+255),w,b
 13971  002508  0E03               	movlw	3
 13972  00250A  0100               	movlb	0	; () banked
 13973  00250C  59AE               	subwfb	(PlatformTest@res+1)& (0+255),w,b
 13974  00250E  A0D8               	btfss	status,0,c
 13975  002510  D002               	goto	u7190
 13976  002512  0E01               	movlw	1
 13977  002514  D001               	goto	u7200
 13978  002516                     u7190:
 13979  002516  0E00               	movlw	0
 13980  002518                     u7200:
 13981  002518  0100               	movlb	0	; () banked
 13982  00251A  6FE6               	movwf	_IR_signal& (0+255),b
 13983  00251C  6BE7               	clrf	(_IR_signal+1)& (0+255),b
 13984                           
 13985                           ;Test.c: 455: lcdInst(0b11000000);;
 13986  00251E  0EC0               	movlw	192
 13987  002520  EC72  F02A         	call	_lcdInst
 13988                           
 13989                           ;Test.c: 456: printf("5:H|6:L|IR:%d   ", res);
 13990  002524  0E03               	movlw	low STR_114
 13991  002526  0100               	movlb	0	; () banked
 13992  002528  6F8E               	movwf	printf@f& (0+255),b
 13993  00252A  0EFC               	movlw	high STR_114
 13994  00252C  0100               	movlb	0	; () banked
 13995  00252E  6F8F               	movwf	(printf@f+1)& (0+255),b
 13996  002530  C0AD  F090         	movff	PlatformTest@res,?_printf+2
 13997  002534  C0AE  F091         	movff	PlatformTest@res+1,?_printf+3
 13998  002538  EC1E  F00B         	call	_printf	;wreg free
 13999                           
 14000                           ;Test.c: 457: _delay((unsigned long)((100)*(32000000/4000.0)));
 14001  00253C  0E05               	movlw	5
 14002  00253E  0100               	movlb	0	; () banked
 14003  002540  6FAC               	movwf	(??_PlatformTest+1)& (0+255),b
 14004  002542  0E0F               	movlw	15
 14005  002544  0100               	movlb	0	; () banked
 14006  002546  6FAB               	movwf	??_PlatformTest& (0+255),b
 14007  002548  0EF1               	movlw	241
 14008  00254A                     u10307:
 14009  00254A  2EE8               	decfsz	wreg,f,c
 14010  00254C  D7FE               	bra	u10307
 14011  00254E  2FAB               	decfsz	??_PlatformTest& (0+255),f,b
 14012  002550  D7FC               	bra	u10307
 14013  002552  2FAC               	decfsz	(??_PlatformTest+1)& (0+255),f,b
 14014  002554  D7FA               	bra	u10307
 14015  002556                     l8428:
 14016  002556  B281               	btfsc	3969,1,c	;volatile
 14017  002558  D042               	goto	l8440
 14018  00255A  D7BC               	goto	l8418
 14019  00255C                     l8430:
 14020                           
 14021                           ;Test.c: 462: readADC(0);
 14022  00255C  0E00               	movlw	0
 14023  00255E  EC68  F029         	call	_readADC
 14024                           
 14025                           ;Test.c: 463: int res = ADRESH<<8 | ADRESL;
 14026  002562  50C3               	movf	4035,w,c	;volatile
 14027  002564  CFC4 F0AB          	movff	4036,??_PlatformTest	;volatile
 14028  002568  0100               	movlb	0	; () banked
 14029  00256A  6BAC               	clrf	(??_PlatformTest+1)& (0+255),b
 14030  00256C  C0AB  F0AC         	movff	??_PlatformTest,??_PlatformTest+1
 14031  002570  0100               	movlb	0	; () banked
 14032  002572  6BAB               	clrf	??_PlatformTest& (0+255),b
 14033  002574  0100               	movlb	0	; () banked
 14034  002576  11AB               	iorwf	??_PlatformTest& (0+255),w,b
 14035  002578  0100               	movlb	0	; () banked
 14036  00257A  6FAF               	movwf	PlatformTest@res_1780& (0+255),b
 14037  00257C  0100               	movlb	0	; () banked
 14038  00257E  51AC               	movf	(??_PlatformTest+1)& (0+255),w,b
 14039  002580  0100               	movlb	0	; () banked
 14040  002582  6FB0               	movwf	(PlatformTest@res_1780+1)& (0+255),b
 14041                           
 14042                           ; BSR set to: 0
 14043                           ;Test.c: 464: IR_signal = (res > 800) ? 1 : 0;
 14044  002584  0100               	movlb	0	; () banked
 14045  002586  BFB0               	btfsc	(PlatformTest@res_1780+1)& (0+255),7,b
 14046  002588  D00A               	goto	u7220
 14047  00258A  0E21               	movlw	33
 14048  00258C  0100               	movlb	0	; () banked
 14049  00258E  5DAF               	subwf	PlatformTest@res_1780& (0+255),w,b
 14050  002590  0E03               	movlw	3
 14051  002592  0100               	movlb	0	; () banked
 14052  002594  59B0               	subwfb	(PlatformTest@res_1780+1)& (0+255),w,b
 14053  002596  A0D8               	btfss	status,0,c
 14054  002598  D002               	goto	u7220
 14055  00259A  0E01               	movlw	1
 14056  00259C  D001               	goto	u7230
 14057  00259E                     u7220:
 14058  00259E  0E00               	movlw	0
 14059  0025A0                     u7230:
 14060  0025A0  0100               	movlb	0	; () banked
 14061  0025A2  6FE6               	movwf	_IR_signal& (0+255),b
 14062  0025A4  6BE7               	clrf	(_IR_signal+1)& (0+255),b
 14063                           
 14064                           ;Test.c: 465: lcdInst(0b11000000);;
 14065  0025A6  0EC0               	movlw	192
 14066  0025A8  EC72  F02A         	call	_lcdInst
 14067                           
 14068                           ;Test.c: 466: printf("5:H|6:L|IR:%d   ", res);
 14069  0025AC  0E03               	movlw	low STR_114
 14070  0025AE  0100               	movlb	0	; () banked
 14071  0025B0  6F8E               	movwf	printf@f& (0+255),b
 14072  0025B2  0EFC               	movlw	high STR_114
 14073  0025B4  0100               	movlb	0	; () banked
 14074  0025B6  6F8F               	movwf	(printf@f+1)& (0+255),b
 14075  0025B8  C0AF  F090         	movff	PlatformTest@res_1780,?_printf+2
 14076  0025BC  C0B0  F091         	movff	PlatformTest@res_1780+1,?_printf+3
 14077  0025C0  EC1E  F00B         	call	_printf	;wreg free
 14078                           
 14079                           ;Test.c: 467: _delay((unsigned long)((100)*(32000000/4000.0)));
 14080  0025C4  0E05               	movlw	5
 14081  0025C6  0100               	movlb	0	; () banked
 14082  0025C8  6FAC               	movwf	(??_PlatformTest+1)& (0+255),b
 14083  0025CA  0E0F               	movlw	15
 14084  0025CC  0100               	movlb	0	; () banked
 14085  0025CE  6FAB               	movwf	??_PlatformTest& (0+255),b
 14086  0025D0  0EF1               	movlw	241
 14087  0025D2                     u10317:
 14088  0025D2  2EE8               	decfsz	wreg,f,c
 14089  0025D4  D7FE               	bra	u10317
 14090  0025D6  2FAB               	decfsz	??_PlatformTest& (0+255),f,b
 14091  0025D8  D7FC               	bra	u10317
 14092  0025DA  2FAC               	decfsz	(??_PlatformTest+1)& (0+255),f,b
 14093  0025DC  D7FA               	bra	u10317
 14094  0025DE                     l8440:
 14095  0025DE  A281               	btfss	3969,1,c	;volatile
 14096  0025E0  D7BD               	goto	l8430
 14097                           
 14098                           ;Test.c: 468: }
 14099                           ;Test.c: 469: if(PORTB >> 4 == 0b1111){
 14100  0025E2  3881               	swapf	3969,w,c	;volatile
 14101  0025E4  0B0F               	andlw	15
 14102  0025E6  0A0F               	xorlw	15
 14103  0025E8  B4D8               	btfsc	status,2,c
 14104  0025EA  D09B               	goto	l1346
 14105                           
 14106                           ;Test.c: 472: else if(PORTB >> 4 == 0b0000){
 14107                           
 14108                           ;Test.c: 471: }
 14109                           
 14110                           ;Test.c: 470: break;
 14111  0025EC  CF81 F0AB          	movff	3969,??_PlatformTest	;volatile
 14112  0025F0  0100               	movlb	0	; () banked
 14113  0025F2  3BAB               	swapf	??_PlatformTest& (0+255),f,b
 14114  0025F4  0E0F               	movlw	15
 14115  0025F6  17AB               	andwf	??_PlatformTest& (0+255),f,b
 14116  0025F8  A4D8               	btfss	status,2,c
 14117  0025FA  D012               	goto	l8452
 14118                           
 14119                           ; BSR set to: 0
 14120                           ;Test.c: 473: LATBbits.LATB2 = !LATBbits.LATB2;
 14121  0025FC  B48A               	btfsc	3978,2,c	;volatile
 14122  0025FE  D004               	goto	u7270
 14123  002600  0100               	movlb	0	; () banked
 14124  002602  6BAB               	clrf	??_PlatformTest& (0+255),b
 14125  002604  2BAB               	incf	??_PlatformTest& (0+255),f,b
 14126  002606  D002               	goto	u7288
 14127  002608                     u7270:
 14128  002608  0100               	movlb	0	; () banked
 14129  00260A  6BAB               	clrf	??_PlatformTest& (0+255),b
 14130  00260C                     u7288:
 14131  00260C  0100               	movlb	0	; () banked
 14132  00260E  47AB               	rlncf	??_PlatformTest& (0+255),f,b
 14133  002610  47AB               	rlncf	??_PlatformTest& (0+255),f,b
 14134  002612  508A               	movf	3978,w,c	;volatile
 14135  002614  0100               	movlb	0	; () banked
 14136  002616  19AB               	xorwf	??_PlatformTest& (0+255),w,b
 14137  002618  0BFB               	andlw	-5
 14138  00261A  19AB               	xorwf	??_PlatformTest& (0+255),w,b
 14139  00261C  6E8A               	movwf	3978,c	;volatile
 14140                           
 14141                           ;Test.c: 474: }
 14142  00261E  D07E               	goto	l1361
 14143  002620                     l8452:
 14144                           
 14145                           ; BSR set to: 0
 14146                           ;Test.c: 475: else if(PORTB >> 4 == 0b0011){
 14147  002620  3881               	swapf	3969,w,c	;volatile
 14148  002622  0B0F               	andlw	15
 14149  002624  0A03               	xorlw	3
 14150  002626  A4D8               	btfss	status,2,c
 14151  002628  D020               	goto	l8464
 14152                           
 14153                           ; BSR set to: 0
 14154                           ;Test.c: 476: if(on){
 14155  00262A  0100               	movlb	0	; () banked
 14156  00262C  51B5               	movf	PlatformTest@on& (0+255),w,b
 14157  00262E  0100               	movlb	0	; () banked
 14158  002630  11B6               	iorwf	(PlatformTest@on+1)& (0+255),w,b
 14159  002632  B4D8               	btfsc	status,2,c
 14160  002634  D010               	goto	l8460
 14161                           
 14162                           ; BSR set to: 0
 14163                           ;Test.c: 477: f_arm_position = 1;
 14164  002636  0E00               	movlw	0
 14165  002638  0100               	movlb	0	; () banked
 14166  00263A  6FEF               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
 14167  00263C  0E01               	movlw	1
 14168  00263E  D00F               	goto	L12
 14169  002640                     l8458:
 14170                           
 14171                           ; BSR set to: 0
 14172                           ;Test.c: 478: on = !on;
 14173  002640  0100               	movlb	0	; () banked
 14174  002642  51B5               	movf	PlatformTest@on& (0+255),w,b
 14175  002644  0100               	movlb	0	; () banked
 14176  002646  11B6               	iorwf	(PlatformTest@on+1)& (0+255),w,b
 14177  002648  A4D8               	btfss	status,2,c
 14178  00264A  D00D               	goto	u7330
 14179  00264C  D00A               	goto	u7331
 14180  00264E                     u7320:
 14181  00264E  0100               	movlb	0	; () banked
 14182  002650  6FB5               	movwf	PlatformTest@on& (0+255),b
 14183  002652  6BB6               	clrf	(PlatformTest@on+1)& (0+255),b
 14184                           
 14185                           ;Test.c: 479: }
 14186  002654  D063               	goto	l1361
 14187  002656                     l8460:
 14188                           
 14189                           ; BSR set to: 0
 14190                           ;Test.c: 480: else{
 14191                           ;Test.c: 481: f_arm_position = 0;
 14192  002656  0E00               	movlw	0
 14193  002658  0100               	movlb	0	; () banked
 14194  00265A  6FEF               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
 14195  00265C  0E00               	movlw	0
 14196  00265E                     L12:
 14197  00265E  6FEE               	movwf	_f_arm_position& (0+255),b	;volatile
 14198  002660  D7EF               	goto	l8458
 14199  002662                     u7331:
 14200  002662  0E01               	movlw	1
 14201  002664  D7F4               	goto	u7320
 14202  002666                     u7330:
 14203  002666  0E00               	movlw	0
 14204  002668  D7F2               	goto	u7320
 14205  00266A                     l8464:
 14206                           
 14207                           ; BSR set to: 0
 14208                           ;Test.c: 486: else if(PORTB >> 4 == 0b0101){
 14209  00266A  3881               	swapf	3969,w,c	;volatile
 14210  00266C  0B0F               	andlw	15
 14211  00266E  0A05               	xorlw	5
 14212  002670  A4D8               	btfss	status,2,c
 14213  002672  D028               	goto	l8478
 14214                           
 14215                           ; BSR set to: 0
 14216                           ;Test.c: 488: for(int i = 0; i<300; i++){
 14217  002674  0E00               	movlw	0
 14218  002676  0100               	movlb	0	; () banked
 14219  002678  6FB2               	movwf	(PlatformTest@i+1)& (0+255),b
 14220  00267A  0E00               	movlw	0
 14221  00267C  6FB1               	movwf	PlatformTest@i& (0+255),b
 14222  00267E                     l8468:
 14223                           
 14224                           ; BSR set to: 0
 14225  00267E  0100               	movlb	0	; () banked
 14226  002680  BFB2               	btfsc	(PlatformTest@i+1)& (0+255),7,b
 14227  002682  D008               	goto	l1355
 14228  002684  0E2C               	movlw	44
 14229  002686  0100               	movlb	0	; () banked
 14230  002688  5DB1               	subwf	PlatformTest@i& (0+255),w,b
 14231  00268A  0E01               	movlw	1
 14232  00268C  0100               	movlb	0	; () banked
 14233  00268E  59B2               	subwfb	(PlatformTest@i+1)& (0+255),w,b
 14234  002690  B0D8               	btfsc	status,0,c
 14235  002692  D044               	goto	l1361
 14236  002694                     l1355:
 14237                           
 14238                           ; BSR set to: 0
 14239                           ;Test.c: 489: LATAbits.LATA4 = 1;
 14240  002694  8889               	bsf	3977,4,c	;volatile
 14241                           
 14242                           ; BSR set to: 0
 14243                           ;Test.c: 490: _delay((unsigned long)((750)*(32000000/4000000.0)));
 14244  002696  0E08               	movlw	8
 14245  002698  0100               	movlb	0	; () banked
 14246  00269A  6FAB               	movwf	??_PlatformTest& (0+255),b
 14247  00269C  0EC9               	movlw	201
 14248  00269E                     u10327:
 14249  00269E  2EE8               	decfsz	wreg,f,c
 14250  0026A0  D7FE               	bra	u10327
 14251  0026A2  2FAB               	decfsz	??_PlatformTest& (0+255),f,b
 14252  0026A4  D7FC               	bra	u10327
 14253  0026A6  D000               	nop2	
 14254                           
 14255                           ;Test.c: 491: LATAbits.LATA4 = 0;
 14256  0026A8  9889               	bcf	3977,4,c	;volatile
 14257                           
 14258                           ;Test.c: 492: _delay((unsigned long)((250)*(32000000/4000000.0)));
 14259  0026AA  0E03               	movlw	3
 14260  0026AC  0100               	movlb	0	; () banked
 14261  0026AE  6FAB               	movwf	??_PlatformTest& (0+255),b
 14262  0026B0  0E97               	movlw	151
 14263  0026B2                     u10337:
 14264  0026B2  2EE8               	decfsz	wreg,f,c
 14265  0026B4  D7FE               	bra	u10337
 14266  0026B6  2FAB               	decfsz	??_PlatformTest& (0+255),f,b
 14267  0026B8  D7FC               	bra	u10337
 14268  0026BA  D000               	nop2	
 14269  0026BC  0100               	movlb	0	; () banked
 14270  0026BE  4BB1               	infsnz	PlatformTest@i& (0+255),f,b
 14271  0026C0  2BB2               	incf	(PlatformTest@i+1)& (0+255),f,b
 14272  0026C2  D7DD               	goto	l8468
 14273  0026C4                     l8478:
 14274                           
 14275                           ; BSR set to: 0
 14276                           ;Test.c: 495: else if (PORTB >> 4 == 0b0110){
 14277  0026C4  3881               	swapf	3969,w,c	;volatile
 14278  0026C6  0B0F               	andlw	15
 14279  0026C8  0A06               	xorlw	6
 14280  0026CA  A4D8               	btfss	status,2,c
 14281  0026CC  D027               	goto	l1361
 14282                           
 14283                           ; BSR set to: 0
 14284                           ;Test.c: 497: for(int i = 0; i<300; i++){
 14285  0026CE  0E00               	movlw	0
 14286  0026D0  0100               	movlb	0	; () banked
 14287  0026D2  6FB4               	movwf	(PlatformTest@i_1783+1)& (0+255),b
 14288  0026D4  0E00               	movlw	0
 14289  0026D6  6FB3               	movwf	PlatformTest@i_1783& (0+255),b
 14290  0026D8                     l8482:
 14291                           
 14292                           ; BSR set to: 0
 14293  0026D8  0100               	movlb	0	; () banked
 14294  0026DA  BFB4               	btfsc	(PlatformTest@i_1783+1)& (0+255),7,b
 14295  0026DC  D008               	goto	l1359
 14296  0026DE  0E2C               	movlw	44
 14297  0026E0  0100               	movlb	0	; () banked
 14298  0026E2  5DB3               	subwf	PlatformTest@i_1783& (0+255),w,b
 14299  0026E4  0E01               	movlw	1
 14300  0026E6  0100               	movlb	0	; () banked
 14301  0026E8  59B4               	subwfb	(PlatformTest@i_1783+1)& (0+255),w,b
 14302  0026EA  B0D8               	btfsc	status,0,c
 14303  0026EC  D017               	goto	l1361
 14304  0026EE                     l1359:
 14305                           
 14306                           ; BSR set to: 0
 14307                           ;Test.c: 498: LATAbits.LATA4 = 1;
 14308  0026EE  8889               	bsf	3977,4,c	;volatile
 14309                           
 14310                           ; BSR set to: 0
 14311                           ;Test.c: 499: _delay((unsigned long)((580)*(32000000/4000000.0)));
 14312  0026F0  0E07               	movlw	7
 14313  0026F2  0100               	movlb	0	; () banked
 14314  0026F4  6FAB               	movwf	??_PlatformTest& (0+255),b
 14315  0026F6  0E05               	movlw	5
 14316  0026F8                     u10347:
 14317  0026F8  2EE8               	decfsz	wreg,f,c
 14318  0026FA  D7FE               	bra	u10347
 14319  0026FC  2FAB               	decfsz	??_PlatformTest& (0+255),f,b
 14320  0026FE  D7FC               	bra	u10347
 14321                           
 14322                           ;Test.c: 500: LATAbits.LATA4 = 0;
 14323  002700  9889               	bcf	3977,4,c	;volatile
 14324                           
 14325                           ;Test.c: 501: _delay((unsigned long)((420)*(32000000/4000000.0)));
 14326  002702  0E05               	movlw	5
 14327  002704  0100               	movlb	0	; () banked
 14328  002706  6FAB               	movwf	??_PlatformTest& (0+255),b
 14329  002708  0E5B               	movlw	91
 14330  00270A                     u10357:
 14331  00270A  2EE8               	decfsz	wreg,f,c
 14332  00270C  D7FE               	bra	u10357
 14333  00270E  2FAB               	decfsz	??_PlatformTest& (0+255),f,b
 14334  002710  D7FC               	bra	u10357
 14335  002712  D000               	nop2	
 14336  002714  0100               	movlb	0	; () banked
 14337  002716  4BB3               	infsnz	PlatformTest@i_1783& (0+255),f,b
 14338  002718  2BB4               	incf	(PlatformTest@i_1783+1)& (0+255),f,b
 14339  00271A  D7DE               	goto	l8482
 14340  00271C                     l1361:
 14341  00271C  A281               	btfss	3969,1,c	;volatile
 14342  00271E  D75F               	goto	l8440
 14343  002720  D7FD               	goto	l1361
 14344  002722                     l1346:
 14345                           
 14346                           ;Test.c: 506: }
 14347                           ;Test.c: 508: LATCbits.LATC5 = 0;
 14348  002722  9A8B               	bcf	3979,5,c	;volatile
 14349                           
 14350                           ;Test.c: 509: (INTCONbits.GIE = 0);
 14351  002724  9EF2               	bcf	intcon,7,c	;volatile
 14352                           
 14353                           ;Test.c: 510: TMR1IF = 1;
 14354  002726  809E               	bsf	3998,0,c	;volatile
 14355                           
 14356                           ;Test.c: 511: TMR3IF = 1;
 14357  002728  82A1               	bsf	4001,1,c	;volatile
 14358                           
 14359                           ;Test.c: 512: stopSignals();
 14360  00272A  EC24  F02A         	call	_stopSignals	;wreg free
 14361                           
 14362                           ;Test.c: 513: machine_state = Testing_state;
 14363  00272E  0E03               	movlw	3
 14364  002730  0100               	movlb	0	; () banked
 14365  002732  6FFC               	movwf	_machine_state& (0+255),b
 14366                           
 14367                           ; BSR set to: 0
 14368  002734  0012               	return		;funcret
 14369  002736                     __end_of_PlatformTest:
 14370                           	opt stack 0
 14371                           tblptru	equ	0xFF8
 14372                           tblptrh	equ	0xFF7
 14373                           tblptrl	equ	0xFF6
 14374                           tablat	equ	0xFF5
 14375                           prodh	equ	0xFF4
 14376                           prodl	equ	0xFF3
 14377                           intcon	equ	0xFF2
 14378                           intcon2	equ	0xFF1
 14379                           intcon3	equ	0xFF0
 14380                           postinc0	equ	0xFEE
 14381                           wreg	equ	0xFE8
 14382                           postdec1	equ	0xFE5
 14383                           fsr1l	equ	0xFE1
 14384                           indf2	equ	0xFDF
 14385                           postinc2	equ	0xFDE
 14386                           postdec2	equ	0xFDD
 14387                           fsr2h	equ	0xFDA
 14388                           fsr2l	equ	0xFD9
 14389                           status	equ	0xFD8
 14390                           
 14391 ;; *************** function _stopSignals *****************
 14392 ;; Defined at:
 14393 ;;		line 70 in file "main.c"
 14394 ;; Parameters:    Size  Location     Type
 14395 ;;		None
 14396 ;; Auto vars:     Size  Location     Type
 14397 ;;		None
 14398 ;; Return value:  Size  Location     Type
 14399 ;;                  1    wreg      void 
 14400 ;; Registers used:
 14401 ;;		wreg, status,2
 14402 ;; Tracked objects:
 14403 ;;		On entry : 0/0
 14404 ;;		On exit  : 0/0
 14405 ;;		Unchanged: 0/0
 14406 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14407 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14408 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14409 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14410 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14411 ;;Total ram usage:        0 bytes
 14412 ;; Hardware stack levels used:    1
 14413 ;; Hardware stack levels required when called:    7
 14414 ;; This function calls:
 14415 ;;		Nothing
 14416 ;; This function is called by:
 14417 ;;		_main
 14418 ;;		_PlatformTest
 14419 ;;		_arm
 14420 ;; This function uses a non-reentrant model
 14421 ;;
 14422                           
 14423                           	psect	text44
 14424  005448                     __ptext44:
 14425                           	opt stack 0
 14426  005448                     _stopSignals:
 14427                           	opt stack 23
 14428                           
 14429                           ;main.c: 71: LATA = 0x00;
 14430                           
 14431                           ; BSR set to: 0
 14432                           ;incstack = 0
 14433  005448  0E00               	movlw	0
 14434  00544A  6E89               	movwf	3977,c	;volatile
 14435                           
 14436                           ;main.c: 72: LATB = 0x00;
 14437  00544C  0E00               	movlw	0
 14438  00544E  6E8A               	movwf	3978,c	;volatile
 14439                           
 14440                           ;main.c: 73: LATC = 0x00;
 14441  005450  0E00               	movlw	0
 14442  005452  6E8B               	movwf	3979,c	;volatile
 14443                           
 14444                           ;main.c: 74: LATD = 0x00;
 14445  005454  0E00               	movlw	0
 14446  005456  6E8C               	movwf	3980,c	;volatile
 14447                           
 14448                           ;main.c: 75: LATE = 0x00;
 14449  005458  0E00               	movlw	0
 14450  00545A  6E8D               	movwf	3981,c	;volatile
 14451                           
 14452                           ;main.c: 76: TMR1ON = 0;
 14453  00545C  90CD               	bcf	4045,0,c	;volatile
 14454                           
 14455                           ;main.c: 77: TMR2ON = 0;
 14456  00545E  94CA               	bcf	4042,2,c	;volatile
 14457                           
 14458                           ;main.c: 78: TMR3ON = 0;
 14459  005460  90B1               	bcf	4017,0,c	;volatile
 14460  005462  0012               	return		;funcret
 14461  005464                     __end_of_stopSignals:
 14462                           	opt stack 0
 14463                           tblptru	equ	0xFF8
 14464                           tblptrh	equ	0xFF7
 14465                           tblptrl	equ	0xFF6
 14466                           tablat	equ	0xFF5
 14467                           prodh	equ	0xFF4
 14468                           prodl	equ	0xFF3
 14469                           intcon	equ	0xFF2
 14470                           intcon2	equ	0xFF1
 14471                           intcon3	equ	0xFF0
 14472                           postinc0	equ	0xFEE
 14473                           wreg	equ	0xFE8
 14474                           postdec1	equ	0xFE5
 14475                           fsr1l	equ	0xFE1
 14476                           indf2	equ	0xFDF
 14477                           postinc2	equ	0xFDE
 14478                           postdec2	equ	0xFDD
 14479                           fsr2h	equ	0xFDA
 14480                           fsr2l	equ	0xFD9
 14481                           status	equ	0xFD8
 14482                           
 14483 ;; *************** function _readADC *****************
 14484 ;; Defined at:
 14485 ;;		line 15 in file "ADCFunctionality.c"
 14486 ;; Parameters:    Size  Location     Type
 14487 ;;  channel         1    wreg     unsigned char 
 14488 ;; Auto vars:     Size  Location     Type
 14489 ;;  channel         1    1[BANK0 ] unsigned char 
 14490 ;; Return value:  Size  Location     Type
 14491 ;;                  1    wreg      void 
 14492 ;; Registers used:
 14493 ;;		wreg, status,2, status,0, cstack
 14494 ;; Tracked objects:
 14495 ;;		On entry : 0/0
 14496 ;;		On exit  : 0/0
 14497 ;;		Unchanged: 0/0
 14498 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14499 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14500 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14501 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14502 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14503 ;;Total ram usage:        2 bytes
 14504 ;; Hardware stack levels used:    1
 14505 ;; Hardware stack levels required when called:    7
 14506 ;; This function calls:
 14507 ;;		Nothing
 14508 ;; This function is called by:
 14509 ;;		_readIR
 14510 ;;		_readMAG
 14511 ;;		_sensorTest
 14512 ;;		_PlatformTest
 14513 ;; This function uses a non-reentrant model
 14514 ;;
 14515                           
 14516                           	psect	text45
 14517  0052D0                     __ptext45:
 14518                           	opt stack 0
 14519  0052D0                     _readADC:
 14520                           	opt stack 20
 14521                           
 14522                           ;incstack = 0
 14523                           ;readADC@channel stored from wreg
 14524  0052D0  0100               	movlb	0	; () banked
 14525  0052D2  6F81               	movwf	readADC@channel& (0+255),b
 14526                           
 14527                           ;ADCFunctionality.c: 17: ADCON0 = channel << 2;
 14528  0052D4  0100               	movlb	0	; () banked
 14529  0052D6  4581               	rlncf	readADC@channel& (0+255),w,b
 14530  0052D8  46E8               	rlncf	wreg,f,c
 14531  0052DA  0BFC               	andlw	252
 14532  0052DC  6EC2               	movwf	4034,c	;volatile
 14533                           
 14534                           ; BSR set to: 0
 14535                           ;ADCFunctionality.c: 18: ADCON0bits.ADON = 1;
 14536  0052DE  80C2               	bsf	4034,0,c	;volatile
 14537                           
 14538                           ; BSR set to: 0
 14539                           ;ADCFunctionality.c: 19: ADCON0bits.GO = 1;
 14540  0052E0  82C2               	bsf	4034,1,c	;volatile
 14541                           
 14542                           ;ADCFunctionality.c: 20: while(ADCON0bits.GO_NOT_DONE){_delay((unsigned long)((5)*(32000
      +                          000/4000.0)));}
 14543  0052E2  D009               	goto	l6230
 14544  0052E4                     l6228:
 14545  0052E4  0E34               	movlw	52
 14546  0052E6  0100               	movlb	0	; () banked
 14547  0052E8  6F80               	movwf	??_readADC& (0+255),b
 14548  0052EA  0EF1               	movlw	241
 14549  0052EC                     u10367:
 14550  0052EC  2EE8               	decfsz	wreg,f,c
 14551  0052EE  D7FE               	bra	u10367
 14552  0052F0  2F80               	decfsz	??_readADC& (0+255),f,b
 14553  0052F2  D7FC               	bra	u10367
 14554  0052F4  D000               	nop2	
 14555  0052F6                     l6230:
 14556  0052F6  A2C2               	btfss	4034,1,c	;volatile
 14557  0052F8  0012               	return	
 14558  0052FA  D7F4               	goto	l6228
 14559  0052FC                     __end_of_readADC:
 14560                           	opt stack 0
 14561                           tblptru	equ	0xFF8
 14562                           tblptrh	equ	0xFF7
 14563                           tblptrl	equ	0xFF6
 14564                           tablat	equ	0xFF5
 14565                           prodh	equ	0xFF4
 14566                           prodl	equ	0xFF3
 14567                           intcon	equ	0xFF2
 14568                           intcon2	equ	0xFF1
 14569                           intcon3	equ	0xFF0
 14570                           postinc0	equ	0xFEE
 14571                           wreg	equ	0xFE8
 14572                           postdec1	equ	0xFE5
 14573                           fsr1l	equ	0xFE1
 14574                           indf2	equ	0xFDF
 14575                           postinc2	equ	0xFDE
 14576                           postdec2	equ	0xFDD
 14577                           fsr2h	equ	0xFDA
 14578                           fsr2l	equ	0xFD9
 14579                           status	equ	0xFD8
 14580                           
 14581 ;; *************** function _EEPROMTest *****************
 14582 ;; Defined at:
 14583 ;;		line 570 in file "Test.c"
 14584 ;; Parameters:    Size  Location     Type
 14585 ;;		None
 14586 ;; Auto vars:     Size  Location     Type
 14587 ;;		None
 14588 ;; Return value:  Size  Location     Type
 14589 ;;                  1    wreg      void 
 14590 ;; Registers used:
 14591 ;;		None
 14592 ;; Tracked objects:
 14593 ;;		On entry : 0/0
 14594 ;;		On exit  : 0/0
 14595 ;;		Unchanged: 0/0
 14596 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14597 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14598 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14599 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14600 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14601 ;;Total ram usage:        0 bytes
 14602 ;; Hardware stack levels used:    1
 14603 ;; Hardware stack levels required when called:    7
 14604 ;; This function calls:
 14605 ;;		Nothing
 14606 ;; This function is called by:
 14607 ;;		_Test
 14608 ;; This function uses a non-reentrant model
 14609 ;;
 14610                           
 14611                           	psect	text46
 14612  005548                     __ptext46:
 14613                           	opt stack 0
 14614  005548                     _EEPROMTest:
 14615                           	opt stack 22
 14616                           
 14617                           ;incstack = 0
 14618  005548  0012               	return		;funcret
 14619  00554A                     __end_of_EEPROMTest:
 14620                           	opt stack 0
 14621                           tblptru	equ	0xFF8
 14622                           tblptrh	equ	0xFF7
 14623                           tblptrl	equ	0xFF6
 14624                           tablat	equ	0xFF5
 14625                           prodh	equ	0xFF4
 14626                           prodl	equ	0xFF3
 14627                           intcon	equ	0xFF2
 14628                           intcon2	equ	0xFF1
 14629                           intcon3	equ	0xFF0
 14630                           postinc0	equ	0xFEE
 14631                           wreg	equ	0xFE8
 14632                           postdec1	equ	0xFE5
 14633                           fsr1l	equ	0xFE1
 14634                           indf2	equ	0xFDF
 14635                           postinc2	equ	0xFDE
 14636                           postdec2	equ	0xFDD
 14637                           fsr2h	equ	0xFDA
 14638                           fsr2l	equ	0xFD9
 14639                           status	equ	0xFD8
 14640                           
 14641 ;; *************** function _BothServos *****************
 14642 ;; Defined at:
 14643 ;;		line 351 in file "Test.c"
 14644 ;; Parameters:    Size  Location     Type
 14645 ;;		None
 14646 ;; Auto vars:     Size  Location     Type
 14647 ;;		None
 14648 ;; Return value:  Size  Location     Type
 14649 ;;                  1    wreg      void 
 14650 ;; Registers used:
 14651 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14652 ;; Tracked objects:
 14653 ;;		On entry : 0/0
 14654 ;;		On exit  : 0/0
 14655 ;;		Unchanged: 0/0
 14656 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14657 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14658 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14659 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14660 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14661 ;;Total ram usage:        2 bytes
 14662 ;; Hardware stack levels used:    1
 14663 ;; Hardware stack levels required when called:   10
 14664 ;; This function calls:
 14665 ;;		_initServos
 14666 ;;		_lcdInst
 14667 ;;		_printf
 14668 ;;		_updateServoPosition
 14669 ;; This function is called by:
 14670 ;;		_Test
 14671 ;; This function uses a non-reentrant model
 14672 ;;
 14673                           
 14674                           	psect	text47
 14675  001A74                     __ptext47:
 14676                           	opt stack 0
 14677  001A74                     _BothServos:
 14678                           	opt stack 19
 14679                           
 14680                           ;Test.c: 352: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 14681                           
 14682                           ;incstack = 0
 14683  001A74  0E01               	movlw	1
 14684  001A76  EC72  F02A         	call	_lcdInst
 14685  001A7A  0E68               	movlw	104
 14686  001A7C  0100               	movlb	0	; () banked
 14687  001A7E  6FAB               	movwf	??_BothServos& (0+255),b
 14688  001A80  0EE4               	movlw	228
 14689  001A82                     u10377:
 14690  001A82  2EE8               	decfsz	wreg,f,c
 14691  001A84  D7FE               	bra	u10377
 14692  001A86  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14693  001A88  D7FC               	bra	u10377
 14694  001A8A  F000               	nop	
 14695  001A8C  0E80               	movlw	128
 14696  001A8E  EC72  F02A         	call	_lcdInst
 14697                           
 14698                           ;Test.c: 353: printf("TST: BOTH SERVOS");
 14699  001A92  0EBE               	movlw	low STR_110
 14700  001A94  0100               	movlb	0	; () banked
 14701  001A96  6F8E               	movwf	printf@f& (0+255),b
 14702  001A98  0EFC               	movlw	high STR_110
 14703  001A9A  0100               	movlb	0	; () banked
 14704  001A9C  6F8F               	movwf	(printf@f+1)& (0+255),b
 14705  001A9E  EC1E  F00B         	call	_printf	;wreg free
 14706                           
 14707                           ;Test.c: 354: TMR1ON = 1;
 14708  001AA2  80CD               	bsf	4045,0,c	;volatile
 14709                           
 14710                           ;Test.c: 355: TMR3ON = 1;
 14711  001AA4  80B1               	bsf	4017,0,c	;volatile
 14712                           
 14713                           ;Test.c: 356: machine_state = Sorting_state;
 14714  001AA6  0E01               	movlw	1
 14715  001AA8  0100               	movlb	0	; () banked
 14716  001AAA  6FFC               	movwf	_machine_state& (0+255),b
 14717                           
 14718                           ; BSR set to: 0
 14719                           ;Test.c: 357: was_low_1 = 0;
 14720  001AAC  0E00               	movlw	0
 14721  001AAE  6E78               	movwf	_was_low_1+1,c	;volatile
 14722  001AB0  0E00               	movlw	0
 14723  001AB2  6E77               	movwf	_was_low_1,c	;volatile
 14724                           
 14725                           ; BSR set to: 0
 14726                           ;Test.c: 358: was_low_3 = 0;
 14727  001AB4  0E00               	movlw	0
 14728  001AB6  6E7C               	movwf	_was_low_3+1,c	;volatile
 14729  001AB8  0E00               	movlw	0
 14730  001ABA  6E7B               	movwf	_was_low_3,c	;volatile
 14731                           
 14732                           ; BSR set to: 0
 14733                           ;Test.c: 364: initServos();
 14734  001ABC  EC55  F024         	call	_initServos	;wreg free
 14735                           
 14736                           ;Test.c: 365: _delay((unsigned long)((1500)*(32000000/4000.0)));
 14737  001AC0  0E3D               	movlw	61
 14738  001AC2  0100               	movlb	0	; () banked
 14739  001AC4  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14740  001AC6  0EE1               	movlw	225
 14741  001AC8  0100               	movlb	0	; () banked
 14742  001ACA  6FAB               	movwf	??_BothServos& (0+255),b
 14743  001ACC  0E3F               	movlw	63
 14744  001ACE                     u10387:
 14745  001ACE  2EE8               	decfsz	wreg,f,c
 14746  001AD0  D7FE               	bra	u10387
 14747  001AD2  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14748  001AD4  D7FC               	bra	u10387
 14749  001AD6  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14750  001AD8  D7FA               	bra	u10387
 14751  001ADA  D000               	nop2	
 14752                           
 14753                           ;Test.c: 367: updateServoPosition(500, 1);
 14754  001ADC  0E01               	movlw	1
 14755  001ADE  0100               	movlb	0	; () banked
 14756  001AE0  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14757  001AE2  0EF4               	movlw	244
 14758  001AE4  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14759  001AE6  0E00               	movlw	0
 14760  001AE8  0100               	movlb	0	; () banked
 14761  001AEA  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14762  001AEC  0E01               	movlw	1
 14763  001AEE  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14764  001AF0  ECD0  F023         	call	_updateServoPosition	;wreg free
 14765                           
 14766                           ;Test.c: 368: updateServoPosition(1050, 3);
 14767  001AF4  0E04               	movlw	4
 14768  001AF6  0100               	movlb	0	; () banked
 14769  001AF8  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14770  001AFA  0E1A               	movlw	26
 14771  001AFC  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14772  001AFE  0E00               	movlw	0
 14773  001B00  0100               	movlb	0	; () banked
 14774  001B02  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14775  001B04  0E03               	movlw	3
 14776  001B06  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14777  001B08  ECD0  F023         	call	_updateServoPosition	;wreg free
 14778                           
 14779                           ;Test.c: 369: _delay((unsigned long)((750)*(32000000/4000.0)));
 14780  001B0C  0E1F               	movlw	31
 14781  001B0E  0100               	movlb	0	; () banked
 14782  001B10  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14783  001B12  0E71               	movlw	113
 14784  001B14  0100               	movlb	0	; () banked
 14785  001B16  6FAB               	movwf	??_BothServos& (0+255),b
 14786  001B18  0E1E               	movlw	30
 14787  001B1A                     u10397:
 14788  001B1A  2EE8               	decfsz	wreg,f,c
 14789  001B1C  D7FE               	bra	u10397
 14790  001B1E  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14791  001B20  D7FC               	bra	u10397
 14792  001B22  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14793  001B24  D7FA               	bra	u10397
 14794  001B26  F000               	nop	
 14795                           
 14796                           ;Test.c: 370: updateServoPosition(1260, 3);
 14797  001B28  0E04               	movlw	4
 14798  001B2A  0100               	movlb	0	; () banked
 14799  001B2C  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14800  001B2E  0EEC               	movlw	236
 14801  001B30  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14802  001B32  0E00               	movlw	0
 14803  001B34  0100               	movlb	0	; () banked
 14804  001B36  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14805  001B38  0E03               	movlw	3
 14806  001B3A  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14807  001B3C  ECD0  F023         	call	_updateServoPosition	;wreg free
 14808                           
 14809                           ;Test.c: 371: _delay((unsigned long)((700)*(32000000/4000.0)));
 14810  001B40  0E1D               	movlw	29
 14811  001B42  0100               	movlb	0	; () banked
 14812  001B44  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14813  001B46  0E69               	movlw	105
 14814  001B48  0100               	movlb	0	; () banked
 14815  001B4A  6FAB               	movwf	??_BothServos& (0+255),b
 14816  001B4C  0EA5               	movlw	165
 14817  001B4E                     u10407:
 14818  001B4E  2EE8               	decfsz	wreg,f,c
 14819  001B50  D7FE               	bra	u10407
 14820  001B52  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14821  001B54  D7FC               	bra	u10407
 14822  001B56  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14823  001B58  D7FA               	bra	u10407
 14824                           
 14825                           ;Test.c: 372: updateServoPosition(1050, 3);
 14826  001B5A  0E04               	movlw	4
 14827  001B5C  0100               	movlb	0	; () banked
 14828  001B5E  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14829  001B60  0E1A               	movlw	26
 14830  001B62  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14831  001B64  0E00               	movlw	0
 14832  001B66  0100               	movlb	0	; () banked
 14833  001B68  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14834  001B6A  0E03               	movlw	3
 14835  001B6C  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14836  001B6E  ECD0  F023         	call	_updateServoPosition	;wreg free
 14837                           
 14838                           ;Test.c: 373: _delay((unsigned long)((750)*(32000000/4000.0)));
 14839  001B72  0E1F               	movlw	31
 14840  001B74  0100               	movlb	0	; () banked
 14841  001B76  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14842  001B78  0E71               	movlw	113
 14843  001B7A  0100               	movlb	0	; () banked
 14844  001B7C  6FAB               	movwf	??_BothServos& (0+255),b
 14845  001B7E  0E1E               	movlw	30
 14846  001B80                     u10417:
 14847  001B80  2EE8               	decfsz	wreg,f,c
 14848  001B82  D7FE               	bra	u10417
 14849  001B84  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14850  001B86  D7FC               	bra	u10417
 14851  001B88  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14852  001B8A  D7FA               	bra	u10417
 14853  001B8C  F000               	nop	
 14854                           
 14855                           ;Test.c: 375: updateServoPosition(850, 1);
 14856  001B8E  0E03               	movlw	3
 14857  001B90  0100               	movlb	0	; () banked
 14858  001B92  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14859  001B94  0E52               	movlw	82
 14860  001B96  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14861  001B98  0E00               	movlw	0
 14862  001B9A  0100               	movlb	0	; () banked
 14863  001B9C  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14864  001B9E  0E01               	movlw	1
 14865  001BA0  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14866  001BA2  ECD0  F023         	call	_updateServoPosition	;wreg free
 14867                           
 14868                           ;Test.c: 376: updateServoPosition(1050, 3);
 14869  001BA6  0E04               	movlw	4
 14870  001BA8  0100               	movlb	0	; () banked
 14871  001BAA  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14872  001BAC  0E1A               	movlw	26
 14873  001BAE  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14874  001BB0  0E00               	movlw	0
 14875  001BB2  0100               	movlb	0	; () banked
 14876  001BB4  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14877  001BB6  0E03               	movlw	3
 14878  001BB8  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14879  001BBA  ECD0  F023         	call	_updateServoPosition	;wreg free
 14880                           
 14881                           ;Test.c: 377: _delay((unsigned long)((750)*(32000000/4000.0)));
 14882  001BBE  0E1F               	movlw	31
 14883  001BC0  0100               	movlb	0	; () banked
 14884  001BC2  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14885  001BC4  0E71               	movlw	113
 14886  001BC6  0100               	movlb	0	; () banked
 14887  001BC8  6FAB               	movwf	??_BothServos& (0+255),b
 14888  001BCA  0E1E               	movlw	30
 14889  001BCC                     u10427:
 14890  001BCC  2EE8               	decfsz	wreg,f,c
 14891  001BCE  D7FE               	bra	u10427
 14892  001BD0  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14893  001BD2  D7FC               	bra	u10427
 14894  001BD4  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14895  001BD6  D7FA               	bra	u10427
 14896  001BD8  F000               	nop	
 14897                           
 14898                           ;Test.c: 378: updateServoPosition(1260, 3);
 14899  001BDA  0E04               	movlw	4
 14900  001BDC  0100               	movlb	0	; () banked
 14901  001BDE  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14902  001BE0  0EEC               	movlw	236
 14903  001BE2  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14904  001BE4  0E00               	movlw	0
 14905  001BE6  0100               	movlb	0	; () banked
 14906  001BE8  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14907  001BEA  0E03               	movlw	3
 14908  001BEC  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14909  001BEE  ECD0  F023         	call	_updateServoPosition	;wreg free
 14910                           
 14911                           ;Test.c: 379: _delay((unsigned long)((700)*(32000000/4000.0)));
 14912  001BF2  0E1D               	movlw	29
 14913  001BF4  0100               	movlb	0	; () banked
 14914  001BF6  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14915  001BF8  0E69               	movlw	105
 14916  001BFA  0100               	movlb	0	; () banked
 14917  001BFC  6FAB               	movwf	??_BothServos& (0+255),b
 14918  001BFE  0EA5               	movlw	165
 14919  001C00                     u10437:
 14920  001C00  2EE8               	decfsz	wreg,f,c
 14921  001C02  D7FE               	bra	u10437
 14922  001C04  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14923  001C06  D7FC               	bra	u10437
 14924  001C08  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14925  001C0A  D7FA               	bra	u10437
 14926                           
 14927                           ;Test.c: 380: updateServoPosition(1050, 3);
 14928  001C0C  0E04               	movlw	4
 14929  001C0E  0100               	movlb	0	; () banked
 14930  001C10  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14931  001C12  0E1A               	movlw	26
 14932  001C14  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14933  001C16  0E00               	movlw	0
 14934  001C18  0100               	movlb	0	; () banked
 14935  001C1A  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14936  001C1C  0E03               	movlw	3
 14937  001C1E  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14938  001C20  ECD0  F023         	call	_updateServoPosition	;wreg free
 14939                           
 14940                           ;Test.c: 381: _delay((unsigned long)((750)*(32000000/4000.0)));
 14941  001C24  0E1F               	movlw	31
 14942  001C26  0100               	movlb	0	; () banked
 14943  001C28  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14944  001C2A  0E71               	movlw	113
 14945  001C2C  0100               	movlb	0	; () banked
 14946  001C2E  6FAB               	movwf	??_BothServos& (0+255),b
 14947  001C30  0E1E               	movlw	30
 14948  001C32                     u10447:
 14949  001C32  2EE8               	decfsz	wreg,f,c
 14950  001C34  D7FE               	bra	u10447
 14951  001C36  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14952  001C38  D7FC               	bra	u10447
 14953  001C3A  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14954  001C3C  D7FA               	bra	u10447
 14955  001C3E  F000               	nop	
 14956                           
 14957                           ;Test.c: 383: updateServoPosition(1200, 1);
 14958  001C40  0E04               	movlw	4
 14959  001C42  0100               	movlb	0	; () banked
 14960  001C44  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14961  001C46  0EB0               	movlw	176
 14962  001C48  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14963  001C4A  0E00               	movlw	0
 14964  001C4C  0100               	movlb	0	; () banked
 14965  001C4E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14966  001C50  0E01               	movlw	1
 14967  001C52  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14968  001C54  ECD0  F023         	call	_updateServoPosition	;wreg free
 14969                           
 14970                           ;Test.c: 384: updateServoPosition(1050, 3);
 14971  001C58  0E04               	movlw	4
 14972  001C5A  0100               	movlb	0	; () banked
 14973  001C5C  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14974  001C5E  0E1A               	movlw	26
 14975  001C60  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14976  001C62  0E00               	movlw	0
 14977  001C64  0100               	movlb	0	; () banked
 14978  001C66  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14979  001C68  0E03               	movlw	3
 14980  001C6A  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14981  001C6C  ECD0  F023         	call	_updateServoPosition	;wreg free
 14982                           
 14983                           ;Test.c: 385: _delay((unsigned long)((1500)*(32000000/4000.0)));
 14984  001C70  0E3D               	movlw	61
 14985  001C72  0100               	movlb	0	; () banked
 14986  001C74  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14987  001C76  0EE1               	movlw	225
 14988  001C78  0100               	movlb	0	; () banked
 14989  001C7A  6FAB               	movwf	??_BothServos& (0+255),b
 14990  001C7C  0E3F               	movlw	63
 14991  001C7E                     u10457:
 14992  001C7E  2EE8               	decfsz	wreg,f,c
 14993  001C80  D7FE               	bra	u10457
 14994  001C82  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14995  001C84  D7FC               	bra	u10457
 14996  001C86  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14997  001C88  D7FA               	bra	u10457
 14998  001C8A  D000               	nop2	
 14999                           
 15000                           ;Test.c: 387: updateServoPosition(1670, 1);
 15001  001C8C  0E06               	movlw	6
 15002  001C8E  0100               	movlb	0	; () banked
 15003  001C90  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 15004  001C92  0E86               	movlw	134
 15005  001C94  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 15006  001C96  0E00               	movlw	0
 15007  001C98  0100               	movlb	0	; () banked
 15008  001C9A  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 15009  001C9C  0E01               	movlw	1
 15010  001C9E  6F82               	movwf	updateServoPosition@timer& (0+255),b
 15011  001CA0  ECD0  F023         	call	_updateServoPosition	;wreg free
 15012                           
 15013                           ;Test.c: 388: updateServoPosition(1050, 3);
 15014  001CA4  0E04               	movlw	4
 15015  001CA6  0100               	movlb	0	; () banked
 15016  001CA8  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 15017  001CAA  0E1A               	movlw	26
 15018  001CAC  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 15019  001CAE  0E00               	movlw	0
 15020  001CB0  0100               	movlb	0	; () banked
 15021  001CB2  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 15022  001CB4  0E03               	movlw	3
 15023  001CB6  6F82               	movwf	updateServoPosition@timer& (0+255),b
 15024  001CB8  ECD0  F023         	call	_updateServoPosition	;wreg free
 15025                           
 15026                           ;Test.c: 389: _delay((unsigned long)((750)*(32000000/4000.0)));
 15027  001CBC  0E1F               	movlw	31
 15028  001CBE  0100               	movlb	0	; () banked
 15029  001CC0  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 15030  001CC2  0E71               	movlw	113
 15031  001CC4  0100               	movlb	0	; () banked
 15032  001CC6  6FAB               	movwf	??_BothServos& (0+255),b
 15033  001CC8  0E1E               	movlw	30
 15034  001CCA                     u10467:
 15035  001CCA  2EE8               	decfsz	wreg,f,c
 15036  001CCC  D7FE               	bra	u10467
 15037  001CCE  2FAB               	decfsz	??_BothServos& (0+255),f,b
 15038  001CD0  D7FC               	bra	u10467
 15039  001CD2  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 15040  001CD4  D7FA               	bra	u10467
 15041  001CD6  F000               	nop	
 15042                           
 15043                           ;Test.c: 390: updateServoPosition(1390, 3);
 15044  001CD8  0E05               	movlw	5
 15045  001CDA  0100               	movlb	0	; () banked
 15046  001CDC  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 15047  001CDE  0E6E               	movlw	110
 15048  001CE0  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 15049  001CE2  0E00               	movlw	0
 15050  001CE4  0100               	movlb	0	; () banked
 15051  001CE6  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 15052  001CE8  0E03               	movlw	3
 15053  001CEA  6F82               	movwf	updateServoPosition@timer& (0+255),b
 15054  001CEC  ECD0  F023         	call	_updateServoPosition	;wreg free
 15055                           
 15056                           ;Test.c: 391: _delay((unsigned long)((700)*(32000000/4000.0)));
 15057  001CF0  0E1D               	movlw	29
 15058  001CF2  0100               	movlb	0	; () banked
 15059  001CF4  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 15060  001CF6  0E69               	movlw	105
 15061  001CF8  0100               	movlb	0	; () banked
 15062  001CFA  6FAB               	movwf	??_BothServos& (0+255),b
 15063  001CFC  0EA5               	movlw	165
 15064  001CFE                     u10477:
 15065  001CFE  2EE8               	decfsz	wreg,f,c
 15066  001D00  D7FE               	bra	u10477
 15067  001D02  2FAB               	decfsz	??_BothServos& (0+255),f,b
 15068  001D04  D7FC               	bra	u10477
 15069  001D06  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 15070  001D08  D7FA               	bra	u10477
 15071                           
 15072                           ;Test.c: 392: updateServoPosition(1050, 3);
 15073  001D0A  0E04               	movlw	4
 15074  001D0C  0100               	movlb	0	; () banked
 15075  001D0E  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 15076  001D10  0E1A               	movlw	26
 15077  001D12  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 15078  001D14  0E00               	movlw	0
 15079  001D16  0100               	movlb	0	; () banked
 15080  001D18  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 15081  001D1A  0E03               	movlw	3
 15082  001D1C  6F82               	movwf	updateServoPosition@timer& (0+255),b
 15083  001D1E  ECD0  F023         	call	_updateServoPosition	;wreg free
 15084                           
 15085                           ;Test.c: 393: _delay((unsigned long)((750)*(32000000/4000.0)));
 15086  001D22  0E1F               	movlw	31
 15087  001D24  0100               	movlb	0	; () banked
 15088  001D26  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 15089  001D28  0E71               	movlw	113
 15090  001D2A  0100               	movlb	0	; () banked
 15091  001D2C  6FAB               	movwf	??_BothServos& (0+255),b
 15092  001D2E  0E1E               	movlw	30
 15093  001D30                     u10487:
 15094  001D30  2EE8               	decfsz	wreg,f,c
 15095  001D32  D7FE               	bra	u10487
 15096  001D34  2FAB               	decfsz	??_BothServos& (0+255),f,b
 15097  001D36  D7FC               	bra	u10487
 15098  001D38  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 15099  001D3A  D7FA               	bra	u10487
 15100  001D3C  F000               	nop	
 15101                           
 15102                           ;Test.c: 395: updateServoPosition(2400, 1);
 15103  001D3E  0E09               	movlw	9
 15104  001D40  0100               	movlb	0	; () banked
 15105  001D42  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 15106  001D44  0E60               	movlw	96
 15107  001D46  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 15108  001D48  0E00               	movlw	0
 15109  001D4A  0100               	movlb	0	; () banked
 15110  001D4C  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 15111  001D4E  0E01               	movlw	1
 15112  001D50  6F82               	movwf	updateServoPosition@timer& (0+255),b
 15113  001D52  ECD0  F023         	call	_updateServoPosition	;wreg free
 15114                           
 15115                           ;Test.c: 396: updateServoPosition(1050, 3);
 15116  001D56  0E04               	movlw	4
 15117  001D58  0100               	movlb	0	; () banked
 15118  001D5A  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 15119  001D5C  0E1A               	movlw	26
 15120  001D5E  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 15121  001D60  0E00               	movlw	0
 15122  001D62  0100               	movlb	0	; () banked
 15123  001D64  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 15124  001D66  0E03               	movlw	3
 15125  001D68  6F82               	movwf	updateServoPosition@timer& (0+255),b
 15126  001D6A  ECD0  F023         	call	_updateServoPosition	;wreg free
 15127                           
 15128                           ;Test.c: 397: _delay((unsigned long)((750)*(32000000/4000.0)));
 15129  001D6E  0E1F               	movlw	31
 15130  001D70  0100               	movlb	0	; () banked
 15131  001D72  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 15132  001D74  0E71               	movlw	113
 15133  001D76  0100               	movlb	0	; () banked
 15134  001D78  6FAB               	movwf	??_BothServos& (0+255),b
 15135  001D7A  0E1E               	movlw	30
 15136  001D7C                     u10497:
 15137  001D7C  2EE8               	decfsz	wreg,f,c
 15138  001D7E  D7FE               	bra	u10497
 15139  001D80  2FAB               	decfsz	??_BothServos& (0+255),f,b
 15140  001D82  D7FC               	bra	u10497
 15141  001D84  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 15142  001D86  D7FA               	bra	u10497
 15143  001D88  F000               	nop	
 15144                           
 15145                           ;Test.c: 398: updateServoPosition(1390, 3);
 15146  001D8A  0E05               	movlw	5
 15147  001D8C  0100               	movlb	0	; () banked
 15148  001D8E  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 15149  001D90  0E6E               	movlw	110
 15150  001D92  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 15151  001D94  0E00               	movlw	0
 15152  001D96  0100               	movlb	0	; () banked
 15153  001D98  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 15154  001D9A  0E03               	movlw	3
 15155  001D9C  6F82               	movwf	updateServoPosition@timer& (0+255),b
 15156  001D9E  ECD0  F023         	call	_updateServoPosition	;wreg free
 15157                           
 15158                           ;Test.c: 399: _delay((unsigned long)((700)*(32000000/4000.0)));
 15159  001DA2  0E1D               	movlw	29
 15160  001DA4  0100               	movlb	0	; () banked
 15161  001DA6  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 15162  001DA8  0E69               	movlw	105
 15163  001DAA  0100               	movlb	0	; () banked
 15164  001DAC  6FAB               	movwf	??_BothServos& (0+255),b
 15165  001DAE  0EA5               	movlw	165
 15166  001DB0                     u10507:
 15167  001DB0  2EE8               	decfsz	wreg,f,c
 15168  001DB2  D7FE               	bra	u10507
 15169  001DB4  2FAB               	decfsz	??_BothServos& (0+255),f,b
 15170  001DB6  D7FC               	bra	u10507
 15171  001DB8  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 15172  001DBA  D7FA               	bra	u10507
 15173                           
 15174                           ;Test.c: 400: updateServoPosition(1050, 3);
 15175  001DBC  0E04               	movlw	4
 15176  001DBE  0100               	movlb	0	; () banked
 15177  001DC0  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 15178  001DC2  0E1A               	movlw	26
 15179  001DC4  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 15180  001DC6  0E00               	movlw	0
 15181  001DC8  0100               	movlb	0	; () banked
 15182  001DCA  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 15183  001DCC  0E03               	movlw	3
 15184  001DCE  6F82               	movwf	updateServoPosition@timer& (0+255),b
 15185  001DD0  ECD0  F023         	call	_updateServoPosition	;wreg free
 15186                           
 15187                           ;Test.c: 401: _delay((unsigned long)((750)*(32000000/4000.0)));
 15188  001DD4  0E1F               	movlw	31
 15189  001DD6  0100               	movlb	0	; () banked
 15190  001DD8  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 15191  001DDA  0E71               	movlw	113
 15192  001DDC  0100               	movlb	0	; () banked
 15193  001DDE  6FAB               	movwf	??_BothServos& (0+255),b
 15194  001DE0  0E1E               	movlw	30
 15195  001DE2                     u10517:
 15196  001DE2  2EE8               	decfsz	wreg,f,c
 15197  001DE4  D7FE               	bra	u10517
 15198  001DE6  2FAB               	decfsz	??_BothServos& (0+255),f,b
 15199  001DE8  D7FC               	bra	u10517
 15200  001DEA  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 15201  001DEC  D7FA               	bra	u10517
 15202  001DEE  F000               	nop	
 15203                           
 15204                           ;Test.c: 403: TMR1ON = 0;
 15205  001DF0  90CD               	bcf	4045,0,c	;volatile
 15206                           
 15207                           ;Test.c: 404: TMR3ON = 0;
 15208  001DF2  90B1               	bcf	4017,0,c	;volatile
 15209                           
 15210                           ;Test.c: 405: (INTCONbits.GIE = 0);
 15211  001DF4  9EF2               	bcf	intcon,7,c	;volatile
 15212                           
 15213                           ;Test.c: 406: machine_state = Testing_state;
 15214  001DF6  0E03               	movlw	3
 15215  001DF8  0100               	movlb	0	; () banked
 15216  001DFA  6FFC               	movwf	_machine_state& (0+255),b
 15217                           
 15218                           ; BSR set to: 0
 15219  001DFC  0012               	return		;funcret
 15220  001DFE                     __end_of_BothServos:
 15221                           	opt stack 0
 15222                           tblptru	equ	0xFF8
 15223                           tblptrh	equ	0xFF7
 15224                           tblptrl	equ	0xFF6
 15225                           tablat	equ	0xFF5
 15226                           prodh	equ	0xFF4
 15227                           prodl	equ	0xFF3
 15228                           intcon	equ	0xFF2
 15229                           intcon2	equ	0xFF1
 15230                           intcon3	equ	0xFF0
 15231                           postinc0	equ	0xFEE
 15232                           wreg	equ	0xFE8
 15233                           postdec1	equ	0xFE5
 15234                           fsr1l	equ	0xFE1
 15235                           indf2	equ	0xFDF
 15236                           postinc2	equ	0xFDE
 15237                           postdec2	equ	0xFDD
 15238                           fsr2h	equ	0xFDA
 15239                           fsr2l	equ	0xFD9
 15240                           status	equ	0xFD8
 15241                           
 15242 ;; *************** function _initServos *****************
 15243 ;; Defined at:
 15244 ;;		line 436 in file "sort.c"
 15245 ;; Parameters:    Size  Location     Type
 15246 ;;		None
 15247 ;; Auto vars:     Size  Location     Type
 15248 ;;		None
 15249 ;; Return value:  Size  Location     Type
 15250 ;;                  1    wreg      void 
 15251 ;; Registers used:
 15252 ;;		wreg, status,2, status,0, cstack
 15253 ;; Tracked objects:
 15254 ;;		On entry : 0/0
 15255 ;;		On exit  : 0/0
 15256 ;;		Unchanged: 0/0
 15257 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15258 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15259 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15260 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15261 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15262 ;;Total ram usage:        1 bytes
 15263 ;; Hardware stack levels used:    1
 15264 ;; Hardware stack levels required when called:    8
 15265 ;; This function calls:
 15266 ;;		_updateServoPosition
 15267 ;; This function is called by:
 15268 ;;		_Loading
 15269 ;;		_BothServos
 15270 ;;		_PlatformTest
 15271 ;;		_arm
 15272 ;; This function uses a non-reentrant model
 15273 ;;
 15274                           
 15275                           	psect	text48
 15276  0048AA                     __ptext48:
 15277                           	opt stack 0
 15278  0048AA                     _initServos:
 15279                           	opt stack 20
 15280                           
 15281                           ;sort.c: 438: updateServoPosition(1200, 1);
 15282                           
 15283                           ; BSR set to: 0
 15284                           ;incstack = 0
 15285  0048AA  0E04               	movlw	4
 15286  0048AC  0100               	movlb	0	; () banked
 15287  0048AE  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 15288  0048B0  0EB0               	movlw	176
 15289  0048B2  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 15290  0048B4  0E00               	movlw	0
 15291  0048B6  0100               	movlb	0	; () banked
 15292  0048B8  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 15293  0048BA  0E01               	movlw	1
 15294  0048BC  6F82               	movwf	updateServoPosition@timer& (0+255),b
 15295  0048BE  ECD0  F023         	call	_updateServoPosition	;wreg free
 15296                           
 15297                           ;sort.c: 439: updateServoPosition(1050, 3);
 15298  0048C2  0E04               	movlw	4
 15299  0048C4  0100               	movlb	0	; () banked
 15300  0048C6  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 15301  0048C8  0E1A               	movlw	26
 15302  0048CA  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 15303  0048CC  0E00               	movlw	0
 15304  0048CE  0100               	movlb	0	; () banked
 15305  0048D0  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 15306  0048D2  0E03               	movlw	3
 15307  0048D4  6F82               	movwf	updateServoPosition@timer& (0+255),b
 15308  0048D6  ECD0  F023         	call	_updateServoPosition	;wreg free
 15309                           
 15310                           ;sort.c: 440: TMR1ON = 1;
 15311  0048DA  80CD               	bsf	4045,0,c	;volatile
 15312                           
 15313                           ;sort.c: 441: was_low_1 = 0;
 15314  0048DC  0E00               	movlw	0
 15315  0048DE  6E78               	movwf	_was_low_1+1,c	;volatile
 15316  0048E0  0E00               	movlw	0
 15317  0048E2  6E77               	movwf	_was_low_1,c	;volatile
 15318                           
 15319                           ;sort.c: 443: _delay((unsigned long)((5)*(32000000/4000.0)));
 15320  0048E4  0E34               	movlw	52
 15321  0048E6  0100               	movlb	0	; () banked
 15322  0048E8  6F88               	movwf	??_initServos& (0+255),b
 15323  0048EA  0EF1               	movlw	241
 15324  0048EC                     u10527:
 15325  0048EC  2EE8               	decfsz	wreg,f,c
 15326  0048EE  D7FE               	bra	u10527
 15327  0048F0  2F88               	decfsz	??_initServos& (0+255),f,b
 15328  0048F2  D7FC               	bra	u10527
 15329  0048F4  D000               	nop2	
 15330                           
 15331                           ;sort.c: 445: TMR3ON = 1;
 15332  0048F6  80B1               	bsf	4017,0,c	;volatile
 15333                           
 15334                           ;sort.c: 446: was_low_3 = 0;
 15335  0048F8  0E00               	movlw	0
 15336  0048FA  6E7C               	movwf	_was_low_3+1,c	;volatile
 15337  0048FC  0E00               	movlw	0
 15338  0048FE  6E7B               	movwf	_was_low_3,c	;volatile
 15339                           
 15340                           ;sort.c: 449: _delay((unsigned long)((1)*(32000000/4000.0)));
 15341  004900  0E0B               	movlw	11
 15342  004902  0100               	movlb	0	; () banked
 15343  004904  6F88               	movwf	??_initServos& (0+255),b
 15344  004906  0E62               	movlw	98
 15345  004908                     u10537:
 15346  004908  2EE8               	decfsz	wreg,f,c
 15347  00490A  D7FE               	bra	u10537
 15348  00490C  2F88               	decfsz	??_initServos& (0+255),f,b
 15349  00490E  D7FC               	bra	u10537
 15350  004910  F000               	nop	
 15351                           
 15352                           ;sort.c: 450: LATBbits.LATB3 = 1;
 15353  004912  868A               	bsf	3978,3,c	;volatile
 15354                           
 15355                           ;sort.c: 451: TMR2ON = 1;
 15356  004914  84CA               	bsf	4042,2,c	;volatile
 15357                           
 15358                           ;sort.c: 452: was_low_2 = 0;
 15359  004916  0E00               	movlw	0
 15360  004918  6E7A               	movwf	_was_low_2+1,c	;volatile
 15361  00491A  0E00               	movlw	0
 15362  00491C  6E79               	movwf	_was_low_2,c	;volatile
 15363                           
 15364                           ;sort.c: 454: LATCbits.LATC0 = 1;
 15365  00491E  808B               	bsf	3979,0,c	;volatile
 15366  004920  0012               	return		;funcret
 15367  004922                     __end_of_initServos:
 15368                           	opt stack 0
 15369                           tblptru	equ	0xFF8
 15370                           tblptrh	equ	0xFF7
 15371                           tblptrl	equ	0xFF6
 15372                           tablat	equ	0xFF5
 15373                           prodh	equ	0xFF4
 15374                           prodl	equ	0xFF3
 15375                           intcon	equ	0xFF2
 15376                           intcon2	equ	0xFF1
 15377                           intcon3	equ	0xFF0
 15378                           postinc0	equ	0xFEE
 15379                           wreg	equ	0xFE8
 15380                           postdec1	equ	0xFE5
 15381                           fsr1l	equ	0xFE1
 15382                           indf2	equ	0xFDF
 15383                           postinc2	equ	0xFDE
 15384                           postdec2	equ	0xFDD
 15385                           fsr2h	equ	0xFDA
 15386                           fsr2l	equ	0xFD9
 15387                           status	equ	0xFD8
 15388                           
 15389 ;; *************** function _updateServoPosition *****************
 15390 ;; Defined at:
 15391 ;;		line 522 in file "sort.c"
 15392 ;; Parameters:    Size  Location     Type
 15393 ;;  time_us         2    0[BANK0 ] int 
 15394 ;;  timer           2    2[BANK0 ] int 
 15395 ;; Auto vars:     Size  Location     Type
 15396 ;;  my_time         2    6[BANK0 ] unsigned int 
 15397 ;; Return value:  Size  Location     Type
 15398 ;;                  1    wreg      void 
 15399 ;; Registers used:
 15400 ;;		wreg, status,2, status,0
 15401 ;; Tracked objects:
 15402 ;;		On entry : 0/0
 15403 ;;		On exit  : 0/0
 15404 ;;		Unchanged: 0/0
 15405 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15406 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15407 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15408 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15409 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15410 ;;Total ram usage:        8 bytes
 15411 ;; Hardware stack levels used:    1
 15412 ;; Hardware stack levels required when called:    7
 15413 ;; This function calls:
 15414 ;;		Nothing
 15415 ;; This function is called by:
 15416 ;;		_Distribution
 15417 ;;		_initServos
 15418 ;;		_actuatorTest
 15419 ;;		_BothServos
 15420 ;; This function uses a non-reentrant model
 15421 ;;
 15422                           
 15423                           	psect	text49
 15424  0047A0                     __ptext49:
 15425                           	opt stack 0
 15426  0047A0                     _updateServoPosition:
 15427                           	opt stack 20
 15428                           
 15429                           ;sort.c: 523: unsigned int my_time = 65535 - time_us;
 15430                           
 15431                           ;incstack = 0
 15432  0047A0  C080  F084         	movff	updateServoPosition@time_us,??_updateServoPosition
 15433  0047A4  C081  F085         	movff	updateServoPosition@time_us+1,??_updateServoPosition+1
 15434  0047A8  0100               	movlb	0	; () banked
 15435  0047AA  1F84               	comf	??_updateServoPosition& (0+255),f,b
 15436  0047AC  1F85               	comf	(??_updateServoPosition+1)& (0+255),f,b
 15437  0047AE  4B84               	infsnz	??_updateServoPosition& (0+255),f,b
 15438  0047B0  2B85               	incf	(??_updateServoPosition+1)& (0+255),f,b
 15439  0047B2  0EFF               	movlw	255
 15440  0047B4  0100               	movlb	0	; () banked
 15441  0047B6  2584               	addwf	??_updateServoPosition& (0+255),w,b
 15442  0047B8  0100               	movlb	0	; () banked
 15443  0047BA  6F86               	movwf	updateServoPosition@my_time& (0+255),b
 15444  0047BC  0EFF               	movlw	255
 15445  0047BE  0100               	movlb	0	; () banked
 15446  0047C0  2185               	addwfc	(??_updateServoPosition+1)& (0+255),w,b
 15447  0047C2  0100               	movlb	0	; () banked
 15448  0047C4  6F87               	movwf	(updateServoPosition@my_time+1)& (0+255),b
 15449                           
 15450                           ;sort.c: 524: switch(timer){
 15451  0047C6  D01D               	goto	l6598
 15452  0047C8                     l6592:
 15453                           
 15454                           ; BSR set to: 0
 15455                           ;sort.c: 526: servoTimes[0] = my_time >> 8;
 15456  0047C8  0100               	movlb	0	; () banked
 15457  0047CA  5187               	movf	(updateServoPosition@my_time+1)& (0+255),w,b
 15458  0047CC  0100               	movlb	0	; () banked
 15459  0047CE  6FDA               	movwf	_servoTimes& (0+255),b
 15460  0047D0  6BDB               	clrf	(_servoTimes+1)& (0+255),b
 15461                           
 15462                           ;sort.c: 527: servoTimes[1] = my_time & 0xFF;
 15463  0047D2  0100               	movlb	0	; () banked
 15464  0047D4  5186               	movf	updateServoPosition@my_time& (0+255),w,b
 15465  0047D6  0100               	movlb	0	; () banked
 15466  0047D8  6FDC               	movwf	(_servoTimes+2)& (0+255),b
 15467  0047DA  6BDD               	clrf	(_servoTimes+3)& (0+255),b
 15468                           
 15469                           ; BSR set to: 0
 15470                           ;sort.c: 529: pan_servo_state = time_us;
 15471  0047DC  C080  F06B         	movff	updateServoPosition@time_us,_pan_servo_state	;volatile
 15472  0047E0  C081  F06C         	movff	updateServoPosition@time_us+1,_pan_servo_state+1	;volatile
 15473  0047E4                     l890:
 15474                           
 15475                           ; BSR set to: 0
 15476                           ;sort.c: 531: servoTimes[2] = my_time >> 8;
 15477  0047E4  0100               	movlb	0	; () banked
 15478  0047E6  5187               	movf	(updateServoPosition@my_time+1)& (0+255),w,b
 15479  0047E8  0100               	movlb	0	; () banked
 15480  0047EA  6FDE               	movwf	(_servoTimes+4)& (0+255),b
 15481  0047EC  6BDF               	clrf	(_servoTimes+5)& (0+255),b
 15482                           
 15483                           ;sort.c: 532: servoTimes[3] = my_time & 0xFF;
 15484  0047EE  0100               	movlb	0	; () banked
 15485  0047F0  5186               	movf	updateServoPosition@my_time& (0+255),w,b
 15486  0047F2  0100               	movlb	0	; () banked
 15487  0047F4  6FE0               	movwf	(_servoTimes+6)& (0+255),b
 15488  0047F6  6BE1               	clrf	(_servoTimes+7)& (0+255),b
 15489                           
 15490                           ; BSR set to: 0
 15491                           ;sort.c: 534: tilt_servo_state = time_us;
 15492  0047F8  C080  F071         	movff	updateServoPosition@time_us,_tilt_servo_state	;volatile
 15493  0047FC  C081  F072         	movff	updateServoPosition@time_us+1,_tilt_servo_state+1	;volatile
 15494                           
 15495                           ;sort.c: 535: }
 15496  004800  0012               	return	
 15497  004802                     l6598:
 15498                           
 15499                           ; BSR set to: 0
 15500  004802  C082  F084         	movff	updateServoPosition@timer,??_updateServoPosition
 15501  004806  C083  F085         	movff	updateServoPosition@timer+1,??_updateServoPosition+1
 15502                           
 15503                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 15504                           ; Switch size 1, requested type "space"
 15505                           ; Number of cases is 1, Range of values is 0 to 0
 15506                           ; switch strategies available:
 15507                           ; Name         Instructions Cycles
 15508                           ; simple_byte            4     3 (average)
 15509                           ;	Chosen strategy is simple_byte
 15510  00480A  0100               	movlb	0	; () banked
 15511  00480C  5185               	movf	(??_updateServoPosition+1)& (0+255),w,b
 15512  00480E  0A00               	xorlw	0	; case 0
 15513  004810  A4D8               	btfss	status,2,c
 15514  004812  0012               	return	
 15515                           
 15516                           ; BSR set to: 0
 15517                           ; Switch size 1, requested type "space"
 15518                           ; Number of cases is 2, Range of values is 1 to 3
 15519                           ; switch strategies available:
 15520                           ; Name         Instructions Cycles
 15521                           ; simple_byte            7     4 (average)
 15522                           ;	Chosen strategy is simple_byte
 15523  004814  0100               	movlb	0	; () banked
 15524  004816  5184               	movf	??_updateServoPosition& (0+255),w,b
 15525  004818  0A01               	xorlw	1	; case 1
 15526  00481A  B4D8               	btfsc	status,2,c
 15527  00481C  D7D5               	goto	l6592
 15528  00481E  0A02               	xorlw	2	; case 3
 15529  004820  A4D8               	btfss	status,2,c
 15530  004822  0012               	return	
 15531  004824  D7DF               	goto	l890
 15532  004826                     __end_of_updateServoPosition:
 15533                           	opt stack 0
 15534                           tblptru	equ	0xFF8
 15535                           tblptrh	equ	0xFF7
 15536                           tblptrl	equ	0xFF6
 15537                           tablat	equ	0xFF5
 15538                           prodh	equ	0xFF4
 15539                           prodl	equ	0xFF3
 15540                           intcon	equ	0xFF2
 15541                           intcon2	equ	0xFF1
 15542                           intcon3	equ	0xFF0
 15543                           postinc0	equ	0xFEE
 15544                           wreg	equ	0xFE8
 15545                           postdec1	equ	0xFE5
 15546                           fsr1l	equ	0xFE1
 15547                           indf2	equ	0xFDF
 15548                           postinc2	equ	0xFDE
 15549                           postdec2	equ	0xFDD
 15550                           fsr2h	equ	0xFDA
 15551                           fsr2l	equ	0xFD9
 15552                           status	equ	0xFD8
 15553                           
 15554 ;; *************** function _BlockerTest *****************
 15555 ;; Defined at:
 15556 ;;		line 582 in file "Test.c"
 15557 ;; Parameters:    Size  Location     Type
 15558 ;;		None
 15559 ;; Auto vars:     Size  Location     Type
 15560 ;;  i               2   44[BANK0 ] int 
 15561 ;;  cond_flag       2   48[BANK0 ] int 
 15562 ;;  cam_flag        2   46[BANK0 ] int 
 15563 ;; Return value:  Size  Location     Type
 15564 ;;                  1    wreg      void 
 15565 ;; Registers used:
 15566 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15567 ;; Tracked objects:
 15568 ;;		On entry : 0/0
 15569 ;;		On exit  : 0/0
 15570 ;;		Unchanged: 0/0
 15571 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15572 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15573 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15574 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15575 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15576 ;;Total ram usage:        7 bytes
 15577 ;; Hardware stack levels used:    1
 15578 ;; Hardware stack levels required when called:   10
 15579 ;; This function calls:
 15580 ;;		_lcdInst
 15581 ;;		_printf
 15582 ;; This function is called by:
 15583 ;;		_Test
 15584 ;; This function uses a non-reentrant model
 15585 ;;
 15586                           
 15587                           	psect	text50
 15588  0039B6                     __ptext50:
 15589                           	opt stack 0
 15590  0039B6                     _BlockerTest:
 15591                           	opt stack 19
 15592                           
 15593                           ;Test.c: 583: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 15594                           
 15595                           ; BSR set to: 0
 15596                           ;incstack = 0
 15597  0039B6  0E01               	movlw	1
 15598  0039B8  EC72  F02A         	call	_lcdInst
 15599  0039BC  0E68               	movlw	104
 15600  0039BE  0100               	movlb	0	; () banked
 15601  0039C0  6FAB               	movwf	??_BlockerTest& (0+255),b
 15602  0039C2  0EE4               	movlw	228
 15603  0039C4                     u10547:
 15604  0039C4  2EE8               	decfsz	wreg,f,c
 15605  0039C6  D7FE               	bra	u10547
 15606  0039C8  2FAB               	decfsz	??_BlockerTest& (0+255),f,b
 15607  0039CA  D7FC               	bra	u10547
 15608  0039CC  F000               	nop	
 15609  0039CE  0E80               	movlw	128
 15610  0039D0  EC72  F02A         	call	_lcdInst
 15611                           
 15612                           ;Test.c: 584: printf("D: RET|2: COND %d", PORTAbits.RA2);
 15613  0039D4  0E45               	movlw	low STR_120
 15614  0039D6  0100               	movlb	0	; () banked
 15615  0039D8  6F8E               	movwf	printf@f& (0+255),b
 15616  0039DA  0EFB               	movlw	high STR_120
 15617  0039DC  0100               	movlb	0	; () banked
 15618  0039DE  6F8F               	movwf	(printf@f+1)& (0+255),b
 15619  0039E0  A480               	btfss	3968,2,c	;volatile
 15620  0039E2  D004               	goto	u7420
 15621  0039E4  0100               	movlb	0	; () banked
 15622  0039E6  6BAB               	clrf	??_BlockerTest& (0+255),b
 15623  0039E8  2BAB               	incf	??_BlockerTest& (0+255),f,b
 15624  0039EA  D002               	goto	u7428
 15625  0039EC                     u7420:
 15626  0039EC  0100               	movlb	0	; () banked
 15627  0039EE  6BAB               	clrf	??_BlockerTest& (0+255),b
 15628  0039F0                     u7428:
 15629  0039F0  0100               	movlb	0	; () banked
 15630  0039F2  51AB               	movf	??_BlockerTest& (0+255),w,b
 15631  0039F4  0100               	movlb	0	; () banked
 15632  0039F6  6F90               	movwf	(?_printf+2)& (0+255),b
 15633  0039F8  6B91               	clrf	(?_printf+3)& (0+255),b
 15634  0039FA  EC1E  F00B         	call	_printf	;wreg free
 15635                           
 15636                           ;Test.c: 585: lcdInst(0b11000000);;
 15637  0039FE  0EC0               	movlw	192
 15638  003A00  EC72  F02A         	call	_lcdInst
 15639                           
 15640                           ;Test.c: 586: printf("OTHER: CAM TOGGLE");
 15641  003A04  0E33               	movlw	low STR_121
 15642  003A06  0100               	movlb	0	; () banked
 15643  003A08  6F8E               	movwf	printf@f& (0+255),b
 15644  003A0A  0EFB               	movlw	high STR_121
 15645  003A0C  0100               	movlb	0	; () banked
 15646  003A0E  6F8F               	movwf	(printf@f+1)& (0+255),b
 15647  003A10  EC1E  F00B         	call	_printf	;wreg free
 15648                           
 15649                           ;Test.c: 587: int cam_flag = 1;
 15650  003A14  0E00               	movlw	0
 15651  003A16  0100               	movlb	0	; () banked
 15652  003A18  6FAF               	movwf	(BlockerTest@cam_flag+1)& (0+255),b
 15653  003A1A  0E01               	movlw	1
 15654  003A1C  6FAE               	movwf	BlockerTest@cam_flag& (0+255),b
 15655                           
 15656                           ; BSR set to: 0
 15657                           ;Test.c: 588: int cond_flag = 0;
 15658  003A1E  0E00               	movlw	0
 15659  003A20  0100               	movlb	0	; () banked
 15660  003A22  6FB1               	movwf	(BlockerTest@cond_flag+1)& (0+255),b
 15661  003A24  0E00               	movlw	0
 15662  003A26  6FB0               	movwf	BlockerTest@cond_flag& (0+255),b
 15663                           
 15664                           ; BSR set to: 0
 15665                           ;Test.c: 590: while(PORTBbits.RB1 == 0){
 15666                           
 15667                           ;Test.c: 589: while(1){
 15668  003A28  D018               	goto	l8608
 15669  003A2A                     l8604:
 15670                           
 15671                           ;Test.c: 591: lcdInst(0b10000000);;
 15672  003A2A  0E80               	movlw	128
 15673  003A2C  EC72  F02A         	call	_lcdInst
 15674                           
 15675                           ;Test.c: 592: printf("D: RET|2: COND %d", PORTAbits.RA2);
 15676  003A30  0E45               	movlw	low STR_120
 15677  003A32  0100               	movlb	0	; () banked
 15678  003A34  6F8E               	movwf	printf@f& (0+255),b
 15679  003A36  0EFB               	movlw	high STR_120
 15680  003A38  0100               	movlb	0	; () banked
 15681  003A3A  6F8F               	movwf	(printf@f+1)& (0+255),b
 15682  003A3C  A480               	btfss	3968,2,c	;volatile
 15683  003A3E  D004               	goto	u7430
 15684  003A40  0100               	movlb	0	; () banked
 15685  003A42  6BAB               	clrf	??_BlockerTest& (0+255),b
 15686  003A44  2BAB               	incf	??_BlockerTest& (0+255),f,b
 15687  003A46  D002               	goto	u7438
 15688  003A48                     u7430:
 15689  003A48  0100               	movlb	0	; () banked
 15690  003A4A  6BAB               	clrf	??_BlockerTest& (0+255),b
 15691  003A4C                     u7438:
 15692  003A4C  0100               	movlb	0	; () banked
 15693  003A4E  51AB               	movf	??_BlockerTest& (0+255),w,b
 15694  003A50  0100               	movlb	0	; () banked
 15695  003A52  6F90               	movwf	(?_printf+2)& (0+255),b
 15696  003A54  6B91               	clrf	(?_printf+3)& (0+255),b
 15697  003A56  EC1E  F00B         	call	_printf	;wreg free
 15698  003A5A                     l8608:
 15699  003A5A  A281               	btfss	3969,1,c	;volatile
 15700  003A5C  D7E6               	goto	l8604
 15701                           
 15702                           ;Test.c: 593: }
 15703                           ;Test.c: 594: if(PORTB >> 4 == 0b1111){
 15704  003A5E  3881               	swapf	3969,w,c	;volatile
 15705  003A60  0B0F               	andlw	15
 15706  003A62  0A0F               	xorlw	15
 15707  003A64  B4D8               	btfsc	status,2,c
 15708  003A66  0012               	return	
 15709                           
 15710                           ;Test.c: 597: else if(PORTB >> 4 == 0b0001){
 15711                           
 15712                           ;Test.c: 596: }
 15713                           
 15714                           ;Test.c: 595: break;
 15715  003A68  3881               	swapf	3969,w,c	;volatile
 15716  003A6A  0B0F               	andlw	15
 15717  003A6C  06E8               	decf	wreg,f,c
 15718  003A6E  A4D8               	btfss	status,2,c
 15719  003A70  D016               	goto	l8626
 15720                           
 15721                           ;Test.c: 598: if(cond_flag){
 15722  003A72  0100               	movlb	0	; () banked
 15723  003A74  51B0               	movf	BlockerTest@cond_flag& (0+255),w,b
 15724  003A76  0100               	movlb	0	; () banked
 15725  003A78  11B1               	iorwf	(BlockerTest@cond_flag+1)& (0+255),w,b
 15726  003A7A  B4D8               	btfsc	status,2,c
 15727  003A7C  D007               	goto	l1407
 15728                           
 15729                           ; BSR set to: 0
 15730                           ;Test.c: 599: LATAbits.LATA3 = 1;
 15731  003A7E  8689               	bsf	3977,3,c	;volatile
 15732  003A80  D006               	goto	l8624
 15733  003A82                     u7481:
 15734  003A82  0E01               	movlw	1
 15735  003A84                     u7490:
 15736  003A84  0100               	movlb	0	; () banked
 15737  003A86  6FB0               	movwf	BlockerTest@cond_flag& (0+255),b
 15738  003A88  6BB1               	clrf	(BlockerTest@cond_flag+1)& (0+255),b
 15739                           
 15740                           ;Test.c: 601: }
 15741  003A8A  D054               	goto	l8650
 15742  003A8C                     l1407:
 15743                           
 15744                           ; BSR set to: 0
 15745                           ;Test.c: 602: else{
 15746                           ;Test.c: 603: LATAbits.LATA3 = 0;
 15747  003A8C  9689               	bcf	3977,3,c	;volatile
 15748  003A8E                     l8624:
 15749                           
 15750                           ; BSR set to: 0
 15751                           ;Test.c: 604: cond_flag = !cond_flag;
 15752  003A8E  0100               	movlb	0	; () banked
 15753  003A90  51B0               	movf	BlockerTest@cond_flag& (0+255),w,b
 15754  003A92  0100               	movlb	0	; () banked
 15755  003A94  11B1               	iorwf	(BlockerTest@cond_flag+1)& (0+255),w,b
 15756  003A96  B4D8               	btfsc	status,2,c
 15757  003A98  D7F4               	goto	u7481
 15758  003A9A  0E00               	movlw	0
 15759  003A9C  D7F3               	goto	u7490
 15760  003A9E                     l8626:
 15761                           
 15762                           ;Test.c: 607: else{
 15763                           ;Test.c: 608: if(cam_flag){
 15764  003A9E  0100               	movlb	0	; () banked
 15765  003AA0  51AE               	movf	BlockerTest@cam_flag& (0+255),w,b
 15766  003AA2  0100               	movlb	0	; () banked
 15767  003AA4  11AF               	iorwf	(BlockerTest@cam_flag+1)& (0+255),w,b
 15768  003AA6  B4D8               	btfsc	status,2,c
 15769  003AA8  D007               	goto	l8632
 15770                           
 15771                           ; BSR set to: 0
 15772                           ;Test.c: 609: LATCbits.LATC0 = 1;
 15773  003AAA  808B               	bsf	3979,0,c	;volatile
 15774  003AAC  D023               	goto	l8644
 15775  003AAE                     u7531:
 15776  003AAE  0E01               	movlw	1
 15777  003AB0                     u7540:
 15778  003AB0  0100               	movlb	0	; () banked
 15779  003AB2  6FAE               	movwf	BlockerTest@cam_flag& (0+255),b
 15780  003AB4  6BAF               	clrf	(BlockerTest@cam_flag+1)& (0+255),b
 15781                           
 15782                           ;Test.c: 611: }
 15783  003AB6  D03E               	goto	l8650
 15784  003AB8                     l8632:
 15785                           
 15786                           ; BSR set to: 0
 15787                           ;Test.c: 612: else{
 15788                           ;Test.c: 613: for(int i=0;i<5000;i++)
 15789  003AB8  0E00               	movlw	0
 15790  003ABA  0100               	movlb	0	; () banked
 15791  003ABC  6FAD               	movwf	(BlockerTest@i+1)& (0+255),b
 15792  003ABE  0E00               	movlw	0
 15793  003AC0  6FAC               	movwf	BlockerTest@i& (0+255),b
 15794  003AC2                     l8634:
 15795                           
 15796                           ; BSR set to: 0
 15797  003AC2  0100               	movlb	0	; () banked
 15798  003AC4  BFAD               	btfsc	(BlockerTest@i+1)& (0+255),7,b
 15799  003AC6  D008               	goto	l1412
 15800  003AC8  0E88               	movlw	136
 15801  003ACA  0100               	movlb	0	; () banked
 15802  003ACC  5DAC               	subwf	BlockerTest@i& (0+255),w,b
 15803  003ACE  0E13               	movlw	19
 15804  003AD0  0100               	movlb	0	; () banked
 15805  003AD2  59AD               	subwfb	(BlockerTest@i+1)& (0+255),w,b
 15806  003AD4  B0D8               	btfsc	status,0,c
 15807  003AD6  D00D               	goto	l1413
 15808  003AD8                     l1412:
 15809                           
 15810                           ; BSR set to: 0
 15811                           ;Test.c: 614: {
 15812                           ;Test.c: 615: LATCbits.LATC0 = 1;
 15813  003AD8  808B               	bsf	3979,0,c	;volatile
 15814                           
 15815                           ; BSR set to: 0
 15816                           ;Test.c: 616: _delay((unsigned long)((10)*(32000000/4000000.0)));
 15817  003ADA  0E1A               	movlw	26
 15818  003ADC                     u10557:
 15819  003ADC  2EE8               	decfsz	wreg,f,c
 15820  003ADE  D7FE               	bra	u10557
 15821  003AE0  D000               	nop2	
 15822                           
 15823                           ;Test.c: 617: LATCbits.LATC0 = 0;
 15824  003AE2  908B               	bcf	3979,0,c	;volatile
 15825                           
 15826                           ;Test.c: 618: _delay((unsigned long)((90)*(32000000/4000000.0)));
 15827  003AE4  0EF0               	movlw	240
 15828  003AE6                     u10567:
 15829  003AE6  2EE8               	decfsz	wreg,f,c
 15830  003AE8  D7FE               	bra	u10567
 15831  003AEA  0100               	movlb	0	; () banked
 15832  003AEC  4BAC               	infsnz	BlockerTest@i& (0+255),f,b
 15833  003AEE  2BAD               	incf	(BlockerTest@i+1)& (0+255),f,b
 15834  003AF0  D7E8               	goto	l8634
 15835  003AF2                     l1413:
 15836                           
 15837                           ; BSR set to: 0
 15838                           ;Test.c: 619: }
 15839                           ;Test.c: 620: LATCbits.LATC0 = 0;
 15840  003AF2  908B               	bcf	3979,0,c	;volatile
 15841  003AF4                     l8644:
 15842                           
 15843                           ; BSR set to: 0
 15844                           ;Test.c: 621: cam_flag = !cam_flag;
 15845  003AF4  0100               	movlb	0	; () banked
 15846  003AF6  51AE               	movf	BlockerTest@cam_flag& (0+255),w,b
 15847  003AF8  0100               	movlb	0	; () banked
 15848  003AFA  11AF               	iorwf	(BlockerTest@cam_flag+1)& (0+255),w,b
 15849  003AFC  B4D8               	btfsc	status,2,c
 15850  003AFE  D7D7               	goto	u7531
 15851  003B00  0E00               	movlw	0
 15852  003B02  D7D6               	goto	u7540
 15853  003B04                     l8646:
 15854                           
 15855                           ;Test.c: 626: lcdInst(0b10000000);;
 15856  003B04  0E80               	movlw	128
 15857  003B06  EC72  F02A         	call	_lcdInst
 15858                           
 15859                           ;Test.c: 627: printf("D: RET|2: COND %d", PORTAbits.RA2);
 15860  003B0A  0E45               	movlw	low STR_120
 15861  003B0C  0100               	movlb	0	; () banked
 15862  003B0E  6F8E               	movwf	printf@f& (0+255),b
 15863  003B10  0EFB               	movlw	high STR_120
 15864  003B12  0100               	movlb	0	; () banked
 15865  003B14  6F8F               	movwf	(printf@f+1)& (0+255),b
 15866  003B16  A480               	btfss	3968,2,c	;volatile
 15867  003B18  D004               	goto	u7590
 15868  003B1A  0100               	movlb	0	; () banked
 15869  003B1C  6BAB               	clrf	??_BlockerTest& (0+255),b
 15870  003B1E  2BAB               	incf	??_BlockerTest& (0+255),f,b
 15871  003B20  D002               	goto	u7598
 15872  003B22                     u7590:
 15873  003B22  0100               	movlb	0	; () banked
 15874  003B24  6BAB               	clrf	??_BlockerTest& (0+255),b
 15875  003B26                     u7598:
 15876  003B26  0100               	movlb	0	; () banked
 15877  003B28  51AB               	movf	??_BlockerTest& (0+255),w,b
 15878  003B2A  0100               	movlb	0	; () banked
 15879  003B2C  6F90               	movwf	(?_printf+2)& (0+255),b
 15880  003B2E  6B91               	clrf	(?_printf+3)& (0+255),b
 15881  003B30  EC1E  F00B         	call	_printf	;wreg free
 15882  003B34                     l8650:
 15883  003B34  A281               	btfss	3969,1,c	;volatile
 15884  003B36  D791               	goto	l8608
 15885  003B38  D7E5               	goto	l8646
 15886  003B3A                     __end_of_BlockerTest:
 15887                           	opt stack 0
 15888                           tblptru	equ	0xFF8
 15889                           tblptrh	equ	0xFF7
 15890                           tblptrl	equ	0xFF6
 15891                           tablat	equ	0xFF5
 15892                           prodh	equ	0xFF4
 15893                           prodl	equ	0xFF3
 15894                           intcon	equ	0xFF2
 15895                           intcon2	equ	0xFF1
 15896                           intcon3	equ	0xFF0
 15897                           postinc0	equ	0xFEE
 15898                           wreg	equ	0xFE8
 15899                           postdec1	equ	0xFE5
 15900                           fsr1l	equ	0xFE1
 15901                           indf2	equ	0xFDF
 15902                           postinc2	equ	0xFDE
 15903                           postdec2	equ	0xFDD
 15904                           fsr2h	equ	0xFDA
 15905                           fsr2l	equ	0xFD9
 15906                           status	equ	0xFD8
 15907                           
 15908 ;; *************** function _printf *****************
 15909 ;; Defined at:
 15910 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
 15911 ;; Parameters:    Size  Location     Type
 15912 ;;  f               2   14[BANK0 ] PTR const unsigned char 
 15913 ;;		 -> STR_125(17), STR_124(17), STR_123(18), STR_122(18), 
 15914 ;;		 -> STR_121(18), STR_120(18), STR_119(18), STR_118(18), 
 15915 ;;		 -> STR_117(17), STR_116(17), STR_115(17), STR_114(17), 
 15916 ;;		 -> STR_113(17), STR_112(17), STR_111(18), STR_110(17), 
 15917 ;;		 -> STR_109(15), STR_108(15), STR_107(15), STR_106(17), 
 15918 ;;		 -> STR_105(17), STR_104(17), STR_103(16), STR_102(17), 
 15919 ;;		 -> STR_101(17), STR_100(17), STR_99(17), STR_98(17), 
 15920 ;;		 -> STR_97(17), STR_96(15), STR_95(11), STR_94(17), 
 15921 ;;		 -> STR_93(11), STR_92(17), STR_91(14), STR_90(15), 
 15922 ;;		 -> STR_89(14), STR_88(10), STR_87(9), STR_86(9), 
 15923 ;;		 -> STR_85(10), STR_84(10), STR_83(16), STR_82(15), 
 15924 ;;		 -> STR_81(3), STR_80(15), STR_79(13), STR_78(14), 
 15925 ;;		 -> STR_77(8), STR_76(14), STR_75(15), STR_74(12), 
 15926 ;;		 -> STR_73(14), STR_72(17), STR_71(14), STR_70(15), 
 15927 ;;		 -> STR_69(17), STR_68(17), STR_67(7), STR_66(21), 
 15928 ;;		 -> STR_65(13), STR_64(11), STR_63(24), STR_50(17), 
 15929 ;;		 -> STR_49(17), STR_48(17), STR_47(17), STR_46(17), 
 15930 ;;		 -> STR_45(17), STR_44(17), STR_43(17), STR_42(17), 
 15931 ;;		 -> STR_41(17), STR_40(17), STR_39(17), STR_38(17), 
 15932 ;;		 -> STR_37(17), STR_36(17), STR_35(17), STR_34(17), 
 15933 ;;		 -> STR_33(17), STR_32(17), STR_31(17), STR_30(17), 
 15934 ;;		 -> STR_29(3), STR_28(17), STR_27(17), STR_26(17), 
 15935 ;;		 -> STR_25(17), STR_24(17), STR_23(14), STR_22(10), 
 15936 ;;		 -> STR_21(24), STR_7(7), STR_6(17), STR_5(18), 
 15937 ;;		 -> STR_4(16), STR_3(18), STR_2(14), STR_1(18), 
 15938 ;; Auto vars:     Size  Location     Type
 15939 ;;  tmpval          4    0        struct .
 15940 ;;  width           2   41[BANK0 ] int 
 15941 ;;  val             2   37[BANK0 ] unsigned int 
 15942 ;;  len             2   35[BANK0 ] unsigned int 
 15943 ;;  ap              2   33[BANK0 ] PTR void [1]
 15944 ;;		 -> ?i2_printf(2), ?_printf(2), 
 15945 ;;  cp              2   31[BANK0 ] PTR const unsigned char 
 15946 ;;		 -> STR_126(7), count_total(2), printRTC@month(4), UI@month(4), 
 15947 ;;  c               1   40[BANK0 ] char 
 15948 ;;  flag            1   39[BANK0 ] unsigned char 
 15949 ;;  prec            1   30[BANK0 ] char 
 15950 ;; Return value:  Size  Location     Type
 15951 ;;                  2   14[BANK0 ] int 
 15952 ;; Registers used:
 15953 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15954 ;; Tracked objects:
 15955 ;;		On entry : 0/0
 15956 ;;		On exit  : 0/0
 15957 ;;		Unchanged: 0/0
 15958 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15959 ;;      Params:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15960 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15961 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15962 ;;      Totals:         0      29       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15963 ;;Total ram usage:       29 bytes
 15964 ;; Hardware stack levels used:    1
 15965 ;; Hardware stack levels required when called:    9
 15966 ;; This function calls:
 15967 ;;		___lwdiv
 15968 ;;		___lwmod
 15969 ;;		___wmul
 15970 ;;		_isdigit
 15971 ;;		_putch
 15972 ;; This function is called by:
 15973 ;;		_UI
 15974 ;;		_change_state_to_menu_start
 15975 ;;		_change_state_to_menu_12
 15976 ;;		_change_state_to_menu_22
 15977 ;;		_printRTC
 15978 ;;		_EEPROM_write
 15979 ;;		_Test
 15980 ;;		_algorithmTest
 15981 ;;		_sensorTest
 15982 ;;		_actuatorTest
 15983 ;;		_BothServos
 15984 ;;		_PortTestDC
 15985 ;;		_PlatformTest
 15986 ;;		_SpeedTest
 15987 ;;		_BlockerTest
 15988 ;;		_arm
 15989 ;;		_ToggleTestA5
 15990 ;; This function uses a non-reentrant model
 15991 ;;
 15992                           
 15993                           	psect	text51
 15994  00163C                     __ptext51:
 15995                           	opt stack 0
 15996  00163C                     _printf:
 15997                           	opt stack 18
 15998                           
 15999                           ;doprnt.c: 466: va_list ap;
 16000                           ;doprnt.c: 499: signed char c;
 16001                           ;doprnt.c: 501: int width;
 16002                           ;doprnt.c: 506: signed char prec;
 16003                           ;doprnt.c: 508: unsigned char flag;
 16004                           ;doprnt.c: 523: union {
 16005                           ;doprnt.c: 524: unsigned long vd;
 16006                           ;doprnt.c: 525: double integ;
 16007                           ;doprnt.c: 526: } tmpval;
 16008                           ;doprnt.c: 528: unsigned int val;
 16009                           ;doprnt.c: 529: unsigned len;
 16010                           ;doprnt.c: 530: const char * cp;
 16011                           ;doprnt.c: 533: *ap = __va_start();
 16012                           
 16013                           ;incstack = 0
 16014  00163C  0E90               	movlw	low (?_printf+2)
 16015  00163E  0100               	movlb	0	; () banked
 16016  001640  6FA1               	movwf	printf@ap& (0+255),b
 16017  001642  0E00               	movlw	high (?_printf+2)
 16018  001644  0100               	movlb	0	; () banked
 16019  001646  6FA2               	movwf	(printf@ap+1)& (0+255),b
 16020                           
 16021                           ;doprnt.c: 536: while(c = *f++) {
 16022  001648  D205               	goto	l6552
 16023  00164A                     l6422:
 16024                           
 16025                           ; BSR set to: 0
 16026                           ;doprnt.c: 538: if(c != '%')
 16027  00164A  0E25               	movlw	37
 16028  00164C  0100               	movlb	0	; () banked
 16029  00164E  19A8               	xorwf	printf@c& (0+255),w,b
 16030  001650  B4D8               	btfsc	status,2,c
 16031  001652  D005               	goto	l6426
 16032                           
 16033                           ; BSR set to: 0
 16034                           ;doprnt.c: 540: {
 16035                           ;doprnt.c: 541: (putch(c) );
 16036  001654  0100               	movlb	0	; () banked
 16037  001656  51A8               	movf	printf@c& (0+255),w,b
 16038  001658  EC6A  F02A         	call	_putch
 16039                           
 16040                           ;doprnt.c: 542: continue;
 16041  00165C  D1FB               	goto	l6552
 16042  00165E                     l6426:
 16043                           
 16044                           ;doprnt.c: 543: }
 16045                           ;doprnt.c: 546: width = 0;
 16046  00165E  0E00               	movlw	0
 16047  001660  0100               	movlb	0	; () banked
 16048  001662  6FAA               	movwf	(printf@width+1)& (0+255),b
 16049  001664  0E00               	movlw	0
 16050  001666  6FA9               	movwf	printf@width& (0+255),b
 16051                           
 16052                           ;doprnt.c: 548: flag = 0;
 16053  001668  0E00               	movlw	0
 16054  00166A  0100               	movlb	0	; () banked
 16055  00166C  6FA7               	movwf	printf@flag& (0+255),b
 16056                           
 16057                           ; BSR set to: 0
 16058                           ;doprnt.c: 551: switch(*f) {
 16059                           
 16060                           ;doprnt.c: 550: for(;;) {
 16061  00166E  D005               	goto	l6432
 16062  001670                     l6428:
 16063                           
 16064                           ;doprnt.c: 580: flag |= 0x04;
 16065  001670  0100               	movlb	0	; () banked
 16066  001672  85A7               	bsf	printf@flag& (0+255),2,b
 16067                           
 16068                           ;doprnt.c: 581: f++;
 16069  001674  0100               	movlb	0	; () banked
 16070  001676  4B8E               	infsnz	printf@f& (0+255),f,b
 16071  001678  2B8F               	incf	(printf@f+1)& (0+255),f,b
 16072  00167A                     l6432:
 16073  00167A  C08E  FFF6         	movff	printf@f,tblptrl
 16074  00167E  C08F  FFF7         	movff	printf@f+1,tblptrh
 16075  001682                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 16076  001682  6AF8               	clrf	tblptru,c
 16077  001684                     	endif
 16078  001684                     	if	0	;tblptru may be non-zero
 16079  001684                     	endif
 16080  001684  0008               	tblrd		*
 16081  001686  50F5               	movf	tablat,w,c
 16082                           
 16083                           ; Switch size 1, requested type "space"
 16084                           ; Number of cases is 1, Range of values is 48 to 48
 16085                           ; switch strategies available:
 16086                           ; Name         Instructions Cycles
 16087                           ; simple_byte            4     3 (average)
 16088                           ;	Chosen strategy is simple_byte
 16089  001688  0A30               	xorlw	48	; case 48
 16090  00168A  B4D8               	btfsc	status,2,c
 16091  00168C  D7F1               	goto	l6428
 16092                           
 16093                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 16094                           
 16095                           ;doprnt.c: 586: }
 16096                           
 16097                           ;doprnt.c: 585: break;
 16098  00168E  C08E  FFF6         	movff	printf@f,tblptrl
 16099  001692  C08F  FFF7         	movff	printf@f+1,tblptrh
 16100  001696                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 16101  001696  6AF8               	clrf	tblptru,c
 16102  001698                     	endif
 16103  001698                     	if	0	;tblptru may be non-zero
 16104  001698                     	endif
 16105  001698  0008               	tblrd		*
 16106  00169A  50F5               	movf	tablat,w,c
 16107  00169C  EC7E  F029         	call	_isdigit
 16108  0016A0  A0D8               	btfss	status,0,c
 16109  0016A2  D0D2               	goto	l6480
 16110                           
 16111                           ;doprnt.c: 598: width = 0;
 16112  0016A4  0E00               	movlw	0
 16113  0016A6  0100               	movlb	0	; () banked
 16114  0016A8  6FAA               	movwf	(printf@width+1)& (0+255),b
 16115  0016AA  0E00               	movlw	0
 16116  0016AC  6FA9               	movwf	printf@width& (0+255),b
 16117  0016AE                     l6438:
 16118                           
 16119                           ;doprnt.c: 600: width *= 10;
 16120  0016AE  C0A9  F080         	movff	printf@width,___wmul@multiplier
 16121  0016B2  C0AA  F081         	movff	printf@width+1,___wmul@multiplier+1
 16122  0016B6  0E00               	movlw	0
 16123  0016B8  0100               	movlb	0	; () banked
 16124  0016BA  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
 16125  0016BC  0E0A               	movlw	10
 16126  0016BE  6F82               	movwf	___wmul@multiplicand& (0+255),b
 16127  0016C0  ECE7  F027         	call	___wmul	;wreg free
 16128  0016C4  C080  F0A9         	movff	?___wmul,printf@width
 16129  0016C8  C081  F0AA         	movff	?___wmul+1,printf@width+1
 16130                           
 16131                           ;doprnt.c: 601: width += *f++ - '0';
 16132  0016CC  0ED0               	movlw	208
 16133  0016CE  0100               	movlb	0	; () banked
 16134  0016D0  6F9A               	movwf	??_printf& (0+255),b
 16135  0016D2  0EFF               	movlw	255
 16136  0016D4  0100               	movlb	0	; () banked
 16137  0016D6  6F9B               	movwf	(??_printf+1)& (0+255),b
 16138  0016D8  C08E  FFF6         	movff	printf@f,tblptrl
 16139  0016DC  C08F  FFF7         	movff	printf@f+1,tblptrh
 16140  0016E0                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 16141  0016E0  6AF8               	clrf	tblptru,c
 16142  0016E2                     	endif
 16143  0016E2                     	if	0	;tblptru may be non-zero
 16144  0016E2                     	endif
 16145  0016E2  0008               	tblrd		*
 16146  0016E4  50F5               	movf	tablat,w,c
 16147  0016E6  0100               	movlb	0	; () banked
 16148  0016E8  6F9C               	movwf	(??_printf+2)& (0+255),b
 16149  0016EA  6B9D               	clrf	(??_printf+3)& (0+255),b
 16150  0016EC  0100               	movlb	0	; () banked
 16151  0016EE  519A               	movf	??_printf& (0+255),w,b
 16152  0016F0  0100               	movlb	0	; () banked
 16153  0016F2  279C               	addwf	(??_printf+2)& (0+255),f,b
 16154  0016F4  0100               	movlb	0	; () banked
 16155  0016F6  519B               	movf	(??_printf+1)& (0+255),w,b
 16156  0016F8  0100               	movlb	0	; () banked
 16157  0016FA  239D               	addwfc	(??_printf+3)& (0+255),f,b
 16158  0016FC  0100               	movlb	0	; () banked
 16159  0016FE  519C               	movf	(??_printf+2)& (0+255),w,b
 16160  001700  0100               	movlb	0	; () banked
 16161  001702  27A9               	addwf	printf@width& (0+255),f,b
 16162  001704  0100               	movlb	0	; () banked
 16163  001706  519D               	movf	(??_printf+3)& (0+255),w,b
 16164  001708  0100               	movlb	0	; () banked
 16165  00170A  23AA               	addwfc	(printf@width+1)& (0+255),f,b
 16166                           
 16167                           ; BSR set to: 0
 16168  00170C  0100               	movlb	0	; () banked
 16169  00170E  4B8E               	infsnz	printf@f& (0+255),f,b
 16170  001710  2B8F               	incf	(printf@f+1)& (0+255),f,b
 16171                           
 16172                           ; BSR set to: 0
 16173                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 16174  001712  C08E  FFF6         	movff	printf@f,tblptrl
 16175  001716  C08F  FFF7         	movff	printf@f+1,tblptrh
 16176  00171A                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 16177  00171A  6AF8               	clrf	tblptru,c
 16178  00171C                     	endif
 16179  00171C                     	if	0	;tblptru may be non-zero
 16180  00171C                     	endif
 16181  00171C  0008               	tblrd		*
 16182  00171E  50F5               	movf	tablat,w,c
 16183  001720  EC7E  F029         	call	_isdigit
 16184  001724  A0D8               	btfss	status,0,c
 16185  001726  D090               	goto	l6480
 16186  001728  D7C2               	goto	l6438
 16187  00172A                     l6446:
 16188                           
 16189                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
 16190  00172A  C0A1  FFD9         	movff	printf@ap,fsr2l
 16191  00172E  C0A2  FFDA         	movff	printf@ap+1,fsr2h
 16192  001732  CFDE F09F          	movff	postinc2,printf@cp
 16193  001736  CFDD F0A0          	movff	postdec2,printf@cp+1
 16194  00173A  0E02               	movlw	2
 16195  00173C  0100               	movlb	0	; () banked
 16196  00173E  27A1               	addwf	printf@ap& (0+255),f,b
 16197  001740  0E00               	movlw	0
 16198  001742  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
 16199                           
 16200                           ; BSR set to: 0
 16201                           ;doprnt.c: 740: if(!cp)
 16202  001744  0100               	movlb	0	; () banked
 16203  001746  519F               	movf	printf@cp& (0+255),w,b
 16204  001748  0100               	movlb	0	; () banked
 16205  00174A  11A0               	iorwf	(printf@cp+1)& (0+255),w,b
 16206  00174C  A4D8               	btfss	status,2,c
 16207  00174E  D006               	goto	l6454
 16208                           
 16209                           ; BSR set to: 0
 16210                           ;doprnt.c: 741: cp = "(null)";
 16211  001750  0EB5               	movlw	low STR_126
 16212  001752  0100               	movlb	0	; () banked
 16213  001754  6F9F               	movwf	printf@cp& (0+255),b
 16214  001756  0EFF               	movlw	high STR_126
 16215  001758  0100               	movlb	0	; () banked
 16216  00175A  6FA0               	movwf	(printf@cp+1)& (0+255),b
 16217  00175C                     l6454:
 16218                           
 16219                           ; BSR set to: 0
 16220                           ;doprnt.c: 745: len = 0;
 16221  00175C  0E00               	movlw	0
 16222  00175E  0100               	movlb	0	; () banked
 16223  001760  6FA4               	movwf	(printf@len+1)& (0+255),b
 16224  001762  0E00               	movlw	0
 16225  001764  6FA3               	movwf	printf@len& (0+255),b
 16226                           
 16227                           ;doprnt.c: 746: while(cp[len])
 16228  001766  D003               	goto	l6458
 16229  001768                     l6456:
 16230                           
 16231                           ;doprnt.c: 747: len++;
 16232  001768  0100               	movlb	0	; () banked
 16233  00176A  4BA3               	infsnz	printf@len& (0+255),f,b
 16234  00176C  2BA4               	incf	(printf@len+1)& (0+255),f,b
 16235  00176E                     l6458:
 16236                           
 16237                           ; BSR set to: 0
 16238  00176E  0100               	movlb	0	; () banked
 16239  001770  51A3               	movf	printf@len& (0+255),w,b
 16240  001772  0100               	movlb	0	; () banked
 16241  001774  259F               	addwf	printf@cp& (0+255),w,b
 16242  001776  0100               	movlb	0	; () banked
 16243  001778  6F9A               	movwf	??_printf& (0+255),b
 16244  00177A  0100               	movlb	0	; () banked
 16245  00177C  51A4               	movf	(printf@len+1)& (0+255),w,b
 16246  00177E  0100               	movlb	0	; () banked
 16247  001780  21A0               	addwfc	(printf@cp+1)& (0+255),w,b
 16248  001782  0100               	movlb	0	; () banked
 16249  001784  6F9B               	movwf	(??_printf+1)& (0+255),b
 16250  001786  C09A  FFF6         	movff	??_printf,tblptrl
 16251  00178A  C09B  FFF7         	movff	??_printf+1,tblptrh
 16252  00178E  0E00               	movlw	low (__mediumconst shr (0+16))
 16253  001790  6EF8               	movwf	tblptru,c
 16254  001792  0E0F               	movlw	(high __ramtop+-1)
 16255  001794  64F7               	cpfsgt	tblptrh,c
 16256  001796  D003               	bra	u4867
 16257  001798  0008               	tblrd		*
 16258  00179A  50F5               	movf	tablat,w,c
 16259  00179C  D005               	bra	u4860
 16260  00179E                     u4867:
 16261  00179E  CFF6 FFE9          	movff	tblptrl,fsr0l
 16262  0017A2  CFF7 FFEA          	movff	tblptrh,fsr0h
 16263  0017A6  50EF               	movf	indf0,w,c
 16264  0017A8                     u4860:
 16265  0017A8  0900               	iorlw	0
 16266  0017AA  A4D8               	btfss	status,2,c
 16267  0017AC  D7DD               	goto	l6456
 16268                           
 16269                           ;doprnt.c: 757: if(width > len)
 16270  0017AE  0100               	movlb	0	; () banked
 16271  0017B0  51A9               	movf	printf@width& (0+255),w,b
 16272  0017B2  0100               	movlb	0	; () banked
 16273  0017B4  5DA3               	subwf	printf@len& (0+255),w,b
 16274  0017B6  0100               	movlb	0	; () banked
 16275  0017B8  51AA               	movf	(printf@width+1)& (0+255),w,b
 16276  0017BA  0100               	movlb	0	; () banked
 16277  0017BC  59A4               	subwfb	(printf@len+1)& (0+255),w,b
 16278  0017BE  B0D8               	btfsc	status,0,c
 16279  0017C0  D009               	goto	l6464
 16280                           
 16281                           ; BSR set to: 0
 16282                           ;doprnt.c: 758: width -= len;
 16283  0017C2  0100               	movlb	0	; () banked
 16284  0017C4  51A3               	movf	printf@len& (0+255),w,b
 16285  0017C6  0100               	movlb	0	; () banked
 16286  0017C8  5FA9               	subwf	printf@width& (0+255),f,b
 16287  0017CA  0100               	movlb	0	; () banked
 16288  0017CC  51A4               	movf	(printf@len+1)& (0+255),w,b
 16289  0017CE  0100               	movlb	0	; () banked
 16290  0017D0  5BAA               	subwfb	(printf@width+1)& (0+255),f,b
 16291  0017D2  D009               	goto	l6468
 16292  0017D4                     l6464:
 16293                           
 16294                           ; BSR set to: 0
 16295                           ;doprnt.c: 759: else
 16296                           ;doprnt.c: 760: width = 0;
 16297  0017D4  0E00               	movlw	0
 16298  0017D6  0100               	movlb	0	; () banked
 16299  0017D8  6FAA               	movwf	(printf@width+1)& (0+255),b
 16300  0017DA  0E00               	movlw	0
 16301  0017DC  6FA9               	movwf	printf@width& (0+255),b
 16302                           
 16303                           ; BSR set to: 0
 16304                           ;doprnt.c: 764: while(width--)
 16305  0017DE  D003               	goto	l6468
 16306  0017E0                     l6466:
 16307                           
 16308                           ; BSR set to: 0
 16309                           ;doprnt.c: 765: (putch(' ') );
 16310  0017E0  0E20               	movlw	32
 16311  0017E2  EC6A  F02A         	call	_putch
 16312  0017E6                     l6468:
 16313  0017E6  0100               	movlb	0	; () banked
 16314  0017E8  07A9               	decf	printf@width& (0+255),f,b
 16315  0017EA  A0D8               	btfss	status,0,c
 16316  0017EC  07AA               	decf	(printf@width+1)& (0+255),f,b
 16317  0017EE  0100               	movlb	0	; () banked
 16318  0017F0  29A9               	incf	printf@width& (0+255),w,b
 16319  0017F2  E1F6               	bnz	l6466
 16320  0017F4  0100               	movlb	0	; () banked
 16321  0017F6  29AA               	incf	(printf@width+1)& (0+255),w,b
 16322  0017F8  B4D8               	btfsc	status,2,c
 16323  0017FA  D017               	goto	l6474
 16324  0017FC  D7F1               	goto	l6466
 16325  0017FE                     l6470:
 16326                           
 16327                           ; BSR set to: 0
 16328                           ;doprnt.c: 768: (putch(*cp++) );
 16329  0017FE  C09F  FFF6         	movff	printf@cp,tblptrl
 16330  001802  C0A0  FFF7         	movff	printf@cp+1,tblptrh
 16331  001806  0E00               	movlw	low (__mediumconst shr (0+16))
 16332  001808  6EF8               	movwf	tblptru,c
 16333  00180A  0E0F               	movlw	(high __ramtop+-1)
 16334  00180C  64F7               	cpfsgt	tblptrh,c
 16335  00180E  D003               	bra	u4907
 16336  001810  0008               	tblrd		*
 16337  001812  50F5               	movf	tablat,w,c
 16338  001814  D005               	bra	u4900
 16339  001816                     u4907:
 16340  001816  CFF6 FFE9          	movff	tblptrl,fsr0l
 16341  00181A  CFF7 FFEA          	movff	tblptrh,fsr0h
 16342  00181E  50EF               	movf	indf0,w,c
 16343  001820                     u4900:
 16344  001820  EC6A  F02A         	call	_putch
 16345  001824  0100               	movlb	0	; () banked
 16346  001826  4B9F               	infsnz	printf@cp& (0+255),f,b
 16347  001828  2BA0               	incf	(printf@cp+1)& (0+255),f,b
 16348  00182A                     l6474:
 16349                           
 16350                           ; BSR set to: 0
 16351  00182A  0100               	movlb	0	; () banked
 16352  00182C  07A3               	decf	printf@len& (0+255),f,b
 16353  00182E  A0D8               	btfss	status,0,c
 16354  001830  07A4               	decf	(printf@len+1)& (0+255),f,b
 16355  001832  0100               	movlb	0	; () banked
 16356  001834  29A3               	incf	printf@len& (0+255),w,b
 16357  001836  E1E3               	bnz	l6470
 16358  001838  0100               	movlb	0	; () banked
 16359  00183A  29A4               	incf	(printf@len+1)& (0+255),w,b
 16360  00183C  B4D8               	btfsc	status,2,c
 16361  00183E  D10A               	goto	l6552
 16362  001840  D7DE               	goto	l6470
 16363  001842                     l6476:
 16364                           
 16365                           ; BSR set to: 0
 16366                           ;doprnt.c: 818: flag |= 0x40;
 16367  001842  0100               	movlb	0	; () banked
 16368  001844  8DA7               	bsf	printf@flag& (0+255),6,b
 16369                           
 16370                           ; BSR set to: 0
 16371                           ;doprnt.c: 822: }
 16372                           
 16373                           ;doprnt.c: 819: break;
 16374  001846  D01D               	goto	l1470
 16375  001848                     l6480:
 16376  001848  C08E  FFF6         	movff	printf@f,tblptrl
 16377  00184C  C08F  FFF7         	movff	printf@f+1,tblptrh
 16378  001850  0100               	movlb	0	; () banked
 16379  001852  4B8E               	infsnz	printf@f& (0+255),f,b
 16380  001854  2B8F               	incf	(printf@f+1)& (0+255),f,b
 16381  001856                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 16382  001856  6AF8               	clrf	tblptru,c
 16383  001858                     	endif
 16384  001858                     	if	0	;tblptru may be non-zero
 16385  001858                     	endif
 16386  001858  0008               	tblrd		*
 16387  00185A  CFF5 F0A8          	movff	tablat,printf@c
 16388  00185E  0100               	movlb	0	; () banked
 16389  001860  51A8               	movf	printf@c& (0+255),w,b
 16390                           
 16391                           ; Switch size 1, requested type "space"
 16392                           ; Number of cases is 5, Range of values is 0 to 117
 16393                           ; switch strategies available:
 16394                           ; Name         Instructions Cycles
 16395                           ; simple_byte           16     9 (average)
 16396                           ;	Chosen strategy is simple_byte
 16397  001862  0A00               	xorlw	0	; case 0
 16398  001864  B4D8               	btfsc	status,2,c
 16399  001866  0012               	return	
 16400  001868  0A64               	xorlw	100	; case 100
 16401  00186A  B4D8               	btfsc	status,2,c
 16402  00186C  D00A               	goto	l1470
 16403  00186E  0A0D               	xorlw	13	; case 105
 16404  001870  B4D8               	btfsc	status,2,c
 16405  001872  D007               	goto	l1470
 16406  001874  0A1A               	xorlw	26	; case 115
 16407  001876  B4D8               	btfsc	status,2,c
 16408  001878  D758               	goto	l6446
 16409  00187A  0A06               	xorlw	6	; case 117
 16410  00187C  B4D8               	btfsc	status,2,c
 16411  00187E  D7E1               	goto	l6476
 16412  001880  D0E9               	goto	l6552
 16413  001882                     l1470:
 16414                           
 16415                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
 16416  001882  0100               	movlb	0	; () banked
 16417  001884  BDA7               	btfsc	printf@flag& (0+255),6,b
 16418  001886  D019               	goto	l6492
 16419                           
 16420                           ; BSR set to: 0
 16421                           ;doprnt.c: 1253: {
 16422                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 16423  001888  C0A1  FFD9         	movff	printf@ap,fsr2l
 16424  00188C  C0A2  FFDA         	movff	printf@ap+1,fsr2h
 16425  001890  CFDE F0A5          	movff	postinc2,printf@val
 16426  001894  CFDD F0A6          	movff	postdec2,printf@val+1
 16427                           
 16428                           ; BSR set to: 0
 16429  001898  0E02               	movlw	2
 16430  00189A  0100               	movlb	0	; () banked
 16431  00189C  27A1               	addwf	printf@ap& (0+255),f,b
 16432  00189E  0E00               	movlw	0
 16433  0018A0  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
 16434                           
 16435                           ; BSR set to: 0
 16436                           ;doprnt.c: 1261: if((int)val < 0) {
 16437  0018A2  0100               	movlb	0	; () banked
 16438  0018A4  AFA6               	btfss	(printf@val+1)& (0+255),7,b
 16439  0018A6  D016               	goto	l6496
 16440                           
 16441                           ; BSR set to: 0
 16442                           ;doprnt.c: 1262: flag |= 0x03;
 16443  0018A8  0E03               	movlw	3
 16444  0018AA  0100               	movlb	0	; () banked
 16445  0018AC  13A7               	iorwf	printf@flag& (0+255),f,b
 16446                           
 16447                           ; BSR set to: 0
 16448                           ;doprnt.c: 1263: val = -val;
 16449  0018AE  0100               	movlb	0	; () banked
 16450  0018B0  6DA5               	negf	printf@val& (0+255),b
 16451  0018B2  1FA6               	comf	(printf@val+1)& (0+255),f,b
 16452  0018B4  B0D8               	btfsc	status,0,c
 16453  0018B6  2BA6               	incf	(printf@val+1)& (0+255),f,b
 16454                           
 16455                           ; BSR set to: 0
 16456                           ;doprnt.c: 1264: }
 16457                           ;doprnt.c: 1266: }
 16458  0018B8  D00D               	goto	l6496
 16459  0018BA                     l6492:
 16460                           
 16461                           ; BSR set to: 0
 16462                           ;doprnt.c: 1268: else
 16463                           ;doprnt.c: 1273: {
 16464                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 16465  0018BA  C0A1  FFD9         	movff	printf@ap,fsr2l
 16466  0018BE  C0A2  FFDA         	movff	printf@ap+1,fsr2h
 16467  0018C2  CFDE F0A5          	movff	postinc2,printf@val
 16468  0018C6  CFDD F0A6          	movff	postdec2,printf@val+1
 16469                           
 16470                           ; BSR set to: 0
 16471  0018CA  0E02               	movlw	2
 16472  0018CC  0100               	movlb	0	; () banked
 16473  0018CE  27A1               	addwf	printf@ap& (0+255),f,b
 16474  0018D0  0E00               	movlw	0
 16475  0018D2  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
 16476  0018D4                     l6496:
 16477                           
 16478                           ; BSR set to: 0
 16479                           ;doprnt.c: 1287: }
 16480                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 16481  0018D4  0E01               	movlw	1
 16482  0018D6  0100               	movlb	0	; () banked
 16483  0018D8  6FA8               	movwf	printf@c& (0+255),b
 16484  0018DA                     l6498:
 16485                           
 16486                           ; BSR set to: 0
 16487  0018DA  0E05               	movlw	5
 16488  0018DC  0100               	movlb	0	; () banked
 16489  0018DE  19A8               	xorwf	printf@c& (0+255),w,b
 16490  0018E0  B4D8               	btfsc	status,2,c
 16491  0018E2  D019               	goto	l6510
 16492                           
 16493                           ; BSR set to: 0
 16494                           ;doprnt.c: 1306: if(val < dpowers[c])
 16495                           
 16496                           ; BSR set to: 0
 16497                           
 16498                           ; BSR set to: 0
 16499  0018E4  0100               	movlb	0	; () banked
 16500  0018E6  51A8               	movf	printf@c& (0+255),w,b
 16501  0018E8  0D02               	mullw	2
 16502  0018EA  0EC6               	movlw	low _dpowers
 16503  0018EC  24F3               	addwf	prodl,w,c
 16504  0018EE  6EF6               	movwf	tblptrl,c
 16505  0018F0  0EFA               	movlw	high _dpowers
 16506  0018F2  20F4               	addwfc	prodh,w,c
 16507  0018F4  6EF7               	movwf	tblptrh,c
 16508  0018F6                     	if	1	;There are 3 active tblptr bytes
 16509  0018F6  6AF8               	clrf	tblptru,c
 16510  0018F8  0E00               	movlw	low (__mediumconst shr (0+16))
 16511  0018FA  22F8               	addwfc	tblptru,f,c
 16512  0018FC                     	endif
 16513  0018FC  0009               	tblrd		*+
 16514  0018FE  50F5               	movf	tablat,w,c
 16515  001900  0100               	movlb	0	; () banked
 16516  001902  5DA5               	subwf	printf@val& (0+255),w,b
 16517  001904  0009               	tblrd		*+
 16518  001906  50F5               	movf	tablat,w,c
 16519  001908  0100               	movlb	0	; () banked
 16520  00190A  59A6               	subwfb	(printf@val+1)& (0+255),w,b
 16521  00190C  A0D8               	btfss	status,0,c
 16522  00190E  D003               	goto	l6510
 16523                           
 16524                           ; BSR set to: 0
 16525                           
 16526                           ; BSR set to: 0
 16527                           
 16528                           ; BSR set to: 0
 16529                           ;doprnt.c: 1307: break;
 16530  001910  0100               	movlb	0	; () banked
 16531  001912  2BA8               	incf	printf@c& (0+255),f,b
 16532  001914  D7E2               	goto	l6498
 16533  001916                     l6510:
 16534                           
 16535                           ; BSR set to: 0
 16536                           ;doprnt.c: 1345: if(width && flag & 0x03)
 16537  001916  0100               	movlb	0	; () banked
 16538  001918  51A9               	movf	printf@width& (0+255),w,b
 16539  00191A  0100               	movlb	0	; () banked
 16540  00191C  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 16541  00191E  B4D8               	btfsc	status,2,c
 16542  001920  D00B               	goto	l6516
 16543                           
 16544                           ; BSR set to: 0
 16545  001922  C0A7  F09A         	movff	printf@flag,??_printf
 16546  001926  0E03               	movlw	3
 16547  001928  0100               	movlb	0	; () banked
 16548  00192A  179A               	andwf	??_printf& (0+255),f,b
 16549  00192C  B4D8               	btfsc	status,2,c
 16550  00192E  D004               	goto	l6516
 16551                           
 16552                           ; BSR set to: 0
 16553                           ;doprnt.c: 1346: width--;
 16554  001930  0100               	movlb	0	; () banked
 16555  001932  07A9               	decf	printf@width& (0+255),f,b
 16556  001934  A0D8               	btfss	status,0,c
 16557  001936  07AA               	decf	(printf@width+1)& (0+255),f,b
 16558  001938                     l6516:
 16559                           
 16560                           ; BSR set to: 0
 16561                           ;doprnt.c: 1381: if(width > c)
 16562  001938  0E80               	movlw	128
 16563  00193A  0100               	movlb	0	; () banked
 16564  00193C  BFA8               	btfsc	printf@c& (0+255),7,b
 16565  00193E  0E7F               	movlw	127
 16566  001940  0100               	movlb	0	; () banked
 16567  001942  6F9A               	movwf	??_printf& (0+255),b
 16568  001944  0100               	movlb	0	; () banked
 16569  001946  51A9               	movf	printf@width& (0+255),w,b
 16570  001948  0100               	movlb	0	; () banked
 16571  00194A  5DA8               	subwf	printf@c& (0+255),w,b
 16572  00194C  0100               	movlb	0	; () banked
 16573  00194E  51AA               	movf	(printf@width+1)& (0+255),w,b
 16574  001950  0A80               	xorlw	128
 16575  001952  0100               	movlb	0	; () banked
 16576  001954  599A               	subwfb	??_printf& (0+255),w,b
 16577  001956  B0D8               	btfsc	status,0,c
 16578  001958  D00B               	goto	l6520
 16579                           
 16580                           ; BSR set to: 0
 16581                           ;doprnt.c: 1382: width -= c;
 16582  00195A  0100               	movlb	0	; () banked
 16583  00195C  51A8               	movf	printf@c& (0+255),w,b
 16584  00195E  0100               	movlb	0	; () banked
 16585  001960  5FA9               	subwf	printf@width& (0+255),f,b
 16586  001962  0E00               	movlw	0
 16587  001964  0100               	movlb	0	; () banked
 16588  001966  BFA8               	btfsc	printf@c& (0+255),7,b
 16589  001968  0EFF               	movlw	255
 16590  00196A  0100               	movlb	0	; () banked
 16591  00196C  5BAA               	subwfb	(printf@width+1)& (0+255),f,b
 16592  00196E  D005               	goto	l6522
 16593  001970                     l6520:
 16594                           
 16595                           ; BSR set to: 0
 16596                           ;doprnt.c: 1383: else
 16597                           ;doprnt.c: 1384: width = 0;
 16598  001970  0E00               	movlw	0
 16599  001972  0100               	movlb	0	; () banked
 16600  001974  6FAA               	movwf	(printf@width+1)& (0+255),b
 16601  001976  0E00               	movlw	0
 16602  001978  6FA9               	movwf	printf@width& (0+255),b
 16603  00197A                     l6522:
 16604                           
 16605                           ; BSR set to: 0
 16606                           ;doprnt.c: 1387: if(flag & 0x04) {
 16607  00197A  0100               	movlb	0	; () banked
 16608  00197C  A5A7               	btfss	printf@flag& (0+255),2,b
 16609  00197E  D018               	goto	l6534
 16610                           
 16611                           ; BSR set to: 0
 16612                           ;doprnt.c: 1392: if(flag & 0x03)
 16613  001980  C0A7  F09A         	movff	printf@flag,??_printf
 16614  001984  0E03               	movlw	3
 16615  001986  0100               	movlb	0	; () banked
 16616  001988  179A               	andwf	??_printf& (0+255),f,b
 16617  00198A  B4D8               	btfsc	status,2,c
 16618  00198C  D003               	goto	l6528
 16619                           
 16620                           ; BSR set to: 0
 16621                           ;doprnt.c: 1393: (putch('-') );
 16622  00198E  0E2D               	movlw	45
 16623  001990  EC6A  F02A         	call	_putch
 16624  001994                     l6528:
 16625                           
 16626                           ;doprnt.c: 1415: if(width)
 16627  001994  0100               	movlb	0	; () banked
 16628  001996  51A9               	movf	printf@width& (0+255),w,b
 16629  001998  0100               	movlb	0	; () banked
 16630  00199A  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 16631  00199C  B4D8               	btfsc	status,2,c
 16632  00199E  D025               	goto	l6544
 16633                           
 16634                           ; BSR set to: 0
 16635                           ;doprnt.c: 1417: (putch('0') );
 16636                           
 16637                           ; BSR set to: 0
 16638                           
 16639                           ;doprnt.c: 1416: do
 16640  0019A0  0E30               	movlw	48
 16641  0019A2  EC6A  F02A         	call	_putch
 16642                           
 16643                           ;doprnt.c: 1418: while(--width);
 16644  0019A6  0100               	movlb	0	; () banked
 16645  0019A8  07A9               	decf	printf@width& (0+255),f,b
 16646  0019AA  A0D8               	btfss	status,0,c
 16647  0019AC  07AA               	decf	(printf@width+1)& (0+255),f,b
 16648  0019AE  D7F2               	goto	l6528
 16649  0019B0                     l6534:
 16650                           
 16651                           ; BSR set to: 0
 16652                           ;doprnt.c: 1422: {
 16653                           ;doprnt.c: 1424: if(width
 16654                           ;doprnt.c: 1428: )
 16655  0019B0  0100               	movlb	0	; () banked
 16656  0019B2  51A9               	movf	printf@width& (0+255),w,b
 16657  0019B4  0100               	movlb	0	; () banked
 16658  0019B6  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 16659  0019B8  B4D8               	btfsc	status,2,c
 16660  0019BA  D00D               	goto	l6540
 16661  0019BC                     l6536:
 16662                           
 16663                           ; BSR set to: 0
 16664                           ;doprnt.c: 1430: (putch(' ') );
 16665  0019BC  0E20               	movlw	32
 16666  0019BE  EC6A  F02A         	call	_putch
 16667                           
 16668                           ;doprnt.c: 1431: while(--width);
 16669  0019C2  0100               	movlb	0	; () banked
 16670  0019C4  07A9               	decf	printf@width& (0+255),f,b
 16671  0019C6  A0D8               	btfss	status,0,c
 16672  0019C8  07AA               	decf	(printf@width+1)& (0+255),f,b
 16673  0019CA  0100               	movlb	0	; () banked
 16674  0019CC  51A9               	movf	printf@width& (0+255),w,b
 16675  0019CE  0100               	movlb	0	; () banked
 16676  0019D0  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 16677  0019D2  A4D8               	btfss	status,2,c
 16678  0019D4  D7F3               	goto	l6536
 16679  0019D6                     l6540:
 16680                           
 16681                           ; BSR set to: 0
 16682                           ;doprnt.c: 1438: if(flag & 0x03)
 16683  0019D6  C0A7  F09A         	movff	printf@flag,??_printf
 16684  0019DA  0E03               	movlw	3
 16685  0019DC  0100               	movlb	0	; () banked
 16686  0019DE  179A               	andwf	??_printf& (0+255),f,b
 16687  0019E0  B4D8               	btfsc	status,2,c
 16688  0019E2  D003               	goto	l6544
 16689                           
 16690                           ; BSR set to: 0
 16691                           ;doprnt.c: 1439: (putch('-') );
 16692  0019E4  0E2D               	movlw	45
 16693  0019E6  EC6A  F02A         	call	_putch
 16694  0019EA                     l6544:
 16695                           
 16696                           ;doprnt.c: 1469: }
 16697                           ;doprnt.c: 1472: prec = c;
 16698  0019EA  C0A8  F09E         	movff	printf@c,printf@prec
 16699                           
 16700                           ;doprnt.c: 1474: while(prec--) {
 16701  0019EE  D02C               	goto	l6550
 16702  0019F0                     l6546:
 16703                           
 16704                           ;doprnt.c: 1478: {
 16705                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 16706  0019F0  0100               	movlb	0	; () banked
 16707  0019F2  519E               	movf	printf@prec& (0+255),w,b
 16708  0019F4  0D02               	mullw	2
 16709  0019F6  0EC6               	movlw	low _dpowers
 16710  0019F8  24F3               	addwf	prodl,w,c
 16711  0019FA  6EF6               	movwf	tblptrl,c
 16712  0019FC  0EFA               	movlw	high _dpowers
 16713  0019FE  20F4               	addwfc	prodh,w,c
 16714  001A00  6EF7               	movwf	tblptrh,c
 16715  001A02                     	if	1	;There are 3 active tblptr bytes
 16716  001A02  6AF8               	clrf	tblptru,c
 16717  001A04  0E00               	movlw	low (__mediumconst shr (0+16))
 16718  001A06  22F8               	addwfc	tblptru,f,c
 16719  001A08                     	endif
 16720  001A08  0009               	tblrd		*+
 16721  001A0A  CFF5 F082          	movff	tablat,___lwdiv@divisor
 16722  001A0E  000A               	tblrd		*-
 16723  001A10  CFF5 F083          	movff	tablat,___lwdiv@divisor+1
 16724  001A14  C0A5  F080         	movff	printf@val,___lwdiv@dividend
 16725  001A18  C0A6  F081         	movff	printf@val+1,___lwdiv@dividend+1
 16726  001A1C  EC91  F024         	call	___lwdiv	;wreg free
 16727  001A20  C080  F087         	movff	?___lwdiv,___lwmod@dividend
 16728  001A24  C081  F088         	movff	?___lwdiv+1,___lwmod@dividend+1
 16729  001A28  0E00               	movlw	0
 16730  001A2A  0100               	movlb	0	; () banked
 16731  001A2C  6F8A               	movwf	(___lwmod@divisor+1)& (0+255),b
 16732  001A2E  0E0A               	movlw	10
 16733  001A30  6F89               	movwf	___lwmod@divisor& (0+255),b
 16734  001A32  ECDD  F025         	call	___lwmod	;wreg free
 16735  001A36  0100               	movlb	0	; () banked
 16736  001A38  5187               	movf	?___lwmod& (0+255),w,b
 16737  001A3A  0F30               	addlw	48
 16738  001A3C  0100               	movlb	0	; () banked
 16739  001A3E  6FA8               	movwf	printf@c& (0+255),b
 16740                           
 16741                           ; BSR set to: 0
 16742                           ;doprnt.c: 1523: }
 16743                           ;doprnt.c: 1524: (putch(c) );
 16744  001A40  0100               	movlb	0	; () banked
 16745  001A42  51A8               	movf	printf@c& (0+255),w,b
 16746  001A44  EC6A  F02A         	call	_putch
 16747  001A48                     l6550:
 16748  001A48  0100               	movlb	0	; () banked
 16749  001A4A  079E               	decf	printf@prec& (0+255),f,b
 16750  001A4C  0100               	movlb	0	; () banked
 16751  001A4E  299E               	incf	printf@prec& (0+255),w,b
 16752  001A50  A4D8               	btfss	status,2,c
 16753  001A52  D7CE               	goto	l6546
 16754  001A54                     l6552:
 16755  001A54  C08E  FFF6         	movff	printf@f,tblptrl
 16756  001A58  C08F  FFF7         	movff	printf@f+1,tblptrh
 16757  001A5C  0100               	movlb	0	; () banked
 16758  001A5E  4B8E               	infsnz	printf@f& (0+255),f,b
 16759  001A60  2B8F               	incf	(printf@f+1)& (0+255),f,b
 16760  001A62                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 16761  001A62  6AF8               	clrf	tblptru,c
 16762  001A64                     	endif
 16763  001A64                     	if	0	;tblptru may be non-zero
 16764  001A64                     	endif
 16765  001A64  0008               	tblrd		*
 16766  001A66  CFF5 F0A8          	movff	tablat,printf@c
 16767  001A6A  0100               	movlb	0	; () banked
 16768  001A6C  51A8               	movf	printf@c& (0+255),w,b
 16769  001A6E  B4D8               	btfsc	status,2,c
 16770  001A70  0012               	return	
 16771  001A72  D5EB               	goto	l6422
 16772  001A74                     __end_of_printf:
 16773                           	opt stack 0
 16774                           tblptru	equ	0xFF8
 16775                           tblptrh	equ	0xFF7
 16776                           tblptrl	equ	0xFF6
 16777                           tablat	equ	0xFF5
 16778                           prodh	equ	0xFF4
 16779                           prodl	equ	0xFF3
 16780                           intcon	equ	0xFF2
 16781                           intcon2	equ	0xFF1
 16782                           intcon3	equ	0xFF0
 16783                           indf0	equ	0xFEF
 16784                           postinc0	equ	0xFEE
 16785                           fsr0h	equ	0xFEA
 16786                           fsr0l	equ	0xFE9
 16787                           wreg	equ	0xFE8
 16788                           postdec1	equ	0xFE5
 16789                           fsr1l	equ	0xFE1
 16790                           indf2	equ	0xFDF
 16791                           postinc2	equ	0xFDE
 16792                           postdec2	equ	0xFDD
 16793                           fsr2h	equ	0xFDA
 16794                           fsr2l	equ	0xFD9
 16795                           status	equ	0xFD8
 16796                           
 16797 ;; *************** function _putch *****************
 16798 ;; Defined at:
 16799 ;;		line 20 in file "lcd.c"
 16800 ;; Parameters:    Size  Location     Type
 16801 ;;  data            1    wreg     unsigned char 
 16802 ;; Auto vars:     Size  Location     Type
 16803 ;;  data            1    2[BANK0 ] unsigned char 
 16804 ;; Return value:  Size  Location     Type
 16805 ;;                  1    wreg      void 
 16806 ;; Registers used:
 16807 ;;		wreg, status,2, status,0, cstack
 16808 ;; Tracked objects:
 16809 ;;		On entry : 0/0
 16810 ;;		On exit  : 0/0
 16811 ;;		Unchanged: 0/0
 16812 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16813 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16814 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16815 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16816 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16817 ;;Total ram usage:        1 bytes
 16818 ;; Hardware stack levels used:    1
 16819 ;; Hardware stack levels required when called:    8
 16820 ;; This function calls:
 16821 ;;		_lcdNibble
 16822 ;; This function is called by:
 16823 ;;		_printf
 16824 ;; This function uses a non-reentrant model
 16825 ;;
 16826                           
 16827                           	psect	text52
 16828  0054D4                     __ptext52:
 16829                           	opt stack 0
 16830  0054D4                     _putch:
 16831                           	opt stack 18
 16832                           
 16833                           ;incstack = 0
 16834                           ;putch@data stored from wreg
 16835  0054D4  0100               	movlb	0	; () banked
 16836  0054D6  6F82               	movwf	putch@data& (0+255),b
 16837                           
 16838                           ;lcd.c: 21: LATDbits.LATD2 = 1;
 16839  0054D8  848C               	bsf	3980,2,c	;volatile
 16840                           
 16841                           ;lcd.c: 22: lcdNibble(data);
 16842  0054DA  0100               	movlb	0	; () banked
 16843  0054DC  5182               	movf	putch@data& (0+255),w,b
 16844  0054DE  EC77  F025         	call	_lcdNibble
 16845  0054E2  0012               	return		;funcret
 16846  0054E4                     __end_of_putch:
 16847                           	opt stack 0
 16848                           tblptru	equ	0xFF8
 16849                           tblptrh	equ	0xFF7
 16850                           tblptrl	equ	0xFF6
 16851                           tablat	equ	0xFF5
 16852                           prodh	equ	0xFF4
 16853                           prodl	equ	0xFF3
 16854                           intcon	equ	0xFF2
 16855                           intcon2	equ	0xFF1
 16856                           intcon3	equ	0xFF0
 16857                           indf0	equ	0xFEF
 16858                           postinc0	equ	0xFEE
 16859                           fsr0h	equ	0xFEA
 16860                           fsr0l	equ	0xFE9
 16861                           wreg	equ	0xFE8
 16862                           postdec1	equ	0xFE5
 16863                           fsr1l	equ	0xFE1
 16864                           indf2	equ	0xFDF
 16865                           postinc2	equ	0xFDE
 16866                           postdec2	equ	0xFDD
 16867                           fsr2h	equ	0xFDA
 16868                           fsr2l	equ	0xFD9
 16869                           status	equ	0xFD8
 16870                           
 16871 ;; *************** function _isdigit *****************
 16872 ;; Defined at:
 16873 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
 16874 ;; Parameters:    Size  Location     Type
 16875 ;;  c               1    wreg     unsigned char 
 16876 ;; Auto vars:     Size  Location     Type
 16877 ;;  c               1    2[BANK0 ] unsigned char 
 16878 ;; Return value:  Size  Location     Type
 16879 ;;		None               void
 16880 ;; Registers used:
 16881 ;;		wreg, status,2, status,0
 16882 ;; Tracked objects:
 16883 ;;		On entry : 0/0
 16884 ;;		On exit  : 0/0
 16885 ;;		Unchanged: 0/0
 16886 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16887 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16888 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16889 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16890 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16891 ;;Total ram usage:        3 bytes
 16892 ;; Hardware stack levels used:    1
 16893 ;; Hardware stack levels required when called:    7
 16894 ;; This function calls:
 16895 ;;		Nothing
 16896 ;; This function is called by:
 16897 ;;		_printf
 16898 ;; This function uses a non-reentrant model
 16899 ;;
 16900                           
 16901                           	psect	text53
 16902  0052FC                     __ptext53:
 16903                           	opt stack 0
 16904  0052FC                     _isdigit:
 16905                           	opt stack 19
 16906                           
 16907                           ;incstack = 0
 16908                           ;isdigit@c stored from wreg
 16909  0052FC  0100               	movlb	0	; () banked
 16910  0052FE  6F82               	movwf	isdigit@c& (0+255),b
 16911  005300  0E00               	movlw	0
 16912  005302  0100               	movlb	0	; () banked
 16913  005304  6F81               	movwf	_isdigit$2052& (0+255),b
 16914                           
 16915                           ; BSR set to: 0
 16916  005306  0E3A               	movlw	58
 16917  005308  0100               	movlb	0	; () banked
 16918  00530A  6182               	cpfslt	isdigit@c& (0+255),b
 16919  00530C  D007               	goto	l6270
 16920                           
 16921                           ; BSR set to: 0
 16922  00530E  0E2F               	movlw	47
 16923  005310  0100               	movlb	0	; () banked
 16924  005312  6582               	cpfsgt	isdigit@c& (0+255),b
 16925  005314  D003               	goto	l6270
 16926                           
 16927                           ; BSR set to: 0
 16928  005316  0E01               	movlw	1
 16929  005318  0100               	movlb	0	; () banked
 16930  00531A  6F81               	movwf	_isdigit$2052& (0+255),b
 16931  00531C                     l6270:
 16932                           
 16933                           ; BSR set to: 0
 16934  00531C  C081  F080         	movff	_isdigit$2052,??_isdigit
 16935  005320  0100               	movlb	0	; () banked
 16936  005322  3180               	rrcf	??_isdigit& (0+255),w,b
 16937  005324  0012               	return	
 16938  005326                     __end_of_isdigit:
 16939                           	opt stack 0
 16940                           tblptru	equ	0xFF8
 16941                           tblptrh	equ	0xFF7
 16942                           tblptrl	equ	0xFF6
 16943                           tablat	equ	0xFF5
 16944                           prodh	equ	0xFF4
 16945                           prodl	equ	0xFF3
 16946                           intcon	equ	0xFF2
 16947                           intcon2	equ	0xFF1
 16948                           intcon3	equ	0xFF0
 16949                           indf0	equ	0xFEF
 16950                           postinc0	equ	0xFEE
 16951                           fsr0h	equ	0xFEA
 16952                           fsr0l	equ	0xFE9
 16953                           wreg	equ	0xFE8
 16954                           postdec1	equ	0xFE5
 16955                           fsr1l	equ	0xFE1
 16956                           indf2	equ	0xFDF
 16957                           postinc2	equ	0xFDE
 16958                           postdec2	equ	0xFDD
 16959                           fsr2h	equ	0xFDA
 16960                           fsr2l	equ	0xFD9
 16961                           status	equ	0xFD8
 16962                           
 16963 ;; *************** function ___wmul *****************
 16964 ;; Defined at:
 16965 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
 16966 ;; Parameters:    Size  Location     Type
 16967 ;;  multiplier      2    0[BANK0 ] unsigned int 
 16968 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 16969 ;; Auto vars:     Size  Location     Type
 16970 ;;  product         2    4[BANK0 ] unsigned int 
 16971 ;; Return value:  Size  Location     Type
 16972 ;;                  2    0[BANK0 ] unsigned int 
 16973 ;; Registers used:
 16974 ;;		wreg, status,2, status,0, prodl, prodh
 16975 ;; Tracked objects:
 16976 ;;		On entry : 0/0
 16977 ;;		On exit  : 0/0
 16978 ;;		Unchanged: 0/0
 16979 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16980 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16981 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16982 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16983 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16984 ;;Total ram usage:        6 bytes
 16985 ;; Hardware stack levels used:    1
 16986 ;; Hardware stack levels required when called:    7
 16987 ;; This function calls:
 16988 ;;		Nothing
 16989 ;; This function is called by:
 16990 ;;		_printf
 16991 ;; This function uses a non-reentrant model
 16992 ;;
 16993                           
 16994                           	psect	text54
 16995  004FCE                     __ptext54:
 16996                           	opt stack 0
 16997  004FCE                     ___wmul:
 16998                           	opt stack 19
 16999                           
 17000                           ; BSR set to: 0
 17001                           ;incstack = 0
 17002  004FCE  0100               	movlb	0	; () banked
 17003  004FD0  5180               	movf	___wmul@multiplier& (0+255),w,b
 17004  004FD2  0100               	movlb	0	; () banked
 17005  004FD4  0382               	mulwf	___wmul@multiplicand& (0+255),b
 17006  004FD6  CFF3 F084          	movff	prodl,___wmul@product
 17007  004FDA  CFF4 F085          	movff	prodh,___wmul@product+1
 17008  004FDE  0100               	movlb	0	; () banked
 17009  004FE0  5180               	movf	___wmul@multiplier& (0+255),w,b
 17010  004FE2  0100               	movlb	0	; () banked
 17011  004FE4  0383               	mulwf	(___wmul@multiplicand+1)& (0+255),b
 17012  004FE6  50F3               	movf	prodl,w,c
 17013  004FE8  0100               	movlb	0	; () banked
 17014  004FEA  2785               	addwf	(___wmul@product+1)& (0+255),f,b
 17015  004FEC  0100               	movlb	0	; () banked
 17016  004FEE  5181               	movf	(___wmul@multiplier+1)& (0+255),w,b
 17017  004FF0  0100               	movlb	0	; () banked
 17018  004FF2  0382               	mulwf	___wmul@multiplicand& (0+255),b
 17019  004FF4  50F3               	movf	prodl,w,c
 17020  004FF6  0100               	movlb	0	; () banked
 17021  004FF8  2785               	addwf	(___wmul@product+1)& (0+255),f,b
 17022                           
 17023                           ; BSR set to: 0
 17024  004FFA  C084  F080         	movff	___wmul@product,?___wmul
 17025  004FFE  C085  F081         	movff	___wmul@product+1,?___wmul+1
 17026  005002  0012               	return	
 17027  005004                     __end_of___wmul:
 17028                           	opt stack 0
 17029                           tblptru	equ	0xFF8
 17030                           tblptrh	equ	0xFF7
 17031                           tblptrl	equ	0xFF6
 17032                           tablat	equ	0xFF5
 17033                           prodh	equ	0xFF4
 17034                           prodl	equ	0xFF3
 17035                           intcon	equ	0xFF2
 17036                           intcon2	equ	0xFF1
 17037                           intcon3	equ	0xFF0
 17038                           indf0	equ	0xFEF
 17039                           postinc0	equ	0xFEE
 17040                           fsr0h	equ	0xFEA
 17041                           fsr0l	equ	0xFE9
 17042                           wreg	equ	0xFE8
 17043                           postdec1	equ	0xFE5
 17044                           fsr1l	equ	0xFE1
 17045                           indf2	equ	0xFDF
 17046                           postinc2	equ	0xFDE
 17047                           postdec2	equ	0xFDD
 17048                           fsr2h	equ	0xFDA
 17049                           fsr2l	equ	0xFD9
 17050                           status	equ	0xFD8
 17051                           
 17052 ;; *************** function ___lwmod *****************
 17053 ;; Defined at:
 17054 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
 17055 ;; Parameters:    Size  Location     Type
 17056 ;;  dividend        2    7[BANK0 ] unsigned int 
 17057 ;;  divisor         2    9[BANK0 ] unsigned int 
 17058 ;; Auto vars:     Size  Location     Type
 17059 ;;  counter         1   11[BANK0 ] unsigned char 
 17060 ;; Return value:  Size  Location     Type
 17061 ;;                  2    7[BANK0 ] unsigned int 
 17062 ;; Registers used:
 17063 ;;		wreg, status,2, status,0
 17064 ;; Tracked objects:
 17065 ;;		On entry : 0/0
 17066 ;;		On exit  : 0/0
 17067 ;;		Unchanged: 0/0
 17068 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17069 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17070 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17071 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17072 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17073 ;;Total ram usage:        5 bytes
 17074 ;; Hardware stack levels used:    1
 17075 ;; Hardware stack levels required when called:    7
 17076 ;; This function calls:
 17077 ;;		Nothing
 17078 ;; This function is called by:
 17079 ;;		_printf
 17080 ;; This function uses a non-reentrant model
 17081 ;;
 17082                           
 17083                           	psect	text55
 17084  004BBA                     __ptext55:
 17085                           	opt stack 0
 17086  004BBA                     ___lwmod:
 17087                           	opt stack 19
 17088                           
 17089                           ; BSR set to: 0
 17090                           ;incstack = 0
 17091  004BBA  0100               	movlb	0	; () banked
 17092  004BBC  5189               	movf	___lwmod@divisor& (0+255),w,b
 17093  004BBE  0100               	movlb	0	; () banked
 17094  004BC0  118A               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
 17095  004BC2  B4D8               	btfsc	status,2,c
 17096  004BC4  D026               	goto	l1927
 17097                           
 17098                           ; BSR set to: 0
 17099  004BC6  0E01               	movlw	1
 17100  004BC8  0100               	movlb	0	; () banked
 17101  004BCA  6F8B               	movwf	___lwmod@counter& (0+255),b
 17102  004BCC  D006               	goto	l6308
 17103  004BCE                     l6306:
 17104                           
 17105                           ; BSR set to: 0
 17106  004BCE  0100               	movlb	0	; () banked
 17107  004BD0  90D8               	bcf	status,0,c
 17108  004BD2  3789               	rlcf	___lwmod@divisor& (0+255),f,b
 17109  004BD4  378A               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
 17110  004BD6  0100               	movlb	0	; () banked
 17111  004BD8  2B8B               	incf	___lwmod@counter& (0+255),f,b
 17112  004BDA                     l6308:
 17113                           
 17114                           ; BSR set to: 0
 17115  004BDA  0100               	movlb	0	; () banked
 17116  004BDC  AF8A               	btfss	(___lwmod@divisor+1)& (0+255),7,b
 17117  004BDE  D7F7               	goto	l6306
 17118  004BE0                     l6310:
 17119                           
 17120                           ; BSR set to: 0
 17121  004BE0  0100               	movlb	0	; () banked
 17122  004BE2  5189               	movf	___lwmod@divisor& (0+255),w,b
 17123  004BE4  0100               	movlb	0	; () banked
 17124  004BE6  5D87               	subwf	___lwmod@dividend& (0+255),w,b
 17125  004BE8  0100               	movlb	0	; () banked
 17126  004BEA  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
 17127  004BEC  0100               	movlb	0	; () banked
 17128  004BEE  5988               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
 17129  004BF0  A0D8               	btfss	status,0,c
 17130  004BF2  D008               	goto	l6314
 17131                           
 17132                           ; BSR set to: 0
 17133  004BF4  0100               	movlb	0	; () banked
 17134  004BF6  5189               	movf	___lwmod@divisor& (0+255),w,b
 17135  004BF8  0100               	movlb	0	; () banked
 17136  004BFA  5F87               	subwf	___lwmod@dividend& (0+255),f,b
 17137  004BFC  0100               	movlb	0	; () banked
 17138  004BFE  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
 17139  004C00  0100               	movlb	0	; () banked
 17140  004C02  5B88               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
 17141  004C04                     l6314:
 17142                           
 17143                           ; BSR set to: 0
 17144  004C04  0100               	movlb	0	; () banked
 17145  004C06  90D8               	bcf	status,0,c
 17146  004C08  338A               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
 17147  004C0A  3389               	rrcf	___lwmod@divisor& (0+255),f,b
 17148                           
 17149                           ; BSR set to: 0
 17150  004C0C  0100               	movlb	0	; () banked
 17151  004C0E  2F8B               	decfsz	___lwmod@counter& (0+255),f,b
 17152  004C10  D7E7               	goto	l6310
 17153  004C12                     l1927:
 17154                           
 17155                           ; BSR set to: 0
 17156  004C12  C087  F087         	movff	___lwmod@dividend,?___lwmod
 17157  004C16  C088  F088         	movff	___lwmod@dividend+1,?___lwmod+1
 17158                           
 17159                           ; BSR set to: 0
 17160  004C1A  0012               	return		;funcret
 17161  004C1C                     __end_of___lwmod:
 17162                           	opt stack 0
 17163                           tblptru	equ	0xFF8
 17164                           tblptrh	equ	0xFF7
 17165                           tblptrl	equ	0xFF6
 17166                           tablat	equ	0xFF5
 17167                           prodh	equ	0xFF4
 17168                           prodl	equ	0xFF3
 17169                           intcon	equ	0xFF2
 17170                           intcon2	equ	0xFF1
 17171                           intcon3	equ	0xFF0
 17172                           indf0	equ	0xFEF
 17173                           postinc0	equ	0xFEE
 17174                           fsr0h	equ	0xFEA
 17175                           fsr0l	equ	0xFE9
 17176                           wreg	equ	0xFE8
 17177                           postdec1	equ	0xFE5
 17178                           fsr1l	equ	0xFE1
 17179                           indf2	equ	0xFDF
 17180                           postinc2	equ	0xFDE
 17181                           postdec2	equ	0xFDD
 17182                           fsr2h	equ	0xFDA
 17183                           fsr2l	equ	0xFD9
 17184                           status	equ	0xFD8
 17185                           
 17186 ;; *************** function ___lwdiv *****************
 17187 ;; Defined at:
 17188 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
 17189 ;; Parameters:    Size  Location     Type
 17190 ;;  dividend        2    0[BANK0 ] unsigned int 
 17191 ;;  divisor         2    2[BANK0 ] unsigned int 
 17192 ;; Auto vars:     Size  Location     Type
 17193 ;;  quotient        2    4[BANK0 ] unsigned int 
 17194 ;;  counter         1    6[BANK0 ] unsigned char 
 17195 ;; Return value:  Size  Location     Type
 17196 ;;                  2    0[BANK0 ] unsigned int 
 17197 ;; Registers used:
 17198 ;;		wreg, status,2, status,0
 17199 ;; Tracked objects:
 17200 ;;		On entry : 0/0
 17201 ;;		On exit  : 0/0
 17202 ;;		Unchanged: 0/0
 17203 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17204 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17205 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17206 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17207 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17208 ;;Total ram usage:        7 bytes
 17209 ;; Hardware stack levels used:    1
 17210 ;; Hardware stack levels required when called:    7
 17211 ;; This function calls:
 17212 ;;		Nothing
 17213 ;; This function is called by:
 17214 ;;		_printf
 17215 ;; This function uses a non-reentrant model
 17216 ;;
 17217                           
 17218                           	psect	text56
 17219  004922                     __ptext56:
 17220                           	opt stack 0
 17221  004922                     ___lwdiv:
 17222                           	opt stack 19
 17223                           
 17224                           ; BSR set to: 0
 17225                           ;incstack = 0
 17226  004922  0E00               	movlw	0
 17227  004924  0100               	movlb	0	; () banked
 17228  004926  6F85               	movwf	(___lwdiv@quotient+1)& (0+255),b
 17229  004928  0E00               	movlw	0
 17230  00492A  6F84               	movwf	___lwdiv@quotient& (0+255),b
 17231                           
 17232                           ; BSR set to: 0
 17233  00492C  0100               	movlb	0	; () banked
 17234  00492E  5182               	movf	___lwdiv@divisor& (0+255),w,b
 17235  004930  0100               	movlb	0	; () banked
 17236  004932  1183               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
 17237  004934  B4D8               	btfsc	status,2,c
 17238  004936  D02C               	goto	l1917
 17239                           
 17240                           ; BSR set to: 0
 17241  004938  0E01               	movlw	1
 17242  00493A  0100               	movlb	0	; () banked
 17243  00493C  6F86               	movwf	___lwdiv@counter& (0+255),b
 17244  00493E  D006               	goto	l6288
 17245  004940                     l6286:
 17246                           
 17247                           ; BSR set to: 0
 17248  004940  0100               	movlb	0	; () banked
 17249  004942  90D8               	bcf	status,0,c
 17250  004944  3782               	rlcf	___lwdiv@divisor& (0+255),f,b
 17251  004946  3783               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
 17252  004948  0100               	movlb	0	; () banked
 17253  00494A  2B86               	incf	___lwdiv@counter& (0+255),f,b
 17254  00494C                     l6288:
 17255                           
 17256                           ; BSR set to: 0
 17257  00494C  0100               	movlb	0	; () banked
 17258  00494E  AF83               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
 17259  004950  D7F7               	goto	l6286
 17260  004952                     l6290:
 17261                           
 17262                           ; BSR set to: 0
 17263  004952  0100               	movlb	0	; () banked
 17264  004954  90D8               	bcf	status,0,c
 17265  004956  3784               	rlcf	___lwdiv@quotient& (0+255),f,b
 17266  004958  3785               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
 17267                           
 17268                           ; BSR set to: 0
 17269  00495A  0100               	movlb	0	; () banked
 17270  00495C  5182               	movf	___lwdiv@divisor& (0+255),w,b
 17271  00495E  0100               	movlb	0	; () banked
 17272  004960  5D80               	subwf	___lwdiv@dividend& (0+255),w,b
 17273  004962  0100               	movlb	0	; () banked
 17274  004964  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 17275  004966  0100               	movlb	0	; () banked
 17276  004968  5981               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
 17277  00496A  A0D8               	btfss	status,0,c
 17278  00496C  D00A               	goto	l6298
 17279                           
 17280                           ; BSR set to: 0
 17281  00496E  0100               	movlb	0	; () banked
 17282  004970  5182               	movf	___lwdiv@divisor& (0+255),w,b
 17283  004972  0100               	movlb	0	; () banked
 17284  004974  5F80               	subwf	___lwdiv@dividend& (0+255),f,b
 17285  004976  0100               	movlb	0	; () banked
 17286  004978  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 17287  00497A  0100               	movlb	0	; () banked
 17288  00497C  5B81               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
 17289                           
 17290                           ; BSR set to: 0
 17291  00497E  0100               	movlb	0	; () banked
 17292  004980  8184               	bsf	___lwdiv@quotient& (0+255),0,b
 17293  004982                     l6298:
 17294                           
 17295                           ; BSR set to: 0
 17296  004982  0100               	movlb	0	; () banked
 17297  004984  90D8               	bcf	status,0,c
 17298  004986  3383               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
 17299  004988  3382               	rrcf	___lwdiv@divisor& (0+255),f,b
 17300                           
 17301                           ; BSR set to: 0
 17302  00498A  0100               	movlb	0	; () banked
 17303  00498C  2F86               	decfsz	___lwdiv@counter& (0+255),f,b
 17304  00498E  D7E1               	goto	l6290
 17305  004990                     l1917:
 17306                           
 17307                           ; BSR set to: 0
 17308  004990  C084  F080         	movff	___lwdiv@quotient,?___lwdiv
 17309  004994  C085  F081         	movff	___lwdiv@quotient+1,?___lwdiv+1
 17310                           
 17311                           ; BSR set to: 0
 17312  004998  0012               	return		;funcret
 17313  00499A                     __end_of___lwdiv:
 17314                           	opt stack 0
 17315                           tblptru	equ	0xFF8
 17316                           tblptrh	equ	0xFF7
 17317                           tblptrl	equ	0xFF6
 17318                           tablat	equ	0xFF5
 17319                           prodh	equ	0xFF4
 17320                           prodl	equ	0xFF3
 17321                           intcon	equ	0xFF2
 17322                           intcon2	equ	0xFF1
 17323                           intcon3	equ	0xFF0
 17324                           indf0	equ	0xFEF
 17325                           postinc0	equ	0xFEE
 17326                           fsr0h	equ	0xFEA
 17327                           fsr0l	equ	0xFE9
 17328                           wreg	equ	0xFE8
 17329                           postdec1	equ	0xFE5
 17330                           fsr1l	equ	0xFE1
 17331                           indf2	equ	0xFDF
 17332                           postinc2	equ	0xFDE
 17333                           postdec2	equ	0xFDD
 17334                           fsr2h	equ	0xFDA
 17335                           fsr2l	equ	0xFD9
 17336                           status	equ	0xFD8
 17337                           
 17338 ;; *************** function _lcdInst *****************
 17339 ;; Defined at:
 17340 ;;		line 15 in file "lcd.c"
 17341 ;; Parameters:    Size  Location     Type
 17342 ;;  data            1    wreg     unsigned char 
 17343 ;; Auto vars:     Size  Location     Type
 17344 ;;  data            1    2[BANK0 ] unsigned char 
 17345 ;; Return value:  Size  Location     Type
 17346 ;;                  1    wreg      void 
 17347 ;; Registers used:
 17348 ;;		wreg, status,2, status,0, cstack
 17349 ;; Tracked objects:
 17350 ;;		On entry : 0/0
 17351 ;;		On exit  : 0/0
 17352 ;;		Unchanged: 0/0
 17353 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17354 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17355 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17356 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17357 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17358 ;;Total ram usage:        1 bytes
 17359 ;; Hardware stack levels used:    1
 17360 ;; Hardware stack levels required when called:    8
 17361 ;; This function calls:
 17362 ;;		_lcdNibble
 17363 ;; This function is called by:
 17364 ;;		_UI
 17365 ;;		_change_state_to_menu_start
 17366 ;;		_change_state_to_menu_12
 17367 ;;		_change_state_to_menu_22
 17368 ;;		_initLCD
 17369 ;;		_printRTC
 17370 ;;		_Loading
 17371 ;;		_EEPROM_write
 17372 ;;		_Test
 17373 ;;		_algorithmTest
 17374 ;;		_sensorTest
 17375 ;;		_actuatorTest
 17376 ;;		_BothServos
 17377 ;;		_PortTestDC
 17378 ;;		_PlatformTest
 17379 ;;		_SpeedTest
 17380 ;;		_BlockerTest
 17381 ;;		_arm
 17382 ;;		_ToggleTestA5
 17383 ;; This function uses a non-reentrant model
 17384 ;;
 17385                           
 17386                           	psect	text57
 17387  0054E4                     __ptext57:
 17388                           	opt stack 0
 17389  0054E4                     _lcdInst:
 17390                           	opt stack 20
 17391                           
 17392                           ; BSR set to: 0
 17393                           ;incstack = 0
 17394                           ;lcdInst@data stored from wreg
 17395  0054E4  0100               	movlb	0	; () banked
 17396  0054E6  6F82               	movwf	lcdInst@data& (0+255),b
 17397                           
 17398                           ;lcd.c: 16: LATDbits.LATD2 = 0;
 17399  0054E8  948C               	bcf	3980,2,c	;volatile
 17400                           
 17401                           ;lcd.c: 17: lcdNibble(data);
 17402  0054EA  0100               	movlb	0	; () banked
 17403  0054EC  5182               	movf	lcdInst@data& (0+255),w,b
 17404  0054EE  EC77  F025         	call	_lcdNibble
 17405  0054F2  0012               	return		;funcret
 17406  0054F4                     __end_of_lcdInst:
 17407                           	opt stack 0
 17408                           tblptru	equ	0xFF8
 17409                           tblptrh	equ	0xFF7
 17410                           tblptrl	equ	0xFF6
 17411                           tablat	equ	0xFF5
 17412                           prodh	equ	0xFF4
 17413                           prodl	equ	0xFF3
 17414                           intcon	equ	0xFF2
 17415                           intcon2	equ	0xFF1
 17416                           intcon3	equ	0xFF0
 17417                           indf0	equ	0xFEF
 17418                           postinc0	equ	0xFEE
 17419                           fsr0h	equ	0xFEA
 17420                           fsr0l	equ	0xFE9
 17421                           wreg	equ	0xFE8
 17422                           postdec1	equ	0xFE5
 17423                           fsr1l	equ	0xFE1
 17424                           indf2	equ	0xFDF
 17425                           postinc2	equ	0xFDE
 17426                           postdec2	equ	0xFDD
 17427                           fsr2h	equ	0xFDA
 17428                           fsr2l	equ	0xFD9
 17429                           status	equ	0xFD8
 17430                           
 17431 ;; *************** function _lcdNibble *****************
 17432 ;; Defined at:
 17433 ;;		line 25 in file "lcd.c"
 17434 ;; Parameters:    Size  Location     Type
 17435 ;;  data            1    wreg     unsigned char 
 17436 ;; Auto vars:     Size  Location     Type
 17437 ;;  data            1    1[BANK0 ] unsigned char 
 17438 ;;  temp            1    0[BANK0 ] unsigned char 
 17439 ;; Return value:  Size  Location     Type
 17440 ;;                  1    wreg      void 
 17441 ;; Registers used:
 17442 ;;		wreg, status,2, status,0
 17443 ;; Tracked objects:
 17444 ;;		On entry : 0/0
 17445 ;;		On exit  : 0/0
 17446 ;;		Unchanged: 0/0
 17447 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17448 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17449 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17450 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17451 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17452 ;;Total ram usage:        2 bytes
 17453 ;; Hardware stack levels used:    1
 17454 ;; Hardware stack levels required when called:    7
 17455 ;; This function calls:
 17456 ;;		Nothing
 17457 ;; This function is called by:
 17458 ;;		_lcdInst
 17459 ;;		_putch
 17460 ;; This function uses a non-reentrant model
 17461 ;;
 17462                           
 17463                           	psect	text58
 17464  004AEE                     __ptext58:
 17465                           	opt stack 0
 17466  004AEE                     _lcdNibble:
 17467                           	opt stack 20
 17468                           
 17469                           ;incstack = 0
 17470                           ;lcdNibble@data stored from wreg
 17471  004AEE  0100               	movlb	0	; () banked
 17472  004AF0  6F81               	movwf	lcdNibble@data& (0+255),b
 17473                           
 17474                           ;lcd.c: 27: char temp = data & 0xF0;
 17475  004AF2  0100               	movlb	0	; () banked
 17476  004AF4  5181               	movf	lcdNibble@data& (0+255),w,b
 17477  004AF6  0BF0               	andlw	240
 17478  004AF8  0100               	movlb	0	; () banked
 17479  004AFA  6F80               	movwf	lcdNibble@temp& (0+255),b
 17480                           
 17481                           ;lcd.c: 28: LATD = LATD & 0x0F;
 17482  004AFC  508C               	movf	3980,w,c	;volatile
 17483  004AFE  0B0F               	andlw	15
 17484  004B00  6E8C               	movwf	3980,c	;volatile
 17485                           
 17486                           ;lcd.c: 29: LATD = temp | LATD;
 17487  004B02  0100               	movlb	0	; () banked
 17488  004B04  5180               	movf	lcdNibble@temp& (0+255),w,b
 17489  004B06  108C               	iorwf	3980,w,c	;volatile
 17490  004B08  6E8C               	movwf	3980,c	;volatile
 17491                           
 17492                           ; BSR set to: 0
 17493                           ;lcd.c: 31: LATDbits.LATD3 = 1;
 17494  004B0A  868C               	bsf	3980,3,c	;volatile
 17495                           
 17496                           ; BSR set to: 0
 17497                           ;lcd.c: 32: _delay((unsigned long)((25)*(32000000/4000000.0)));
 17498  004B0C  0E42               	movlw	66
 17499  004B0E                     u10577:
 17500  004B0E  2EE8               	decfsz	wreg,f,c
 17501  004B10  D7FE               	bra	u10577
 17502  004B12  D000               	nop2	
 17503                           
 17504                           ;lcd.c: 33: LATDbits.LATD3 = 0;
 17505  004B14  968C               	bcf	3980,3,c	;volatile
 17506                           
 17507                           ;lcd.c: 34: _delay((unsigned long)((25)*(32000000/4000000.0)));
 17508  004B16  0E42               	movlw	66
 17509  004B18                     u10587:
 17510  004B18  2EE8               	decfsz	wreg,f,c
 17511  004B1A  D7FE               	bra	u10587
 17512  004B1C  D000               	nop2	
 17513                           
 17514                           ;lcd.c: 36: data = data << 4;
 17515  004B1E  0100               	movlb	0	; () banked
 17516  004B20  3981               	swapf	lcdNibble@data& (0+255),w,b
 17517  004B22  0BF0               	andlw	240
 17518  004B24  0100               	movlb	0	; () banked
 17519  004B26  6F81               	movwf	lcdNibble@data& (0+255),b
 17520                           
 17521                           ;lcd.c: 38: temp = data & 0xF0;
 17522  004B28  0100               	movlb	0	; () banked
 17523  004B2A  5181               	movf	lcdNibble@data& (0+255),w,b
 17524  004B2C  0BF0               	andlw	240
 17525  004B2E  0100               	movlb	0	; () banked
 17526  004B30  6F80               	movwf	lcdNibble@temp& (0+255),b
 17527                           
 17528                           ;lcd.c: 39: LATD = LATD & 0x0F;
 17529  004B32  508C               	movf	3980,w,c	;volatile
 17530  004B34  0B0F               	andlw	15
 17531  004B36  6E8C               	movwf	3980,c	;volatile
 17532                           
 17533                           ;lcd.c: 40: LATD = temp | LATD;
 17534  004B38  0100               	movlb	0	; () banked
 17535  004B3A  5180               	movf	lcdNibble@temp& (0+255),w,b
 17536  004B3C  108C               	iorwf	3980,w,c	;volatile
 17537  004B3E  6E8C               	movwf	3980,c	;volatile
 17538                           
 17539                           ; BSR set to: 0
 17540                           ;lcd.c: 42: LATDbits.LATD3 = 1;
 17541  004B40  868C               	bsf	3980,3,c	;volatile
 17542                           
 17543                           ; BSR set to: 0
 17544                           ;lcd.c: 43: _delay((unsigned long)((25)*(32000000/4000000.0)));
 17545  004B42  0E42               	movlw	66
 17546  004B44                     u10597:
 17547  004B44  2EE8               	decfsz	wreg,f,c
 17548  004B46  D7FE               	bra	u10597
 17549  004B48  D000               	nop2	
 17550                           
 17551                           ;lcd.c: 44: LATDbits.LATD3 = 0;
 17552  004B4A  968C               	bcf	3980,3,c	;volatile
 17553                           
 17554                           ;lcd.c: 45: _delay((unsigned long)((25)*(32000000/4000000.0)));
 17555  004B4C  0E42               	movlw	66
 17556  004B4E                     u10607:
 17557  004B4E  2EE8               	decfsz	wreg,f,c
 17558  004B50  D7FE               	bra	u10607
 17559  004B52  D000               	nop2	
 17560  004B54  0012               	return		;funcret
 17561  004B56                     __end_of_lcdNibble:
 17562                           	opt stack 0
 17563                           tblptru	equ	0xFF8
 17564                           tblptrh	equ	0xFF7
 17565                           tblptrl	equ	0xFF6
 17566                           tablat	equ	0xFF5
 17567                           prodh	equ	0xFF4
 17568                           prodl	equ	0xFF3
 17569                           intcon	equ	0xFF2
 17570                           intcon2	equ	0xFF1
 17571                           intcon3	equ	0xFF0
 17572                           indf0	equ	0xFEF
 17573                           postinc0	equ	0xFEE
 17574                           fsr0h	equ	0xFEA
 17575                           fsr0l	equ	0xFE9
 17576                           wreg	equ	0xFE8
 17577                           postdec1	equ	0xFE5
 17578                           fsr1l	equ	0xFE1
 17579                           indf2	equ	0xFDF
 17580                           postinc2	equ	0xFDE
 17581                           postdec2	equ	0xFDD
 17582                           fsr2h	equ	0xFDA
 17583                           fsr2l	equ	0xFD9
 17584                           status	equ	0xFD8
 17585                           
 17586 ;; *************** function _handler *****************
 17587 ;; Defined at:
 17588 ;;		line 16 in file "interruptHandler.c"
 17589 ;; Parameters:    Size  Location     Type
 17590 ;;		None
 17591 ;; Auto vars:     Size  Location     Type
 17592 ;;		None
 17593 ;; Return value:  Size  Location     Type
 17594 ;;                  1    wreg      void 
 17595 ;; Registers used:
 17596 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17597 ;; Tracked objects:
 17598 ;;		On entry : 0/0
 17599 ;;		On exit  : 0/0
 17600 ;;		Unchanged: 0/0
 17601 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17602 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17603 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17604 ;;      Temps:         16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17605 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17606 ;;Total ram usage:       16 bytes
 17607 ;; Hardware stack levels used:    1
 17608 ;; Hardware stack levels required when called:    6
 17609 ;; This function calls:
 17610 ;;		_printSortTimer
 17611 ;;		_updateArmState
 17612 ;;		_updateMenu
 17613 ;;		_updateServoStates
 17614 ;;		i2_change_state_to_menu_start
 17615 ;; This function is called by:
 17616 ;;		Interrupt level 2
 17617 ;; This function uses a non-reentrant model
 17618 ;;
 17619                           
 17620                           	psect	intcode
 17621  000008                     __pintcode:
 17622                           	opt stack 0
 17623  000008                     _handler:
 17624                           	opt stack 18
 17625                           
 17626                           ;incstack = 0
 17627  000008  827E               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 17628  00000A  ED08  F01A         	call	int_func,f	;refresh shadow registers
 17629                           tblptru	equ	0xFF8
 17630                           tblptrh	equ	0xFF7
 17631                           tblptrl	equ	0xFF6
 17632                           tablat	equ	0xFF5
 17633                           prodh	equ	0xFF4
 17634                           prodl	equ	0xFF3
 17635                           intcon	equ	0xFF2
 17636                           intcon2	equ	0xFF1
 17637                           intcon3	equ	0xFF0
 17638                           indf0	equ	0xFEF
 17639                           postinc0	equ	0xFEE
 17640                           fsr0h	equ	0xFEA
 17641                           fsr0l	equ	0xFE9
 17642                           wreg	equ	0xFE8
 17643                           postdec1	equ	0xFE5
 17644                           fsr1l	equ	0xFE1
 17645                           indf2	equ	0xFDF
 17646                           postinc2	equ	0xFDE
 17647                           postdec2	equ	0xFDD
 17648                           fsr2h	equ	0xFDA
 17649                           fsr2l	equ	0xFD9
 17650                           status	equ	0xFD8
 17651                           
 17652                           	psect	intcode_body
 17653  003410                     __pintcode_body:
 17654                           	opt stack 18
 17655  003410                     int_func:
 17656                           	opt stack 18
 17657  003410  0006               	pop		; remove dummy address from shadow register refresh
 17658  003412  CFFA F04D          	movff	pclath,??_handler+2
 17659  003416  CFFB F04E          	movff	pclatu,??_handler+3
 17660  00341A  CFE9 F04F          	movff	fsr0l,??_handler+4
 17661  00341E  CFEA F050          	movff	fsr0h,??_handler+5
 17662  003422  CFE1 F051          	movff	fsr1l,??_handler+6
 17663  003426  CFE2 F052          	movff	fsr1h,??_handler+7
 17664  00342A  CFD9 F053          	movff	fsr2l,??_handler+8
 17665  00342E  CFDA F054          	movff	fsr2h,??_handler+9
 17666  003432  CFF3 F055          	movff	prodl,??_handler+10
 17667  003436  CFF4 F056          	movff	prodh,??_handler+11
 17668  00343A  CFF6 F057          	movff	tblptrl,??_handler+12
 17669  00343E  CFF7 F058          	movff	tblptrh,??_handler+13
 17670  003442  CFF8 F059          	movff	tblptru,??_handler+14
 17671  003446  CFF5 F05A          	movff	tablat,??_handler+15
 17672                           
 17673                           ;interruptHandler.c: 18: if(INT1IF){
 17674  00344A  A0F0               	btfss	intcon3,0,c	;volatile
 17675  00344C  D034               	goto	i2l9696
 17676                           
 17677                           ;interruptHandler.c: 19: INT1IF = 0;
 17678  00344E  90F0               	bcf	intcon3,0,c	;volatile
 17679                           
 17680                           ;interruptHandler.c: 20: input = keys[(PORTB & 0xF0) >> 4];
 17681  003450  3881               	swapf	3969,w,c	;volatile
 17682  003452  0B0F               	andlw	15
 17683  003454  0B0F               	andlw	15
 17684  003456  6E4B               	movwf	??_handler& (0+255),c
 17685  003458  6A4C               	clrf	(??_handler+1)& (0+255),c
 17686  00345A  0EB5               	movlw	low _keys
 17687  00345C  244B               	addwf	??_handler,w,c
 17688  00345E  6EF6               	movwf	tblptrl,c
 17689  003460  0EFA               	movlw	high _keys
 17690  003462  204C               	addwfc	??_handler+1,w,c
 17691  003464  6EF7               	movwf	tblptrh,c
 17692  003466                     	if	1	;There are 3 active tblptr bytes
 17693  003466  6AF8               	clrf	tblptru,c
 17694  003468  0E00               	movlw	low (__mediumconst shr (0+16))
 17695  00346A  22F8               	addwfc	tblptru,f,c
 17696  00346C                     	endif
 17697  00346C  0008               	tblrd		*
 17698  00346E  CFF5 F07D          	movff	tablat,_input	;volatile
 17699                           
 17700                           ;interruptHandler.c: 21: if(input == '*'){
 17701  003472  0E2A               	movlw	42
 17702  003474  187D               	xorwf	_input,w,c	;volatile
 17703  003476  B4D8               	btfsc	status,2,c
 17704  003478  D00D               	goto	i2l9690
 17705  00347A  D018               	goto	i2l9692
 17706  00347C                     i2l9680:
 17707                           
 17708                           ;interruptHandler.c: 24: machine_state = Testing_state;
 17709  00347C  0E03               	movlw	3
 17710  00347E  D007               	goto	L13
 17711  003480                     i2l9682:
 17712                           
 17713                           ; BSR set to: 0
 17714                           ;interruptHandler.c: 27: machine_state = UI_state;
 17715  003480  0E00               	movlw	0
 17716  003482  0100               	movlb	0	; () banked
 17717  003484  6FFC               	movwf	_machine_state& (0+255),b
 17718                           
 17719                           ; BSR set to: 0
 17720                           ;interruptHandler.c: 28: change_state_to_menu_start();
 17721  003486  ECA7  F029         	call	i2_change_state_to_menu_start	;wreg free
 17722                           
 17723                           ;interruptHandler.c: 29: break;
 17724  00348A  D015               	goto	i2l9696
 17725  00348C                     i2l9686:
 17726                           
 17727                           ;interruptHandler.c: 31: machine_state = DoneSorting_state;
 17728  00348C  0E02               	movlw	2
 17729  00348E                     L13:
 17730  00348E  0100               	movlb	0	; () banked
 17731  003490  6FFC               	movwf	_machine_state& (0+255),b
 17732                           
 17733                           ; BSR set to: 0
 17734                           ;interruptHandler.c: 33: }
 17735                           
 17736                           ;interruptHandler.c: 32: break;
 17737  003492  D011               	goto	i2l9696
 17738  003494                     i2l9690:
 17739  003494  0100               	movlb	0	; () banked
 17740  003496  51FC               	movf	_machine_state& (0+255),w,b
 17741                           
 17742                           ; Switch size 1, requested type "space"
 17743                           ; Number of cases is 3, Range of values is 0 to 3
 17744                           ; switch strategies available:
 17745                           ; Name         Instructions Cycles
 17746                           ; simple_byte           10     6 (average)
 17747                           ;	Chosen strategy is simple_byte
 17748  003498  0A00               	xorlw	0	; case 0
 17749  00349A  B4D8               	btfsc	status,2,c
 17750  00349C  D7EF               	goto	i2l9680
 17751  00349E  0A01               	xorlw	1	; case 1
 17752  0034A0  B4D8               	btfsc	status,2,c
 17753  0034A2  D7F4               	goto	i2l9686
 17754  0034A4  0A02               	xorlw	2	; case 3
 17755  0034A6  B4D8               	btfsc	status,2,c
 17756  0034A8  D7EB               	goto	i2l9682
 17757                           
 17758                           ; BSR set to: 0
 17759                           ;interruptHandler.c: 34: }
 17760  0034AA  D005               	goto	i2l9696
 17761  0034AC                     i2l9692:
 17762                           
 17763                           ;interruptHandler.c: 35: else if(machine_state == UI_state){
 17764  0034AC  0100               	movlb	0	; () banked
 17765  0034AE  51FC               	movf	_machine_state& (0+255),w,b
 17766  0034B0  B4D8               	btfsc	status,2,c
 17767                           
 17768                           ; BSR set to: 0
 17769                           ;interruptHandler.c: 36: updateMenu();
 17770  0034B2  EC00  F015         	call	_updateMenu	;wreg free
 17771  0034B6                     i2l9696:
 17772                           
 17773                           ;interruptHandler.c: 37: }
 17774                           ;interruptHandler.c: 38: }
 17775                           ;interruptHandler.c: 41: if(TMR0IF){
 17776  0034B6  A4F2               	btfss	intcon,2,c	;volatile
 17777  0034B8  D00C               	goto	i2l9710
 17778                           
 17779                           ;interruptHandler.c: 42: TMR0IF = 0;
 17780  0034BA  94F2               	bcf	intcon,2,c	;volatile
 17781                           
 17782                           ;interruptHandler.c: 43: if(machine_state == Sorting_state){
 17783  0034BC  0100               	movlb	0	; () banked
 17784  0034BE  05FC               	decf	_machine_state& (0+255),w,b
 17785  0034C0  A4D8               	btfss	status,2,c
 17786  0034C2  D007               	goto	i2l9710
 17787                           
 17788                           ; BSR set to: 0
 17789                           ;interruptHandler.c: 44: printSortTimer();
 17790  0034C4  EC60  F016         	call	_printSortTimer	;wreg free
 17791                           
 17792                           ;interruptHandler.c: 46: TMR0H = 0b10000101;
 17793  0034C8  0E85               	movlw	133
 17794  0034CA  6ED7               	movwf	4055,c	;volatile
 17795                           
 17796                           ;interruptHandler.c: 47: TMR0L = 0b11101110;
 17797  0034CC  0EEE               	movlw	238
 17798  0034CE  6ED6               	movwf	4054,c	;volatile
 17799                           
 17800                           ;interruptHandler.c: 48: TMR0ON = 1;
 17801  0034D0  8ED5               	bsf	4053,7,c	;volatile
 17802  0034D2                     i2l9710:
 17803                           
 17804                           ;interruptHandler.c: 49: }
 17805                           ;interruptHandler.c: 50: }
 17806                           ;interruptHandler.c: 53: if(TMR1IF){
 17807  0034D2  A09E               	btfss	3998,0,c	;volatile
 17808  0034D4  D02A               	goto	i2l9738
 17809                           
 17810                           ;interruptHandler.c: 54: TMR1IF = 0;
 17811  0034D6  909E               	bcf	3998,0,c	;volatile
 17812                           
 17813                           ;interruptHandler.c: 55: TMR1ON = 0;
 17814  0034D8  90CD               	bcf	4045,0,c	;volatile
 17815                           
 17816                           ;interruptHandler.c: 56: if(machine_state == Sorting_state){
 17817  0034DA  0100               	movlb	0	; () banked
 17818  0034DC  05FC               	decf	_machine_state& (0+255),w,b
 17819  0034DE  A4D8               	btfss	status,2,c
 17820  0034E0  D024               	goto	i2l9738
 17821                           
 17822                           ; BSR set to: 0
 17823                           ;interruptHandler.c: 57: if(was_low_1){
 17824  0034E2  5077               	movf	_was_low_1,w,c	;volatile
 17825  0034E4  1078               	iorwf	_was_low_1+1,w,c	;volatile
 17826  0034E6  B4D8               	btfsc	status,2,c
 17827  0034E8  D00A               	goto	i2l1009
 17828                           
 17829                           ; BSR set to: 0
 17830                           ;interruptHandler.c: 58: LATCbits.LATC1 = 1;
 17831  0034EA  828B               	bsf	3979,1,c	;volatile
 17832                           
 17833                           ; BSR set to: 0
 17834                           ;interruptHandler.c: 59: was_low_1 = 0;
 17835  0034EC  0E00               	movlw	0
 17836  0034EE  6E78               	movwf	_was_low_1+1,c	;volatile
 17837  0034F0  0E00               	movlw	0
 17838  0034F2  6E77               	movwf	_was_low_1,c	;volatile
 17839                           
 17840                           ; BSR set to: 0
 17841                           ;interruptHandler.c: 60: TMR1H = servoTimes[0];
 17842  0034F4  C0DA  FFCF         	movff	_servoTimes,4047	;volatile
 17843                           
 17844                           ; BSR set to: 0
 17845                           ;interruptHandler.c: 61: TMR1L = servoTimes[1];
 17846  0034F8  C0DC  FFCE         	movff	_servoTimes+2,4046	;volatile
 17847                           
 17848                           ;interruptHandler.c: 62: }
 17849  0034FC  D00F               	goto	i2l9732
 17850  0034FE                     i2l1009:
 17851                           
 17852                           ; BSR set to: 0
 17853                           ;interruptHandler.c: 63: else{
 17854                           ;interruptHandler.c: 64: LATCbits.LATC1 = 0;
 17855  0034FE  928B               	bcf	3979,1,c	;volatile
 17856                           
 17857                           ; BSR set to: 0
 17858                           ;interruptHandler.c: 65: was_low_1 = 1;
 17859  003500  0E00               	movlw	0
 17860  003502  6E78               	movwf	_was_low_1+1,c	;volatile
 17861  003504  0E01               	movlw	1
 17862  003506  6E77               	movwf	_was_low_1,c	;volatile
 17863                           
 17864                           ; BSR set to: 0
 17865                           ;interruptHandler.c: 66: TMR1H = 20000 - servoTimes[0];
 17866  003508  0100               	movlb	0	; () banked
 17867  00350A  51DA               	movf	_servoTimes& (0+255),w,b
 17868  00350C  0800               	sublw	0
 17869  00350E  0F20               	addlw	32
 17870  003510  6ECF               	movwf	4047,c	;volatile
 17871                           
 17872                           ; BSR set to: 0
 17873                           ;interruptHandler.c: 67: TMR1L = 20000 - servoTimes[1];
 17874  003512  0100               	movlb	0	; () banked
 17875  003514  51DC               	movf	(_servoTimes+2)& (0+255),w,b
 17876  003516  0800               	sublw	0
 17877  003518  0F20               	addlw	32
 17878  00351A  6ECE               	movwf	4046,c	;volatile
 17879  00351C                     i2l9732:
 17880                           
 17881                           ; BSR set to: 0
 17882                           ;interruptHandler.c: 68: }
 17883                           ;interruptHandler.c: 69: TMR1ON = 1;
 17884  00351C  80CD               	bsf	4045,0,c	;volatile
 17885                           
 17886                           ; BSR set to: 0
 17887                           ;interruptHandler.c: 70: servo_timer_counter += 10;
 17888  00351E  0E0A               	movlw	10
 17889  003520  266D               	addwf	_servo_timer_counter,f,c	;volatile
 17890  003522  0E00               	movlw	0
 17891  003524  226E               	addwfc	_servo_timer_counter+1,f,c	;volatile
 17892                           
 17893                           ; BSR set to: 0
 17894                           ;interruptHandler.c: 72: updateServoStates();
 17895  003526  ECF7  F01B         	call	_updateServoStates	;wreg free
 17896  00352A                     i2l9738:
 17897                           
 17898                           ;interruptHandler.c: 73: }
 17899                           ;interruptHandler.c: 74: }
 17900                           ;interruptHandler.c: 77: if(TMR2IF){
 17901  00352A  A29E               	btfss	3998,1,c	;volatile
 17902  00352C  D026               	goto	i2l9764
 17903                           
 17904                           ;interruptHandler.c: 80: TMR2IF = 0;
 17905  00352E  929E               	bcf	3998,1,c	;volatile
 17906                           
 17907                           ;interruptHandler.c: 81: TMR2ON = 0;
 17908  003530  94CA               	bcf	4042,2,c	;volatile
 17909                           
 17910                           ;interruptHandler.c: 82: timer2_counter++;
 17911  003532  4A73               	infsnz	_timer2_counter,f,c	;volatile
 17912  003534  2A74               	incf	_timer2_counter+1,f,c	;volatile
 17913                           
 17914                           ;interruptHandler.c: 83: if(machine_state == Sorting_state){
 17915  003536  0100               	movlb	0	; () banked
 17916  003538  05FC               	decf	_machine_state& (0+255),w,b
 17917  00353A  A4D8               	btfss	status,2,c
 17918  00353C  D01E               	goto	i2l9764
 17919                           
 17920                           ; BSR set to: 0
 17921                           ;interruptHandler.c: 84: if(was_low_2 && (timer2_counter == 2)){
 17922  00353E  5079               	movf	_was_low_2,w,c	;volatile
 17923  003540  107A               	iorwf	_was_low_2+1,w,c	;volatile
 17924  003542  B4D8               	btfsc	status,2,c
 17925  003544  D00A               	goto	i2l9754
 17926                           
 17927                           ; BSR set to: 0
 17928  003546  0E02               	movlw	2
 17929  003548  1873               	xorwf	_timer2_counter,w,c	;volatile
 17930  00354A  1074               	iorwf	_timer2_counter+1,w,c	;volatile
 17931  00354C  A4D8               	btfss	status,2,c
 17932  00354E  D005               	goto	i2l9754
 17933                           
 17934                           ; BSR set to: 0
 17935                           ;interruptHandler.c: 86: LATBbits.LATB3 = 1;
 17936  003550  868A               	bsf	3978,3,c	;volatile
 17937                           
 17938                           ; BSR set to: 0
 17939                           ;interruptHandler.c: 87: was_low_2 = 0;
 17940  003552  0E00               	movlw	0
 17941  003554  6E7A               	movwf	_was_low_2+1,c	;volatile
 17942  003556  0E00               	movlw	0
 17943  003558  D008               	goto	L14
 17944  00355A                     i2l9754:
 17945                           
 17946                           ; BSR set to: 0
 17947                           ;interruptHandler.c: 90: else if(!was_low_2){
 17948  00355A  5079               	movf	_was_low_2,w,c	;volatile
 17949  00355C  107A               	iorwf	_was_low_2+1,w,c	;volatile
 17950  00355E  A4D8               	btfss	status,2,c
 17951  003560  D009               	goto	i2l9760
 17952                           
 17953                           ; BSR set to: 0
 17954                           ;interruptHandler.c: 91: LATBbits.LATB3 = 0;
 17955  003562  968A               	bcf	3978,3,c	;volatile
 17956                           
 17957                           ; BSR set to: 0
 17958                           ;interruptHandler.c: 92: was_low_2 = 1;
 17959  003564  0E00               	movlw	0
 17960  003566  6E7A               	movwf	_was_low_2+1,c	;volatile
 17961  003568  0E01               	movlw	1
 17962  00356A                     L14:
 17963  00356A  6E79               	movwf	_was_low_2,c	;volatile
 17964                           
 17965                           ;interruptHandler.c: 93: timer2_counter = 0;
 17966  00356C  0E00               	movlw	0
 17967  00356E  6E74               	movwf	_timer2_counter+1,c	;volatile
 17968  003570  0E00               	movlw	0
 17969  003572  6E73               	movwf	_timer2_counter,c	;volatile
 17970  003574                     i2l9760:
 17971                           
 17972                           ; BSR set to: 0
 17973                           ;interruptHandler.c: 94: }
 17974                           ;interruptHandler.c: 95: updateArmState();
 17975  003574  EC77  F027         	call	_updateArmState	;wreg free
 17976                           
 17977                           ;interruptHandler.c: 96: TMR2ON = 1;
 17978  003578  84CA               	bsf	4042,2,c	;volatile
 17979  00357A                     i2l9764:
 17980                           
 17981                           ;interruptHandler.c: 97: }
 17982                           ;interruptHandler.c: 98: }
 17983                           ;interruptHandler.c: 101: if(TMR3IF){
 17984  00357A  A2A1               	btfss	4001,1,c	;volatile
 17985  00357C  D024               	goto	i2l1020
 17986                           
 17987                           ;interruptHandler.c: 102: TMR3IF = 0;
 17988  00357E  92A1               	bcf	4001,1,c	;volatile
 17989                           
 17990                           ;interruptHandler.c: 103: TMR3ON = 0;
 17991  003580  90B1               	bcf	4017,0,c	;volatile
 17992                           
 17993                           ;interruptHandler.c: 104: if(machine_state == Sorting_state){
 17994  003582  0100               	movlb	0	; () banked
 17995  003584  05FC               	decf	_machine_state& (0+255),w,b
 17996  003586  A4D8               	btfss	status,2,c
 17997  003588  D01E               	goto	i2l1020
 17998                           
 17999                           ; BSR set to: 0
 18000                           ;interruptHandler.c: 105: if(was_low_3){
 18001  00358A  507B               	movf	_was_low_3,w,c	;volatile
 18002  00358C  107C               	iorwf	_was_low_3+1,w,c	;volatile
 18003  00358E  B4D8               	btfsc	status,2,c
 18004  003590  D00A               	goto	i2l1018
 18005                           
 18006                           ; BSR set to: 0
 18007                           ;interruptHandler.c: 106: LATCbits.LATC2 = 1;
 18008  003592  848B               	bsf	3979,2,c	;volatile
 18009                           
 18010                           ; BSR set to: 0
 18011                           ;interruptHandler.c: 107: was_low_3 = 0;
 18012  003594  0E00               	movlw	0
 18013  003596  6E7C               	movwf	_was_low_3+1,c	;volatile
 18014  003598  0E00               	movlw	0
 18015  00359A  6E7B               	movwf	_was_low_3,c	;volatile
 18016                           
 18017                           ; BSR set to: 0
 18018                           ;interruptHandler.c: 108: TMR3H = servoTimes[2];
 18019  00359C  C0DE  FFB3         	movff	_servoTimes+4,4019	;volatile
 18020                           
 18021                           ; BSR set to: 0
 18022                           ;interruptHandler.c: 109: TMR3L = servoTimes[3];
 18023  0035A0  C0E0  FFB2         	movff	_servoTimes+6,4018	;volatile
 18024                           
 18025                           ;interruptHandler.c: 110: }
 18026  0035A4  D00F               	goto	i2l9786
 18027  0035A6                     i2l1018:
 18028                           
 18029                           ; BSR set to: 0
 18030                           ;interruptHandler.c: 111: else{
 18031                           ;interruptHandler.c: 112: LATCbits.LATC2 = 0;
 18032  0035A6  948B               	bcf	3979,2,c	;volatile
 18033                           
 18034                           ; BSR set to: 0
 18035                           ;interruptHandler.c: 113: was_low_3 = 1;
 18036  0035A8  0E00               	movlw	0
 18037  0035AA  6E7C               	movwf	_was_low_3+1,c	;volatile
 18038  0035AC  0E01               	movlw	1
 18039  0035AE  6E7B               	movwf	_was_low_3,c	;volatile
 18040                           
 18041                           ; BSR set to: 0
 18042                           ;interruptHandler.c: 114: TMR3H = 20000 - servoTimes[2];
 18043  0035B0  0100               	movlb	0	; () banked
 18044  0035B2  51DE               	movf	(_servoTimes+4)& (0+255),w,b
 18045  0035B4  0800               	sublw	0
 18046  0035B6  0F20               	addlw	32
 18047  0035B8  6EB3               	movwf	4019,c	;volatile
 18048                           
 18049                           ; BSR set to: 0
 18050                           ;interruptHandler.c: 115: TMR3L = 20000 - servoTimes[3];
 18051  0035BA  0100               	movlb	0	; () banked
 18052  0035BC  51E0               	movf	(_servoTimes+6)& (0+255),w,b
 18053  0035BE  0800               	sublw	0
 18054  0035C0  0F20               	addlw	32
 18055  0035C2  6EB2               	movwf	4018,c	;volatile
 18056  0035C4                     i2l9786:
 18057                           
 18058                           ; BSR set to: 0
 18059                           ;interruptHandler.c: 116: }
 18060                           ;interruptHandler.c: 117: TMR3ON = 1;
 18061  0035C4  80B1               	bsf	4017,0,c	;volatile
 18062  0035C6                     i2l1020:
 18063  0035C6  C05A  FFF5         	movff	??_handler+15,tablat
 18064  0035CA  C059  FFF8         	movff	??_handler+14,tblptru
 18065  0035CE  C058  FFF7         	movff	??_handler+13,tblptrh
 18066  0035D2  C057  FFF6         	movff	??_handler+12,tblptrl
 18067  0035D6  C056  FFF4         	movff	??_handler+11,prodh
 18068  0035DA  C055  FFF3         	movff	??_handler+10,prodl
 18069  0035DE  C054  FFDA         	movff	??_handler+9,fsr2h
 18070  0035E2  C053  FFD9         	movff	??_handler+8,fsr2l
 18071  0035E6  C052  FFE2         	movff	??_handler+7,fsr1h
 18072  0035EA  C051  FFE1         	movff	??_handler+6,fsr1l
 18073  0035EE  C050  FFEA         	movff	??_handler+5,fsr0h
 18074  0035F2  C04F  FFE9         	movff	??_handler+4,fsr0l
 18075  0035F6  C04E  FFFB         	movff	??_handler+3,pclatu
 18076  0035FA  C04D  FFFA         	movff	??_handler+2,pclath
 18077  0035FE  927E               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 18078  003600  0011               	retfie		f
 18079  003602                     __end_of_handler:
 18080                           	opt stack 0
 18081                           pclatu	equ	0xFFB
 18082                           pclath	equ	0xFFA
 18083                           tblptru	equ	0xFF8
 18084                           tblptrh	equ	0xFF7
 18085                           tblptrl	equ	0xFF6
 18086                           tablat	equ	0xFF5
 18087                           prodh	equ	0xFF4
 18088                           prodl	equ	0xFF3
 18089                           intcon	equ	0xFF2
 18090                           intcon2	equ	0xFF1
 18091                           intcon3	equ	0xFF0
 18092                           indf0	equ	0xFEF
 18093                           postinc0	equ	0xFEE
 18094                           fsr0h	equ	0xFEA
 18095                           fsr0l	equ	0xFE9
 18096                           wreg	equ	0xFE8
 18097                           postdec1	equ	0xFE5
 18098                           fsr1h	equ	0xFE2
 18099                           fsr1l	equ	0xFE1
 18100                           indf2	equ	0xFDF
 18101                           postinc2	equ	0xFDE
 18102                           postdec2	equ	0xFDD
 18103                           fsr2h	equ	0xFDA
 18104                           fsr2l	equ	0xFD9
 18105                           status	equ	0xFD8
 18106                           
 18107 ;; *************** function _updateServoStates *****************
 18108 ;; Defined at:
 18109 ;;		line 537 in file "sort.c"
 18110 ;; Parameters:    Size  Location     Type
 18111 ;;		None
 18112 ;; Auto vars:     Size  Location     Type
 18113 ;;		None
 18114 ;; Return value:  Size  Location     Type
 18115 ;;                  1    wreg      void 
 18116 ;; Registers used:
 18117 ;;		wreg, status,2, status,0, cstack
 18118 ;; Tracked objects:
 18119 ;;		On entry : 0/0
 18120 ;;		On exit  : 0/0
 18121 ;;		Unchanged: 0/0
 18122 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18123 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18124 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18125 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18126 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18127 ;;Total ram usage:        2 bytes
 18128 ;; Hardware stack levels used:    1
 18129 ;; Hardware stack levels required when called:    1
 18130 ;; This function calls:
 18131 ;;		i2_updateServoPosition
 18132 ;; This function is called by:
 18133 ;;		_handler
 18134 ;; This function uses a non-reentrant model
 18135 ;;
 18136                           
 18137                           	psect	text60
 18138  0037EE                     __ptext60:
 18139                           	opt stack 0
 18140  0037EE                     _updateServoStates:
 18141                           	opt stack 22
 18142                           
 18143                           ;sort.c: 539: if(servo_timer_counter >= servo_timer_target){
 18144                           
 18145                           ;incstack = 0
 18146  0037EE  506F               	movf	_servo_timer_target,w,c	;volatile
 18147  0037F0  5C6D               	subwf	_servo_timer_counter,w,c	;volatile
 18148  0037F2  506E               	movf	_servo_timer_counter+1,w,c	;volatile
 18149  0037F4  0A80               	xorlw	128
 18150  0037F6  6E09               	movwf	??_updateServoStates& (0+255),c
 18151  0037F8  5070               	movf	_servo_timer_target+1,w,c	;volatile
 18152  0037FA  0A80               	xorlw	128
 18153  0037FC  5809               	subwfb	??_updateServoStates& (0+255),w,c
 18154  0037FE  A0D8               	btfss	status,0,c
 18155  003800  0012               	return	
 18156                           
 18157                           ;sort.c: 541: if(f_panning_to_bin){
 18158  003802  5061               	movf	_f_panning_to_bin,w,c	;volatile
 18159  003804  1062               	iorwf	_f_panning_to_bin+1,w,c	;volatile
 18160  003806  A4D8               	btfss	status,2,c
 18161  003808  D036               	goto	i2l9556
 18162  00380A  D05F               	goto	i2l9560
 18163  00380C                     i2l9530:
 18164                           
 18165                           ;sort.c: 545: updateServoPosition(1260, 3);
 18166  00380C  0E04               	movlw	4
 18167  00380E  6E02               	movwf	i2updateServoPosition@time_us+1,c
 18168  003810  0EEC               	movlw	236
 18169  003812  6E01               	movwf	i2updateServoPosition@time_us,c
 18170  003814  0E00               	movlw	0
 18171  003816  6E04               	movwf	i2updateServoPosition@timer+1,c
 18172  003818  0E03               	movlw	3
 18173  00381A  6E03               	movwf	i2updateServoPosition@timer,c
 18174  00381C  EC3F  F025         	call	i2_updateServoPosition	;wreg free
 18175  003820  D025               	goto	i2l9550
 18176  003822                     i2l9534:
 18177                           
 18178                           ;sort.c: 547: servo_timer_target = 700;
 18179  003822  0E02               	movlw	2
 18180  003824  6E70               	movwf	_servo_timer_target+1,c	;volatile
 18181  003826  0EBC               	movlw	188
 18182  003828  6E6F               	movwf	_servo_timer_target,c	;volatile
 18183                           
 18184                           ;sort.c: 548: break;
 18185  00382A  D04A               	goto	i2l9558
 18186  00382C                     i2l9536:
 18187                           
 18188                           ;sort.c: 550: updateServoPosition(1260, 3);
 18189  00382C  0E04               	movlw	4
 18190  00382E  6E02               	movwf	i2updateServoPosition@time_us+1,c
 18191  003830  0EEC               	movlw	236
 18192  003832  6E01               	movwf	i2updateServoPosition@time_us,c
 18193  003834  0E00               	movlw	0
 18194  003836  6E04               	movwf	i2updateServoPosition@timer+1,c
 18195  003838  0E03               	movlw	3
 18196  00383A  6E03               	movwf	i2updateServoPosition@timer,c
 18197  00383C  EC3F  F025         	call	i2_updateServoPosition	;wreg free
 18198  003840  D015               	goto	i2l9550
 18199  003842                     i2l9542:
 18200                           
 18201                           ;sort.c: 556: updateServoPosition(1390, 3);
 18202  003842  0E05               	movlw	5
 18203  003844  6E02               	movwf	i2updateServoPosition@time_us+1,c
 18204  003846  0E6E               	movlw	110
 18205  003848  6E01               	movwf	i2updateServoPosition@time_us,c
 18206  00384A  0E00               	movlw	0
 18207  00384C  6E04               	movwf	i2updateServoPosition@timer+1,c
 18208  00384E  0E03               	movlw	3
 18209  003850  6E03               	movwf	i2updateServoPosition@timer,c
 18210  003852  EC3F  F025         	call	i2_updateServoPosition	;wreg free
 18211  003856  D00A               	goto	i2l9550
 18212  003858                     i2l9548:
 18213                           
 18214                           ;sort.c: 561: updateServoPosition(1390, 3);
 18215  003858  0E05               	movlw	5
 18216  00385A  6E02               	movwf	i2updateServoPosition@time_us+1,c
 18217  00385C  0E6E               	movlw	110
 18218  00385E  6E01               	movwf	i2updateServoPosition@time_us,c
 18219  003860  0E00               	movlw	0
 18220  003862  6E04               	movwf	i2updateServoPosition@timer+1,c
 18221  003864  0E03               	movlw	3
 18222  003866  6E03               	movwf	i2updateServoPosition@timer,c
 18223  003868  EC3F  F025         	call	i2_updateServoPosition	;wreg free
 18224  00386C                     i2l9550:
 18225                           
 18226                           ;sort.c: 562: servo_timer_counter = 0;
 18227  00386C  0E00               	movlw	0
 18228  00386E  6E6E               	movwf	_servo_timer_counter+1,c	;volatile
 18229  003870  0E00               	movlw	0
 18230  003872  6E6D               	movwf	_servo_timer_counter,c	;volatile
 18231  003874  D7D6               	goto	i2l9534
 18232  003876                     i2l9556:
 18233  003876  C06B  F009         	movff	_pan_servo_state,??_updateServoStates	;volatile
 18234  00387A  C06C  F00A         	movff	_pan_servo_state+1,??_updateServoStates+1	;volatile
 18235                           
 18236                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 4 sub-sw
      +                          itches
 18237                           ; Switch size 1, requested type "space"
 18238                           ; Number of cases is 4, Range of values is 1 to 9
 18239                           ; switch strategies available:
 18240                           ; Name         Instructions Cycles
 18241                           ; simple_byte           13     7 (average)
 18242                           ;	Chosen strategy is simple_byte
 18243  00387E  500A               	movf	??_updateServoStates+1,w,c
 18244  003880  0A01               	xorlw	1	; case 1
 18245  003882  B4D8               	btfsc	status,2,c
 18246  003884  D00A               	goto	i2l10234
 18247  003886  0A02               	xorlw	2	; case 3
 18248  003888  B4D8               	btfsc	status,2,c
 18249  00388A  D00C               	goto	i2l10236
 18250  00388C  0A05               	xorlw	5	; case 6
 18251  00388E  B4D8               	btfsc	status,2,c
 18252  003890  D00E               	goto	i2l10238
 18253  003892  0A0F               	xorlw	15	; case 9
 18254  003894  B4D8               	btfsc	status,2,c
 18255  003896  D010               	goto	i2l10240
 18256  003898  D013               	goto	i2l9558
 18257  00389A                     i2l10234:
 18258                           
 18259                           ; Switch size 1, requested type "space"
 18260                           ; Number of cases is 1, Range of values is 244 to 244
 18261                           ; switch strategies available:
 18262                           ; Name         Instructions Cycles
 18263                           ; simple_byte            4     3 (average)
 18264                           ;	Chosen strategy is simple_byte
 18265  00389A  5009               	movf	??_updateServoStates,w,c
 18266  00389C  0AF4               	xorlw	244	; case 244
 18267  00389E  B4D8               	btfsc	status,2,c
 18268  0038A0  D7B5               	goto	i2l9530
 18269  0038A2  D00E               	goto	i2l9558
 18270  0038A4                     i2l10236:
 18271                           
 18272                           ; Switch size 1, requested type "space"
 18273                           ; Number of cases is 1, Range of values is 82 to 82
 18274                           ; switch strategies available:
 18275                           ; Name         Instructions Cycles
 18276                           ; simple_byte            4     3 (average)
 18277                           ;	Chosen strategy is simple_byte
 18278  0038A4  5009               	movf	??_updateServoStates,w,c
 18279  0038A6  0A52               	xorlw	82	; case 82
 18280  0038A8  B4D8               	btfsc	status,2,c
 18281  0038AA  D7C0               	goto	i2l9536
 18282  0038AC  D009               	goto	i2l9558
 18283  0038AE                     i2l10238:
 18284                           
 18285                           ; Switch size 1, requested type "space"
 18286                           ; Number of cases is 1, Range of values is 134 to 134
 18287                           ; switch strategies available:
 18288                           ; Name         Instructions Cycles
 18289                           ; simple_byte            4     3 (average)
 18290                           ;	Chosen strategy is simple_byte
 18291  0038AE  5009               	movf	??_updateServoStates,w,c
 18292  0038B0  0A86               	xorlw	134	; case 134
 18293  0038B2  B4D8               	btfsc	status,2,c
 18294  0038B4  D7C6               	goto	i2l9542
 18295  0038B6  D004               	goto	i2l9558
 18296  0038B8                     i2l10240:
 18297                           
 18298                           ; Switch size 1, requested type "space"
 18299                           ; Number of cases is 1, Range of values is 96 to 96
 18300                           ; switch strategies available:
 18301                           ; Name         Instructions Cycles
 18302                           ; simple_byte            4     3 (average)
 18303                           ;	Chosen strategy is simple_byte
 18304  0038B8  5009               	movf	??_updateServoStates,w,c
 18305  0038BA  0A60               	xorlw	96	; case 96
 18306  0038BC  B4D8               	btfsc	status,2,c
 18307  0038BE  D7CC               	goto	i2l9548
 18308  0038C0                     i2l9558:
 18309                           
 18310                           ;sort.c: 568: f_panning_to_bin = 0;
 18311  0038C0  0E00               	movlw	0
 18312  0038C2  6E62               	movwf	_f_panning_to_bin+1,c	;volatile
 18313  0038C4  0E00               	movlw	0
 18314  0038C6  6E61               	movwf	_f_panning_to_bin,c	;volatile
 18315                           
 18316                           ;sort.c: 569: }
 18317  0038C8  0012               	return	
 18318  0038CA                     i2l9560:
 18319                           
 18320                           ;sort.c: 570: else if(pan_servo_state == 1200){
 18321  0038CA  0EB0               	movlw	176
 18322  0038CC  186B               	xorwf	_pan_servo_state,w,c	;volatile
 18323  0038CE  E15A               	bnz	i2l9590
 18324  0038D0  0E04               	movlw	4
 18325  0038D2  186C               	xorwf	_pan_servo_state+1,w,c	;volatile
 18326  0038D4  A4D8               	btfss	status,2,c
 18327  0038D6  D056               	goto	i2l9590
 18328                           
 18329                           ;sort.c: 572: servo_timer_counter = 0;
 18330  0038D8  0E00               	movlw	0
 18331  0038DA  6E6E               	movwf	_servo_timer_counter+1,c	;volatile
 18332  0038DC  0E00               	movlw	0
 18333  0038DE  6E6D               	movwf	_servo_timer_counter,c	;volatile
 18334                           
 18335                           ;sort.c: 573: }
 18336  0038E0  0012               	return	
 18337  0038E2                     i2l9564:
 18338                           
 18339                           ;sort.c: 578: updateServoPosition(1050, 3);
 18340  0038E2  0E04               	movlw	4
 18341  0038E4  6E02               	movwf	i2updateServoPosition@time_us+1,c
 18342  0038E6  0E1A               	movlw	26
 18343  0038E8  6E01               	movwf	i2updateServoPosition@time_us,c
 18344  0038EA  0E00               	movlw	0
 18345  0038EC  6E04               	movwf	i2updateServoPosition@timer+1,c
 18346  0038EE  0E03               	movlw	3
 18347  0038F0  6E03               	movwf	i2updateServoPosition@timer,c
 18348  0038F2  EC3F  F025         	call	i2_updateServoPosition	;wreg free
 18349                           
 18350                           ;sort.c: 579: servo_timer_counter = 0;
 18351  0038F6  0E00               	movlw	0
 18352  0038F8  6E6E               	movwf	_servo_timer_counter+1,c	;volatile
 18353  0038FA  0E00               	movlw	0
 18354  0038FC  6E6D               	movwf	_servo_timer_counter,c	;volatile
 18355                           
 18356                           ;sort.c: 580: servo_timer_target = 750;
 18357  0038FE  0E02               	movlw	2
 18358  003900  6E70               	movwf	_servo_timer_target+1,c	;volatile
 18359  003902  0EEE               	movlw	238
 18360  003904  6E6F               	movwf	_servo_timer_target,c	;volatile
 18361                           
 18362                           ;sort.c: 581: break;
 18363  003906  0012               	return	
 18364  003908                     i2l9570:
 18365                           
 18366                           ;sort.c: 583: updateServoPosition(1050, 3);
 18367  003908  0E04               	movlw	4
 18368  00390A  6E02               	movwf	i2updateServoPosition@time_us+1,c
 18369  00390C  0E1A               	movlw	26
 18370  00390E  6E01               	movwf	i2updateServoPosition@time_us,c
 18371  003910  0E00               	movlw	0
 18372  003912  6E04               	movwf	i2updateServoPosition@timer+1,c
 18373  003914  0E03               	movlw	3
 18374  003916  6E03               	movwf	i2updateServoPosition@timer,c
 18375  003918  EC3F  F025         	call	i2_updateServoPosition	;wreg free
 18376                           
 18377                           ;sort.c: 584: servo_timer_counter = 0;
 18378  00391C  0E00               	movlw	0
 18379  00391E  6E6E               	movwf	_servo_timer_counter+1,c	;volatile
 18380  003920  0E00               	movlw	0
 18381  003922  6E6D               	movwf	_servo_timer_counter,c	;volatile
 18382                           
 18383                           ;sort.c: 585: servo_timer_target = 750;
 18384  003924  0E02               	movlw	2
 18385  003926  6E70               	movwf	_servo_timer_target+1,c	;volatile
 18386  003928  0EEE               	movlw	238
 18387  00392A  6E6F               	movwf	_servo_timer_target,c	;volatile
 18388                           
 18389                           ;sort.c: 586: break;
 18390  00392C  0012               	return	
 18391  00392E                     i2l9576:
 18392                           
 18393                           ;sort.c: 589: updateServoPosition(1200, 1);
 18394  00392E  0E04               	movlw	4
 18395  003930  6E02               	movwf	i2updateServoPosition@time_us+1,c
 18396  003932  0EB0               	movlw	176
 18397  003934  6E01               	movwf	i2updateServoPosition@time_us,c
 18398  003936  0E00               	movlw	0
 18399  003938  6E04               	movwf	i2updateServoPosition@timer+1,c
 18400  00393A  0E01               	movlw	1
 18401  00393C  6E03               	movwf	i2updateServoPosition@timer,c
 18402  00393E  EC3F  F025         	call	i2_updateServoPosition	;wreg free
 18403                           
 18404                           ;sort.c: 590: updateServoPosition(1050, 3);
 18405  003942  0E04               	movlw	4
 18406  003944  6E02               	movwf	i2updateServoPosition@time_us+1,c
 18407  003946  0E1A               	movlw	26
 18408  003948  6E01               	movwf	i2updateServoPosition@time_us,c
 18409  00394A  0E00               	movlw	0
 18410  00394C  6E04               	movwf	i2updateServoPosition@timer+1,c
 18411  00394E  0E03               	movlw	3
 18412  003950  6E03               	movwf	i2updateServoPosition@timer,c
 18413  003952  EC3F  F025         	call	i2_updateServoPosition	;wreg free
 18414                           
 18415                           ;sort.c: 591: servo_timer_counter = 0;
 18416  003956  0E00               	movlw	0
 18417  003958  6E6E               	movwf	_servo_timer_counter+1,c	;volatile
 18418  00395A  0E00               	movlw	0
 18419  00395C  6E6D               	movwf	_servo_timer_counter,c	;volatile
 18420                           
 18421                           ;sort.c: 592: servo_timer_target = 9999;
 18422  00395E  0E27               	movlw	39
 18423  003960  6E70               	movwf	_servo_timer_target+1,c	;volatile
 18424  003962  0E0F               	movlw	15
 18425  003964  6E6F               	movwf	_servo_timer_target,c	;volatile
 18426                           
 18427                           ;sort.c: 594: f_can_distributed = 1;
 18428  003966  0E00               	movlw	0
 18429  003968  0101               	movlb	1	; () banked
 18430  00396A  6F36               	movwf	(_f_can_distributed+1)& (0+255),b
 18431  00396C  0E01               	movlw	1
 18432  00396E  6F35               	movwf	_f_can_distributed& (0+255),b
 18433                           
 18434                           ; BSR set to: 1
 18435                           ;sort.c: 595: if(f_lastCan == 1){
 18436  003970  0100               	movlb	0	; () banked
 18437  003972  05F0               	decf	_f_lastCan& (0+255),w,b
 18438  003974  0100               	movlb	0	; () banked
 18439  003976  11F1               	iorwf	(_f_lastCan+1)& (0+255),w,b
 18440  003978  A4D8               	btfss	status,2,c
 18441  00397A  0012               	return	
 18442                           
 18443                           ; BSR set to: 0
 18444                           ;sort.c: 596: machine_state = DoneSorting_state;
 18445  00397C  0E02               	movlw	2
 18446  00397E  0100               	movlb	0	; () banked
 18447  003980  6FFC               	movwf	_machine_state& (0+255),b
 18448                           
 18449                           ; BSR set to: 0
 18450                           ;sort.c: 602: }
 18451                           
 18452                           ; BSR set to: 0
 18453                           ;sort.c: 601: break;
 18454                           
 18455                           ;sort.c: 600: default:
 18456                           
 18457                           ; BSR set to: 0
 18458                           ;sort.c: 597: }
 18459                           ;sort.c: 598: break;
 18460  003982  0012               	return	
 18461  003984                     i2l9590:
 18462  003984  C071  F009         	movff	_tilt_servo_state,??_updateServoStates	;volatile
 18463  003988  C072  F00A         	movff	_tilt_servo_state+1,??_updateServoStates+1	;volatile
 18464                           
 18465                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
 18466                           ; Switch size 1, requested type "space"
 18467                           ; Number of cases is 2, Range of values is 4 to 5
 18468                           ; switch strategies available:
 18469                           ; Name         Instructions Cycles
 18470                           ; simple_byte            7     4 (average)
 18471                           ;	Chosen strategy is simple_byte
 18472  00398C  500A               	movf	??_updateServoStates+1,w,c
 18473  00398E  0A04               	xorlw	4	; case 4
 18474  003990  B4D8               	btfsc	status,2,c
 18475  003992  D004               	goto	i2l10242
 18476  003994  0A01               	xorlw	1	; case 5
 18477  003996  A4D8               	btfss	status,2,c
 18478  003998  0012               	return	
 18479  00399A  D008               	goto	i2l10244
 18480  00399C                     i2l10242:
 18481                           
 18482                           ; Switch size 1, requested type "space"
 18483                           ; Number of cases is 2, Range of values is 26 to 236
 18484                           ; switch strategies available:
 18485                           ; Name         Instructions Cycles
 18486                           ; simple_byte            7     4 (average)
 18487                           ;	Chosen strategy is simple_byte
 18488  00399C  5009               	movf	??_updateServoStates,w,c
 18489  00399E  0A1A               	xorlw	26	; case 26
 18490  0039A0  B4D8               	btfsc	status,2,c
 18491  0039A2  D7C5               	goto	i2l9576
 18492  0039A4  0AF6               	xorlw	246	; case 236
 18493  0039A6  A4D8               	btfss	status,2,c
 18494  0039A8  0012               	return	
 18495  0039AA  D79B               	goto	i2l9564
 18496  0039AC                     i2l10244:
 18497                           
 18498                           ; Switch size 1, requested type "space"
 18499                           ; Number of cases is 1, Range of values is 110 to 110
 18500                           ; switch strategies available:
 18501                           ; Name         Instructions Cycles
 18502                           ; simple_byte            4     3 (average)
 18503                           ;	Chosen strategy is simple_byte
 18504  0039AC  5009               	movf	??_updateServoStates,w,c
 18505  0039AE  0A6E               	xorlw	110	; case 110
 18506  0039B0  A4D8               	btfss	status,2,c
 18507  0039B2  0012               	return	
 18508  0039B4  D7A9               	goto	i2l9570
 18509  0039B6                     __end_of_updateServoStates:
 18510                           	opt stack 0
 18511                           pclatu	equ	0xFFB
 18512                           pclath	equ	0xFFA
 18513                           tblptru	equ	0xFF8
 18514                           tblptrh	equ	0xFF7
 18515                           tblptrl	equ	0xFF6
 18516                           tablat	equ	0xFF5
 18517                           prodh	equ	0xFF4
 18518                           prodl	equ	0xFF3
 18519                           intcon	equ	0xFF2
 18520                           intcon2	equ	0xFF1
 18521                           intcon3	equ	0xFF0
 18522                           indf0	equ	0xFEF
 18523                           postinc0	equ	0xFEE
 18524                           fsr0h	equ	0xFEA
 18525                           fsr0l	equ	0xFE9
 18526                           wreg	equ	0xFE8
 18527                           postdec1	equ	0xFE5
 18528                           fsr1h	equ	0xFE2
 18529                           fsr1l	equ	0xFE1
 18530                           indf2	equ	0xFDF
 18531                           postinc2	equ	0xFDE
 18532                           postdec2	equ	0xFDD
 18533                           fsr2h	equ	0xFDA
 18534                           fsr2l	equ	0xFD9
 18535                           status	equ	0xFD8
 18536                           
 18537 ;; *************** function i2_updateServoPosition *****************
 18538 ;; Defined at:
 18539 ;;		line 522 in file "sort.c"
 18540 ;; Parameters:    Size  Location     Type
 18541 ;;  time_us         2    0[COMRAM] int 
 18542 ;;  timer           2    2[COMRAM] int 
 18543 ;; Auto vars:     Size  Location     Type
 18544 ;;  updateServoP    2    6[COMRAM] unsigned int 
 18545 ;; Return value:  Size  Location     Type
 18546 ;;                  1    wreg      void 
 18547 ;; Registers used:
 18548 ;;		wreg, status,2, status,0
 18549 ;; Tracked objects:
 18550 ;;		On entry : 0/0
 18551 ;;		On exit  : 0/0
 18552 ;;		Unchanged: 0/0
 18553 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18554 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18555 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18556 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18557 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18558 ;;Total ram usage:        8 bytes
 18559 ;; Hardware stack levels used:    1
 18560 ;; This function calls:
 18561 ;;		Nothing
 18562 ;; This function is called by:
 18563 ;;		_updateServoStates
 18564 ;; This function uses a non-reentrant model
 18565 ;;
 18566                           
 18567                           	psect	text61
 18568  004A7E                     __ptext61:
 18569                           	opt stack 0
 18570  004A7E                     i2_updateServoPosition:
 18571                           	opt stack 22
 18572                           
 18573                           ;sort.c: 523: unsigned int my_time = 65535 - time_us;
 18574                           
 18575                           ;incstack = 0
 18576  004A7E  C001  F005         	movff	i2updateServoPosition@time_us,??i2_updateServoPosition
 18577  004A82  C002  F006         	movff	i2updateServoPosition@time_us+1,??i2_updateServoPosition+1
 18578  004A86  1E05               	comf	??i2_updateServoPosition,f,c
 18579  004A88  1E06               	comf	??i2_updateServoPosition+1,f,c
 18580  004A8A  4A05               	infsnz	??i2_updateServoPosition,f,c
 18581  004A8C  2A06               	incf	??i2_updateServoPosition+1,f,c
 18582  004A8E  0EFF               	movlw	255
 18583  004A90  2405               	addwf	??i2_updateServoPosition,w,c
 18584  004A92  6E07               	movwf	i2updateServoPosition@my_time,c
 18585  004A94  0EFF               	movlw	255
 18586  004A96  2006               	addwfc	??i2_updateServoPosition+1,w,c
 18587  004A98  6E08               	movwf	i2updateServoPosition@my_time+1,c
 18588                           
 18589                           ;sort.c: 524: switch(timer){
 18590  004A9A  D019               	goto	i2l8750
 18591  004A9C                     i2l8744:
 18592                           
 18593                           ;sort.c: 526: servoTimes[0] = my_time >> 8;
 18594  004A9C  5008               	movf	i2updateServoPosition@my_time+1,w,c
 18595  004A9E  0100               	movlb	0	; () banked
 18596  004AA0  6FDA               	movwf	_servoTimes& (0+255),b
 18597  004AA2  6BDB               	clrf	(_servoTimes+1)& (0+255),b
 18598                           
 18599                           ;sort.c: 527: servoTimes[1] = my_time & 0xFF;
 18600  004AA4  5007               	movf	i2updateServoPosition@my_time,w,c
 18601  004AA6  0100               	movlb	0	; () banked
 18602  004AA8  6FDC               	movwf	(_servoTimes+2)& (0+255),b
 18603  004AAA  6BDD               	clrf	(_servoTimes+3)& (0+255),b
 18604                           
 18605                           ; BSR set to: 0
 18606                           ;sort.c: 529: pan_servo_state = time_us;
 18607  004AAC  C001  F06B         	movff	i2updateServoPosition@time_us,_pan_servo_state	;volatile
 18608  004AB0  C002  F06C         	movff	i2updateServoPosition@time_us+1,_pan_servo_state+1	;volatile
 18609  004AB4                     i2l890:
 18610                           
 18611                           ;sort.c: 531: servoTimes[2] = my_time >> 8;
 18612  004AB4  5008               	movf	i2updateServoPosition@my_time+1,w,c
 18613  004AB6  0100               	movlb	0	; () banked
 18614  004AB8  6FDE               	movwf	(_servoTimes+4)& (0+255),b
 18615  004ABA  6BDF               	clrf	(_servoTimes+5)& (0+255),b
 18616                           
 18617                           ;sort.c: 532: servoTimes[3] = my_time & 0xFF;
 18618  004ABC  5007               	movf	i2updateServoPosition@my_time,w,c
 18619  004ABE  0100               	movlb	0	; () banked
 18620  004AC0  6FE0               	movwf	(_servoTimes+6)& (0+255),b
 18621  004AC2  6BE1               	clrf	(_servoTimes+7)& (0+255),b
 18622                           
 18623                           ; BSR set to: 0
 18624                           ;sort.c: 534: tilt_servo_state = time_us;
 18625  004AC4  C001  F071         	movff	i2updateServoPosition@time_us,_tilt_servo_state	;volatile
 18626  004AC8  C002  F072         	movff	i2updateServoPosition@time_us+1,_tilt_servo_state+1	;volatile
 18627                           
 18628                           ;sort.c: 535: }
 18629  004ACC  0012               	return	
 18630  004ACE                     i2l8750:
 18631  004ACE  C003  F005         	movff	i2updateServoPosition@timer,??i2_updateServoPosition
 18632  004AD2  C004  F006         	movff	i2updateServoPosition@timer+1,??i2_updateServoPosition+1
 18633                           
 18634                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 18635                           ; Switch size 1, requested type "space"
 18636                           ; Number of cases is 1, Range of values is 0 to 0
 18637                           ; switch strategies available:
 18638                           ; Name         Instructions Cycles
 18639                           ; simple_byte            4     3 (average)
 18640                           ;	Chosen strategy is simple_byte
 18641  004AD6  5006               	movf	??i2_updateServoPosition+1,w,c
 18642  004AD8  0A00               	xorlw	0	; case 0
 18643  004ADA  A4D8               	btfss	status,2,c
 18644  004ADC  0012               	return	
 18645                           
 18646                           ; Switch size 1, requested type "space"
 18647                           ; Number of cases is 2, Range of values is 1 to 3
 18648                           ; switch strategies available:
 18649                           ; Name         Instructions Cycles
 18650                           ; simple_byte            7     4 (average)
 18651                           ;	Chosen strategy is simple_byte
 18652  004ADE  5005               	movf	??i2_updateServoPosition,w,c
 18653  004AE0  0A01               	xorlw	1	; case 1
 18654  004AE2  B4D8               	btfsc	status,2,c
 18655  004AE4  D7DB               	goto	i2l8744
 18656  004AE6  0A02               	xorlw	2	; case 3
 18657  004AE8  A4D8               	btfss	status,2,c
 18658  004AEA  0012               	return	
 18659  004AEC  D7E3               	goto	i2l890
 18660  004AEE                     __end_ofi2_updateServoPosition:
 18661                           	opt stack 0
 18662                           pclatu	equ	0xFFB
 18663                           pclath	equ	0xFFA
 18664                           tblptru	equ	0xFF8
 18665                           tblptrh	equ	0xFF7
 18666                           tblptrl	equ	0xFF6
 18667                           tablat	equ	0xFF5
 18668                           prodh	equ	0xFF4
 18669                           prodl	equ	0xFF3
 18670                           intcon	equ	0xFF2
 18671                           intcon2	equ	0xFF1
 18672                           intcon3	equ	0xFF0
 18673                           indf0	equ	0xFEF
 18674                           postinc0	equ	0xFEE
 18675                           fsr0h	equ	0xFEA
 18676                           fsr0l	equ	0xFE9
 18677                           wreg	equ	0xFE8
 18678                           postdec1	equ	0xFE5
 18679                           fsr1h	equ	0xFE2
 18680                           fsr1l	equ	0xFE1
 18681                           indf2	equ	0xFDF
 18682                           postinc2	equ	0xFDE
 18683                           postdec2	equ	0xFDD
 18684                           fsr2h	equ	0xFDA
 18685                           fsr2l	equ	0xFD9
 18686                           status	equ	0xFD8
 18687                           
 18688 ;; *************** function _updateMenu *****************
 18689 ;; Defined at:
 18690 ;;		line 216 in file "UI.c"
 18691 ;; Parameters:    Size  Location     Type
 18692 ;;		None
 18693 ;; Auto vars:     Size  Location     Type
 18694 ;;		None
 18695 ;; Return value:  Size  Location     Type
 18696 ;;                  1    wreg      void 
 18697 ;; Registers used:
 18698 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18699 ;; Tracked objects:
 18700 ;;		On entry : 0/0
 18701 ;;		On exit  : 0/0
 18702 ;;		Unchanged: 0/0
 18703 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18704 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18705 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18706 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18707 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18708 ;;Total ram usage:        2 bytes
 18709 ;; Hardware stack levels used:    1
 18710 ;; Hardware stack levels required when called:    5
 18711 ;; This function calls:
 18712 ;;		_change_state_to_logs_11
 18713 ;;		_change_state_to_logs_12
 18714 ;;		_change_state_to_logs_22
 18715 ;;		_change_state_to_logs_23
 18716 ;;		_change_state_to_logs_33
 18717 ;;		_change_state_to_logs_34
 18718 ;;		_change_state_to_menu_11
 18719 ;;		_change_state_to_menu_23
 18720 ;;		_dispLogs
 18721 ;;		_inputHandler
 18722 ;;		i2_change_state_to_menu_12
 18723 ;;		i2_change_state_to_menu_22
 18724 ;;		i2_change_state_to_menu_start
 18725 ;; This function is called by:
 18726 ;;		_handler
 18727 ;; This function uses a non-reentrant model
 18728 ;;
 18729                           
 18730                           	psect	text62
 18731  002A00                     __ptext62:
 18732                           	opt stack 0
 18733  002A00                     _updateMenu:
 18734                           	opt stack 18
 18735                           
 18736                           ;UI.c: 217: up = 0; down = 0; enter = 0; back = 0;
 18737                           
 18738                           ;incstack = 0
 18739  002A00  0E00               	movlw	0
 18740  002A02  6E76               	movwf	_up+1,c
 18741  002A04  0E00               	movlw	0
 18742  002A06  6E75               	movwf	_up,c
 18743  002A08  0E00               	movlw	0
 18744  002A0A  6E5E               	movwf	_down+1,c
 18745  002A0C  0E00               	movlw	0
 18746  002A0E  6E5D               	movwf	_down,c
 18747  002A10  0E00               	movlw	0
 18748  002A12  6E60               	movwf	_enter+1,c
 18749  002A14  0E00               	movlw	0
 18750  002A16  6E5F               	movwf	_enter,c
 18751  002A18  0E00               	movlw	0
 18752  002A1A  6E5C               	movwf	_back+1,c
 18753  002A1C  0E00               	movlw	0
 18754  002A1E  6E5B               	movwf	_back,c
 18755                           
 18756                           ;UI.c: 218: (INTCONbits.GIE = 0);
 18757  002A20  9EF2               	bcf	intcon,7,c	;volatile
 18758                           
 18759                           ;UI.c: 220: if (inputHandler()
 18760                           ;UI.c: 223: ){
 18761  002A22  EC01  F01B         	call	_inputHandler	;wreg free
 18762  002A26  502A               	movf	?_inputHandler,w,c
 18763  002A28  102B               	iorwf	?_inputHandler+1,w,c
 18764  002A2A  A4D8               	btfss	status,2,c
 18765  002A2C  D112               	goto	i2l9284
 18766  002A2E  D146               	goto	i2l263
 18767  002A30                     i2l9136:
 18768                           
 18769                           ;UI.c: 227: change_state_to_menu_11();
 18770  002A30  EC94  F028         	call	_change_state_to_menu_11	;wreg free
 18771                           
 18772                           ;UI.c: 228: break;
 18773  002A34  D143               	goto	i2l263
 18774  002A36                     i2l9138:
 18775                           
 18776                           ;UI.c: 231: if(up){
 18777  002A36  5075               	movf	_up,w,c
 18778  002A38  1076               	iorwf	_up+1,w,c
 18779  002A3A  B4D8               	btfsc	status,2,c
 18780  002A3C  D003               	goto	i2l9142
 18781                           
 18782                           ;UI.c: 232: change_state_to_menu_23();
 18783  002A3E  EC7C  F028         	call	_change_state_to_menu_23	;wreg free
 18784                           
 18785                           ;UI.c: 233: }
 18786  002A42  D13C               	goto	i2l263
 18787  002A44                     i2l9142:
 18788                           
 18789                           ;UI.c: 234: else if(down){
 18790  002A44  505D               	movf	_down,w,c
 18791  002A46  105E               	iorwf	_down+1,w,c
 18792  002A48  B4D8               	btfsc	status,2,c
 18793  002A4A  D003               	goto	i2l9146
 18794                           
 18795                           ;UI.c: 235: change_state_to_menu_12();
 18796  002A4C  EC64  F028         	call	i2_change_state_to_menu_12	;wreg free
 18797                           
 18798                           ;UI.c: 236: }
 18799  002A50  D135               	goto	i2l263
 18800  002A52                     i2l9146:
 18801                           
 18802                           ;UI.c: 237: else if(enter){
 18803  002A52  505F               	movf	_enter,w,c
 18804  002A54  1060               	iorwf	_enter+1,w,c
 18805  002A56  B4D8               	btfsc	status,2,c
 18806  002A58  D131               	goto	i2l263
 18807                           
 18808                           ;UI.c: 238: change_state_to_menu_start();
 18809  002A5A  ECA7  F029         	call	i2_change_state_to_menu_start	;wreg free
 18810                           
 18811                           ;UI.c: 239: }
 18812                           ;UI.c: 240: break;
 18813  002A5E  D12E               	goto	i2l263
 18814  002A60                     i2l9150:
 18815                           
 18816                           ;UI.c: 243: if(up){
 18817  002A60  5075               	movf	_up,w,c
 18818  002A62  1076               	iorwf	_up+1,w,c
 18819  002A64  B4D8               	btfsc	status,2,c
 18820  002A66  D003               	goto	i2l9154
 18821                           
 18822                           ;UI.c: 244: change_state_to_menu_11();
 18823  002A68  EC94  F028         	call	_change_state_to_menu_11	;wreg free
 18824                           
 18825                           ;UI.c: 245: }
 18826  002A6C  D127               	goto	i2l263
 18827  002A6E                     i2l9154:
 18828                           
 18829                           ;UI.c: 246: else if(down){
 18830  002A6E  505D               	movf	_down,w,c
 18831  002A70  105E               	iorwf	_down+1,w,c
 18832  002A72  B4D8               	btfsc	status,2,c
 18833  002A74  D011               	goto	i2l9170
 18834                           
 18835                           ;UI.c: 247: change_state_to_menu_23();
 18836  002A76  EC7C  F028         	call	_change_state_to_menu_23	;wreg free
 18837                           
 18838                           ;UI.c: 248: }
 18839  002A7A  D120               	goto	i2l263
 18840  002A7C                     i2l9162:
 18841                           
 18842                           ;UI.c: 255: if(up){
 18843  002A7C  5075               	movf	_up,w,c
 18844  002A7E  1076               	iorwf	_up+1,w,c
 18845  002A80  B4D8               	btfsc	status,2,c
 18846  002A82  D003               	goto	i2l9166
 18847                           
 18848                           ;UI.c: 256: change_state_to_menu_11();
 18849  002A84  EC94  F028         	call	_change_state_to_menu_11	;wreg free
 18850                           
 18851                           ;UI.c: 257: }
 18852  002A88  D119               	goto	i2l263
 18853  002A8A                     i2l9166:
 18854                           
 18855                           ;UI.c: 258: else if(down){
 18856  002A8A  505D               	movf	_down,w,c
 18857  002A8C  105E               	iorwf	_down+1,w,c
 18858  002A8E  B4D8               	btfsc	status,2,c
 18859  002A90  D003               	goto	i2l9170
 18860                           
 18861                           ;UI.c: 259: change_state_to_menu_23();
 18862  002A92  EC7C  F028         	call	_change_state_to_menu_23	;wreg free
 18863                           
 18864                           ;UI.c: 260: }
 18865  002A96  D112               	goto	i2l263
 18866  002A98                     i2l9170:
 18867                           
 18868                           ;UI.c: 261: else if(enter){
 18869  002A98  505F               	movf	_enter,w,c
 18870  002A9A  1060               	iorwf	_enter+1,w,c
 18871  002A9C  B4D8               	btfsc	status,2,c
 18872  002A9E  D10E               	goto	i2l263
 18873                           
 18874                           ;UI.c: 262: machine_state = Sorting_state;
 18875  002AA0  0E01               	movlw	1
 18876  002AA2  0100               	movlb	0	; () banked
 18877  002AA4  6FFC               	movwf	_machine_state& (0+255),b
 18878                           
 18879                           ; BSR set to: 0
 18880                           ;UI.c: 263: }
 18881                           ;UI.c: 264: break;
 18882                           
 18883                           ; BSR set to: 0
 18884                           
 18885                           ; BSR set to: 0
 18886  002AA6  D10A               	goto	i2l263
 18887  002AA8                     i2l9174:
 18888                           
 18889                           ;UI.c: 267: if(up){
 18890  002AA8  5075               	movf	_up,w,c
 18891  002AAA  1076               	iorwf	_up+1,w,c
 18892  002AAC  B4D8               	btfsc	status,2,c
 18893  002AAE  D003               	goto	i2l9178
 18894                           
 18895                           ;UI.c: 268: change_state_to_menu_22();
 18896  002AB0  EC4C  F028         	call	i2_change_state_to_menu_22	;wreg free
 18897                           
 18898                           ;UI.c: 269: }
 18899  002AB4  D103               	goto	i2l263
 18900  002AB6                     i2l9178:
 18901                           
 18902                           ;UI.c: 270: else if(down){
 18903  002AB6  505D               	movf	_down,w,c
 18904  002AB8  105E               	iorwf	_down+1,w,c
 18905  002ABA  B4D8               	btfsc	status,2,c
 18906  002ABC  D003               	goto	i2l9182
 18907                           
 18908                           ;UI.c: 271: change_state_to_menu_11();
 18909  002ABE  EC94  F028         	call	_change_state_to_menu_11	;wreg free
 18910                           
 18911                           ;UI.c: 272: }
 18912  002AC2  D0FC               	goto	i2l263
 18913  002AC4                     i2l9182:
 18914                           
 18915                           ;UI.c: 273: else if(enter){
 18916  002AC4  505F               	movf	_enter,w,c
 18917  002AC6  1060               	iorwf	_enter+1,w,c
 18918  002AC8  B4D8               	btfsc	status,2,c
 18919  002ACA  D0F8               	goto	i2l263
 18920                           
 18921                           ;UI.c: 274: change_state_to_logs_11();
 18922  002ACC  EC0C  F029         	call	_change_state_to_logs_11	;wreg free
 18923                           
 18924                           ;UI.c: 275: }
 18925                           ;UI.c: 276: break;
 18926  002AD0  D0F5               	goto	i2l263
 18927  002AD2                     i2l9186:
 18928                           
 18929                           ;UI.c: 279: if(up){
 18930  002AD2  5075               	movf	_up,w,c
 18931  002AD4  1076               	iorwf	_up+1,w,c
 18932  002AD6  B4D8               	btfsc	status,2,c
 18933  002AD8  D003               	goto	i2l9190
 18934                           
 18935                           ;UI.c: 280: change_state_to_logs_34();
 18936  002ADA  ECAC  F028         	call	_change_state_to_logs_34	;wreg free
 18937                           
 18938                           ;UI.c: 281: }
 18939  002ADE  D0EE               	goto	i2l263
 18940  002AE0                     i2l9190:
 18941                           
 18942                           ;UI.c: 282: else if(down){
 18943  002AE0  505D               	movf	_down,w,c
 18944  002AE2  105E               	iorwf	_down+1,w,c
 18945  002AE4  B4D8               	btfsc	status,2,c
 18946  002AE6  D003               	goto	i2l9194
 18947                           
 18948                           ;UI.c: 283: change_state_to_logs_12();
 18949  002AE8  ECF4  F028         	call	_change_state_to_logs_12	;wreg free
 18950                           
 18951                           ;UI.c: 284: }
 18952  002AEC  D0E7               	goto	i2l263
 18953  002AEE                     i2l9194:
 18954                           
 18955                           ;UI.c: 285: else if(enter){
 18956  002AEE  505F               	movf	_enter,w,c
 18957  002AF0  1060               	iorwf	_enter+1,w,c
 18958  002AF2  B4D8               	btfsc	status,2,c
 18959  002AF4  D007               	goto	i2l9198
 18960                           
 18961                           ;UI.c: 286: dispLogs(1);
 18962  002AF6  0E00               	movlw	0
 18963  002AF8  6E13               	movwf	dispLogs@myLog+1,c
 18964  002AFA  0E01               	movlw	1
 18965  002AFC  6E12               	movwf	dispLogs@myLog,c
 18966  002AFE  ECE1  F029         	call	_dispLogs	;wreg free
 18967                           
 18968                           ;UI.c: 287: }
 18969  002B02  D0DC               	goto	i2l263
 18970  002B04                     i2l9198:
 18971                           
 18972                           ;UI.c: 288: else if(back){
 18973  002B04  505B               	movf	_back,w,c
 18974  002B06  105C               	iorwf	_back+1,w,c
 18975  002B08  B4D8               	btfsc	status,2,c
 18976  002B0A  D0D8               	goto	i2l263
 18977                           
 18978                           ;UI.c: 289: change_state_to_menu_23();
 18979  002B0C  EC7C  F028         	call	_change_state_to_menu_23	;wreg free
 18980                           
 18981                           ;UI.c: 290: }
 18982                           ;UI.c: 291: break;
 18983  002B10  D0D5               	goto	i2l263
 18984  002B12                     i2l9202:
 18985                           
 18986                           ;UI.c: 294: if(up){
 18987  002B12  5075               	movf	_up,w,c
 18988  002B14  1076               	iorwf	_up+1,w,c
 18989  002B16  B4D8               	btfsc	status,2,c
 18990  002B18  D003               	goto	i2l9206
 18991                           
 18992                           ;UI.c: 295: change_state_to_logs_11();
 18993  002B1A  EC0C  F029         	call	_change_state_to_logs_11	;wreg free
 18994                           
 18995                           ;UI.c: 296: }
 18996  002B1E  D0CE               	goto	i2l263
 18997  002B20                     i2l9206:
 18998                           
 18999                           ;UI.c: 297: else if(down){
 19000  002B20  505D               	movf	_down,w,c
 19001  002B22  105E               	iorwf	_down+1,w,c
 19002  002B24  B4D8               	btfsc	status,2,c
 19003  002B26  D003               	goto	i2l9210
 19004                           
 19005                           ;UI.c: 298: change_state_to_logs_23();
 19006  002B28  EC3B  F029         	call	_change_state_to_logs_23	;wreg free
 19007                           
 19008                           ;UI.c: 299: }
 19009  002B2C  D0C7               	goto	i2l263
 19010  002B2E                     i2l9210:
 19011                           
 19012                           ;UI.c: 300: else if(enter){
 19013  002B2E  505F               	movf	_enter,w,c
 19014  002B30  1060               	iorwf	_enter+1,w,c
 19015  002B32  B4D8               	btfsc	status,2,c
 19016  002B34  D007               	goto	i2l9214
 19017                           
 19018                           ;UI.c: 301: dispLogs(2);
 19019  002B36  0E00               	movlw	0
 19020  002B38  6E13               	movwf	dispLogs@myLog+1,c
 19021  002B3A  0E02               	movlw	2
 19022  002B3C  6E12               	movwf	dispLogs@myLog,c
 19023  002B3E  ECE1  F029         	call	_dispLogs	;wreg free
 19024                           
 19025                           ;UI.c: 302: }
 19026  002B42  D0BC               	goto	i2l263
 19027  002B44                     i2l9214:
 19028                           
 19029                           ;UI.c: 303: else if(back){
 19030  002B44  505B               	movf	_back,w,c
 19031  002B46  105C               	iorwf	_back+1,w,c
 19032  002B48  B4D8               	btfsc	status,2,c
 19033  002B4A  D0B8               	goto	i2l263
 19034                           
 19035                           ;UI.c: 304: change_state_to_menu_23();
 19036  002B4C  EC7C  F028         	call	_change_state_to_menu_23	;wreg free
 19037                           
 19038                           ;UI.c: 305: }
 19039                           ;UI.c: 306: break;
 19040  002B50  D0B5               	goto	i2l263
 19041  002B52                     i2l9218:
 19042                           
 19043                           ;UI.c: 309: if(up){
 19044  002B52  5075               	movf	_up,w,c
 19045  002B54  1076               	iorwf	_up+1,w,c
 19046  002B56  B4D8               	btfsc	status,2,c
 19047  002B58  D003               	goto	i2l9222
 19048                           
 19049                           ;UI.c: 310: change_state_to_logs_11();
 19050  002B5A  EC0C  F029         	call	_change_state_to_logs_11	;wreg free
 19051                           
 19052                           ;UI.c: 311: }
 19053  002B5E  D0AE               	goto	i2l263
 19054  002B60                     i2l9222:
 19055                           
 19056                           ;UI.c: 312: else if(down){
 19057  002B60  505D               	movf	_down,w,c
 19058  002B62  105E               	iorwf	_down+1,w,c
 19059  002B64  B4D8               	btfsc	status,2,c
 19060  002B66  D003               	goto	i2l9226
 19061                           
 19062                           ;UI.c: 313: change_state_to_logs_23();
 19063  002B68  EC3B  F029         	call	_change_state_to_logs_23	;wreg free
 19064                           
 19065                           ;UI.c: 314: }
 19066  002B6C  D0A7               	goto	i2l263
 19067  002B6E                     i2l9226:
 19068                           
 19069                           ;UI.c: 315: else if(enter){
 19070  002B6E  505F               	movf	_enter,w,c
 19071  002B70  1060               	iorwf	_enter+1,w,c
 19072  002B72  B4D8               	btfsc	status,2,c
 19073  002B74  D007               	goto	i2l9230
 19074                           
 19075                           ;UI.c: 316: dispLogs(2);
 19076  002B76  0E00               	movlw	0
 19077  002B78  6E13               	movwf	dispLogs@myLog+1,c
 19078  002B7A  0E02               	movlw	2
 19079  002B7C  6E12               	movwf	dispLogs@myLog,c
 19080  002B7E  ECE1  F029         	call	_dispLogs	;wreg free
 19081                           
 19082                           ;UI.c: 317: }
 19083  002B82  D09C               	goto	i2l263
 19084  002B84                     i2l9230:
 19085                           
 19086                           ;UI.c: 318: else if(back){
 19087  002B84  505B               	movf	_back,w,c
 19088  002B86  105C               	iorwf	_back+1,w,c
 19089  002B88  B4D8               	btfsc	status,2,c
 19090  002B8A  D098               	goto	i2l263
 19091                           
 19092                           ;UI.c: 319: change_state_to_menu_23();
 19093  002B8C  EC7C  F028         	call	_change_state_to_menu_23	;wreg free
 19094                           
 19095                           ;UI.c: 320: }
 19096                           ;UI.c: 321: break;
 19097  002B90  D095               	goto	i2l263
 19098  002B92                     i2l9234:
 19099                           
 19100                           ;UI.c: 324: if(up){
 19101  002B92  5075               	movf	_up,w,c
 19102  002B94  1076               	iorwf	_up+1,w,c
 19103  002B96  B4D8               	btfsc	status,2,c
 19104  002B98  D003               	goto	i2l9238
 19105                           
 19106                           ;UI.c: 325: change_state_to_logs_22();
 19107  002B9A  ECDC  F028         	call	_change_state_to_logs_22	;wreg free
 19108                           
 19109                           ;UI.c: 326: }
 19110  002B9E  D08E               	goto	i2l263
 19111  002BA0                     i2l9238:
 19112                           
 19113                           ;UI.c: 327: else if(down){
 19114  002BA0  505D               	movf	_down,w,c
 19115  002BA2  105E               	iorwf	_down+1,w,c
 19116  002BA4  B4D8               	btfsc	status,2,c
 19117  002BA6  D003               	goto	i2l9242
 19118                           
 19119                           ;UI.c: 328: change_state_to_logs_34();
 19120  002BA8  ECAC  F028         	call	_change_state_to_logs_34	;wreg free
 19121                           
 19122                           ;UI.c: 329: }
 19123  002BAC  D087               	goto	i2l263
 19124  002BAE                     i2l9242:
 19125                           
 19126                           ;UI.c: 330: else if(enter){
 19127  002BAE  505F               	movf	_enter,w,c
 19128  002BB0  1060               	iorwf	_enter+1,w,c
 19129  002BB2  B4D8               	btfsc	status,2,c
 19130  002BB4  D007               	goto	i2l9246
 19131                           
 19132                           ;UI.c: 331: dispLogs(3);
 19133  002BB6  0E00               	movlw	0
 19134  002BB8  6E13               	movwf	dispLogs@myLog+1,c
 19135  002BBA  0E03               	movlw	3
 19136  002BBC  6E12               	movwf	dispLogs@myLog,c
 19137  002BBE  ECE1  F029         	call	_dispLogs	;wreg free
 19138                           
 19139                           ;UI.c: 332: }
 19140  002BC2  D07C               	goto	i2l263
 19141  002BC4                     i2l9246:
 19142                           
 19143                           ;UI.c: 333: else if(back){
 19144  002BC4  505B               	movf	_back,w,c
 19145  002BC6  105C               	iorwf	_back+1,w,c
 19146  002BC8  B4D8               	btfsc	status,2,c
 19147  002BCA  D078               	goto	i2l263
 19148                           
 19149                           ;UI.c: 334: change_state_to_menu_23();
 19150  002BCC  EC7C  F028         	call	_change_state_to_menu_23	;wreg free
 19151                           
 19152                           ;UI.c: 335: }
 19153                           ;UI.c: 336: break;
 19154  002BD0  D075               	goto	i2l263
 19155  002BD2                     i2l9250:
 19156                           
 19157                           ;UI.c: 339: if(up){
 19158  002BD2  5075               	movf	_up,w,c
 19159  002BD4  1076               	iorwf	_up+1,w,c
 19160  002BD6  B4D8               	btfsc	status,2,c
 19161  002BD8  D003               	goto	i2l9254
 19162                           
 19163                           ;UI.c: 340: change_state_to_logs_22();
 19164  002BDA  ECDC  F028         	call	_change_state_to_logs_22	;wreg free
 19165                           
 19166                           ;UI.c: 341: }
 19167  002BDE  D06E               	goto	i2l263
 19168  002BE0                     i2l9254:
 19169                           
 19170                           ;UI.c: 342: else if(down){
 19171  002BE0  505D               	movf	_down,w,c
 19172  002BE2  105E               	iorwf	_down+1,w,c
 19173  002BE4  B4D8               	btfsc	status,2,c
 19174  002BE6  D003               	goto	i2l9258
 19175                           
 19176                           ;UI.c: 343: change_state_to_logs_34();
 19177  002BE8  ECAC  F028         	call	_change_state_to_logs_34	;wreg free
 19178                           
 19179                           ;UI.c: 344: }
 19180  002BEC  D067               	goto	i2l263
 19181  002BEE                     i2l9258:
 19182                           
 19183                           ;UI.c: 345: else if(enter){
 19184  002BEE  505F               	movf	_enter,w,c
 19185  002BF0  1060               	iorwf	_enter+1,w,c
 19186  002BF2  B4D8               	btfsc	status,2,c
 19187  002BF4  D007               	goto	i2l9262
 19188                           
 19189                           ;UI.c: 346: dispLogs(3);
 19190  002BF6  0E00               	movlw	0
 19191  002BF8  6E13               	movwf	dispLogs@myLog+1,c
 19192  002BFA  0E03               	movlw	3
 19193  002BFC  6E12               	movwf	dispLogs@myLog,c
 19194  002BFE  ECE1  F029         	call	_dispLogs	;wreg free
 19195                           
 19196                           ;UI.c: 347: }
 19197  002C02  D05C               	goto	i2l263
 19198  002C04                     i2l9262:
 19199                           
 19200                           ;UI.c: 348: else if(back){
 19201  002C04  505B               	movf	_back,w,c
 19202  002C06  105C               	iorwf	_back+1,w,c
 19203  002C08  B4D8               	btfsc	status,2,c
 19204  002C0A  D058               	goto	i2l263
 19205                           
 19206                           ;UI.c: 349: change_state_to_menu_23();
 19207  002C0C  EC7C  F028         	call	_change_state_to_menu_23	;wreg free
 19208                           
 19209                           ;UI.c: 350: }
 19210                           ;UI.c: 351: break;
 19211  002C10  D055               	goto	i2l263
 19212  002C12                     i2l9266:
 19213                           
 19214                           ;UI.c: 354: if(up){
 19215  002C12  5075               	movf	_up,w,c
 19216  002C14  1076               	iorwf	_up+1,w,c
 19217  002C16  B4D8               	btfsc	status,2,c
 19218  002C18  D003               	goto	i2l9270
 19219                           
 19220                           ;UI.c: 355: change_state_to_logs_33();
 19221  002C1A  ECC4  F028         	call	_change_state_to_logs_33	;wreg free
 19222                           
 19223                           ;UI.c: 356: }
 19224  002C1E  D04E               	goto	i2l263
 19225  002C20                     i2l9270:
 19226                           
 19227                           ;UI.c: 357: else if(down){
 19228  002C20  505D               	movf	_down,w,c
 19229  002C22  105E               	iorwf	_down+1,w,c
 19230  002C24  B4D8               	btfsc	status,2,c
 19231  002C26  D003               	goto	i2l9274
 19232                           
 19233                           ;UI.c: 358: change_state_to_logs_11();
 19234  002C28  EC0C  F029         	call	_change_state_to_logs_11	;wreg free
 19235                           
 19236                           ;UI.c: 359: }
 19237  002C2C  D047               	goto	i2l263
 19238  002C2E                     i2l9274:
 19239                           
 19240                           ;UI.c: 360: else if(enter){
 19241  002C2E  505F               	movf	_enter,w,c
 19242  002C30  1060               	iorwf	_enter+1,w,c
 19243  002C32  B4D8               	btfsc	status,2,c
 19244  002C34  D007               	goto	i2l9278
 19245                           
 19246                           ;UI.c: 361: dispLogs(4);
 19247  002C36  0E00               	movlw	0
 19248  002C38  6E13               	movwf	dispLogs@myLog+1,c
 19249  002C3A  0E04               	movlw	4
 19250  002C3C  6E12               	movwf	dispLogs@myLog,c
 19251  002C3E  ECE1  F029         	call	_dispLogs	;wreg free
 19252                           
 19253                           ;UI.c: 362: }
 19254  002C42  D03C               	goto	i2l263
 19255  002C44                     i2l9278:
 19256                           
 19257                           ;UI.c: 363: else if(back){
 19258  002C44  505B               	movf	_back,w,c
 19259  002C46  105C               	iorwf	_back+1,w,c
 19260  002C48  B4D8               	btfsc	status,2,c
 19261  002C4A  D038               	goto	i2l263
 19262                           
 19263                           ;UI.c: 364: change_state_to_menu_23();
 19264  002C4C  EC7C  F028         	call	_change_state_to_menu_23	;wreg free
 19265                           
 19266                           ;UI.c: 370: }
 19267                           
 19268                           ;UI.c: 369: break;
 19269                           
 19270                           ;UI.c: 368: default:
 19271                           
 19272                           ;UI.c: 365: }
 19273                           ;UI.c: 366: break;
 19274  002C50  D035               	goto	i2l263
 19275  002C52                     i2l9284:
 19276  002C52  C0EC  F043         	movff	_cur_state,??_updateMenu
 19277  002C56  C0ED  F044         	movff	_cur_state+1,??_updateMenu+1
 19278                           
 19279                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 3 sub-sw
      +                          itches
 19280                           ; Switch size 1, requested type "space"
 19281                           ; Number of cases is 3, Range of values is 0 to 4
 19282                           ; switch strategies available:
 19283                           ; Name         Instructions Cycles
 19284                           ; simple_byte           10     6 (average)
 19285                           ;	Chosen strategy is simple_byte
 19286  002C5A  5044               	movf	??_updateMenu+1,w,c
 19287  002C5C  0A00               	xorlw	0	; case 0
 19288  002C5E  B4D8               	btfsc	status,2,c
 19289  002C60  D007               	goto	i2l10248
 19290  002C62  0A03               	xorlw	3	; case 3
 19291  002C64  B4D8               	btfsc	status,2,c
 19292  002C66  D015               	goto	i2l10250
 19293  002C68  0A07               	xorlw	7	; case 4
 19294  002C6A  B4D8               	btfsc	status,2,c
 19295  002C6C  D020               	goto	i2l10252
 19296  002C6E  D026               	goto	i2l263
 19297  002C70                     i2l10248:
 19298                           
 19299                           ; Switch size 1, requested type "space"
 19300                           ; Number of cases is 5, Range of values is 0 to 23
 19301                           ; switch strategies available:
 19302                           ; Name         Instructions Cycles
 19303                           ; simple_byte           16     9 (average)
 19304                           ;	Chosen strategy is simple_byte
 19305  002C70  5043               	movf	??_updateMenu,w,c
 19306  002C72  0A00               	xorlw	0	; case 0
 19307  002C74  B4D8               	btfsc	status,2,c
 19308  002C76  D6DC               	goto	i2l9136
 19309  002C78  0A0B               	xorlw	11	; case 11
 19310  002C7A  B4D8               	btfsc	status,2,c
 19311  002C7C  D6DC               	goto	i2l9138
 19312  002C7E  0A07               	xorlw	7	; case 12
 19313  002C80  B4D8               	btfsc	status,2,c
 19314  002C82  D6EE               	goto	i2l9150
 19315  002C84  0A1A               	xorlw	26	; case 22
 19316  002C86  B4D8               	btfsc	status,2,c
 19317  002C88  D6F9               	goto	i2l9162
 19318  002C8A  0A01               	xorlw	1	; case 23
 19319  002C8C  B4D8               	btfsc	status,2,c
 19320  002C8E  D70C               	goto	i2l9174
 19321  002C90  D015               	goto	i2l263
 19322  002C92                     i2l10250:
 19323                           
 19324                           ; Switch size 1, requested type "space"
 19325                           ; Number of cases is 4, Range of values is 243 to 255
 19326                           ; switch strategies available:
 19327                           ; Name         Instructions Cycles
 19328                           ; simple_byte           13     7 (average)
 19329                           ;	Chosen strategy is simple_byte
 19330  002C92  5043               	movf	??_updateMenu,w,c
 19331  002C94  0AF3               	xorlw	243	; case 243
 19332  002C96  B4D8               	btfsc	status,2,c
 19333  002C98  D71C               	goto	i2l9186
 19334  002C9A  0A07               	xorlw	7	; case 244
 19335  002C9C  B4D8               	btfsc	status,2,c
 19336  002C9E  D739               	goto	i2l9202
 19337  002CA0  0A0A               	xorlw	10	; case 254
 19338  002CA2  B4D8               	btfsc	status,2,c
 19339  002CA4  D756               	goto	i2l9218
 19340  002CA6  0A01               	xorlw	1	; case 255
 19341  002CA8  B4D8               	btfsc	status,2,c
 19342  002CAA  D773               	goto	i2l9234
 19343  002CAC  D007               	goto	i2l263
 19344  002CAE                     i2l10252:
 19345                           
 19346                           ; Switch size 1, requested type "space"
 19347                           ; Number of cases is 2, Range of values is 9 to 10
 19348                           ; switch strategies available:
 19349                           ; Name         Instructions Cycles
 19350                           ; simple_byte            7     4 (average)
 19351                           ;	Chosen strategy is simple_byte
 19352  002CAE  5043               	movf	??_updateMenu,w,c
 19353  002CB0  0A09               	xorlw	9	; case 9
 19354  002CB2  B4D8               	btfsc	status,2,c
 19355  002CB4  D78E               	goto	i2l9250
 19356  002CB6  0A03               	xorlw	3	; case 10
 19357  002CB8  B4D8               	btfsc	status,2,c
 19358  002CBA  D7AB               	goto	i2l9266
 19359  002CBC                     i2l263:
 19360                           
 19361                           ;UI.c: 371: }
 19362                           ;UI.c: 372: (INTCONbits.GIE = 1);
 19363  002CBC  8EF2               	bsf	intcon,7,c	;volatile
 19364  002CBE  0012               	return		;funcret
 19365  002CC0                     __end_of_updateMenu:
 19366                           	opt stack 0
 19367                           pclatu	equ	0xFFB
 19368                           pclath	equ	0xFFA
 19369                           tblptru	equ	0xFF8
 19370                           tblptrh	equ	0xFF7
 19371                           tblptrl	equ	0xFF6
 19372                           tablat	equ	0xFF5
 19373                           prodh	equ	0xFF4
 19374                           prodl	equ	0xFF3
 19375                           intcon	equ	0xFF2
 19376                           intcon2	equ	0xFF1
 19377                           intcon3	equ	0xFF0
 19378                           indf0	equ	0xFEF
 19379                           postinc0	equ	0xFEE
 19380                           fsr0h	equ	0xFEA
 19381                           fsr0l	equ	0xFE9
 19382                           wreg	equ	0xFE8
 19383                           postdec1	equ	0xFE5
 19384                           fsr1h	equ	0xFE2
 19385                           fsr1l	equ	0xFE1
 19386                           indf2	equ	0xFDF
 19387                           postinc2	equ	0xFDE
 19388                           postdec2	equ	0xFDD
 19389                           fsr2h	equ	0xFDA
 19390                           fsr2l	equ	0xFD9
 19391                           status	equ	0xFD8
 19392                           
 19393 ;; *************** function i2_change_state_to_menu_start *****************
 19394 ;; Defined at:
 19395 ;;		line 477 in file "UI.c"
 19396 ;; Parameters:    Size  Location     Type
 19397 ;;		None
 19398 ;; Auto vars:     Size  Location     Type
 19399 ;;		None
 19400 ;; Return value:  Size  Location     Type
 19401 ;;                  1    wreg      void 
 19402 ;; Registers used:
 19403 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19404 ;; Tracked objects:
 19405 ;;		On entry : 0/0
 19406 ;;		On exit  : 0/0
 19407 ;;		Unchanged: 0/0
 19408 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19409 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19410 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19411 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19412 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19413 ;;Total ram usage:        0 bytes
 19414 ;; Hardware stack levels used:    1
 19415 ;; Hardware stack levels required when called:    4
 19416 ;; This function calls:
 19417 ;;		i2_lcdInst
 19418 ;;		i2_printRTC
 19419 ;;		i2_printf
 19420 ;; This function is called by:
 19421 ;;		_updateMenu
 19422 ;;		_handler
 19423 ;; This function uses a non-reentrant model
 19424 ;;
 19425                           
 19426                           	psect	text63
 19427  00534E                     __ptext63:
 19428                           	opt stack 0
 19429  00534E                     i2_change_state_to_menu_start:
 19430                           	opt stack 19
 19431                           
 19432                           ;UI.c: 478: cur_state = 0;
 19433                           
 19434                           ;incstack = 0
 19435  00534E  0E00               	movlw	0
 19436  005350  0100               	movlb	0	; () banked
 19437  005352  6FED               	movwf	(_cur_state+1)& (0+255),b
 19438  005354  0E00               	movlw	0
 19439  005356  6FEC               	movwf	_cur_state& (0+255),b
 19440                           
 19441                           ; BSR set to: 0
 19442                           ;UI.c: 480: lcdInst(0b10000000);;
 19443  005358  0E80               	movlw	128
 19444  00535A  EC80  F02A         	call	i2_lcdInst
 19445                           
 19446                           ;UI.c: 481: printRTC();
 19447  00535E  ECED  F018         	call	i2_printRTC	;wreg free
 19448                           
 19449                           ;UI.c: 482: lcdInst(0b11000000);;
 19450  005362  0EC0               	movlw	192
 19451  005364  EC80  F02A         	call	i2_lcdInst
 19452                           
 19453                           ;UI.c: 483: printf("PUSH TO CONTINUE");
 19454  005368  0E01               	movlw	low STR_30
 19455  00536A  6E0D               	movwf	i2printf@f,c
 19456  00536C  0EFE               	movlw	high STR_30
 19457  00536E  6E0E               	movwf	i2printf@f+1,c
 19458  005370  ECFF  F00E         	call	i2_printf	;wreg free
 19459  005374  0012               	return		;funcret
 19460  005376                     __end_ofi2_change_state_to_menu_start:
 19461                           	opt stack 0
 19462                           pclatu	equ	0xFFB
 19463                           pclath	equ	0xFFA
 19464                           tblptru	equ	0xFF8
 19465                           tblptrh	equ	0xFF7
 19466                           tblptrl	equ	0xFF6
 19467                           tablat	equ	0xFF5
 19468                           prodh	equ	0xFF4
 19469                           prodl	equ	0xFF3
 19470                           intcon	equ	0xFF2
 19471                           intcon2	equ	0xFF1
 19472                           intcon3	equ	0xFF0
 19473                           indf0	equ	0xFEF
 19474                           postinc0	equ	0xFEE
 19475                           fsr0h	equ	0xFEA
 19476                           fsr0l	equ	0xFE9
 19477                           wreg	equ	0xFE8
 19478                           postdec1	equ	0xFE5
 19479                           fsr1h	equ	0xFE2
 19480                           fsr1l	equ	0xFE1
 19481                           indf2	equ	0xFDF
 19482                           postinc2	equ	0xFDE
 19483                           postdec2	equ	0xFDD
 19484                           fsr2h	equ	0xFDA
 19485                           fsr2l	equ	0xFD9
 19486                           status	equ	0xFD8
 19487                           
 19488 ;; *************** function i2_printRTC *****************
 19489 ;; Defined at:
 19490 ;;		line 63 in file "RTC.c"
 19491 ;; Parameters:    Size  Location     Type
 19492 ;;		None
 19493 ;; Auto vars:     Size  Location     Type
 19494 ;;  printRTC       14   44[COMRAM] int [7]
 19495 ;;  printRTC        4   60[COMRAM] unsigned char [4]
 19496 ;;  printRTC        2   64[COMRAM] int 
 19497 ;;  printRTC        2   58[COMRAM] int 
 19498 ;; Return value:  Size  Location     Type
 19499 ;;                  1    wreg      void 
 19500 ;; Registers used:
 19501 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19502 ;; Tracked objects:
 19503 ;;		On entry : 0/0
 19504 ;;		On exit  : 0/0
 19505 ;;		Unchanged: 0/0
 19506 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19507 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19508 ;;      Locals:        22       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19509 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19510 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19511 ;;Total ram usage:       25 bytes
 19512 ;; Hardware stack levels used:    1
 19513 ;; Hardware stack levels required when called:    3
 19514 ;; This function calls:
 19515 ;;		i2_getRTC
 19516 ;;		i2_lcdInst
 19517 ;;		i2_printf
 19518 ;;		i2_strcpy
 19519 ;; This function is called by:
 19520 ;;		i2_change_state_to_menu_start
 19521 ;; This function uses a non-reentrant model
 19522 ;;
 19523                           
 19524                           	psect	text64
 19525  0031DA                     __ptext64:
 19526                           	opt stack 0
 19527  0031DA                     i2_printRTC:
 19528                           	opt stack 19
 19529                           
 19530                           ;RTC.c: 64: getRTC();
 19531                           
 19532                           ;incstack = 0
 19533  0031DA  EC06  F025         	call	i2_getRTC	;wreg free
 19534                           
 19535                           ;RTC.c: 65: char month[] = "MMM";
 19536  0031DE  C14B  F03D         	movff	printRTC@F3231,i2printRTC@month
 19537  0031E2  C14C  F03E         	movff	printRTC@F3231+1,i2printRTC@month+1
 19538  0031E6  C14D  F03F         	movff	printRTC@F3231+2,i2printRTC@month+2
 19539  0031EA  C14E  F040         	movff	printRTC@F3231+3,i2printRTC@month+3
 19540                           
 19541                           ;RTC.c: 66: int INT_time[7];
 19542                           ;RTC.c: 67: for(int i = 0; i < 7; i++){
 19543  0031EE  0E00               	movlw	0
 19544  0031F0  6E42               	movwf	i2printRTC@i+1,c
 19545  0031F2  0E00               	movlw	0
 19546  0031F4  6E41               	movwf	i2printRTC@i,c
 19547  0031F6  BE42               	btfsc	i2printRTC@i+1,7,c
 19548  0031F8  D006               	goto	i2l7160
 19549  0031FA  5042               	movf	i2printRTC@i+1,w,c
 19550  0031FC  E135               	bnz	i2l618
 19551  0031FE  0E07               	movlw	7
 19552  003200  5C41               	subwf	i2printRTC@i,w,c
 19553  003202  B0D8               	btfsc	status,0,c
 19554  003204  D031               	goto	i2l618
 19555  003206                     i2l7160:
 19556                           
 19557                           ;RTC.c: 68: INT_time[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
 19558  003206  0E1C               	movlw	low _time
 19559  003208  2441               	addwf	i2printRTC@i,w,c
 19560  00320A  6ED9               	movwf	fsr2l,c
 19561  00320C  0E01               	movlw	high _time
 19562  00320E  2042               	addwfc	i2printRTC@i+1,w,c
 19563  003210  6EDA               	movwf	fsr2h,c
 19564  003212  50DF               	movf	indf2,w,c
 19565  003214  6E2A               	movwf	??i2_printRTC& (0+255),c
 19566  003216  3A2A               	swapf	??i2_printRTC,f,c
 19567  003218  0E0F               	movlw	15
 19568  00321A  162A               	andwf	??i2_printRTC,f,c
 19569  00321C  0E0F               	movlw	15
 19570  00321E  162A               	andwf	??i2_printRTC,f,c
 19571  003220  502A               	movf	??i2_printRTC,w,c
 19572  003222  0D0A               	mullw	10
 19573  003224  0E1C               	movlw	low _time
 19574  003226  2441               	addwf	i2printRTC@i,w,c
 19575  003228  6ED9               	movwf	fsr2l,c
 19576  00322A  0E01               	movlw	high _time
 19577  00322C  2042               	addwfc	i2printRTC@i+1,w,c
 19578  00322E  6EDA               	movwf	fsr2h,c
 19579  003230  50DF               	movf	indf2,w,c
 19580  003232  0B0F               	andlw	15
 19581  003234  6E2B               	movwf	(??i2_printRTC+1)& (0+255),c
 19582  003236  6A2C               	clrf	(??i2_printRTC+2)& (0+255),c
 19583  003238  50F3               	movf	prodl,w,c
 19584  00323A  262B               	addwf	??i2_printRTC+1,f,c
 19585  00323C  50F4               	movf	prodh,w,c
 19586  00323E  222C               	addwfc	??i2_printRTC+2,f,c
 19587  003240  90D8               	bcf	status,0,c
 19588  003242  3441               	rlcf	i2printRTC@i,w,c
 19589  003244  6ED9               	movwf	fsr2l,c
 19590  003246  3442               	rlcf	i2printRTC@i+1,w,c
 19591  003248  6EDA               	movwf	fsr2h,c
 19592  00324A  0E2D               	movlw	low i2printRTC@INT_time
 19593  00324C  26D9               	addwf	fsr2l,f,c
 19594  00324E  0E00               	movlw	high i2printRTC@INT_time
 19595  003250  22DA               	addwfc	fsr2h,f,c
 19596  003252  C02B  FFDE         	movff	??i2_printRTC+1,postinc2
 19597  003256  C02C  FFDD         	movff	??i2_printRTC+2,postdec2
 19598  00325A  4A41               	infsnz	i2printRTC@i,f,c
 19599  00325C  2A42               	incf	i2printRTC@i+1,f,c
 19600  00325E  BE42               	btfsc	i2printRTC@i+1,7,c
 19601  003260  D7D2               	goto	i2l7160
 19602  003262  5042               	movf	i2printRTC@i+1,w,c
 19603  003264  E101               	bnz	i2u568_40
 19604  003266  D7CB               	goto	L15
 19605  003268                     i2u568_40:
 19606  003268                     i2l618:
 19607                           
 19608                           ;RTC.c: 69: }
 19609                           ;RTC.c: 70: int RTC_month = INT_time[5];
 19610  003268  C037  F03B         	movff	i2printRTC@INT_time+10,i2printRTC@RTC_month
 19611  00326C  C038  F03C         	movff	i2printRTC@INT_time+11,i2printRTC@RTC_month+1
 19612                           
 19613                           ;RTC.c: 72: switch(RTC_month){
 19614  003270  D084               	goto	i2l7192
 19615  003272                     i2l7166:
 19616                           
 19617                           ;RTC.c: 74: strcpy(month, "JAN");
 19618  003272  0E3D               	movlw	low i2printRTC@month
 19619  003274  6E01               	movwf	i2strcpy@to,c
 19620  003276  0E00               	movlw	high i2printRTC@month
 19621  003278  6E02               	movwf	i2strcpy@to+1,c
 19622  00327A  0EDA               	movlw	low STR_8
 19623  00327C  6E03               	movwf	i2strcpy@from,c
 19624  00327E  0EFF               	movlw	high STR_8
 19625  003280  6E04               	movwf	i2strcpy@from+1,c
 19626  003282  EC1B  F028         	call	i2_strcpy	;wreg free
 19627                           
 19628                           ;RTC.c: 75: break;
 19629  003286  D0A6               	goto	i2l7194
 19630  003288                     i2l7168:
 19631                           
 19632                           ;RTC.c: 77: strcpy(month, "FEB");
 19633  003288  0E3D               	movlw	low i2printRTC@month
 19634  00328A  6E01               	movwf	i2strcpy@to,c
 19635  00328C  0E00               	movlw	high i2printRTC@month
 19636  00328E  6E02               	movwf	i2strcpy@to+1,c
 19637  003290  0ECA               	movlw	low STR_9
 19638  003292  6E03               	movwf	i2strcpy@from,c
 19639  003294  0EFF               	movlw	high STR_9
 19640  003296  6E04               	movwf	i2strcpy@from+1,c
 19641  003298  EC1B  F028         	call	i2_strcpy	;wreg free
 19642                           
 19643                           ;RTC.c: 78: break;
 19644  00329C  D09B               	goto	i2l7194
 19645  00329E                     i2l7170:
 19646                           
 19647                           ;RTC.c: 80: strcpy(month, "MAR");
 19648  00329E  0E3D               	movlw	low i2printRTC@month
 19649  0032A0  6E01               	movwf	i2strcpy@to,c
 19650  0032A2  0E00               	movlw	high i2printRTC@month
 19651  0032A4  6E02               	movwf	i2strcpy@to+1,c
 19652  0032A6  0EE6               	movlw	low STR_10
 19653  0032A8  6E03               	movwf	i2strcpy@from,c
 19654  0032AA  0EFF               	movlw	high STR_10
 19655  0032AC  6E04               	movwf	i2strcpy@from+1,c
 19656  0032AE  EC1B  F028         	call	i2_strcpy	;wreg free
 19657                           
 19658                           ;RTC.c: 81: break;
 19659  0032B2  D090               	goto	i2l7194
 19660  0032B4                     i2l7172:
 19661                           
 19662                           ;RTC.c: 83: strcpy(month, "APR");
 19663  0032B4  0E3D               	movlw	low i2printRTC@month
 19664  0032B6  6E01               	movwf	i2strcpy@to,c
 19665  0032B8  0E00               	movlw	high i2printRTC@month
 19666  0032BA  6E02               	movwf	i2strcpy@to+1,c
 19667  0032BC  0EEA               	movlw	low STR_11
 19668  0032BE  6E03               	movwf	i2strcpy@from,c
 19669  0032C0  0EFF               	movlw	high STR_11
 19670  0032C2  6E04               	movwf	i2strcpy@from+1,c
 19671  0032C4  EC1B  F028         	call	i2_strcpy	;wreg free
 19672                           
 19673                           ;RTC.c: 84: break;
 19674  0032C8  D085               	goto	i2l7194
 19675  0032CA                     i2l7174:
 19676                           
 19677                           ;RTC.c: 86: strcpy(month, "MAY");
 19678  0032CA  0E3D               	movlw	low i2printRTC@month
 19679  0032CC  6E01               	movwf	i2strcpy@to,c
 19680  0032CE  0E00               	movlw	high i2printRTC@month
 19681  0032D0  6E02               	movwf	i2strcpy@to+1,c
 19682  0032D2  0EFA               	movlw	low STR_12
 19683  0032D4  6E03               	movwf	i2strcpy@from,c
 19684  0032D6  0EFF               	movlw	high STR_12
 19685  0032D8  6E04               	movwf	i2strcpy@from+1,c
 19686  0032DA  EC1B  F028         	call	i2_strcpy	;wreg free
 19687                           
 19688                           ;RTC.c: 87: break;
 19689  0032DE  D07A               	goto	i2l7194
 19690  0032E0                     i2l7176:
 19691                           
 19692                           ;RTC.c: 89: strcpy(month, "JUN");
 19693  0032E0  0E3D               	movlw	low i2printRTC@month
 19694  0032E2  6E01               	movwf	i2strcpy@to,c
 19695  0032E4  0E00               	movlw	high i2printRTC@month
 19696  0032E6  6E02               	movwf	i2strcpy@to+1,c
 19697  0032E8  0EDE               	movlw	low STR_13
 19698  0032EA  6E03               	movwf	i2strcpy@from,c
 19699  0032EC  0EFF               	movlw	high STR_13
 19700  0032EE  6E04               	movwf	i2strcpy@from+1,c
 19701  0032F0  EC1B  F028         	call	i2_strcpy	;wreg free
 19702                           
 19703                           ;RTC.c: 90: break;
 19704  0032F4  D06F               	goto	i2l7194
 19705  0032F6                     i2l7178:
 19706                           
 19707                           ;RTC.c: 92: strcpy(month, "JUL");
 19708  0032F6  0E3D               	movlw	low i2printRTC@month
 19709  0032F8  6E01               	movwf	i2strcpy@to,c
 19710  0032FA  0E00               	movlw	high i2printRTC@month
 19711  0032FC  6E02               	movwf	i2strcpy@to+1,c
 19712  0032FE  0ED6               	movlw	low STR_14
 19713  003300  6E03               	movwf	i2strcpy@from,c
 19714  003302  0EFF               	movlw	high STR_14
 19715  003304  6E04               	movwf	i2strcpy@from+1,c
 19716  003306  EC1B  F028         	call	i2_strcpy	;wreg free
 19717                           
 19718                           ;RTC.c: 93: break;
 19719  00330A  D064               	goto	i2l7194
 19720  00330C                     i2l7180:
 19721                           
 19722                           ;RTC.c: 95: strcpy(month, "AUG");
 19723  00330C  0E3D               	movlw	low i2printRTC@month
 19724  00330E  6E01               	movwf	i2strcpy@to,c
 19725  003310  0E00               	movlw	high i2printRTC@month
 19726  003312  6E02               	movwf	i2strcpy@to+1,c
 19727  003314  0ED2               	movlw	low STR_15
 19728  003316  6E03               	movwf	i2strcpy@from,c
 19729  003318  0EFF               	movlw	high STR_15
 19730  00331A  6E04               	movwf	i2strcpy@from+1,c
 19731  00331C  EC1B  F028         	call	i2_strcpy	;wreg free
 19732                           
 19733                           ;RTC.c: 96: break;
 19734  003320  D059               	goto	i2l7194
 19735  003322                     i2l7182:
 19736                           
 19737                           ;RTC.c: 98: strcpy(month, "SEP");
 19738  003322  0E3D               	movlw	low i2printRTC@month
 19739  003324  6E01               	movwf	i2strcpy@to,c
 19740  003326  0E00               	movlw	high i2printRTC@month
 19741  003328  6E02               	movwf	i2strcpy@to+1,c
 19742  00332A  0EE2               	movlw	low STR_16
 19743  00332C  6E03               	movwf	i2strcpy@from,c
 19744  00332E  0EFF               	movlw	high STR_16
 19745  003330  6E04               	movwf	i2strcpy@from+1,c
 19746  003332  EC1B  F028         	call	i2_strcpy	;wreg free
 19747                           
 19748                           ;RTC.c: 99: break;
 19749  003336  D04E               	goto	i2l7194
 19750  003338                     i2l7184:
 19751                           
 19752                           ;RTC.c: 101: strcpy(month, "OCT");
 19753  003338  0E3D               	movlw	low i2printRTC@month
 19754  00333A  6E01               	movwf	i2strcpy@to,c
 19755  00333C  0E00               	movlw	high i2printRTC@month
 19756  00333E  6E02               	movwf	i2strcpy@to+1,c
 19757  003340  0EF2               	movlw	low STR_17
 19758  003342  6E03               	movwf	i2strcpy@from,c
 19759  003344  0EFF               	movlw	high STR_17
 19760  003346  6E04               	movwf	i2strcpy@from+1,c
 19761  003348  EC1B  F028         	call	i2_strcpy	;wreg free
 19762                           
 19763                           ;RTC.c: 102: break;
 19764  00334C  D043               	goto	i2l7194
 19765  00334E                     i2l7186:
 19766                           
 19767                           ;RTC.c: 104: strcpy(month, "NOV");
 19768  00334E  0E3D               	movlw	low i2printRTC@month
 19769  003350  6E01               	movwf	i2strcpy@to,c
 19770  003352  0E00               	movlw	high i2printRTC@month
 19771  003354  6E02               	movwf	i2strcpy@to+1,c
 19772  003356  0EF6               	movlw	low STR_18
 19773  003358  6E03               	movwf	i2strcpy@from,c
 19774  00335A  0EFF               	movlw	high STR_18
 19775  00335C  6E04               	movwf	i2strcpy@from+1,c
 19776  00335E  EC1B  F028         	call	i2_strcpy	;wreg free
 19777                           
 19778                           ;RTC.c: 105: break;
 19779  003362  D038               	goto	i2l7194
 19780  003364                     i2l7188:
 19781                           
 19782                           ;RTC.c: 107: strcpy(month, "DEC");
 19783  003364  0E3D               	movlw	low i2printRTC@month
 19784  003366  6E01               	movwf	i2strcpy@to,c
 19785  003368  0E00               	movlw	high i2printRTC@month
 19786  00336A  6E02               	movwf	i2strcpy@to+1,c
 19787  00336C  0ECE               	movlw	low STR_19
 19788  00336E  6E03               	movwf	i2strcpy@from,c
 19789  003370  0EFF               	movlw	high STR_19
 19790  003372  6E04               	movwf	i2strcpy@from+1,c
 19791  003374  EC1B  F028         	call	i2_strcpy	;wreg free
 19792                           
 19793                           ;RTC.c: 109: }
 19794                           
 19795                           ;RTC.c: 108: break;
 19796  003378  D02D               	goto	i2l7194
 19797  00337A                     i2l7192:
 19798  00337A  C03B  F02A         	movff	i2printRTC@RTC_month,??i2_printRTC
 19799  00337E  C03C  F02B         	movff	i2printRTC@RTC_month+1,??i2_printRTC+1
 19800                           
 19801                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 19802                           ; Switch size 1, requested type "space"
 19803                           ; Number of cases is 1, Range of values is 0 to 0
 19804                           ; switch strategies available:
 19805                           ; Name         Instructions Cycles
 19806                           ; simple_byte            4     3 (average)
 19807                           ;	Chosen strategy is simple_byte
 19808  003382  502B               	movf	??i2_printRTC+1,w,c
 19809  003384  0A00               	xorlw	0	; case 0
 19810  003386  A4D8               	btfss	status,2,c
 19811  003388  D025               	goto	i2l7194
 19812                           
 19813                           ; Switch size 1, requested type "space"
 19814                           ; Number of cases is 12, Range of values is 1 to 12
 19815                           ; switch strategies available:
 19816                           ; Name         Instructions Cycles
 19817                           ; simple_byte           37    19 (average)
 19818                           ;	Chosen strategy is simple_byte
 19819  00338A  502A               	movf	??i2_printRTC,w,c
 19820  00338C  0A01               	xorlw	1	; case 1
 19821  00338E  B4D8               	btfsc	status,2,c
 19822  003390  D770               	goto	i2l7166
 19823  003392  0A03               	xorlw	3	; case 2
 19824  003394  B4D8               	btfsc	status,2,c
 19825  003396  D778               	goto	i2l7168
 19826  003398  0A01               	xorlw	1	; case 3
 19827  00339A  B4D8               	btfsc	status,2,c
 19828  00339C  D780               	goto	i2l7170
 19829  00339E  0A07               	xorlw	7	; case 4
 19830  0033A0  B4D8               	btfsc	status,2,c
 19831  0033A2  D788               	goto	i2l7172
 19832  0033A4  0A01               	xorlw	1	; case 5
 19833  0033A6  B4D8               	btfsc	status,2,c
 19834  0033A8  D790               	goto	i2l7174
 19835  0033AA  0A03               	xorlw	3	; case 6
 19836  0033AC  B4D8               	btfsc	status,2,c
 19837  0033AE  D798               	goto	i2l7176
 19838  0033B0  0A01               	xorlw	1	; case 7
 19839  0033B2  B4D8               	btfsc	status,2,c
 19840  0033B4  D7A0               	goto	i2l7178
 19841  0033B6  0A0F               	xorlw	15	; case 8
 19842  0033B8  B4D8               	btfsc	status,2,c
 19843  0033BA  D7A8               	goto	i2l7180
 19844  0033BC  0A01               	xorlw	1	; case 9
 19845  0033BE  B4D8               	btfsc	status,2,c
 19846  0033C0  D7B0               	goto	i2l7182
 19847  0033C2  0A03               	xorlw	3	; case 10
 19848  0033C4  B4D8               	btfsc	status,2,c
 19849  0033C6  D7B8               	goto	i2l7184
 19850  0033C8  0A01               	xorlw	1	; case 11
 19851  0033CA  B4D8               	btfsc	status,2,c
 19852  0033CC  D7C0               	goto	i2l7186
 19853  0033CE  0A07               	xorlw	7	; case 12
 19854  0033D0  B4D8               	btfsc	status,2,c
 19855  0033D2  D7C8               	goto	i2l7188
 19856  0033D4                     i2l7194:
 19857                           
 19858                           ;RTC.c: 110: lcdInst(0b10000000);;
 19859  0033D4  0E80               	movlw	128
 19860  0033D6  EC80  F02A         	call	i2_lcdInst
 19861                           
 19862                           ;RTC.c: 111: printf("%02d%s | %02d:%02d:%02d", INT_time[4],month,INT_time[2],INT_time[1]
      +                          ,INT_time[0]);
 19863  0033DA  0ED0               	movlw	low STR_21
 19864  0033DC  6E0D               	movwf	i2printf@f,c
 19865  0033DE  0EFA               	movlw	high STR_21
 19866  0033E0  6E0E               	movwf	i2printf@f+1,c
 19867  0033E2  C035  F00F         	movff	i2printRTC@INT_time+8,?i2_printf+2
 19868  0033E6  C036  F010         	movff	i2printRTC@INT_time+9,?i2_printf+3
 19869  0033EA  0E3D               	movlw	low i2printRTC@month
 19870  0033EC  6E11               	movwf	?i2_printf+4,c
 19871  0033EE  0E00               	movlw	high i2printRTC@month
 19872  0033F0  6E12               	movwf	?i2_printf+5,c
 19873  0033F2  C031  F013         	movff	i2printRTC@INT_time+4,?i2_printf+6
 19874  0033F6  C032  F014         	movff	i2printRTC@INT_time+5,?i2_printf+7
 19875  0033FA  C02F  F015         	movff	i2printRTC@INT_time+2,?i2_printf+8
 19876  0033FE  C030  F016         	movff	i2printRTC@INT_time+3,?i2_printf+9
 19877  003402  C02D  F017         	movff	i2printRTC@INT_time,?i2_printf+10
 19878  003406  C02E  F018         	movff	i2printRTC@INT_time+1,?i2_printf+11
 19879  00340A  ECFF  F00E         	call	i2_printf	;wreg free
 19880  00340E  0012               	return		;funcret
 19881  003410                     __end_ofi2_printRTC:
 19882                           	opt stack 0
 19883                           pclatu	equ	0xFFB
 19884                           pclath	equ	0xFFA
 19885                           tblptru	equ	0xFF8
 19886                           tblptrh	equ	0xFF7
 19887                           tblptrl	equ	0xFF6
 19888                           tablat	equ	0xFF5
 19889                           prodh	equ	0xFF4
 19890                           prodl	equ	0xFF3
 19891                           intcon	equ	0xFF2
 19892                           intcon2	equ	0xFF1
 19893                           intcon3	equ	0xFF0
 19894                           indf0	equ	0xFEF
 19895                           postinc0	equ	0xFEE
 19896                           fsr0h	equ	0xFEA
 19897                           fsr0l	equ	0xFE9
 19898                           wreg	equ	0xFE8
 19899                           postdec1	equ	0xFE5
 19900                           fsr1h	equ	0xFE2
 19901                           fsr1l	equ	0xFE1
 19902                           indf2	equ	0xFDF
 19903                           postinc2	equ	0xFDE
 19904                           postdec2	equ	0xFDD
 19905                           fsr2h	equ	0xFDA
 19906                           fsr2l	equ	0xFD9
 19907                           status	equ	0xFD8
 19908                           
 19909 ;; *************** function i2_strcpy *****************
 19910 ;; Defined at:
 19911 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strcpy.c"
 19912 ;; Parameters:    Size  Location     Type
 19913 ;;  to              2    0[COMRAM] PTR unsigned char 
 19914 ;;		 -> printRTC@month(4), UI@month(4), 
 19915 ;;  from            2    2[COMRAM] PTR const unsigned char 
 19916 ;;		 -> STR_62(4), STR_61(4), STR_60(4), STR_59(4), 
 19917 ;;		 -> STR_58(4), STR_57(4), STR_56(4), STR_55(4), 
 19918 ;;		 -> STR_54(4), STR_53(4), STR_52(4), STR_51(4), 
 19919 ;;		 -> STR_20(4), STR_19(4), STR_18(4), STR_17(4), 
 19920 ;;		 -> STR_16(4), STR_15(4), STR_14(4), STR_13(4), 
 19921 ;;		 -> STR_12(4), STR_11(4), STR_10(4), STR_9(4), 
 19922 ;;		 -> STR_8(4), 
 19923 ;; Auto vars:     Size  Location     Type
 19924 ;;  strcpy          2    4[COMRAM] PTR unsigned char 
 19925 ;;		 -> printRTC@month(4), UI@month(4), 
 19926 ;; Return value:  Size  Location     Type
 19927 ;;                  2    0[COMRAM] PTR unsigned char 
 19928 ;; Registers used:
 19929 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 19930 ;; Tracked objects:
 19931 ;;		On entry : 0/0
 19932 ;;		On exit  : 0/0
 19933 ;;		Unchanged: 0/0
 19934 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19935 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19936 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19937 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19938 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19939 ;;Total ram usage:        6 bytes
 19940 ;; Hardware stack levels used:    1
 19941 ;; This function calls:
 19942 ;;		Nothing
 19943 ;; This function is called by:
 19944 ;;		i2_printRTC
 19945 ;; This function uses a non-reentrant model
 19946 ;;
 19947                           
 19948                           	psect	text65
 19949  005036                     __ptext65:
 19950                           	opt stack 0
 19951  005036                     i2_strcpy:
 19952                           	opt stack 21
 19953                           
 19954                           ;incstack = 0
 19955  005036  C001  F005         	movff	i2strcpy@to,i2strcpy@cp
 19956  00503A  C002  F006         	movff	i2strcpy@to+1,i2strcpy@cp+1
 19957  00503E  D004               	goto	i2l6798
 19958  005040                     i2l6796:
 19959  005040  4A05               	infsnz	i2strcpy@cp,f,c
 19960  005042  2A06               	incf	i2strcpy@cp+1,f,c
 19961  005044  4A03               	infsnz	i2strcpy@from,f,c
 19962  005046  2A04               	incf	i2strcpy@from+1,f,c
 19963  005048                     i2l6798:
 19964  005048  C003  FFF6         	movff	i2strcpy@from,tblptrl
 19965  00504C  C004  FFF7         	movff	i2strcpy@from+1,tblptrh
 19966  005050                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 19967  005050  6AF8               	clrf	tblptru,c
 19968  005052                     	endif
 19969  005052                     	if	0	;tblptru may be non-zero
 19970  005052                     	endif
 19971  005052  C005  FFD9         	movff	i2strcpy@cp,fsr2l
 19972  005056  C006  FFDA         	movff	i2strcpy@cp+1,fsr2h
 19973  00505A  0008               	tblrd		*
 19974  00505C  CFF5 FFDF          	movff	tablat,indf2
 19975  005060  50DF               	movf	indf2,w,c
 19976  005062  B4D8               	btfsc	status,2,c
 19977  005064  0012               	return	
 19978  005066  D7EC               	goto	i2l6796
 19979  005068                     __end_ofi2_strcpy:
 19980                           	opt stack 0
 19981                           pclatu	equ	0xFFB
 19982                           pclath	equ	0xFFA
 19983                           tblptru	equ	0xFF8
 19984                           tblptrh	equ	0xFF7
 19985                           tblptrl	equ	0xFF6
 19986                           tablat	equ	0xFF5
 19987                           prodh	equ	0xFF4
 19988                           prodl	equ	0xFF3
 19989                           intcon	equ	0xFF2
 19990                           intcon2	equ	0xFF1
 19991                           intcon3	equ	0xFF0
 19992                           indf0	equ	0xFEF
 19993                           postinc0	equ	0xFEE
 19994                           fsr0h	equ	0xFEA
 19995                           fsr0l	equ	0xFE9
 19996                           wreg	equ	0xFE8
 19997                           postdec1	equ	0xFE5
 19998                           fsr1h	equ	0xFE2
 19999                           fsr1l	equ	0xFE1
 20000                           indf2	equ	0xFDF
 20001                           postinc2	equ	0xFDE
 20002                           postdec2	equ	0xFDD
 20003                           fsr2h	equ	0xFDA
 20004                           fsr2l	equ	0xFD9
 20005                           status	equ	0xFD8
 20006                           
 20007 ;; *************** function _inputHandler *****************
 20008 ;; Defined at:
 20009 ;;		line 375 in file "UI.c"
 20010 ;; Parameters:    Size  Location     Type
 20011 ;;		None
 20012 ;; Auto vars:     Size  Location     Type
 20013 ;;		None
 20014 ;; Return value:  Size  Location     Type
 20015 ;;                  2   41[COMRAM] int 
 20016 ;; Registers used:
 20017 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20018 ;; Tracked objects:
 20019 ;;		On entry : 0/0
 20020 ;;		On exit  : 0/0
 20021 ;;		Unchanged: 0/0
 20022 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20023 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20024 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20025 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20026 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20027 ;;Total ram usage:        4 bytes
 20028 ;; Hardware stack levels used:    1
 20029 ;; Hardware stack levels required when called:    4
 20030 ;; This function calls:
 20031 ;;		_change_state_to_logs_11
 20032 ;;		_change_state_to_logs_12
 20033 ;;		_change_state_to_logs_22
 20034 ;;		_change_state_to_logs_23
 20035 ;;		_change_state_to_logs_33
 20036 ;;		_change_state_to_logs_34
 20037 ;;		_change_state_to_menu_11
 20038 ;;		_change_state_to_menu_23
 20039 ;;		i2_change_state_to_menu_12
 20040 ;;		i2_change_state_to_menu_22
 20041 ;; This function is called by:
 20042 ;;		_updateMenu
 20043 ;; This function uses a non-reentrant model
 20044 ;;
 20045                           
 20046                           	psect	text66
 20047  003602                     __ptext66:
 20048                           	opt stack 0
 20049  003602                     _inputHandler:
 20050                           	opt stack 18
 20051                           
 20052                           ;UI.c: 380: if(firstboot){
 20053                           
 20054                           ;incstack = 0
 20055  003602  0101               	movlb	1	; () banked
 20056  003604  513B               	movf	_firstboot& (0+255),w,b
 20057  003606  0101               	movlb	1	; () banked
 20058  003608  113C               	iorwf	(_firstboot+1)& (0+255),w,b
 20059  00360A  B4D8               	btfsc	status,2,c
 20060  00360C  D00C               	goto	i2l7262
 20061                           
 20062                           ; BSR set to: 1
 20063                           ;UI.c: 381: change_state_to_menu_11();
 20064  00360E  EC94  F028         	call	_change_state_to_menu_11	;wreg free
 20065                           
 20066                           ;UI.c: 382: firstboot = 0;
 20067  003612  0E00               	movlw	0
 20068  003614  0101               	movlb	1	; () banked
 20069  003616  6F3C               	movwf	(_firstboot+1)& (0+255),b
 20070  003618  0E00               	movlw	0
 20071  00361A  6F3B               	movwf	_firstboot& (0+255),b
 20072                           
 20073                           ; BSR set to: 1
 20074                           ;UI.c: 383: return 0;
 20075  00361C  0E00               	movlw	0
 20076  00361E  6E2B               	movwf	?_inputHandler+1,c
 20077  003620  0E00               	movlw	0
 20078  003622  6E2A               	movwf	?_inputHandler,c
 20079                           
 20080                           ; BSR set to: 1
 20081  003624  0012               	return	
 20082  003626                     i2l7262:
 20083                           
 20084                           ; BSR set to: 1
 20085                           ;UI.c: 384: }
 20086                           ;UI.c: 385: if (logstate){
 20087  003626  0100               	movlb	0	; () banked
 20088  003628  51F8               	movf	_logstate& (0+255),w,b
 20089  00362A  0100               	movlb	0	; () banked
 20090  00362C  11F9               	iorwf	(_logstate+1)& (0+255),w,b
 20091  00362E  B4D8               	btfsc	status,2,c
 20092  003630  D0C7               	goto	i2l7380
 20093                           
 20094                           ; BSR set to: 0
 20095                           ;UI.c: 386: if(input == 'C' && PORTBbits.RB1 == 1){
 20096  003632  0E43               	movlw	67
 20097  003634  187D               	xorwf	_input,w,c	;volatile
 20098  003636  A4D8               	btfss	status,2,c
 20099  003638  D012               	goto	i2l7280
 20100                           
 20101                           ; BSR set to: 0
 20102  00363A  B281               	btfsc	3969,1,c	;volatile
 20103  00363C  D009               	goto	i2l7272
 20104  00363E  D00F               	goto	i2l7280
 20105  003640                     i2l7270:
 20106                           
 20107                           ;UI.c: 389: _delay((unsigned long)((10)*(32000000/4000.0)));
 20108  003640  0E68               	movlw	104
 20109  003642  6E2C               	movwf	??_inputHandler& (0+255),c
 20110  003644  0EE4               	movlw	228
 20111  003646                     i2u1061_47:
 20112  003646  2EE8               	decfsz	wreg,f,c
 20113  003648  D7FE               	bra	i2u1061_47
 20114  00364A  2E2C               	decfsz	??_inputHandler& (0+255),f,c
 20115  00364C  D7FC               	bra	i2u1061_47
 20116  00364E  D000               	nop2	
 20117  003650                     i2l7272:
 20118  003650  B281               	btfsc	3969,1,c	;volatile
 20119  003652  D7F6               	goto	i2l7270
 20120  003654                     i2l7274:
 20121                           
 20122                           ;UI.c: 390: }
 20123                           ;UI.c: 391: return 0;
 20124  003654  0E00               	movlw	0
 20125  003656  6E2B               	movwf	?_inputHandler+1,c
 20126  003658  0E00               	movlw	0
 20127  00365A  6E2A               	movwf	?_inputHandler,c
 20128  00365C  0012               	return	
 20129  00365E                     i2l7280:
 20130                           
 20131                           ;UI.c: 393: else if (input == 'D'){
 20132  00365E  0E44               	movlw	68
 20133  003660  187D               	xorwf	_input,w,c	;volatile
 20134  003662  A4D8               	btfss	status,2,c
 20135  003664  D7F7               	goto	i2l7274
 20136                           
 20137                           ;UI.c: 395: logstate = 0;
 20138  003666  0E00               	movlw	0
 20139  003668  0100               	movlb	0	; () banked
 20140  00366A  6FF9               	movwf	(_logstate+1)& (0+255),b
 20141  00366C  0E00               	movlw	0
 20142  00366E  6FF8               	movwf	_logstate& (0+255),b
 20143                           
 20144                           ;UI.c: 396: switch(cur_state){
 20145  003670  D012               	goto	i2l7298
 20146  003672                     i2l7284:
 20147                           
 20148                           ;UI.c: 398: change_state_to_logs_11();
 20149  003672  EC0C  F029         	call	_change_state_to_logs_11	;wreg free
 20150                           
 20151                           ;UI.c: 399: break;
 20152  003676  D7EE               	goto	i2l7274
 20153  003678                     i2l7286:
 20154                           
 20155                           ;UI.c: 401: change_state_to_logs_12();
 20156  003678  ECF4  F028         	call	_change_state_to_logs_12	;wreg free
 20157                           
 20158                           ;UI.c: 402: break;
 20159  00367C  D7EB               	goto	i2l7274
 20160  00367E                     i2l7288:
 20161                           
 20162                           ;UI.c: 404: change_state_to_logs_22();
 20163  00367E  ECDC  F028         	call	_change_state_to_logs_22	;wreg free
 20164                           
 20165                           ;UI.c: 405: break;
 20166  003682  D7E8               	goto	i2l7274
 20167  003684                     i2l7290:
 20168                           
 20169                           ;UI.c: 407: change_state_to_logs_23();
 20170  003684  EC3B  F029         	call	_change_state_to_logs_23	;wreg free
 20171                           
 20172                           ;UI.c: 408: break;
 20173  003688  D7E5               	goto	i2l7274
 20174  00368A                     i2l7292:
 20175                           
 20176                           ;UI.c: 410: change_state_to_logs_33();
 20177  00368A  ECC4  F028         	call	_change_state_to_logs_33	;wreg free
 20178                           
 20179                           ;UI.c: 411: break;
 20180  00368E  D7E2               	goto	i2l7274
 20181  003690                     i2l7294:
 20182                           
 20183                           ;UI.c: 413: change_state_to_logs_34();
 20184  003690  ECAC  F028         	call	_change_state_to_logs_34	;wreg free
 20185                           
 20186                           ;UI.c: 415: }
 20187                           
 20188                           ;UI.c: 414: break;
 20189  003694  D7DF               	goto	i2l7274
 20190  003696                     i2l7298:
 20191  003696  C0EC  F02C         	movff	_cur_state,??_inputHandler
 20192  00369A  C0ED  F02D         	movff	_cur_state+1,??_inputHandler+1
 20193                           
 20194                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
 20195                           ; Switch size 1, requested type "space"
 20196                           ; Number of cases is 2, Range of values is 3 to 4
 20197                           ; switch strategies available:
 20198                           ; Name         Instructions Cycles
 20199                           ; simple_byte            7     4 (average)
 20200                           ;	Chosen strategy is simple_byte
 20201  00369E  502D               	movf	??_inputHandler+1,w,c
 20202  0036A0  0A03               	xorlw	3	; case 3
 20203  0036A2  B4D8               	btfsc	status,2,c
 20204  0036A4  D004               	goto	i2l10256
 20205  0036A6  0A07               	xorlw	7	; case 4
 20206  0036A8  B4D8               	btfsc	status,2,c
 20207  0036AA  D00F               	goto	i2l10258
 20208  0036AC  D7D3               	goto	i2l7274
 20209  0036AE                     i2l10256:
 20210                           
 20211                           ; Switch size 1, requested type "space"
 20212                           ; Number of cases is 4, Range of values is 243 to 255
 20213                           ; switch strategies available:
 20214                           ; Name         Instructions Cycles
 20215                           ; simple_byte           13     7 (average)
 20216                           ;	Chosen strategy is simple_byte
 20217  0036AE  502C               	movf	??_inputHandler,w,c
 20218  0036B0  0AF3               	xorlw	243	; case 243
 20219  0036B2  B4D8               	btfsc	status,2,c
 20220  0036B4  D7DE               	goto	i2l7284
 20221  0036B6  0A07               	xorlw	7	; case 244
 20222  0036B8  B4D8               	btfsc	status,2,c
 20223  0036BA  D7DE               	goto	i2l7286
 20224  0036BC  0A0A               	xorlw	10	; case 254
 20225  0036BE  B4D8               	btfsc	status,2,c
 20226  0036C0  D7DE               	goto	i2l7288
 20227  0036C2  0A01               	xorlw	1	; case 255
 20228  0036C4  B4D8               	btfsc	status,2,c
 20229  0036C6  D7DE               	goto	i2l7290
 20230  0036C8  D7C5               	goto	i2l7274
 20231  0036CA                     i2l10258:
 20232                           
 20233                           ; Switch size 1, requested type "space"
 20234                           ; Number of cases is 2, Range of values is 9 to 10
 20235                           ; switch strategies available:
 20236                           ; Name         Instructions Cycles
 20237                           ; simple_byte            7     4 (average)
 20238                           ;	Chosen strategy is simple_byte
 20239  0036CA  502C               	movf	??_inputHandler,w,c
 20240  0036CC  0A09               	xorlw	9	; case 9
 20241  0036CE  B4D8               	btfsc	status,2,c
 20242  0036D0  D7DC               	goto	i2l7292
 20243  0036D2  0A03               	xorlw	3	; case 10
 20244  0036D4  B4D8               	btfsc	status,2,c
 20245  0036D6  D7DC               	goto	i2l7294
 20246  0036D8  D7BD               	goto	i2l7274
 20247  0036DA                     i2l7310:
 20248                           
 20249                           ;UI.c: 425: if(cur_state == 11){
 20250  0036DA  0E0B               	movlw	11
 20251  0036DC  0100               	movlb	0	; () banked
 20252  0036DE  19EC               	xorwf	_cur_state& (0+255),w,b
 20253  0036E0  0100               	movlb	0	; () banked
 20254  0036E2  11ED               	iorwf	(_cur_state+1)& (0+255),w,b
 20255  0036E4  A4D8               	btfss	status,2,c
 20256  0036E6  D005               	goto	i2l7318
 20257                           
 20258                           ; BSR set to: 0
 20259                           ;UI.c: 426: return 0;
 20260  0036E8  0E00               	movlw	0
 20261  0036EA  6E2B               	movwf	?_inputHandler+1,c
 20262  0036EC  0E00               	movlw	0
 20263  0036EE  6E2A               	movwf	?_inputHandler,c
 20264                           
 20265                           ; BSR set to: 0
 20266  0036F0  0012               	return	
 20267  0036F2                     i2l7318:
 20268                           
 20269                           ; BSR set to: 0
 20270                           ;UI.c: 428: else{
 20271                           ;UI.c: 429: change_state_to_menu_11();
 20272  0036F2  EC94  F028         	call	_change_state_to_menu_11	;wreg free
 20273                           
 20274                           ;UI.c: 430: }
 20275                           ;UI.c: 431: return 0;
 20276  0036F6  0E00               	movlw	0
 20277  0036F8  6E2B               	movwf	?_inputHandler+1,c
 20278  0036FA  0E00               	movlw	0
 20279  0036FC  6E2A               	movwf	?_inputHandler,c
 20280  0036FE  0012               	return	
 20281  003700                     i2l7324:
 20282                           
 20283                           ;UI.c: 433: if(cur_state == 22 | cur_state == 12){
 20284  003700  0E16               	movlw	22
 20285  003702  0100               	movlb	0	; () banked
 20286  003704  19EC               	xorwf	_cur_state& (0+255),w,b
 20287  003706  0100               	movlb	0	; () banked
 20288  003708  11ED               	iorwf	(_cur_state+1)& (0+255),w,b
 20289  00370A  B4D8               	btfsc	status,2,c
 20290  00370C  D007               	goto	i2l7328
 20291                           
 20292                           ; BSR set to: 0
 20293  00370E  0E0C               	movlw	12
 20294  003710  0100               	movlb	0	; () banked
 20295  003712  19EC               	xorwf	_cur_state& (0+255),w,b
 20296  003714  0100               	movlb	0	; () banked
 20297  003716  11ED               	iorwf	(_cur_state+1)& (0+255),w,b
 20298  003718  A4D8               	btfss	status,2,c
 20299  00371A  D005               	goto	i2l7334
 20300  00371C                     i2l7328:
 20301                           
 20302                           ; BSR set to: 0
 20303                           ;UI.c: 434: return 0;
 20304  00371C  0E00               	movlw	0
 20305  00371E  6E2B               	movwf	?_inputHandler+1,c
 20306  003720  0E00               	movlw	0
 20307  003722  6E2A               	movwf	?_inputHandler,c
 20308                           
 20309                           ; BSR set to: 0
 20310  003724  0012               	return	
 20311  003726                     i2l7334:
 20312                           
 20313                           ; BSR set to: 0
 20314                           ;UI.c: 436: else if(cur_state == 23){
 20315  003726  0E17               	movlw	23
 20316  003728  0100               	movlb	0	; () banked
 20317  00372A  19EC               	xorwf	_cur_state& (0+255),w,b
 20318  00372C  0100               	movlb	0	; () banked
 20319  00372E  11ED               	iorwf	(_cur_state+1)& (0+255),w,b
 20320  003730  A4D8               	btfss	status,2,c
 20321  003732  D003               	goto	i2l7338
 20322                           
 20323                           ; BSR set to: 0
 20324                           ;UI.c: 437: change_state_to_menu_22();
 20325  003734  EC4C  F028         	call	i2_change_state_to_menu_22	;wreg free
 20326                           
 20327                           ;UI.c: 438: }
 20328  003738  D002               	goto	i2l7340
 20329  00373A                     i2l7338:
 20330                           
 20331                           ;UI.c: 439: else{
 20332                           ;UI.c: 440: change_state_to_menu_12();
 20333  00373A  EC64  F028         	call	i2_change_state_to_menu_12	;wreg free
 20334  00373E                     i2l7340:
 20335                           
 20336                           ;UI.c: 441: }
 20337                           ;UI.c: 442: return 0;
 20338  00373E  0E00               	movlw	0
 20339  003740  6E2B               	movwf	?_inputHandler+1,c
 20340  003742  0E00               	movlw	0
 20341  003744  6E2A               	movwf	?_inputHandler,c
 20342  003746  0012               	return	
 20343  003748                     i2l7344:
 20344                           
 20345                           ;UI.c: 444: if(cur_state == 23){
 20346  003748  0E17               	movlw	23
 20347  00374A  0100               	movlb	0	; () banked
 20348  00374C  19EC               	xorwf	_cur_state& (0+255),w,b
 20349  00374E  0100               	movlb	0	; () banked
 20350  003750  11ED               	iorwf	(_cur_state+1)& (0+255),w,b
 20351  003752  A4D8               	btfss	status,2,c
 20352  003754  D005               	goto	i2l7352
 20353                           
 20354                           ; BSR set to: 0
 20355                           ;UI.c: 445: return 0;
 20356  003756  0E00               	movlw	0
 20357  003758  6E2B               	movwf	?_inputHandler+1,c
 20358  00375A  0E00               	movlw	0
 20359  00375C  6E2A               	movwf	?_inputHandler,c
 20360                           
 20361                           ; BSR set to: 0
 20362  00375E  0012               	return	
 20363  003760                     i2l7352:
 20364                           
 20365                           ; BSR set to: 0
 20366                           ;UI.c: 447: else{
 20367                           ;UI.c: 448: change_state_to_menu_23();
 20368  003760  EC7C  F028         	call	_change_state_to_menu_23	;wreg free
 20369                           
 20370                           ;UI.c: 449: }
 20371                           ;UI.c: 450: return 0;
 20372  003764  0E00               	movlw	0
 20373  003766  6E2B               	movwf	?_inputHandler+1,c
 20374  003768  0E00               	movlw	0
 20375  00376A  6E2A               	movwf	?_inputHandler,c
 20376  00376C  0012               	return	
 20377  00376E                     i2l7358:
 20378                           
 20379                           ;UI.c: 453: up = 1;
 20380  00376E  0E00               	movlw	0
 20381  003770  6E76               	movwf	_up+1,c
 20382  003772  0E01               	movlw	1
 20383  003774  6E75               	movwf	_up,c
 20384                           
 20385                           ;UI.c: 454: return 1;
 20386  003776  0E00               	movlw	0
 20387  003778  6E2B               	movwf	?_inputHandler+1,c
 20388  00377A  0E01               	movlw	1
 20389  00377C  6E2A               	movwf	?_inputHandler,c
 20390  00377E  0012               	return	
 20391  003780                     i2l7362:
 20392                           
 20393                           ;UI.c: 456: down = 1;
 20394  003780  0E00               	movlw	0
 20395  003782  6E5E               	movwf	_down+1,c
 20396  003784  0E01               	movlw	1
 20397  003786  6E5D               	movwf	_down,c
 20398                           
 20399                           ;UI.c: 457: return 1;
 20400  003788  0E00               	movlw	0
 20401  00378A  6E2B               	movwf	?_inputHandler+1,c
 20402  00378C  0E01               	movlw	1
 20403  00378E  6E2A               	movwf	?_inputHandler,c
 20404  003790  0012               	return	
 20405  003792                     i2l7366:
 20406                           
 20407                           ;UI.c: 459: enter = 1;
 20408  003792  0E00               	movlw	0
 20409  003794  6E60               	movwf	_enter+1,c
 20410  003796  0E01               	movlw	1
 20411  003798  6E5F               	movwf	_enter,c
 20412                           
 20413                           ;UI.c: 460: return 1;
 20414  00379A  0E00               	movlw	0
 20415  00379C  6E2B               	movwf	?_inputHandler+1,c
 20416  00379E  0E01               	movlw	1
 20417  0037A0  6E2A               	movwf	?_inputHandler,c
 20418  0037A2  0012               	return	
 20419  0037A4                     i2l7370:
 20420                           
 20421                           ;UI.c: 462: back = 1;
 20422  0037A4  0E00               	movlw	0
 20423  0037A6  6E5C               	movwf	_back+1,c
 20424  0037A8  0E01               	movlw	1
 20425  0037AA  6E5B               	movwf	_back,c
 20426                           
 20427                           ;UI.c: 463: return 1;
 20428  0037AC  0E00               	movlw	0
 20429  0037AE  6E2B               	movwf	?_inputHandler+1,c
 20430  0037B0  0E01               	movlw	1
 20431  0037B2  6E2A               	movwf	?_inputHandler,c
 20432  0037B4  0012               	return	
 20433  0037B6                     i2l7374:
 20434                           
 20435                           ;UI.c: 466: return 1;
 20436  0037B6  0E00               	movlw	0
 20437  0037B8  6E2B               	movwf	?_inputHandler+1,c
 20438  0037BA  0E01               	movlw	1
 20439  0037BC  6E2A               	movwf	?_inputHandler,c
 20440                           
 20441                           ;UI.c: 467: }
 20442  0037BE  0012               	return	
 20443  0037C0                     i2l7380:
 20444  0037C0  507D               	movf	_input,w,c	;volatile
 20445                           
 20446                           ; Switch size 1, requested type "space"
 20447                           ; Number of cases is 7, Range of values is 49 to 68
 20448                           ; switch strategies available:
 20449                           ; Name         Instructions Cycles
 20450                           ; simple_byte           22    12 (average)
 20451                           ;	Chosen strategy is simple_byte
 20452  0037C2  0A31               	xorlw	49	; case 49
 20453  0037C4  B4D8               	btfsc	status,2,c
 20454  0037C6  D789               	goto	i2l7310
 20455  0037C8  0A03               	xorlw	3	; case 50
 20456  0037CA  B4D8               	btfsc	status,2,c
 20457  0037CC  D799               	goto	i2l7324
 20458  0037CE  0A01               	xorlw	1	; case 51
 20459  0037D0  B4D8               	btfsc	status,2,c
 20460  0037D2  D7BA               	goto	i2l7344
 20461  0037D4  0A72               	xorlw	114	; case 65
 20462  0037D6  B4D8               	btfsc	status,2,c
 20463  0037D8  D7CA               	goto	i2l7358
 20464  0037DA  0A03               	xorlw	3	; case 66
 20465  0037DC  B4D8               	btfsc	status,2,c
 20466  0037DE  D7D0               	goto	i2l7362
 20467  0037E0  0A01               	xorlw	1	; case 67
 20468  0037E2  B4D8               	btfsc	status,2,c
 20469  0037E4  D7D6               	goto	i2l7366
 20470  0037E6  0A07               	xorlw	7	; case 68
 20471  0037E8  B4D8               	btfsc	status,2,c
 20472  0037EA  D7DC               	goto	i2l7370
 20473  0037EC  D7E4               	goto	i2l7374
 20474  0037EE                     __end_of_inputHandler:
 20475                           	opt stack 0
 20476                           pclatu	equ	0xFFB
 20477                           pclath	equ	0xFFA
 20478                           tblptru	equ	0xFF8
 20479                           tblptrh	equ	0xFF7
 20480                           tblptrl	equ	0xFF6
 20481                           tablat	equ	0xFF5
 20482                           prodh	equ	0xFF4
 20483                           prodl	equ	0xFF3
 20484                           intcon	equ	0xFF2
 20485                           intcon2	equ	0xFF1
 20486                           intcon3	equ	0xFF0
 20487                           indf0	equ	0xFEF
 20488                           postinc0	equ	0xFEE
 20489                           fsr0h	equ	0xFEA
 20490                           fsr0l	equ	0xFE9
 20491                           wreg	equ	0xFE8
 20492                           postdec1	equ	0xFE5
 20493                           fsr1h	equ	0xFE2
 20494                           fsr1l	equ	0xFE1
 20495                           indf2	equ	0xFDF
 20496                           postinc2	equ	0xFDE
 20497                           postdec2	equ	0xFDD
 20498                           fsr2h	equ	0xFDA
 20499                           fsr2l	equ	0xFD9
 20500                           status	equ	0xFD8
 20501                           
 20502 ;; *************** function i2_change_state_to_menu_22 *****************
 20503 ;; Defined at:
 20504 ;;		line 501 in file "UI.c"
 20505 ;; Parameters:    Size  Location     Type
 20506 ;;		None
 20507 ;; Auto vars:     Size  Location     Type
 20508 ;;		None
 20509 ;; Return value:  Size  Location     Type
 20510 ;;                  1    wreg      void 
 20511 ;; Registers used:
 20512 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20513 ;; Tracked objects:
 20514 ;;		On entry : 0/0
 20515 ;;		On exit  : 0/0
 20516 ;;		Unchanged: 0/0
 20517 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20518 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20519 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20520 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20521 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20522 ;;Total ram usage:        0 bytes
 20523 ;; Hardware stack levels used:    1
 20524 ;; Hardware stack levels required when called:    3
 20525 ;; This function calls:
 20526 ;;		i2_lcdInst
 20527 ;;		i2_printf
 20528 ;; This function is called by:
 20529 ;;		_updateMenu
 20530 ;;		_inputHandler
 20531 ;; This function uses a non-reentrant model
 20532 ;;
 20533                           
 20534                           	psect	text67
 20535  005098                     __ptext67:
 20536                           	opt stack 0
 20537  005098                     i2_change_state_to_menu_22:
 20538                           	opt stack 19
 20539                           
 20540                           ;UI.c: 502: cur_state = 22;
 20541                           
 20542                           ;incstack = 0
 20543  005098  0E00               	movlw	0
 20544  00509A  0100               	movlb	0	; () banked
 20545  00509C  6FED               	movwf	(_cur_state+1)& (0+255),b
 20546  00509E  0E16               	movlw	22
 20547  0050A0  6FEC               	movwf	_cur_state& (0+255),b
 20548                           
 20549                           ; BSR set to: 0
 20550                           ;UI.c: 504: lcdInst(0b10000000);;
 20551  0050A2  0E80               	movlw	128
 20552  0050A4  EC80  F02A         	call	i2_lcdInst
 20553                           
 20554                           ;UI.c: 505: printf("2. SORT        <");
 20555  0050A8  0ECE               	movlw	low STR_34
 20556  0050AA  6E0D               	movwf	i2printf@f,c
 20557  0050AC  0EFD               	movlw	high STR_34
 20558  0050AE  6E0E               	movwf	i2printf@f+1,c
 20559  0050B0  ECFF  F00E         	call	i2_printf	;wreg free
 20560                           
 20561                           ;UI.c: 506: lcdInst(0b11000000);;
 20562  0050B4  0EC0               	movlw	192
 20563  0050B6  EC80  F02A         	call	i2_lcdInst
 20564                           
 20565                           ;UI.c: 507: printf("3. LOGS         ");
 20566  0050BA  0E13               	movlw	low STR_36
 20567  0050BC  6E0D               	movwf	i2printf@f,c
 20568  0050BE  0EFD               	movlw	high STR_36
 20569  0050C0  6E0E               	movwf	i2printf@f+1,c
 20570  0050C2  ECFF  F00E         	call	i2_printf	;wreg free
 20571  0050C6  0012               	return		;funcret
 20572  0050C8                     __end_ofi2_change_state_to_menu_22:
 20573                           	opt stack 0
 20574                           pclatu	equ	0xFFB
 20575                           pclath	equ	0xFFA
 20576                           tblptru	equ	0xFF8
 20577                           tblptrh	equ	0xFF7
 20578                           tblptrl	equ	0xFF6
 20579                           tablat	equ	0xFF5
 20580                           prodh	equ	0xFF4
 20581                           prodl	equ	0xFF3
 20582                           intcon	equ	0xFF2
 20583                           intcon2	equ	0xFF1
 20584                           intcon3	equ	0xFF0
 20585                           indf0	equ	0xFEF
 20586                           postinc0	equ	0xFEE
 20587                           fsr0h	equ	0xFEA
 20588                           fsr0l	equ	0xFE9
 20589                           wreg	equ	0xFE8
 20590                           postdec1	equ	0xFE5
 20591                           fsr1h	equ	0xFE2
 20592                           fsr1l	equ	0xFE1
 20593                           indf2	equ	0xFDF
 20594                           postinc2	equ	0xFDE
 20595                           postdec2	equ	0xFDD
 20596                           fsr2h	equ	0xFDA
 20597                           fsr2l	equ	0xFD9
 20598                           status	equ	0xFD8
 20599                           
 20600 ;; *************** function i2_change_state_to_menu_12 *****************
 20601 ;; Defined at:
 20602 ;;		line 493 in file "UI.c"
 20603 ;; Parameters:    Size  Location     Type
 20604 ;;		None
 20605 ;; Auto vars:     Size  Location     Type
 20606 ;;		None
 20607 ;; Return value:  Size  Location     Type
 20608 ;;                  1    wreg      void 
 20609 ;; Registers used:
 20610 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20611 ;; Tracked objects:
 20612 ;;		On entry : 0/0
 20613 ;;		On exit  : 0/0
 20614 ;;		Unchanged: 0/0
 20615 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20616 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20617 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20618 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20619 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20620 ;;Total ram usage:        0 bytes
 20621 ;; Hardware stack levels used:    1
 20622 ;; Hardware stack levels required when called:    3
 20623 ;; This function calls:
 20624 ;;		i2_lcdInst
 20625 ;;		i2_printf
 20626 ;; This function is called by:
 20627 ;;		_updateMenu
 20628 ;;		_inputHandler
 20629 ;; This function uses a non-reentrant model
 20630 ;;
 20631                           
 20632                           	psect	text68
 20633  0050C8                     __ptext68:
 20634                           	opt stack 0
 20635  0050C8                     i2_change_state_to_menu_12:
 20636                           	opt stack 19
 20637                           
 20638                           ;UI.c: 494: cur_state = 12;
 20639                           
 20640                           ;incstack = 0
 20641  0050C8  0E00               	movlw	0
 20642  0050CA  0100               	movlb	0	; () banked
 20643  0050CC  6FED               	movwf	(_cur_state+1)& (0+255),b
 20644  0050CE  0E0C               	movlw	12
 20645  0050D0  6FEC               	movwf	_cur_state& (0+255),b
 20646                           
 20647                           ; BSR set to: 0
 20648                           ;UI.c: 496: lcdInst(0b10000000);;
 20649  0050D2  0E80               	movlw	128
 20650  0050D4  EC80  F02A         	call	i2_lcdInst
 20651                           
 20652                           ;UI.c: 497: printf("1. DATE/TIME    ");
 20653  0050D8  0E35               	movlw	low STR_33
 20654  0050DA  6E0D               	movwf	i2printf@f,c
 20655  0050DC  0EFD               	movlw	high STR_33
 20656  0050DE  6E0E               	movwf	i2printf@f+1,c
 20657  0050E0  ECFF  F00E         	call	i2_printf	;wreg free
 20658                           
 20659                           ;UI.c: 498: lcdInst(0b11000000);;
 20660  0050E4  0EC0               	movlw	192
 20661  0050E6  EC80  F02A         	call	i2_lcdInst
 20662                           
 20663                           ;UI.c: 499: printf("2. SORT        <");
 20664  0050EA  0ECE               	movlw	low STR_34
 20665  0050EC  6E0D               	movwf	i2printf@f,c
 20666  0050EE  0EFD               	movlw	high STR_34
 20667  0050F0  6E0E               	movwf	i2printf@f+1,c
 20668  0050F2  ECFF  F00E         	call	i2_printf	;wreg free
 20669  0050F6  0012               	return		;funcret
 20670  0050F8                     __end_ofi2_change_state_to_menu_12:
 20671                           	opt stack 0
 20672                           pclatu	equ	0xFFB
 20673                           pclath	equ	0xFFA
 20674                           tblptru	equ	0xFF8
 20675                           tblptrh	equ	0xFF7
 20676                           tblptrl	equ	0xFF6
 20677                           tablat	equ	0xFF5
 20678                           prodh	equ	0xFF4
 20679                           prodl	equ	0xFF3
 20680                           intcon	equ	0xFF2
 20681                           intcon2	equ	0xFF1
 20682                           intcon3	equ	0xFF0
 20683                           indf0	equ	0xFEF
 20684                           postinc0	equ	0xFEE
 20685                           fsr0h	equ	0xFEA
 20686                           fsr0l	equ	0xFE9
 20687                           wreg	equ	0xFE8
 20688                           postdec1	equ	0xFE5
 20689                           fsr1h	equ	0xFE2
 20690                           fsr1l	equ	0xFE1
 20691                           indf2	equ	0xFDF
 20692                           postinc2	equ	0xFDE
 20693                           postdec2	equ	0xFDD
 20694                           fsr2h	equ	0xFDA
 20695                           fsr2l	equ	0xFD9
 20696                           status	equ	0xFD8
 20697                           
 20698 ;; *************** function _change_state_to_menu_23 *****************
 20699 ;; Defined at:
 20700 ;;		line 509 in file "UI.c"
 20701 ;; Parameters:    Size  Location     Type
 20702 ;;		None
 20703 ;; Auto vars:     Size  Location     Type
 20704 ;;		None
 20705 ;; Return value:  Size  Location     Type
 20706 ;;                  1    wreg      void 
 20707 ;; Registers used:
 20708 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20709 ;; Tracked objects:
 20710 ;;		On entry : 0/0
 20711 ;;		On exit  : 0/0
 20712 ;;		Unchanged: 0/0
 20713 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20714 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20715 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20716 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20717 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20718 ;;Total ram usage:        0 bytes
 20719 ;; Hardware stack levels used:    1
 20720 ;; Hardware stack levels required when called:    3
 20721 ;; This function calls:
 20722 ;;		i2_lcdInst
 20723 ;;		i2_printf
 20724 ;; This function is called by:
 20725 ;;		_updateMenu
 20726 ;;		_inputHandler
 20727 ;; This function uses a non-reentrant model
 20728 ;;
 20729                           
 20730                           	psect	text69
 20731  0050F8                     __ptext69:
 20732                           	opt stack 0
 20733  0050F8                     _change_state_to_menu_23:
 20734                           	opt stack 18
 20735                           
 20736                           ;UI.c: 510: cur_state = 23;
 20737                           
 20738                           ;incstack = 0
 20739  0050F8  0E00               	movlw	0
 20740  0050FA  0100               	movlb	0	; () banked
 20741  0050FC  6FED               	movwf	(_cur_state+1)& (0+255),b
 20742  0050FE  0E17               	movlw	23
 20743  005100  6FEC               	movwf	_cur_state& (0+255),b
 20744                           
 20745                           ; BSR set to: 0
 20746                           ;UI.c: 512: lcdInst(0b10000000);;
 20747  005102  0E80               	movlw	128
 20748  005104  EC80  F02A         	call	i2_lcdInst
 20749                           
 20750                           ;UI.c: 513: printf("2. SORT         ");
 20751  005108  0E24               	movlw	low STR_32
 20752  00510A  6E0D               	movwf	i2printf@f,c
 20753  00510C  0EFD               	movlw	high STR_32
 20754  00510E  6E0E               	movwf	i2printf@f+1,c
 20755  005110  ECFF  F00E         	call	i2_printf	;wreg free
 20756                           
 20757                           ;UI.c: 514: lcdInst(0b11000000);;
 20758  005114  0EC0               	movlw	192
 20759  005116  EC80  F02A         	call	i2_lcdInst
 20760                           
 20761                           ;UI.c: 515: printf("3. LOGS        <");
 20762  00511A  0EBD               	movlw	low STR_38
 20763  00511C  6E0D               	movwf	i2printf@f,c
 20764  00511E  0EFD               	movlw	high STR_38
 20765  005120  6E0E               	movwf	i2printf@f+1,c
 20766  005122  ECFF  F00E         	call	i2_printf	;wreg free
 20767  005126  0012               	return		;funcret
 20768  005128                     __end_of_change_state_to_menu_23:
 20769                           	opt stack 0
 20770                           pclatu	equ	0xFFB
 20771                           pclath	equ	0xFFA
 20772                           tblptru	equ	0xFF8
 20773                           tblptrh	equ	0xFF7
 20774                           tblptrl	equ	0xFF6
 20775                           tablat	equ	0xFF5
 20776                           prodh	equ	0xFF4
 20777                           prodl	equ	0xFF3
 20778                           intcon	equ	0xFF2
 20779                           intcon2	equ	0xFF1
 20780                           intcon3	equ	0xFF0
 20781                           indf0	equ	0xFEF
 20782                           postinc0	equ	0xFEE
 20783                           fsr0h	equ	0xFEA
 20784                           fsr0l	equ	0xFE9
 20785                           wreg	equ	0xFE8
 20786                           postdec1	equ	0xFE5
 20787                           fsr1h	equ	0xFE2
 20788                           fsr1l	equ	0xFE1
 20789                           indf2	equ	0xFDF
 20790                           postinc2	equ	0xFDE
 20791                           postdec2	equ	0xFDD
 20792                           fsr2h	equ	0xFDA
 20793                           fsr2l	equ	0xFD9
 20794                           status	equ	0xFD8
 20795                           
 20796 ;; *************** function _change_state_to_menu_11 *****************
 20797 ;; Defined at:
 20798 ;;		line 485 in file "UI.c"
 20799 ;; Parameters:    Size  Location     Type
 20800 ;;		None
 20801 ;; Auto vars:     Size  Location     Type
 20802 ;;		None
 20803 ;; Return value:  Size  Location     Type
 20804 ;;                  1    wreg      void 
 20805 ;; Registers used:
 20806 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20807 ;; Tracked objects:
 20808 ;;		On entry : 0/0
 20809 ;;		On exit  : 0/0
 20810 ;;		Unchanged: 0/0
 20811 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20812 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20813 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20814 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20815 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20816 ;;Total ram usage:        0 bytes
 20817 ;; Hardware stack levels used:    1
 20818 ;; Hardware stack levels required when called:    3
 20819 ;; This function calls:
 20820 ;;		i2_lcdInst
 20821 ;;		i2_printf
 20822 ;; This function is called by:
 20823 ;;		_updateMenu
 20824 ;;		_inputHandler
 20825 ;; This function uses a non-reentrant model
 20826 ;;
 20827                           
 20828                           	psect	text70
 20829  005128                     __ptext70:
 20830                           	opt stack 0
 20831  005128                     _change_state_to_menu_11:
 20832                           	opt stack 18
 20833                           
 20834                           ;UI.c: 486: cur_state = 11;
 20835                           
 20836                           ;incstack = 0
 20837  005128  0E00               	movlw	0
 20838  00512A  0100               	movlb	0	; () banked
 20839  00512C  6FED               	movwf	(_cur_state+1)& (0+255),b
 20840  00512E  0E0B               	movlw	11
 20841  005130  6FEC               	movwf	_cur_state& (0+255),b
 20842                           
 20843                           ; BSR set to: 0
 20844                           ;UI.c: 488: lcdInst(0b10000000);;
 20845  005132  0E80               	movlw	128
 20846  005134  EC80  F02A         	call	i2_lcdInst
 20847                           
 20848                           ;UI.c: 489: printf("1. DATE/TIME   <");
 20849  005138  0EDF               	movlw	low STR_31
 20850  00513A  6E0D               	movwf	i2printf@f,c
 20851  00513C  0EFD               	movlw	high STR_31
 20852  00513E  6E0E               	movwf	i2printf@f+1,c
 20853  005140  ECFF  F00E         	call	i2_printf	;wreg free
 20854                           
 20855                           ;UI.c: 490: lcdInst(0b11000000);;
 20856  005144  0EC0               	movlw	192
 20857  005146  EC80  F02A         	call	i2_lcdInst
 20858                           
 20859                           ;UI.c: 491: printf("2. SORT         ");
 20860  00514A  0E24               	movlw	low STR_32
 20861  00514C  6E0D               	movwf	i2printf@f,c
 20862  00514E  0EFD               	movlw	high STR_32
 20863  005150  6E0E               	movwf	i2printf@f+1,c
 20864  005152  ECFF  F00E         	call	i2_printf	;wreg free
 20865  005156  0012               	return		;funcret
 20866  005158                     __end_of_change_state_to_menu_11:
 20867                           	opt stack 0
 20868                           pclatu	equ	0xFFB
 20869                           pclath	equ	0xFFA
 20870                           tblptru	equ	0xFF8
 20871                           tblptrh	equ	0xFF7
 20872                           tblptrl	equ	0xFF6
 20873                           tablat	equ	0xFF5
 20874                           prodh	equ	0xFF4
 20875                           prodl	equ	0xFF3
 20876                           intcon	equ	0xFF2
 20877                           intcon2	equ	0xFF1
 20878                           intcon3	equ	0xFF0
 20879                           indf0	equ	0xFEF
 20880                           postinc0	equ	0xFEE
 20881                           fsr0h	equ	0xFEA
 20882                           fsr0l	equ	0xFE9
 20883                           wreg	equ	0xFE8
 20884                           postdec1	equ	0xFE5
 20885                           fsr1h	equ	0xFE2
 20886                           fsr1l	equ	0xFE1
 20887                           indf2	equ	0xFDF
 20888                           postinc2	equ	0xFDE
 20889                           postdec2	equ	0xFDD
 20890                           fsr2h	equ	0xFDA
 20891                           fsr2l	equ	0xFD9
 20892                           status	equ	0xFD8
 20893                           
 20894 ;; *************** function _change_state_to_logs_34 *****************
 20895 ;; Defined at:
 20896 ;;		line 552 in file "UI.c"
 20897 ;; Parameters:    Size  Location     Type
 20898 ;;		None
 20899 ;; Auto vars:     Size  Location     Type
 20900 ;;		None
 20901 ;; Return value:  Size  Location     Type
 20902 ;;                  1    wreg      void 
 20903 ;; Registers used:
 20904 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20905 ;; Tracked objects:
 20906 ;;		On entry : 0/0
 20907 ;;		On exit  : 0/0
 20908 ;;		Unchanged: 0/0
 20909 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20910 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20911 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20912 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20913 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20914 ;;Total ram usage:        0 bytes
 20915 ;; Hardware stack levels used:    1
 20916 ;; Hardware stack levels required when called:    3
 20917 ;; This function calls:
 20918 ;;		i2_lcdInst
 20919 ;;		i2_printf
 20920 ;; This function is called by:
 20921 ;;		_updateMenu
 20922 ;;		_inputHandler
 20923 ;; This function uses a non-reentrant model
 20924 ;;
 20925                           
 20926                           	psect	text71
 20927  005158                     __ptext71:
 20928                           	opt stack 0
 20929  005158                     _change_state_to_logs_34:
 20930                           	opt stack 18
 20931                           
 20932                           ;UI.c: 553: cur_state = 1034;
 20933                           
 20934                           ;incstack = 0
 20935  005158  0E04               	movlw	4
 20936  00515A  0100               	movlb	0	; () banked
 20937  00515C  6FED               	movwf	(_cur_state+1)& (0+255),b
 20938  00515E  0E0A               	movlw	10
 20939  005160  6FEC               	movwf	_cur_state& (0+255),b
 20940                           
 20941                           ; BSR set to: 0
 20942                           ;UI.c: 554: lcdInst(0b10000000);;
 20943  005162  0E80               	movlw	128
 20944  005164  EC80  F02A         	call	i2_lcdInst
 20945                           
 20946                           ;UI.c: 555: printf("LOG 3           ");
 20947  005168  0EF1               	movlw	low STR_44
 20948  00516A  6E0D               	movwf	i2printf@f,c
 20949  00516C  0EFC               	movlw	high STR_44
 20950  00516E  6E0E               	movwf	i2printf@f+1,c
 20951  005170  ECFF  F00E         	call	i2_printf	;wreg free
 20952                           
 20953                           ;UI.c: 556: lcdInst(0b11000000);;
 20954  005174  0EC0               	movlw	192
 20955  005176  EC80  F02A         	call	i2_lcdInst
 20956                           
 20957                           ;UI.c: 557: printf("LOG 4          <");
 20958  00517A  0EAC               	movlw	low STR_50
 20959  00517C  6E0D               	movwf	i2printf@f,c
 20960  00517E  0EFD               	movlw	high STR_50
 20961  005180  6E0E               	movwf	i2printf@f+1,c
 20962  005182  ECFF  F00E         	call	i2_printf	;wreg free
 20963  005186  0012               	return		;funcret
 20964  005188                     __end_of_change_state_to_logs_34:
 20965                           	opt stack 0
 20966                           pclatu	equ	0xFFB
 20967                           pclath	equ	0xFFA
 20968                           tblptru	equ	0xFF8
 20969                           tblptrh	equ	0xFF7
 20970                           tblptrl	equ	0xFF6
 20971                           tablat	equ	0xFF5
 20972                           prodh	equ	0xFF4
 20973                           prodl	equ	0xFF3
 20974                           intcon	equ	0xFF2
 20975                           intcon2	equ	0xFF1
 20976                           intcon3	equ	0xFF0
 20977                           indf0	equ	0xFEF
 20978                           postinc0	equ	0xFEE
 20979                           fsr0h	equ	0xFEA
 20980                           fsr0l	equ	0xFE9
 20981                           wreg	equ	0xFE8
 20982                           postdec1	equ	0xFE5
 20983                           fsr1h	equ	0xFE2
 20984                           fsr1l	equ	0xFE1
 20985                           indf2	equ	0xFDF
 20986                           postinc2	equ	0xFDE
 20987                           postdec2	equ	0xFDD
 20988                           fsr2h	equ	0xFDA
 20989                           fsr2l	equ	0xFD9
 20990                           status	equ	0xFD8
 20991                           
 20992 ;; *************** function _change_state_to_logs_33 *****************
 20993 ;; Defined at:
 20994 ;;		line 545 in file "UI.c"
 20995 ;; Parameters:    Size  Location     Type
 20996 ;;		None
 20997 ;; Auto vars:     Size  Location     Type
 20998 ;;		None
 20999 ;; Return value:  Size  Location     Type
 21000 ;;                  1    wreg      void 
 21001 ;; Registers used:
 21002 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21003 ;; Tracked objects:
 21004 ;;		On entry : 0/0
 21005 ;;		On exit  : 0/0
 21006 ;;		Unchanged: 0/0
 21007 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21008 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21009 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21010 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21011 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21012 ;;Total ram usage:        0 bytes
 21013 ;; Hardware stack levels used:    1
 21014 ;; Hardware stack levels required when called:    3
 21015 ;; This function calls:
 21016 ;;		i2_lcdInst
 21017 ;;		i2_printf
 21018 ;; This function is called by:
 21019 ;;		_updateMenu
 21020 ;;		_inputHandler
 21021 ;; This function uses a non-reentrant model
 21022 ;;
 21023                           
 21024                           	psect	text72
 21025  005188                     __ptext72:
 21026                           	opt stack 0
 21027  005188                     _change_state_to_logs_33:
 21028                           	opt stack 18
 21029                           
 21030                           ;UI.c: 546: cur_state = 1033;
 21031                           
 21032                           ;incstack = 0
 21033  005188  0E04               	movlw	4
 21034  00518A  0100               	movlb	0	; () banked
 21035  00518C  6FED               	movwf	(_cur_state+1)& (0+255),b
 21036  00518E  0E09               	movlw	9
 21037  005190  6FEC               	movwf	_cur_state& (0+255),b
 21038                           
 21039                           ; BSR set to: 0
 21040                           ;UI.c: 547: lcdInst(0b10000000);;
 21041  005192  0E80               	movlw	128
 21042  005194  EC80  F02A         	call	i2_lcdInst
 21043                           
 21044                           ;UI.c: 548: printf("LOG 3          <");
 21045  005198  0E9B               	movlw	low STR_46
 21046  00519A  6E0D               	movwf	i2printf@f,c
 21047  00519C  0EFD               	movlw	high STR_46
 21048  00519E  6E0E               	movwf	i2printf@f+1,c
 21049  0051A0  ECFF  F00E         	call	i2_printf	;wreg free
 21050                           
 21051                           ;UI.c: 549: lcdInst(0b11000000);;
 21052  0051A4  0EC0               	movlw	192
 21053  0051A6  EC80  F02A         	call	i2_lcdInst
 21054                           
 21055                           ;UI.c: 550: printf("LOG 4           ");
 21056  0051AA  0E02               	movlw	low STR_48
 21057  0051AC  6E0D               	movwf	i2printf@f,c
 21058  0051AE  0EFD               	movlw	high STR_48
 21059  0051B0  6E0E               	movwf	i2printf@f+1,c
 21060  0051B2  ECFF  F00E         	call	i2_printf	;wreg free
 21061  0051B6  0012               	return		;funcret
 21062  0051B8                     __end_of_change_state_to_logs_33:
 21063                           	opt stack 0
 21064                           pclatu	equ	0xFFB
 21065                           pclath	equ	0xFFA
 21066                           tblptru	equ	0xFF8
 21067                           tblptrh	equ	0xFF7
 21068                           tblptrl	equ	0xFF6
 21069                           tablat	equ	0xFF5
 21070                           prodh	equ	0xFF4
 21071                           prodl	equ	0xFF3
 21072                           intcon	equ	0xFF2
 21073                           intcon2	equ	0xFF1
 21074                           intcon3	equ	0xFF0
 21075                           indf0	equ	0xFEF
 21076                           postinc0	equ	0xFEE
 21077                           fsr0h	equ	0xFEA
 21078                           fsr0l	equ	0xFE9
 21079                           wreg	equ	0xFE8
 21080                           postdec1	equ	0xFE5
 21081                           fsr1h	equ	0xFE2
 21082                           fsr1l	equ	0xFE1
 21083                           indf2	equ	0xFDF
 21084                           postinc2	equ	0xFDE
 21085                           postdec2	equ	0xFDD
 21086                           fsr2h	equ	0xFDA
 21087                           fsr2l	equ	0xFD9
 21088                           status	equ	0xFD8
 21089                           
 21090 ;; *************** function _change_state_to_logs_23 *****************
 21091 ;; Defined at:
 21092 ;;		line 538 in file "UI.c"
 21093 ;; Parameters:    Size  Location     Type
 21094 ;;		None
 21095 ;; Auto vars:     Size  Location     Type
 21096 ;;		None
 21097 ;; Return value:  Size  Location     Type
 21098 ;;                  1    wreg      void 
 21099 ;; Registers used:
 21100 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21101 ;; Tracked objects:
 21102 ;;		On entry : 0/0
 21103 ;;		On exit  : 0/0
 21104 ;;		Unchanged: 0/0
 21105 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21106 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21107 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21108 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21109 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21110 ;;Total ram usage:        0 bytes
 21111 ;; Hardware stack levels used:    1
 21112 ;; Hardware stack levels required when called:    3
 21113 ;; This function calls:
 21114 ;;		i2_lcdInst
 21115 ;;		i2_printf
 21116 ;; This function is called by:
 21117 ;;		_updateMenu
 21118 ;;		_inputHandler
 21119 ;; This function uses a non-reentrant model
 21120 ;;
 21121                           
 21122                           	psect	text73
 21123  005276                     __ptext73:
 21124                           	opt stack 0
 21125  005276                     _change_state_to_logs_23:
 21126                           	opt stack 18
 21127                           
 21128                           ;UI.c: 539: cur_state = 1023;
 21129                           
 21130                           ;incstack = 0
 21131  005276  0E03               	movlw	3
 21132  005278  0100               	movlb	0	; () banked
 21133  00527A  6FED               	movwf	(_cur_state+1)& (0+255),b
 21134  00527C  69EC               	setf	_cur_state& (0+255),b
 21135                           
 21136                           ; BSR set to: 0
 21137                           ;UI.c: 540: lcdInst(0b10000000);;
 21138  00527E  0E80               	movlw	128
 21139  005280  EC80  F02A         	call	i2_lcdInst
 21140                           
 21141                           ;UI.c: 541: printf("LOG 2           ");
 21142  005284  0EE0               	movlw	low STR_40
 21143  005286  6E0D               	movwf	i2printf@f,c
 21144  005288  0EFC               	movlw	high STR_40
 21145  00528A  6E0E               	movwf	i2printf@f+1,c
 21146  00528C  ECFF  F00E         	call	i2_printf	;wreg free
 21147                           
 21148                           ;UI.c: 542: lcdInst(0b11000000);;
 21149  005290  0EC0               	movlw	192
 21150  005292  EC80  F02A         	call	i2_lcdInst
 21151                           
 21152                           ;UI.c: 543: printf("LOG 3          <");
 21153  005296  0E9B               	movlw	low STR_46
 21154  005298  6E0D               	movwf	i2printf@f,c
 21155  00529A  0EFD               	movlw	high STR_46
 21156  00529C  6E0E               	movwf	i2printf@f+1,c
 21157  00529E  ECFF  F00E         	call	i2_printf	;wreg free
 21158  0052A2  0012               	return		;funcret
 21159  0052A4                     __end_of_change_state_to_logs_23:
 21160                           	opt stack 0
 21161                           pclatu	equ	0xFFB
 21162                           pclath	equ	0xFFA
 21163                           tblptru	equ	0xFF8
 21164                           tblptrh	equ	0xFF7
 21165                           tblptrl	equ	0xFF6
 21166                           tablat	equ	0xFF5
 21167                           prodh	equ	0xFF4
 21168                           prodl	equ	0xFF3
 21169                           intcon	equ	0xFF2
 21170                           intcon2	equ	0xFF1
 21171                           intcon3	equ	0xFF0
 21172                           indf0	equ	0xFEF
 21173                           postinc0	equ	0xFEE
 21174                           fsr0h	equ	0xFEA
 21175                           fsr0l	equ	0xFE9
 21176                           wreg	equ	0xFE8
 21177                           postdec1	equ	0xFE5
 21178                           fsr1h	equ	0xFE2
 21179                           fsr1l	equ	0xFE1
 21180                           indf2	equ	0xFDF
 21181                           postinc2	equ	0xFDE
 21182                           postdec2	equ	0xFDD
 21183                           fsr2h	equ	0xFDA
 21184                           fsr2l	equ	0xFD9
 21185                           status	equ	0xFD8
 21186                           
 21187 ;; *************** function _change_state_to_logs_22 *****************
 21188 ;; Defined at:
 21189 ;;		line 531 in file "UI.c"
 21190 ;; Parameters:    Size  Location     Type
 21191 ;;		None
 21192 ;; Auto vars:     Size  Location     Type
 21193 ;;		None
 21194 ;; Return value:  Size  Location     Type
 21195 ;;                  1    wreg      void 
 21196 ;; Registers used:
 21197 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21198 ;; Tracked objects:
 21199 ;;		On entry : 0/0
 21200 ;;		On exit  : 0/0
 21201 ;;		Unchanged: 0/0
 21202 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21203 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21204 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21205 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21206 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21207 ;;Total ram usage:        0 bytes
 21208 ;; Hardware stack levels used:    1
 21209 ;; Hardware stack levels required when called:    3
 21210 ;; This function calls:
 21211 ;;		i2_lcdInst
 21212 ;;		i2_printf
 21213 ;; This function is called by:
 21214 ;;		_updateMenu
 21215 ;;		_inputHandler
 21216 ;; This function uses a non-reentrant model
 21217 ;;
 21218                           
 21219                           	psect	text74
 21220  0051B8                     __ptext74:
 21221                           	opt stack 0
 21222  0051B8                     _change_state_to_logs_22:
 21223                           	opt stack 18
 21224                           
 21225                           ;UI.c: 532: cur_state = 1022;
 21226                           
 21227                           ;incstack = 0
 21228  0051B8  0E03               	movlw	3
 21229  0051BA  0100               	movlb	0	; () banked
 21230  0051BC  6FED               	movwf	(_cur_state+1)& (0+255),b
 21231  0051BE  0EFE               	movlw	254
 21232  0051C0  6FEC               	movwf	_cur_state& (0+255),b
 21233                           
 21234                           ; BSR set to: 0
 21235                           ;UI.c: 533: lcdInst(0b10000000);;
 21236  0051C2  0E80               	movlw	128
 21237  0051C4  EC80  F02A         	call	i2_lcdInst
 21238                           
 21239                           ;UI.c: 534: printf("LOG 2          <");
 21240  0051C8  0E8A               	movlw	low STR_42
 21241  0051CA  6E0D               	movwf	i2printf@f,c
 21242  0051CC  0EFD               	movlw	high STR_42
 21243  0051CE  6E0E               	movwf	i2printf@f+1,c
 21244  0051D0  ECFF  F00E         	call	i2_printf	;wreg free
 21245                           
 21246                           ;UI.c: 535: lcdInst(0b11000000);;
 21247  0051D4  0EC0               	movlw	192
 21248  0051D6  EC80  F02A         	call	i2_lcdInst
 21249                           
 21250                           ;UI.c: 536: printf("LOG 3           ");
 21251  0051DA  0EF1               	movlw	low STR_44
 21252  0051DC  6E0D               	movwf	i2printf@f,c
 21253  0051DE  0EFC               	movlw	high STR_44
 21254  0051E0  6E0E               	movwf	i2printf@f+1,c
 21255  0051E2  ECFF  F00E         	call	i2_printf	;wreg free
 21256  0051E6  0012               	return		;funcret
 21257  0051E8                     __end_of_change_state_to_logs_22:
 21258                           	opt stack 0
 21259                           pclatu	equ	0xFFB
 21260                           pclath	equ	0xFFA
 21261                           tblptru	equ	0xFF8
 21262                           tblptrh	equ	0xFF7
 21263                           tblptrl	equ	0xFF6
 21264                           tablat	equ	0xFF5
 21265                           prodh	equ	0xFF4
 21266                           prodl	equ	0xFF3
 21267                           intcon	equ	0xFF2
 21268                           intcon2	equ	0xFF1
 21269                           intcon3	equ	0xFF0
 21270                           indf0	equ	0xFEF
 21271                           postinc0	equ	0xFEE
 21272                           fsr0h	equ	0xFEA
 21273                           fsr0l	equ	0xFE9
 21274                           wreg	equ	0xFE8
 21275                           postdec1	equ	0xFE5
 21276                           fsr1h	equ	0xFE2
 21277                           fsr1l	equ	0xFE1
 21278                           indf2	equ	0xFDF
 21279                           postinc2	equ	0xFDE
 21280                           postdec2	equ	0xFDD
 21281                           fsr2h	equ	0xFDA
 21282                           fsr2l	equ	0xFD9
 21283                           status	equ	0xFD8
 21284                           
 21285 ;; *************** function _change_state_to_logs_12 *****************
 21286 ;; Defined at:
 21287 ;;		line 524 in file "UI.c"
 21288 ;; Parameters:    Size  Location     Type
 21289 ;;		None
 21290 ;; Auto vars:     Size  Location     Type
 21291 ;;		None
 21292 ;; Return value:  Size  Location     Type
 21293 ;;                  1    wreg      void 
 21294 ;; Registers used:
 21295 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21296 ;; Tracked objects:
 21297 ;;		On entry : 0/0
 21298 ;;		On exit  : 0/0
 21299 ;;		Unchanged: 0/0
 21300 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21301 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21302 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21303 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21304 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21305 ;;Total ram usage:        0 bytes
 21306 ;; Hardware stack levels used:    1
 21307 ;; Hardware stack levels required when called:    3
 21308 ;; This function calls:
 21309 ;;		i2_lcdInst
 21310 ;;		i2_printf
 21311 ;; This function is called by:
 21312 ;;		_updateMenu
 21313 ;;		_inputHandler
 21314 ;; This function uses a non-reentrant model
 21315 ;;
 21316                           
 21317                           	psect	text75
 21318  0051E8                     __ptext75:
 21319                           	opt stack 0
 21320  0051E8                     _change_state_to_logs_12:
 21321                           	opt stack 18
 21322                           
 21323                           ;UI.c: 525: cur_state = 1012;
 21324                           
 21325                           ;incstack = 0
 21326  0051E8  0E03               	movlw	3
 21327  0051EA  0100               	movlb	0	; () banked
 21328  0051EC  6FED               	movwf	(_cur_state+1)& (0+255),b
 21329  0051EE  0EF4               	movlw	244
 21330  0051F0  6FEC               	movwf	_cur_state& (0+255),b
 21331                           
 21332                           ; BSR set to: 0
 21333                           ;UI.c: 526: lcdInst(0b10000000);;
 21334  0051F2  0E80               	movlw	128
 21335  0051F4  EC80  F02A         	call	i2_lcdInst
 21336                           
 21337                           ;UI.c: 527: printf("LOG 1           ");
 21338  0051F8  0ECF               	movlw	low STR_41
 21339  0051FA  6E0D               	movwf	i2printf@f,c
 21340  0051FC  0EFC               	movlw	high STR_41
 21341  0051FE  6E0E               	movwf	i2printf@f+1,c
 21342  005200  ECFF  F00E         	call	i2_printf	;wreg free
 21343                           
 21344                           ;UI.c: 528: lcdInst(0b11000000);;
 21345  005204  0EC0               	movlw	192
 21346  005206  EC80  F02A         	call	i2_lcdInst
 21347                           
 21348                           ;UI.c: 529: printf("LOG 2          <");
 21349  00520A  0E8A               	movlw	low STR_42
 21350  00520C  6E0D               	movwf	i2printf@f,c
 21351  00520E  0EFD               	movlw	high STR_42
 21352  005210  6E0E               	movwf	i2printf@f+1,c
 21353  005212  ECFF  F00E         	call	i2_printf	;wreg free
 21354  005216  0012               	return		;funcret
 21355  005218                     __end_of_change_state_to_logs_12:
 21356                           	opt stack 0
 21357                           pclatu	equ	0xFFB
 21358                           pclath	equ	0xFFA
 21359                           tblptru	equ	0xFF8
 21360                           tblptrh	equ	0xFF7
 21361                           tblptrl	equ	0xFF6
 21362                           tablat	equ	0xFF5
 21363                           prodh	equ	0xFF4
 21364                           prodl	equ	0xFF3
 21365                           intcon	equ	0xFF2
 21366                           intcon2	equ	0xFF1
 21367                           intcon3	equ	0xFF0
 21368                           indf0	equ	0xFEF
 21369                           postinc0	equ	0xFEE
 21370                           fsr0h	equ	0xFEA
 21371                           fsr0l	equ	0xFE9
 21372                           wreg	equ	0xFE8
 21373                           postdec1	equ	0xFE5
 21374                           fsr1h	equ	0xFE2
 21375                           fsr1l	equ	0xFE1
 21376                           indf2	equ	0xFDF
 21377                           postinc2	equ	0xFDE
 21378                           postdec2	equ	0xFDD
 21379                           fsr2h	equ	0xFDA
 21380                           fsr2l	equ	0xFD9
 21381                           status	equ	0xFD8
 21382                           
 21383 ;; *************** function _change_state_to_logs_11 *****************
 21384 ;; Defined at:
 21385 ;;		line 517 in file "UI.c"
 21386 ;; Parameters:    Size  Location     Type
 21387 ;;		None
 21388 ;; Auto vars:     Size  Location     Type
 21389 ;;		None
 21390 ;; Return value:  Size  Location     Type
 21391 ;;                  1    wreg      void 
 21392 ;; Registers used:
 21393 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21394 ;; Tracked objects:
 21395 ;;		On entry : 0/0
 21396 ;;		On exit  : 0/0
 21397 ;;		Unchanged: 0/0
 21398 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21399 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21400 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21401 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21402 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21403 ;;Total ram usage:        0 bytes
 21404 ;; Hardware stack levels used:    1
 21405 ;; Hardware stack levels required when called:    3
 21406 ;; This function calls:
 21407 ;;		i2_lcdInst
 21408 ;;		i2_printf
 21409 ;; This function is called by:
 21410 ;;		_updateMenu
 21411 ;;		_inputHandler
 21412 ;; This function uses a non-reentrant model
 21413 ;;
 21414                           
 21415                           	psect	text76
 21416  005218                     __ptext76:
 21417                           	opt stack 0
 21418  005218                     _change_state_to_logs_11:
 21419                           	opt stack 18
 21420                           
 21421                           ;UI.c: 518: cur_state = 1011;
 21422                           
 21423                           ;incstack = 0
 21424  005218  0E03               	movlw	3
 21425  00521A  0100               	movlb	0	; () banked
 21426  00521C  6FED               	movwf	(_cur_state+1)& (0+255),b
 21427  00521E  0EF3               	movlw	243
 21428  005220  6FEC               	movwf	_cur_state& (0+255),b
 21429                           
 21430                           ; BSR set to: 0
 21431                           ;UI.c: 519: lcdInst(0b10000000);;
 21432  005222  0E80               	movlw	128
 21433  005224  EC80  F02A         	call	i2_lcdInst
 21434                           
 21435                           ;UI.c: 520: printf("LOG 1          <");
 21436  005228  0E79               	movlw	low STR_39
 21437  00522A  6E0D               	movwf	i2printf@f,c
 21438  00522C  0EFD               	movlw	high STR_39
 21439  00522E  6E0E               	movwf	i2printf@f+1,c
 21440  005230  ECFF  F00E         	call	i2_printf	;wreg free
 21441                           
 21442                           ;UI.c: 521: lcdInst(0b11000000);;
 21443  005234  0EC0               	movlw	192
 21444  005236  EC80  F02A         	call	i2_lcdInst
 21445                           
 21446                           ;UI.c: 522: printf("LOG 2           ");
 21447  00523A  0EE0               	movlw	low STR_40
 21448  00523C  6E0D               	movwf	i2printf@f,c
 21449  00523E  0EFC               	movlw	high STR_40
 21450  005240  6E0E               	movwf	i2printf@f+1,c
 21451  005242  ECFF  F00E         	call	i2_printf	;wreg free
 21452  005246  0012               	return		;funcret
 21453  005248                     __end_of_change_state_to_logs_11:
 21454                           	opt stack 0
 21455                           pclatu	equ	0xFFB
 21456                           pclath	equ	0xFFA
 21457                           tblptru	equ	0xFF8
 21458                           tblptrh	equ	0xFF7
 21459                           tblptrl	equ	0xFF6
 21460                           tablat	equ	0xFF5
 21461                           prodh	equ	0xFF4
 21462                           prodl	equ	0xFF3
 21463                           intcon	equ	0xFF2
 21464                           intcon2	equ	0xFF1
 21465                           intcon3	equ	0xFF0
 21466                           indf0	equ	0xFEF
 21467                           postinc0	equ	0xFEE
 21468                           fsr0h	equ	0xFEA
 21469                           fsr0l	equ	0xFE9
 21470                           wreg	equ	0xFE8
 21471                           postdec1	equ	0xFE5
 21472                           fsr1h	equ	0xFE2
 21473                           fsr1l	equ	0xFE1
 21474                           indf2	equ	0xFDF
 21475                           postinc2	equ	0xFDE
 21476                           postdec2	equ	0xFDD
 21477                           fsr2h	equ	0xFDA
 21478                           fsr2l	equ	0xFD9
 21479                           status	equ	0xFD8
 21480                           
 21481 ;; *************** function _dispLogs *****************
 21482 ;; Defined at:
 21483 ;;		line 470 in file "UI.c"
 21484 ;; Parameters:    Size  Location     Type
 21485 ;;  myLog           2   17[COMRAM] int 
 21486 ;; Auto vars:     Size  Location     Type
 21487 ;;		None
 21488 ;; Return value:  Size  Location     Type
 21489 ;;                  1    wreg      void 
 21490 ;; Registers used:
 21491 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 21492 ;; Tracked objects:
 21493 ;;		On entry : 0/0
 21494 ;;		On exit  : 0/0
 21495 ;;		Unchanged: 0/0
 21496 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21497 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21498 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21499 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21500 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21501 ;;Total ram usage:        2 bytes
 21502 ;; Hardware stack levels used:    1
 21503 ;; Hardware stack levels required when called:    2
 21504 ;; This function calls:
 21505 ;;		_retrieveLog
 21506 ;; This function is called by:
 21507 ;;		_updateMenu
 21508 ;; This function uses a non-reentrant model
 21509 ;;
 21510                           
 21511                           	psect	text77
 21512  0053C2                     __ptext77:
 21513                           	opt stack 0
 21514  0053C2                     _dispLogs:
 21515                           	opt stack 20
 21516                           
 21517                           ;UI.c: 471: logstate = 1;
 21518                           
 21519                           ;incstack = 0
 21520  0053C2  0E00               	movlw	0
 21521  0053C4  0100               	movlb	0	; () banked
 21522  0053C6  6FF9               	movwf	(_logstate+1)& (0+255),b
 21523  0053C8  0E01               	movlw	1
 21524  0053CA  6FF8               	movwf	_logstate& (0+255),b
 21525                           
 21526                           ; BSR set to: 0
 21527                           ;UI.c: 472: log = myLog;
 21528  0053CC  C012  F0F4         	movff	dispLogs@myLog,_log
 21529  0053D0  C013  F0F5         	movff	dispLogs@myLog+1,_log+1
 21530                           
 21531                           ; BSR set to: 0
 21532                           ;UI.c: 473: retrieveLog(myLog - 1);
 21533  0053D4  0EFF               	movlw	255
 21534  0053D6  2412               	addwf	dispLogs@myLog,w,c
 21535  0053D8  6E07               	movwf	retrieveLog@logNum,c
 21536  0053DA  0EFF               	movlw	255
 21537  0053DC  2013               	addwfc	dispLogs@myLog+1,w,c
 21538  0053DE  6E08               	movwf	retrieveLog@logNum+1,c
 21539  0053E0  EC3F  F01E         	call	_retrieveLog	;wreg free
 21540  0053E4  0012               	return		;funcret
 21541  0053E6                     __end_of_dispLogs:
 21542                           	opt stack 0
 21543                           pclatu	equ	0xFFB
 21544                           pclath	equ	0xFFA
 21545                           tblptru	equ	0xFF8
 21546                           tblptrh	equ	0xFF7
 21547                           tblptrl	equ	0xFF6
 21548                           tablat	equ	0xFF5
 21549                           prodh	equ	0xFF4
 21550                           prodl	equ	0xFF3
 21551                           intcon	equ	0xFF2
 21552                           intcon2	equ	0xFF1
 21553                           intcon3	equ	0xFF0
 21554                           indf0	equ	0xFEF
 21555                           postinc0	equ	0xFEE
 21556                           fsr0h	equ	0xFEA
 21557                           fsr0l	equ	0xFE9
 21558                           wreg	equ	0xFE8
 21559                           postdec1	equ	0xFE5
 21560                           fsr1h	equ	0xFE2
 21561                           fsr1l	equ	0xFE1
 21562                           indf2	equ	0xFDF
 21563                           postinc2	equ	0xFDE
 21564                           postdec2	equ	0xFDD
 21565                           fsr2h	equ	0xFDA
 21566                           fsr2l	equ	0xFD9
 21567                           status	equ	0xFD8
 21568                           
 21569 ;; *************** function _retrieveLog *****************
 21570 ;; Defined at:
 21571 ;;		line 134 in file "EEPROM.c"
 21572 ;; Parameters:    Size  Location     Type
 21573 ;;  logNum          2    6[COMRAM] int 
 21574 ;; Auto vars:     Size  Location     Type
 21575 ;;  i               2   13[COMRAM] int 
 21576 ;;  addr            2   15[COMRAM] unsigned short 
 21577 ;;  byte3           1   12[COMRAM] unsigned char 
 21578 ;;  byte2           1   11[COMRAM] unsigned char 
 21579 ;;  byte1           1   10[COMRAM] unsigned char 
 21580 ;; Return value:  Size  Location     Type
 21581 ;;                  1    wreg      void 
 21582 ;; Registers used:
 21583 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 21584 ;; Tracked objects:
 21585 ;;		On entry : 0/0
 21586 ;;		On exit  : 0/0
 21587 ;;		Unchanged: 0/0
 21588 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21589 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21590 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21591 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21592 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21593 ;;Total ram usage:       11 bytes
 21594 ;; Hardware stack levels used:    1
 21595 ;; Hardware stack levels required when called:    1
 21596 ;; This function calls:
 21597 ;;		i2_EEPROM_read
 21598 ;;		i2___wmul
 21599 ;; This function is called by:
 21600 ;;		_dispLogs
 21601 ;; This function uses a non-reentrant model
 21602 ;;
 21603                           
 21604                           	psect	text78
 21605  003C7E                     __ptext78:
 21606                           	opt stack 0
 21607  003C7E                     _retrieveLog:
 21608                           	opt stack 20
 21609                           
 21610                           ;EEPROM.c: 140: unsigned short addr = 1 + logNum * 11;
 21611                           
 21612                           ;incstack = 0
 21613  003C7E  C007  F001         	movff	retrieveLog@logNum,i2___wmul@multiplier
 21614  003C82  C008  F002         	movff	retrieveLog@logNum+1,i2___wmul@multiplier+1
 21615  003C86  0E00               	movlw	0
 21616  003C88  6E04               	movwf	i2___wmul@multiplicand+1,c
 21617  003C8A  0E0B               	movlw	11
 21618  003C8C  6E03               	movwf	i2___wmul@multiplicand,c
 21619  003C8E  ECBB  F029         	call	i2___wmul	;wreg free
 21620  003C92  0E01               	movlw	1
 21621  003C94  2401               	addwf	?i2___wmul,w,c
 21622  003C96  6E10               	movwf	retrieveLog@addr,c
 21623  003C98  0E00               	movlw	0
 21624  003C9A  2002               	addwfc	?i2___wmul+1,w,c
 21625  003C9C  6E11               	movwf	retrieveLog@addr+1,c
 21626                           
 21627                           ;EEPROM.c: 143: unsigned char byte1 = EEPROM_read(addr);
 21628  003C9E  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 21629  003CA2  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 21630  003CA6  EC4C  F02A         	call	i2_EEPROM_read	;wreg free
 21631  003CAA  6E0B               	movwf	retrieveLog@byte1,c
 21632                           
 21633                           ;EEPROM.c: 144: log_completion = (int)(byte1 & 0b10000000);
 21634  003CAC  C00B  F009         	movff	retrieveLog@byte1,??_retrieveLog
 21635  003CB0  0E80               	movlw	128
 21636  003CB2  1609               	andwf	??_retrieveLog,f,c
 21637  003CB4  5009               	movf	??_retrieveLog,w,c
 21638  003CB6  6E63               	movwf	_log_completion,c
 21639  003CB8  6A64               	clrf	_log_completion+1,c
 21640                           
 21641                           ;EEPROM.c: 145: log_count_total = (int)(byte1 & 0b00001111);
 21642  003CBA  C00B  F009         	movff	retrieveLog@byte1,??_retrieveLog
 21643  003CBE  0E0F               	movlw	15
 21644  003CC0  1609               	andwf	??_retrieveLog,f,c
 21645  003CC2  5009               	movf	??_retrieveLog,w,c
 21646  003CC4  0101               	movlb	1	; () banked
 21647  003CC6  6F43               	movwf	_log_count_total& (0+255),b
 21648  003CC8  6B44               	clrf	(_log_count_total+1)& (0+255),b
 21649                           
 21650                           ; BSR set to: 1
 21651                           ;EEPROM.c: 146: addr++;
 21652  003CCA  4A10               	infsnz	retrieveLog@addr,f,c
 21653  003CCC  2A11               	incf	retrieveLog@addr+1,f,c
 21654                           
 21655                           ; BSR set to: 1
 21656                           ;EEPROM.c: 149: unsigned char byte2 = EEPROM_read(addr);
 21657  003CCE  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 21658  003CD2  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 21659  003CD6  EC4C  F02A         	call	i2_EEPROM_read	;wreg free
 21660  003CDA  6E0C               	movwf	retrieveLog@byte2,c
 21661                           
 21662                           ;EEPROM.c: 150: log_count_pop_no_tab = (int)((byte2 & 0b11110000)>> 4);
 21663  003CDC  C00C  F009         	movff	retrieveLog@byte2,??_retrieveLog
 21664  003CE0  3A09               	swapf	??_retrieveLog,f,c
 21665  003CE2  0E0F               	movlw	15
 21666  003CE4  1609               	andwf	??_retrieveLog,f,c
 21667  003CE6  0E0F               	movlw	15
 21668  003CE8  1609               	andwf	??_retrieveLog,f,c
 21669  003CEA  5009               	movf	??_retrieveLog,w,c
 21670  003CEC  6E65               	movwf	_log_count_pop_no_tab,c
 21671  003CEE  6A66               	clrf	_log_count_pop_no_tab+1,c
 21672                           
 21673                           ;EEPROM.c: 151: log_count_pop_w_tab = (int)(byte2 & 0b00001111);
 21674  003CF0  C00C  F009         	movff	retrieveLog@byte2,??_retrieveLog
 21675  003CF4  0E0F               	movlw	15
 21676  003CF6  1609               	andwf	??_retrieveLog,f,c
 21677  003CF8  5009               	movf	??_retrieveLog,w,c
 21678  003CFA  6E67               	movwf	_log_count_pop_w_tab,c
 21679  003CFC  6A68               	clrf	_log_count_pop_w_tab+1,c
 21680                           
 21681                           ;EEPROM.c: 152: addr++;
 21682  003CFE  4A10               	infsnz	retrieveLog@addr,f,c
 21683  003D00  2A11               	incf	retrieveLog@addr+1,f,c
 21684                           
 21685                           ;EEPROM.c: 153: unsigned char byte3 = EEPROM_read(addr);
 21686  003D02  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 21687  003D06  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 21688  003D0A  EC4C  F02A         	call	i2_EEPROM_read	;wreg free
 21689  003D0E  6E0D               	movwf	retrieveLog@byte3,c
 21690                           
 21691                           ;EEPROM.c: 154: log_count_can_w_lab = (int)((byte3 & 0b11110000)>> 4);
 21692  003D10  C00D  F009         	movff	retrieveLog@byte3,??_retrieveLog
 21693  003D14  3A09               	swapf	??_retrieveLog,f,c
 21694  003D16  0E0F               	movlw	15
 21695  003D18  1609               	andwf	??_retrieveLog,f,c
 21696  003D1A  0E0F               	movlw	15
 21697  003D1C  1609               	andwf	??_retrieveLog,f,c
 21698  003D1E  5009               	movf	??_retrieveLog,w,c
 21699  003D20  0101               	movlb	1	; () banked
 21700  003D22  6F41               	movwf	_log_count_can_w_lab& (0+255),b
 21701  003D24  6B42               	clrf	(_log_count_can_w_lab+1)& (0+255),b
 21702                           
 21703                           ; BSR set to: 1
 21704                           ;EEPROM.c: 155: log_count_can_no_lab = (int)(byte3 & 0b00001111);
 21705  003D26  C00D  F009         	movff	retrieveLog@byte3,??_retrieveLog
 21706  003D2A  0E0F               	movlw	15
 21707  003D2C  1609               	andwf	??_retrieveLog,f,c
 21708  003D2E  5009               	movf	??_retrieveLog,w,c
 21709  003D30  0101               	movlb	1	; () banked
 21710  003D32  6F3F               	movwf	_log_count_can_no_lab& (0+255),b
 21711  003D34  6B40               	clrf	(_log_count_can_no_lab+1)& (0+255),b
 21712                           
 21713                           ; BSR set to: 1
 21714                           ;EEPROM.c: 156: addr++;
 21715  003D36  4A10               	infsnz	retrieveLog@addr,f,c
 21716  003D38  2A11               	incf	retrieveLog@addr+1,f,c
 21717                           
 21718                           ; BSR set to: 1
 21719                           ;EEPROM.c: 159: for(int i = 0; i < 7; i++){
 21720  003D3A  0E00               	movlw	0
 21721  003D3C  6E0F               	movwf	retrieveLog@i+1,c
 21722  003D3E  0E00               	movlw	0
 21723  003D40  6E0E               	movwf	retrieveLog@i,c
 21724  003D42                     i2l6968:
 21725                           
 21726                           ; BSR set to: 1
 21727  003D42  BE0F               	btfsc	retrieveLog@i+1,7,c
 21728  003D44  D006               	goto	i2l6972
 21729  003D46  500F               	movf	retrieveLog@i+1,w,c
 21730  003D48  E11E               	bnz	i2l6980
 21731  003D4A  0E07               	movlw	7
 21732  003D4C  5C0E               	subwf	retrieveLog@i,w,c
 21733  003D4E  B0D8               	btfsc	status,0,c
 21734  003D50  D01A               	goto	i2l6980
 21735  003D52                     i2l6972:
 21736                           
 21737                           ;EEPROM.c: 160: log_startTime[i] = (int)EEPROM_read(addr);
 21738  003D52  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 21739  003D56  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 21740  003D5A  EC4C  F02A         	call	i2_EEPROM_read	;wreg free
 21741  003D5E  6E09               	movwf	??_retrieveLog& (0+255),c
 21742  003D60  6A0A               	clrf	(??_retrieveLog+1)& (0+255),c
 21743  003D62  90D8               	bcf	status,0,c
 21744  003D64  340E               	rlcf	retrieveLog@i,w,c
 21745  003D66  6ED9               	movwf	fsr2l,c
 21746  003D68  340F               	rlcf	retrieveLog@i+1,w,c
 21747  003D6A  6EDA               	movwf	fsr2h,c
 21748  003D6C  0E00               	movlw	low _log_startTime
 21749  003D6E  26D9               	addwf	fsr2l,f,c
 21750  003D70  0E01               	movlw	high _log_startTime
 21751  003D72  22DA               	addwfc	fsr2h,f,c
 21752  003D74  C009  FFDE         	movff	??_retrieveLog,postinc2
 21753  003D78  C00A  FFDD         	movff	??_retrieveLog+1,postdec2
 21754                           
 21755                           ;EEPROM.c: 161: addr++;
 21756  003D7C  4A10               	infsnz	retrieveLog@addr,f,c
 21757  003D7E  2A11               	incf	retrieveLog@addr+1,f,c
 21758  003D80  4A0E               	infsnz	retrieveLog@i,f,c
 21759  003D82  2A0F               	incf	retrieveLog@i+1,f,c
 21760  003D84  D7DE               	goto	i2l6968
 21761  003D86                     i2l6980:
 21762                           
 21763                           ;EEPROM.c: 162: }
 21764                           ;EEPROM.c: 165: log_total_time = (int)EEPROM_read(addr);
 21765  003D86  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 21766  003D8A  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 21767  003D8E  EC4C  F02A         	call	i2_EEPROM_read	;wreg free
 21768  003D92  6E09               	movwf	??_retrieveLog& (0+255),c
 21769  003D94  5009               	movf	??_retrieveLog,w,c
 21770  003D96  0100               	movlb	0	; () banked
 21771  003D98  6FF6               	movwf	_log_total_time& (0+255),b
 21772  003D9A  6BF7               	clrf	(_log_total_time+1)& (0+255),b
 21773                           
 21774                           ; BSR set to: 0
 21775  003D9C  0012               	return		;funcret
 21776  003D9E                     __end_of_retrieveLog:
 21777                           	opt stack 0
 21778                           pclatu	equ	0xFFB
 21779                           pclath	equ	0xFFA
 21780                           tblptru	equ	0xFF8
 21781                           tblptrh	equ	0xFF7
 21782                           tblptrl	equ	0xFF6
 21783                           tablat	equ	0xFF5
 21784                           prodh	equ	0xFF4
 21785                           prodl	equ	0xFF3
 21786                           intcon	equ	0xFF2
 21787                           intcon2	equ	0xFF1
 21788                           intcon3	equ	0xFF0
 21789                           indf0	equ	0xFEF
 21790                           postinc0	equ	0xFEE
 21791                           fsr0h	equ	0xFEA
 21792                           fsr0l	equ	0xFE9
 21793                           wreg	equ	0xFE8
 21794                           postdec1	equ	0xFE5
 21795                           fsr1h	equ	0xFE2
 21796                           fsr1l	equ	0xFE1
 21797                           indf2	equ	0xFDF
 21798                           postinc2	equ	0xFDE
 21799                           postdec2	equ	0xFDD
 21800                           fsr2h	equ	0xFDA
 21801                           fsr2l	equ	0xFD9
 21802                           status	equ	0xFD8
 21803                           
 21804 ;; *************** function i2_EEPROM_read *****************
 21805 ;; Defined at:
 21806 ;;		line 68 in file "EEPROM.c"
 21807 ;; Parameters:    Size  Location     Type
 21808 ;;  address         2    0[COMRAM] unsigned short 
 21809 ;; Auto vars:     Size  Location     Type
 21810 ;;		None
 21811 ;; Return value:  Size  Location     Type
 21812 ;;                  1    wreg      unsigned char 
 21813 ;; Registers used:
 21814 ;;		wreg, status,2
 21815 ;; Tracked objects:
 21816 ;;		On entry : 0/0
 21817 ;;		On exit  : 0/0
 21818 ;;		Unchanged: 0/0
 21819 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21820 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21821 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21822 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21823 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21824 ;;Total ram usage:        2 bytes
 21825 ;; Hardware stack levels used:    1
 21826 ;; This function calls:
 21827 ;;		Nothing
 21828 ;; This function is called by:
 21829 ;;		_retrieveLog
 21830 ;; This function uses a non-reentrant model
 21831 ;;
 21832                           
 21833                           	psect	text79
 21834  005498                     __ptext79:
 21835                           	opt stack 0
 21836  005498                     i2_EEPROM_read:
 21837                           	opt stack 20
 21838                           
 21839                           ;EEPROM.c: 70: EEADRH = (unsigned char)(address >> 8);
 21840                           
 21841                           ; BSR set to: 0
 21842                           ;incstack = 0
 21843  005498  5002               	movf	i2EEPROM_read@address+1,w,c
 21844  00549A  6EAA               	movwf	4010,c	;volatile
 21845                           
 21846                           ;EEPROM.c: 71: EEADR = (unsigned char)address;
 21847  00549C  C001  FFA9         	movff	i2EEPROM_read@address,4009	;volatile
 21848                           
 21849                           ;EEPROM.c: 73: EECON1bits.EEPGD = 0;
 21850  0054A0  9EA6               	bcf	4006,7,c	;volatile
 21851                           
 21852                           ;EEPROM.c: 74: EECON1bits.CFGS = 0;
 21853  0054A2  9CA6               	bcf	4006,6,c	;volatile
 21854                           
 21855                           ;EEPROM.c: 75: EECON1bits.RD = 1;
 21856  0054A4  80A6               	bsf	4006,0,c	;volatile
 21857  0054A6                     i2l1096:
 21858  0054A6  B0A6               	btfsc	4006,0,c	;volatile
 21859  0054A8  D7FE               	goto	i2l1096
 21860                           
 21861                           ;EEPROM.c: 81: return EEDATA;
 21862  0054AA  50A8               	movf	4008,w,c	;volatile
 21863  0054AC  0012               	return	
 21864  0054AE                     __end_ofi2_EEPROM_read:
 21865                           	opt stack 0
 21866                           pclatu	equ	0xFFB
 21867                           pclath	equ	0xFFA
 21868                           tblptru	equ	0xFF8
 21869                           tblptrh	equ	0xFF7
 21870                           tblptrl	equ	0xFF6
 21871                           tablat	equ	0xFF5
 21872                           prodh	equ	0xFF4
 21873                           prodl	equ	0xFF3
 21874                           intcon	equ	0xFF2
 21875                           intcon2	equ	0xFF1
 21876                           intcon3	equ	0xFF0
 21877                           indf0	equ	0xFEF
 21878                           postinc0	equ	0xFEE
 21879                           fsr0h	equ	0xFEA
 21880                           fsr0l	equ	0xFE9
 21881                           wreg	equ	0xFE8
 21882                           postdec1	equ	0xFE5
 21883                           fsr1h	equ	0xFE2
 21884                           fsr1l	equ	0xFE1
 21885                           indf2	equ	0xFDF
 21886                           postinc2	equ	0xFDE
 21887                           postdec2	equ	0xFDD
 21888                           fsr2h	equ	0xFDA
 21889                           fsr2l	equ	0xFD9
 21890                           status	equ	0xFD8
 21891                           
 21892 ;; *************** function _updateArmState *****************
 21893 ;; Defined at:
 21894 ;;		line 606 in file "sort.c"
 21895 ;; Parameters:    Size  Location     Type
 21896 ;;		None
 21897 ;; Auto vars:     Size  Location     Type
 21898 ;;		None
 21899 ;; Return value:  Size  Location     Type
 21900 ;;                  1    wreg      void 
 21901 ;; Registers used:
 21902 ;;		wreg, status,2, status,0
 21903 ;; Tracked objects:
 21904 ;;		On entry : 0/0
 21905 ;;		On exit  : 0/0
 21906 ;;		Unchanged: 0/0
 21907 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21908 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21909 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21910 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21911 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21912 ;;Total ram usage:        2 bytes
 21913 ;; Hardware stack levels used:    1
 21914 ;; This function calls:
 21915 ;;		Nothing
 21916 ;; This function is called by:
 21917 ;;		_handler
 21918 ;; This function uses a non-reentrant model
 21919 ;;
 21920                           
 21921                           	psect	text80
 21922  004EEE                     __ptext80:
 21923                           	opt stack 0
 21924  004EEE                     _updateArmState:
 21925                           	opt stack 23
 21926                           
 21927                           ;sort.c: 613: if(!was_low_2){
 21928                           
 21929                           ;incstack = 0
 21930  004EEE  5079               	movf	_was_low_2,w,c	;volatile
 21931  004EF0  107A               	iorwf	_was_low_2+1,w,c	;volatile
 21932  004EF2  B4D8               	btfsc	status,2,c
 21933  004EF4  D007               	goto	i2l9626
 21934  004EF6  D016               	goto	i2l917
 21935  004EF8                     i2l9620:
 21936                           
 21937                           ;sort.c: 618: PR2 = 0x20;
 21938  004EF8  0E20               	movlw	32
 21939  004EFA  6ECB               	movwf	4043,c	;volatile
 21940                           
 21941                           ;sort.c: 619: break;
 21942  004EFC  0012               	return	
 21943  004EFE                     i2l9622:
 21944                           
 21945                           ;sort.c: 622: PR2 = 0x40;
 21946  004EFE  0E40               	movlw	64
 21947  004F00  6ECB               	movwf	4043,c	;volatile
 21948                           
 21949                           ;sort.c: 624: }
 21950                           
 21951                           ;sort.c: 623: break;
 21952  004F02  0012               	return	
 21953  004F04                     i2l9626:
 21954  004F04  C0EE  F001         	movff	_f_arm_position,??_updateArmState	;volatile
 21955  004F08  C0EF  F002         	movff	_f_arm_position+1,??_updateArmState+1	;volatile
 21956                           
 21957                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 21958                           ; Switch size 1, requested type "space"
 21959                           ; Number of cases is 1, Range of values is 0 to 0
 21960                           ; switch strategies available:
 21961                           ; Name         Instructions Cycles
 21962                           ; simple_byte            4     3 (average)
 21963                           ;	Chosen strategy is simple_byte
 21964  004F0C  5002               	movf	??_updateArmState+1,w,c
 21965  004F0E  0A00               	xorlw	0	; case 0
 21966  004F10  A4D8               	btfss	status,2,c
 21967  004F12  0012               	return	
 21968                           
 21969                           ; Switch size 1, requested type "space"
 21970                           ; Number of cases is 2, Range of values is 0 to 1
 21971                           ; switch strategies available:
 21972                           ; Name         Instructions Cycles
 21973                           ; simple_byte            7     4 (average)
 21974                           ;	Chosen strategy is simple_byte
 21975  004F14  5001               	movf	??_updateArmState,w,c
 21976  004F16  0A00               	xorlw	0	; case 0
 21977  004F18  B4D8               	btfsc	status,2,c
 21978  004F1A  D7EE               	goto	i2l9620
 21979  004F1C  0A01               	xorlw	1	; case 1
 21980  004F1E  A4D8               	btfss	status,2,c
 21981                           
 21982                           ;sort.c: 625: }
 21983  004F20  0012               	return	
 21984  004F22  D7ED               	goto	i2l9622
 21985  004F24                     i2l917:
 21986                           
 21987                           ;sort.c: 626: else{
 21988                           ;sort.c: 628: PR2 = 0xFF;
 21989  004F24  68CB               	setf	4043,c	;volatile
 21990  004F26  0012               	return	
 21991  004F28                     __end_of_updateArmState:
 21992                           	opt stack 0
 21993                           pclatu	equ	0xFFB
 21994                           pclath	equ	0xFFA
 21995                           tblptru	equ	0xFF8
 21996                           tblptrh	equ	0xFF7
 21997                           tblptrl	equ	0xFF6
 21998                           tablat	equ	0xFF5
 21999                           prodh	equ	0xFF4
 22000                           prodl	equ	0xFF3
 22001                           intcon	equ	0xFF2
 22002                           intcon2	equ	0xFF1
 22003                           intcon3	equ	0xFF0
 22004                           indf0	equ	0xFEF
 22005                           postinc0	equ	0xFEE
 22006                           fsr0h	equ	0xFEA
 22007                           fsr0l	equ	0xFE9
 22008                           wreg	equ	0xFE8
 22009                           postdec1	equ	0xFE5
 22010                           fsr1h	equ	0xFE2
 22011                           fsr1l	equ	0xFE1
 22012                           indf2	equ	0xFDF
 22013                           postinc2	equ	0xFDE
 22014                           postdec2	equ	0xFDD
 22015                           fsr2h	equ	0xFDA
 22016                           fsr2l	equ	0xFD9
 22017                           status	equ	0xFD8
 22018                           
 22019 ;; *************** function _printSortTimer *****************
 22020 ;; Defined at:
 22021 ;;		line 456 in file "sort.c"
 22022 ;; Parameters:    Size  Location     Type
 22023 ;;		None
 22024 ;; Auto vars:     Size  Location     Type
 22025 ;;  i               2   70[COMRAM] int 
 22026 ;;  i               2   72[COMRAM] int 
 22027 ;;  curTime        14   44[COMRAM] int [7]
 22028 ;;  timeDiff        2   68[COMRAM] unsigned int 
 22029 ;;  sec             2   64[COMRAM] int 
 22030 ;;  min             2   62[COMRAM] int 
 22031 ;;  cur_sec         2   60[COMRAM] unsigned int 
 22032 ;;  start_sec       2   58[COMRAM] unsigned int 
 22033 ;; Return value:  Size  Location     Type
 22034 ;;                  1    wreg      void 
 22035 ;; Registers used:
 22036 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22037 ;; Tracked objects:
 22038 ;;		On entry : 0/0
 22039 ;;		On exit  : 0/0
 22040 ;;		Unchanged: 0/0
 22041 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22042 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22043 ;;      Locals:        30       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22044 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22045 ;;      Totals:        33       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22046 ;;Total ram usage:       33 bytes
 22047 ;; Hardware stack levels used:    1
 22048 ;; Hardware stack levels required when called:    3
 22049 ;; This function calls:
 22050 ;;		i2___lwdiv
 22051 ;;		i2___lwmod
 22052 ;;		i2___wmul
 22053 ;;		i2_delay_ms
 22054 ;;		i2_getRTC
 22055 ;;		i2_lcdInst
 22056 ;;		i2_printf
 22057 ;; This function is called by:
 22058 ;;		_handler
 22059 ;; This function uses a non-reentrant model
 22060 ;;
 22061                           
 22062                           	psect	text81
 22063  002CC0                     __ptext81:
 22064                           	opt stack 0
 22065  002CC0                     _printSortTimer:
 22066                           	opt stack 20
 22067                           
 22068                           ;sort.c: 457: getRTC();
 22069                           
 22070                           ;incstack = 0
 22071  002CC0  EC06  F025         	call	i2_getRTC	;wreg free
 22072                           
 22073                           ;sort.c: 458: int curTime[7];
 22074                           ;sort.c: 459: for(int i = 0; i < 7; i++){
 22075  002CC4  0E00               	movlw	0
 22076  002CC6  6E4A               	movwf	printSortTimer@i+1,c
 22077  002CC8  0E00               	movlw	0
 22078  002CCA  6E49               	movwf	printSortTimer@i,c
 22079  002CCC                     i2l9462:
 22080  002CCC  BE4A               	btfsc	printSortTimer@i+1,7,c
 22081  002CCE  D006               	goto	i2l9466
 22082  002CD0  504A               	movf	printSortTimer@i+1,w,c
 22083  002CD2  E131               	bnz	i2l9472
 22084  002CD4  0E07               	movlw	7
 22085  002CD6  5C49               	subwf	printSortTimer@i,w,c
 22086  002CD8  B0D8               	btfsc	status,0,c
 22087  002CDA  D02D               	goto	i2l9472
 22088  002CDC                     i2l9466:
 22089                           
 22090                           ;sort.c: 460: curTime[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
 22091  002CDC  0E1C               	movlw	low _time
 22092  002CDE  2449               	addwf	printSortTimer@i,w,c
 22093  002CE0  6ED9               	movwf	fsr2l,c
 22094  002CE2  0E01               	movlw	high _time
 22095  002CE4  204A               	addwfc	printSortTimer@i+1,w,c
 22096  002CE6  6EDA               	movwf	fsr2h,c
 22097  002CE8  50DF               	movf	indf2,w,c
 22098  002CEA  6E2A               	movwf	??_printSortTimer& (0+255),c
 22099  002CEC  3A2A               	swapf	??_printSortTimer,f,c
 22100  002CEE  0E0F               	movlw	15
 22101  002CF0  162A               	andwf	??_printSortTimer,f,c
 22102  002CF2  0E0F               	movlw	15
 22103  002CF4  162A               	andwf	??_printSortTimer,f,c
 22104  002CF6  502A               	movf	??_printSortTimer,w,c
 22105  002CF8  0D0A               	mullw	10
 22106  002CFA  0E1C               	movlw	low _time
 22107  002CFC  2449               	addwf	printSortTimer@i,w,c
 22108  002CFE  6ED9               	movwf	fsr2l,c
 22109  002D00  0E01               	movlw	high _time
 22110  002D02  204A               	addwfc	printSortTimer@i+1,w,c
 22111  002D04  6EDA               	movwf	fsr2h,c
 22112  002D06  50DF               	movf	indf2,w,c
 22113  002D08  0B0F               	andlw	15
 22114  002D0A  6E2B               	movwf	(??_printSortTimer+1)& (0+255),c
 22115  002D0C  6A2C               	clrf	(??_printSortTimer+2)& (0+255),c
 22116  002D0E  50F3               	movf	prodl,w,c
 22117  002D10  262B               	addwf	??_printSortTimer+1,f,c
 22118  002D12  50F4               	movf	prodh,w,c
 22119  002D14  222C               	addwfc	??_printSortTimer+2,f,c
 22120  002D16  90D8               	bcf	status,0,c
 22121  002D18  3449               	rlcf	printSortTimer@i,w,c
 22122  002D1A  6ED9               	movwf	fsr2l,c
 22123  002D1C  344A               	rlcf	printSortTimer@i+1,w,c
 22124  002D1E  6EDA               	movwf	fsr2h,c
 22125  002D20  0E2D               	movlw	low printSortTimer@curTime
 22126  002D22  26D9               	addwf	fsr2l,f,c
 22127  002D24  0E00               	movlw	high printSortTimer@curTime
 22128  002D26  22DA               	addwfc	fsr2h,f,c
 22129  002D28  C02B  FFDE         	movff	??_printSortTimer+1,postinc2
 22130  002D2C  C02C  FFDD         	movff	??_printSortTimer+2,postdec2
 22131  002D30  4A49               	infsnz	printSortTimer@i,f,c
 22132  002D32  2A4A               	incf	printSortTimer@i+1,f,c
 22133  002D34  D7CB               	goto	i2l9462
 22134  002D36                     i2l9472:
 22135                           
 22136                           ;sort.c: 461: }
 22137                           ;sort.c: 462: unsigned int start_sec = startTime[0] + startTime[1]*60 + startTime[2]*360
      +                          0;
 22138  002D36  C110  F001         	movff	_startTime+2,i2___wmul@multiplier
 22139  002D3A  C111  F002         	movff	_startTime+3,i2___wmul@multiplier+1
 22140  002D3E  0E00               	movlw	0
 22141  002D40  6E04               	movwf	i2___wmul@multiplicand+1,c
 22142  002D42  0E3C               	movlw	60
 22143  002D44  6E03               	movwf	i2___wmul@multiplicand,c
 22144  002D46  ECBB  F029         	call	i2___wmul	;wreg free
 22145  002D4A  C001  F02A         	movff	?i2___wmul,??_printSortTimer
 22146  002D4E  C002  F02B         	movff	?i2___wmul+1,??_printSortTimer+1
 22147  002D52  C112  F001         	movff	_startTime+4,i2___wmul@multiplier
 22148  002D56  C113  F002         	movff	_startTime+5,i2___wmul@multiplier+1
 22149  002D5A  0E0E               	movlw	14
 22150  002D5C  6E04               	movwf	i2___wmul@multiplicand+1,c
 22151  002D5E  0E10               	movlw	16
 22152  002D60  6E03               	movwf	i2___wmul@multiplicand,c
 22153  002D62  ECBB  F029         	call	i2___wmul	;wreg free
 22154  002D66  5001               	movf	?i2___wmul,w,c
 22155  002D68  262A               	addwf	??_printSortTimer,f,c
 22156  002D6A  5002               	movf	?i2___wmul+1,w,c
 22157  002D6C  222B               	addwfc	??_printSortTimer+1,f,c
 22158  002D6E  0101               	movlb	1	; () banked
 22159  002D70  510E               	movf	_startTime& (0+255),w,b
 22160  002D72  242A               	addwf	??_printSortTimer,w,c
 22161  002D74  6E3B               	movwf	printSortTimer@start_sec,c
 22162  002D76  0101               	movlb	1	; () banked
 22163  002D78  510F               	movf	(_startTime+1)& (0+255),w,b
 22164  002D7A  202B               	addwfc	??_printSortTimer+1,w,c
 22165  002D7C  6E3C               	movwf	printSortTimer@start_sec+1,c
 22166                           
 22167                           ;sort.c: 463: unsigned int cur_sec = curTime[0] + curTime[1]*60 + curTime[2]*3600;
 22168  002D7E  C02F  F001         	movff	printSortTimer@curTime+2,i2___wmul@multiplier
 22169  002D82  C030  F002         	movff	printSortTimer@curTime+3,i2___wmul@multiplier+1
 22170  002D86  0E00               	movlw	0
 22171  002D88  6E04               	movwf	i2___wmul@multiplicand+1,c
 22172  002D8A  0E3C               	movlw	60
 22173  002D8C  6E03               	movwf	i2___wmul@multiplicand,c
 22174  002D8E  ECBB  F029         	call	i2___wmul	;wreg free
 22175  002D92  C001  F02A         	movff	?i2___wmul,??_printSortTimer
 22176  002D96  C002  F02B         	movff	?i2___wmul+1,??_printSortTimer+1
 22177  002D9A  C031  F001         	movff	printSortTimer@curTime+4,i2___wmul@multiplier
 22178  002D9E  C032  F002         	movff	printSortTimer@curTime+5,i2___wmul@multiplier+1
 22179  002DA2  0E0E               	movlw	14
 22180  002DA4  6E04               	movwf	i2___wmul@multiplicand+1,c
 22181  002DA6  0E10               	movlw	16
 22182  002DA8  6E03               	movwf	i2___wmul@multiplicand,c
 22183  002DAA  ECBB  F029         	call	i2___wmul	;wreg free
 22184  002DAE  5001               	movf	?i2___wmul,w,c
 22185  002DB0  262A               	addwf	??_printSortTimer,f,c
 22186  002DB2  5002               	movf	?i2___wmul+1,w,c
 22187  002DB4  222B               	addwfc	??_printSortTimer+1,f,c
 22188  002DB6  502D               	movf	printSortTimer@curTime,w,c
 22189  002DB8  242A               	addwf	??_printSortTimer,w,c
 22190  002DBA  6E3D               	movwf	printSortTimer@cur_sec,c
 22191  002DBC  502E               	movf	printSortTimer@curTime+1,w,c
 22192  002DBE  202B               	addwfc	??_printSortTimer+1,w,c
 22193  002DC0  6E3E               	movwf	printSortTimer@cur_sec+1,c
 22194                           
 22195                           ;sort.c: 464: unsigned int timeDiff = cur_sec - start_sec;
 22196  002DC2  C03B  F02A         	movff	printSortTimer@start_sec,??_printSortTimer
 22197  002DC6  C03C  F02B         	movff	printSortTimer@start_sec+1,??_printSortTimer+1
 22198  002DCA  1E2A               	comf	??_printSortTimer,f,c
 22199  002DCC  1E2B               	comf	??_printSortTimer+1,f,c
 22200  002DCE  4A2A               	infsnz	??_printSortTimer,f,c
 22201  002DD0  2A2B               	incf	??_printSortTimer+1,f,c
 22202  002DD2  503D               	movf	printSortTimer@cur_sec,w,c
 22203  002DD4  242A               	addwf	??_printSortTimer,w,c
 22204  002DD6  6E45               	movwf	printSortTimer@timeDiff,c
 22205  002DD8  503E               	movf	printSortTimer@cur_sec+1,w,c
 22206  002DDA  202B               	addwfc	??_printSortTimer+1,w,c
 22207  002DDC  6E46               	movwf	printSortTimer@timeDiff+1,c
 22208                           
 22209                           ;sort.c: 466: total_time = timeDiff;
 22210  002DDE  C045  F0FA         	movff	printSortTimer@timeDiff,_total_time
 22211  002DE2  C046  F0FB         	movff	printSortTimer@timeDiff+1,_total_time+1
 22212                           
 22213                           ;sort.c: 468: if(f_most_recent_sort_time){
 22214  002DE6  0101               	movlb	1	; () banked
 22215  002DE8  5137               	movf	_f_most_recent_sort_time& (0+255),w,b
 22216  002DEA  0101               	movlb	1	; () banked
 22217  002DEC  1138               	iorwf	(_f_most_recent_sort_time+1)& (0+255),w,b
 22218  002DEE  B4D8               	btfsc	status,2,c
 22219  002DF0  D009               	goto	i2l9484
 22220                           
 22221                           ; BSR set to: 1
 22222                           ;sort.c: 469: most_recent_sort_time = total_time;
 22223  002DF2  C0FA  F069         	movff	_total_time,_most_recent_sort_time
 22224  002DF6  C0FB  F06A         	movff	_total_time+1,_most_recent_sort_time+1
 22225                           
 22226                           ; BSR set to: 1
 22227                           ;sort.c: 470: f_most_recent_sort_time = 0;
 22228  002DFA  0E00               	movlw	0
 22229  002DFC  0101               	movlb	1	; () banked
 22230  002DFE  6F38               	movwf	(_f_most_recent_sort_time+1)& (0+255),b
 22231  002E00  0E00               	movlw	0
 22232  002E02  6F37               	movwf	_f_most_recent_sort_time& (0+255),b
 22233  002E04                     i2l9484:
 22234                           
 22235                           ; BSR set to: 1
 22236                           ;sort.c: 471: }
 22237                           ;sort.c: 473: if(total_time - most_recent_sort_time == 20){
 22238  002E04  C069  F02A         	movff	_most_recent_sort_time,??_printSortTimer
 22239  002E08  C06A  F02B         	movff	_most_recent_sort_time+1,??_printSortTimer+1
 22240  002E0C  1E2A               	comf	??_printSortTimer,f,c
 22241  002E0E  1E2B               	comf	??_printSortTimer+1,f,c
 22242  002E10  4A2A               	infsnz	??_printSortTimer,f,c
 22243  002E12  2A2B               	incf	??_printSortTimer+1,f,c
 22244  002E14  0100               	movlb	0	; () banked
 22245  002E16  51FA               	movf	_total_time& (0+255),w,b
 22246  002E18  262A               	addwf	??_printSortTimer,f,c
 22247  002E1A  0100               	movlb	0	; () banked
 22248  002E1C  51FB               	movf	(_total_time+1)& (0+255),w,b
 22249  002E1E  222B               	addwfc	??_printSortTimer+1,f,c
 22250  002E20  0E14               	movlw	20
 22251  002E22  182A               	xorwf	??_printSortTimer,w,c
 22252  002E24  102B               	iorwf	??_printSortTimer+1,w,c
 22253  002E26  A4D8               	btfss	status,2,c
 22254  002E28  D033               	goto	i2l9504
 22255                           
 22256                           ; BSR set to: 0
 22257                           ;sort.c: 474: LATBbits.LATB2 = 0;
 22258  002E2A  948A               	bcf	3978,2,c	;volatile
 22259                           
 22260                           ; BSR set to: 0
 22261                           ;sort.c: 475: _delay((unsigned long)((2000)*(32000000/4000.0)));
 22262  002E2C  0E52               	movlw	82
 22263  002E2E  6E2B               	movwf	(??_printSortTimer+1)& (0+255),c
 22264  002E30  0E2B               	movlw	43
 22265  002E32  6E2A               	movwf	??_printSortTimer& (0+255),c
 22266  002E34  0E00               	movlw	0
 22267  002E36                     i2u1062_47:
 22268  002E36  2EE8               	decfsz	wreg,f,c
 22269  002E38  D7FE               	bra	i2u1062_47
 22270  002E3A  2E2A               	decfsz	??_printSortTimer& (0+255),f,c
 22271  002E3C  D7FC               	bra	i2u1062_47
 22272  002E3E  2E2B               	decfsz	(??_printSortTimer+1)& (0+255),f,c
 22273  002E40  D7FA               	bra	i2u1062_47
 22274  002E42  D000               	nop2	
 22275                           
 22276                           ;sort.c: 476: for(int i=0; i<46; i++){
 22277  002E44  0E00               	movlw	0
 22278  002E46  6E48               	movwf	printSortTimer@i_1194+1,c
 22279  002E48  0E00               	movlw	0
 22280  002E4A  6E47               	movwf	printSortTimer@i_1194,c
 22281  002E4C  BE48               	btfsc	printSortTimer@i_1194+1,7,c
 22282  002E4E  D006               	goto	i2l9496
 22283  002E50  5048               	movf	printSortTimer@i_1194+1,w,c
 22284  002E52  E11D               	bnz	i2l869
 22285  002E54  0E2E               	movlw	46
 22286  002E56  5C47               	subwf	printSortTimer@i_1194,w,c
 22287  002E58  B0D8               	btfsc	status,0,c
 22288  002E5A  D019               	goto	i2l869
 22289  002E5C                     i2l9496:
 22290                           
 22291                           ;sort.c: 477: LATBbits.LATB2 = !LATBbits.LATB2;
 22292  002E5C  B48A               	btfsc	3978,2,c	;volatile
 22293  002E5E  D003               	goto	i2u876_40
 22294  002E60  6A2A               	clrf	??_printSortTimer& (0+255),c
 22295  002E62  2A2A               	incf	??_printSortTimer& (0+255),f,c
 22296  002E64  D001               	goto	i2u877_48
 22297  002E66                     i2u876_40:
 22298  002E66  6A2A               	clrf	??_printSortTimer& (0+255),c
 22299  002E68                     i2u877_48:
 22300  002E68  462A               	rlncf	??_printSortTimer,f,c
 22301  002E6A  462A               	rlncf	??_printSortTimer,f,c
 22302  002E6C  508A               	movf	3978,w,c	;volatile
 22303  002E6E  182A               	xorwf	??_printSortTimer,w,c
 22304  002E70  0BFB               	andlw	-5
 22305  002E72  182A               	xorwf	??_printSortTimer,w,c
 22306  002E74  6E8A               	movwf	3978,c	;volatile
 22307                           
 22308                           ;sort.c: 478: delay_ms(45-i);
 22309  002E76  5047               	movf	printSortTimer@i_1194,w,c
 22310  002E78  0800               	sublw	0
 22311  002E7A  0F2D               	addlw	45
 22312  002E7C  EC32  F02A         	call	i2_delay_ms
 22313  002E80  4A47               	infsnz	printSortTimer@i_1194,f,c
 22314  002E82  2A48               	incf	printSortTimer@i_1194+1,f,c
 22315  002E84  BE48               	btfsc	printSortTimer@i_1194+1,7,c
 22316  002E86  D7EA               	goto	i2l9496
 22317  002E88  5048               	movf	printSortTimer@i_1194+1,w,c
 22318  002E8A  E101               	bnz	i2u878_40
 22319  002E8C  D7E3               	goto	L16
 22320  002E8E                     i2u878_40:
 22321  002E8E                     i2l869:
 22322                           
 22323                           ;sort.c: 479: }
 22324                           ;sort.c: 480: LATBbits.LATB2 = 1;
 22325  002E8E  848A               	bsf	3978,2,c	;volatile
 22326  002E90                     i2l9504:
 22327                           
 22328                           ;sort.c: 481: }
 22329                           ;sort.c: 483: if((total_time - most_recent_sort_time == 42) | (total_time == 179)){
 22330  002E90  C069  F02A         	movff	_most_recent_sort_time,??_printSortTimer
 22331  002E94  C06A  F02B         	movff	_most_recent_sort_time+1,??_printSortTimer+1
 22332  002E98  1E2A               	comf	??_printSortTimer,f,c
 22333  002E9A  1E2B               	comf	??_printSortTimer+1,f,c
 22334  002E9C  4A2A               	infsnz	??_printSortTimer,f,c
 22335  002E9E  2A2B               	incf	??_printSortTimer+1,f,c
 22336  002EA0  0100               	movlb	0	; () banked
 22337  002EA2  51FA               	movf	_total_time& (0+255),w,b
 22338  002EA4  262A               	addwf	??_printSortTimer,f,c
 22339  002EA6  0100               	movlb	0	; () banked
 22340  002EA8  51FB               	movf	(_total_time+1)& (0+255),w,b
 22341  002EAA  222B               	addwfc	??_printSortTimer+1,f,c
 22342  002EAC  0E2A               	movlw	42
 22343  002EAE  182A               	xorwf	??_printSortTimer,w,c
 22344  002EB0  102B               	iorwf	??_printSortTimer+1,w,c
 22345  002EB2  B4D8               	btfsc	status,2,c
 22346  002EB4  D007               	goto	i2l9508
 22347                           
 22348                           ; BSR set to: 0
 22349  002EB6  0EB3               	movlw	179
 22350  002EB8  0100               	movlb	0	; () banked
 22351  002EBA  19FA               	xorwf	_total_time& (0+255),w,b
 22352  002EBC  0100               	movlb	0	; () banked
 22353  002EBE  11FB               	iorwf	(_total_time+1)& (0+255),w,b
 22354  002EC0  A4D8               	btfss	status,2,c
 22355  002EC2  D003               	goto	i2l9510
 22356  002EC4                     i2l9508:
 22357                           
 22358                           ; BSR set to: 0
 22359                           ;sort.c: 484: machine_state = DoneSorting_state;
 22360  002EC4  0E02               	movlw	2
 22361  002EC6  0100               	movlb	0	; () banked
 22362  002EC8  6FFC               	movwf	_machine_state& (0+255),b
 22363  002ECA                     i2l9510:
 22364                           
 22365                           ; BSR set to: 0
 22366                           ;sort.c: 486: }
 22367                           ;sort.c: 488: int min = (timeDiff % 3600) / 60;
 22368  002ECA  0E0E               	movlw	14
 22369  002ECC  6E04               	movwf	i2___lwmod@divisor+1,c
 22370  002ECE  0E10               	movlw	16
 22371  002ED0  6E03               	movwf	i2___lwmod@divisor,c
 22372  002ED2  C045  F001         	movff	printSortTimer@timeDiff,i2___lwmod@dividend
 22373  002ED6  C046  F002         	movff	printSortTimer@timeDiff+1,i2___lwmod@dividend+1
 22374  002EDA  EC56  F027         	call	i2___lwmod	;wreg free
 22375  002EDE  C001  F006         	movff	?i2___lwmod,i2___lwdiv@dividend
 22376  002EE2  C002  F007         	movff	?i2___lwmod+1,i2___lwdiv@dividend+1
 22377  002EE6  0E00               	movlw	0
 22378  002EE8  6E09               	movwf	i2___lwdiv@divisor+1,c
 22379  002EEA  0E3C               	movlw	60
 22380  002EEC  6E08               	movwf	i2___lwdiv@divisor,c
 22381  002EEE  EC97  F026         	call	i2___lwdiv	;wreg free
 22382  002EF2  C006  F03F         	movff	?i2___lwdiv,printSortTimer@min
 22383  002EF6  C007  F040         	movff	?i2___lwdiv+1,printSortTimer@min+1
 22384                           
 22385                           ;sort.c: 489: int sec = (timeDiff % 3600) % 60;
 22386  002EFA  0E0E               	movlw	14
 22387  002EFC  6E04               	movwf	i2___lwmod@divisor+1,c
 22388  002EFE  0E10               	movlw	16
 22389  002F00  6E03               	movwf	i2___lwmod@divisor,c
 22390  002F02  C045  F001         	movff	printSortTimer@timeDiff,i2___lwmod@dividend
 22391  002F06  C046  F002         	movff	printSortTimer@timeDiff+1,i2___lwmod@dividend+1
 22392  002F0A  EC56  F027         	call	i2___lwmod	;wreg free
 22393  002F0E  C001  F043         	movff	?i2___lwmod,_printSortTimer$2544
 22394  002F12  C002  F044         	movff	?i2___lwmod+1,_printSortTimer$2544+1
 22395                           
 22396                           ;sort.c: 489: int sec = (timeDiff % 3600) % 60;
 22397  002F16  C043  F001         	movff	_printSortTimer$2544,i2___lwmod@dividend
 22398  002F1A  C044  F002         	movff	_printSortTimer$2544+1,i2___lwmod@dividend+1
 22399  002F1E  0E00               	movlw	0
 22400  002F20  6E04               	movwf	i2___lwmod@divisor+1,c
 22401  002F22  0E3C               	movlw	60
 22402  002F24  6E03               	movwf	i2___lwmod@divisor,c
 22403  002F26  EC56  F027         	call	i2___lwmod	;wreg free
 22404  002F2A  C001  F041         	movff	?i2___lwmod,printSortTimer@sec
 22405  002F2E  C002  F042         	movff	?i2___lwmod+1,printSortTimer@sec+1
 22406                           
 22407                           ;sort.c: 491: lcdInst(0b10000000);;
 22408  002F32  0E80               	movlw	128
 22409  002F34  EC80  F02A         	call	i2_lcdInst
 22410                           
 22411                           ;sort.c: 492: printf("SORTING...");
 22412  002F38  0E7B               	movlw	low STR_64
 22413  002F3A  6E0D               	movwf	i2printf@f,c
 22414  002F3C  0EFF               	movlw	high STR_64
 22415  002F3E  6E0E               	movwf	i2printf@f+1,c
 22416  002F40  ECFF  F00E         	call	i2_printf	;wreg free
 22417                           
 22418                           ;sort.c: 493: lcdInst(0b11000000);;
 22419  002F44  0EC0               	movlw	192
 22420  002F46  EC80  F02A         	call	i2_lcdInst
 22421                           
 22422                           ;sort.c: 494: printf("TIME %d:%02d", min, sec);
 22423  002F4A  0E4C               	movlw	low STR_65
 22424  002F4C  6E0D               	movwf	i2printf@f,c
 22425  002F4E  0EFF               	movlw	high STR_65
 22426  002F50  6E0E               	movwf	i2printf@f+1,c
 22427  002F52  C03F  F00F         	movff	printSortTimer@min,?i2_printf+2
 22428  002F56  C040  F010         	movff	printSortTimer@min+1,?i2_printf+3
 22429  002F5A  C041  F011         	movff	printSortTimer@sec,?i2_printf+4
 22430  002F5E  C042  F012         	movff	printSortTimer@sec+1,?i2_printf+5
 22431  002F62  ECFF  F00E         	call	i2_printf	;wreg free
 22432  002F66  0012               	return		;funcret
 22433  002F68                     __end_of_printSortTimer:
 22434                           	opt stack 0
 22435                           pclatu	equ	0xFFB
 22436                           pclath	equ	0xFFA
 22437                           tblptru	equ	0xFF8
 22438                           tblptrh	equ	0xFF7
 22439                           tblptrl	equ	0xFF6
 22440                           tablat	equ	0xFF5
 22441                           prodh	equ	0xFF4
 22442                           prodl	equ	0xFF3
 22443                           intcon	equ	0xFF2
 22444                           intcon2	equ	0xFF1
 22445                           intcon3	equ	0xFF0
 22446                           indf0	equ	0xFEF
 22447                           postinc0	equ	0xFEE
 22448                           fsr0h	equ	0xFEA
 22449                           fsr0l	equ	0xFE9
 22450                           wreg	equ	0xFE8
 22451                           postdec1	equ	0xFE5
 22452                           fsr1h	equ	0xFE2
 22453                           fsr1l	equ	0xFE1
 22454                           indf2	equ	0xFDF
 22455                           postinc2	equ	0xFDE
 22456                           postdec2	equ	0xFDD
 22457                           fsr2h	equ	0xFDA
 22458                           fsr2l	equ	0xFD9
 22459                           status	equ	0xFD8
 22460                           
 22461 ;; *************** function i2_printf *****************
 22462 ;; Defined at:
 22463 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
 22464 ;; Parameters:    Size  Location     Type
 22465 ;;  f               2   12[COMRAM] PTR const unsigned char 
 22466 ;;		 -> STR_125(17), STR_124(17), STR_123(18), STR_122(18), 
 22467 ;;		 -> STR_121(18), STR_120(18), STR_119(18), STR_118(18), 
 22468 ;;		 -> STR_117(17), STR_116(17), STR_115(17), STR_114(17), 
 22469 ;;		 -> STR_113(17), STR_112(17), STR_111(18), STR_110(17), 
 22470 ;;		 -> STR_109(15), STR_108(15), STR_107(15), STR_106(17), 
 22471 ;;		 -> STR_105(17), STR_104(17), STR_103(16), STR_102(17), 
 22472 ;;		 -> STR_101(17), STR_100(17), STR_99(17), STR_98(17), 
 22473 ;;		 -> STR_97(17), STR_96(15), STR_95(11), STR_94(17), 
 22474 ;;		 -> STR_93(11), STR_92(17), STR_91(14), STR_90(15), 
 22475 ;;		 -> STR_89(14), STR_88(10), STR_87(9), STR_86(9), 
 22476 ;;		 -> STR_85(10), STR_84(10), STR_83(16), STR_82(15), 
 22477 ;;		 -> STR_81(3), STR_80(15), STR_79(13), STR_78(14), 
 22478 ;;		 -> STR_77(8), STR_76(14), STR_75(15), STR_74(12), 
 22479 ;;		 -> STR_73(14), STR_72(17), STR_71(14), STR_70(15), 
 22480 ;;		 -> STR_69(17), STR_68(17), STR_67(7), STR_66(21), 
 22481 ;;		 -> STR_65(13), STR_64(11), STR_63(24), STR_50(17), 
 22482 ;;		 -> STR_49(17), STR_48(17), STR_47(17), STR_46(17), 
 22483 ;;		 -> STR_45(17), STR_44(17), STR_43(17), STR_42(17), 
 22484 ;;		 -> STR_41(17), STR_40(17), STR_39(17), STR_38(17), 
 22485 ;;		 -> STR_37(17), STR_36(17), STR_35(17), STR_34(17), 
 22486 ;;		 -> STR_33(17), STR_32(17), STR_31(17), STR_30(17), 
 22487 ;;		 -> STR_29(3), STR_28(17), STR_27(17), STR_26(17), 
 22488 ;;		 -> STR_25(17), STR_24(17), STR_23(14), STR_22(10), 
 22489 ;;		 -> STR_21(24), STR_7(7), STR_6(17), STR_5(18), 
 22490 ;;		 -> STR_4(16), STR_3(18), STR_2(14), STR_1(18), 
 22491 ;; Auto vars:     Size  Location     Type
 22492 ;;  printf          4    0        struct .
 22493 ;;  printf          2   39[COMRAM] int 
 22494 ;;  printf          2   35[COMRAM] unsigned int 
 22495 ;;  printf          2   33[COMRAM] unsigned int 
 22496 ;;  printf          2   31[COMRAM] PTR void [1]
 22497 ;;		 -> ?i2_printf(2), ?_printf(2), 
 22498 ;;  printf          2   29[COMRAM] PTR const unsigned char 
 22499 ;;		 -> STR_126(7), count_total(2), printRTC@month(4), UI@month(4), 
 22500 ;;  printf          1   38[COMRAM] char 
 22501 ;;  printf          1   37[COMRAM] unsigned char 
 22502 ;;  printf          1   28[COMRAM] char 
 22503 ;; Return value:  Size  Location     Type
 22504 ;;                  2   12[COMRAM] int 
 22505 ;; Registers used:
 22506 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22507 ;; Tracked objects:
 22508 ;;		On entry : 0/0
 22509 ;;		On exit  : 0/0
 22510 ;;		Unchanged: 0/0
 22511 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22512 ;;      Params:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22513 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22514 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22515 ;;      Totals:        29       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22516 ;;Total ram usage:       29 bytes
 22517 ;; Hardware stack levels used:    1
 22518 ;; Hardware stack levels required when called:    2
 22519 ;; This function calls:
 22520 ;;		i2___lwdiv
 22521 ;;		i2___lwmod
 22522 ;;		i2___wmul
 22523 ;;		i2_isdigit
 22524 ;;		i2_putch
 22525 ;; This function is called by:
 22526 ;;		_change_state_to_menu_11
 22527 ;;		_change_state_to_menu_23
 22528 ;;		_change_state_to_logs_11
 22529 ;;		_change_state_to_logs_12
 22530 ;;		_change_state_to_logs_22
 22531 ;;		_change_state_to_logs_23
 22532 ;;		_change_state_to_logs_33
 22533 ;;		_change_state_to_logs_34
 22534 ;;		_printSortTimer
 22535 ;;		i2_change_state_to_menu_start
 22536 ;;		i2_change_state_to_menu_12
 22537 ;;		i2_change_state_to_menu_22
 22538 ;;		i2_printRTC
 22539 ;; This function uses a non-reentrant model
 22540 ;;
 22541                           
 22542                           	psect	text82
 22543  001DFE                     __ptext82:
 22544                           	opt stack 0
 22545  001DFE                     i2_printf:
 22546                           	opt stack 20
 22547                           
 22548                           ;doprnt.c: 466: va_list ap;
 22549                           ;doprnt.c: 499: signed char c;
 22550                           ;doprnt.c: 501: int width;
 22551                           ;doprnt.c: 506: signed char prec;
 22552                           ;doprnt.c: 508: unsigned char flag;
 22553                           ;doprnt.c: 523: union {
 22554                           ;doprnt.c: 524: unsigned long vd;
 22555                           ;doprnt.c: 525: double integ;
 22556                           ;doprnt.c: 526: } tmpval;
 22557                           ;doprnt.c: 528: unsigned int val;
 22558                           ;doprnt.c: 529: unsigned len;
 22559                           ;doprnt.c: 530: const char * cp;
 22560                           ;doprnt.c: 533: *ap = __va_start();
 22561                           
 22562                           ;incstack = 0
 22563  001DFE  0E0F               	movlw	low (?i2_printf+2)
 22564  001E00  6E20               	movwf	i2printf@ap,c
 22565  001E02  0E00               	movlw	high (?i2_printf+2)
 22566  001E04  6E21               	movwf	i2printf@ap+1,c
 22567                           
 22568                           ;doprnt.c: 536: while(c = *f++) {
 22569  001E06  D1A4               	goto	i2l6792
 22570  001E08                     i2l6662:
 22571                           
 22572                           ;doprnt.c: 538: if(c != '%')
 22573  001E08  0E25               	movlw	37
 22574  001E0A  1827               	xorwf	i2printf@c,w,c
 22575  001E0C  B4D8               	btfsc	status,2,c
 22576  001E0E  D004               	goto	i2l6666
 22577                           
 22578                           ;doprnt.c: 540: {
 22579                           ;doprnt.c: 541: (putch(c) );
 22580  001E10  5027               	movf	i2printf@c,w,c
 22581  001E12  EC7A  F02A         	call	i2_putch
 22582                           
 22583                           ;doprnt.c: 542: continue;
 22584  001E16  D19C               	goto	i2l6792
 22585  001E18                     i2l6666:
 22586                           
 22587                           ;doprnt.c: 543: }
 22588                           ;doprnt.c: 546: width = 0;
 22589  001E18  0E00               	movlw	0
 22590  001E1A  6E29               	movwf	i2printf@width+1,c
 22591  001E1C  0E00               	movlw	0
 22592  001E1E  6E28               	movwf	i2printf@width,c
 22593                           
 22594                           ;doprnt.c: 548: flag = 0;
 22595  001E20  0E00               	movlw	0
 22596  001E22  6E26               	movwf	i2printf@flag,c
 22597                           
 22598                           ;doprnt.c: 551: switch(*f) {
 22599                           
 22600                           ;doprnt.c: 550: for(;;) {
 22601  001E24  D003               	goto	i2l6672
 22602  001E26                     i2l6668:
 22603                           
 22604                           ;doprnt.c: 580: flag |= 0x04;
 22605  001E26  8426               	bsf	i2printf@flag,2,c
 22606                           
 22607                           ;doprnt.c: 581: f++;
 22608  001E28  4A0D               	infsnz	i2printf@f,f,c
 22609  001E2A  2A0E               	incf	i2printf@f+1,f,c
 22610  001E2C                     i2l6672:
 22611  001E2C  C00D  FFF6         	movff	i2printf@f,tblptrl
 22612  001E30  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 22613  001E34                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 22614  001E34  6AF8               	clrf	tblptru,c
 22615  001E36                     	endif
 22616  001E36                     	if	0	;tblptru may be non-zero
 22617  001E36                     	endif
 22618  001E36  0008               	tblrd		*
 22619  001E38  50F5               	movf	tablat,w,c
 22620                           
 22621                           ; Switch size 1, requested type "space"
 22622                           ; Number of cases is 1, Range of values is 48 to 48
 22623                           ; switch strategies available:
 22624                           ; Name         Instructions Cycles
 22625                           ; simple_byte            4     3 (average)
 22626                           ;	Chosen strategy is simple_byte
 22627  001E3A  0A30               	xorlw	48	; case 48
 22628  001E3C  B4D8               	btfsc	status,2,c
 22629  001E3E  D7F3               	goto	i2l6668
 22630                           
 22631                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 22632                           
 22633                           ;doprnt.c: 586: }
 22634                           
 22635                           ;doprnt.c: 585: break;
 22636  001E40  C00D  FFF6         	movff	i2printf@f,tblptrl
 22637  001E44  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 22638  001E48                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 22639  001E48  6AF8               	clrf	tblptru,c
 22640  001E4A                     	endif
 22641  001E4A                     	if	0	;tblptru may be non-zero
 22642  001E4A                     	endif
 22643  001E4A  0008               	tblrd		*
 22644  001E4C  50F5               	movf	tablat,w,c
 22645  001E4E  EC15  F02A         	call	i2_isdigit
 22646  001E52  A0D8               	btfss	status,0,c
 22647  001E54  D0A6               	goto	i2l6720
 22648                           
 22649                           ;doprnt.c: 598: width = 0;
 22650  001E56  0E00               	movlw	0
 22651  001E58  6E29               	movwf	i2printf@width+1,c
 22652  001E5A  0E00               	movlw	0
 22653  001E5C  6E28               	movwf	i2printf@width,c
 22654  001E5E                     i2l6678:
 22655                           
 22656                           ;doprnt.c: 600: width *= 10;
 22657  001E5E  C028  F001         	movff	i2printf@width,i2___wmul@multiplier
 22658  001E62  C029  F002         	movff	i2printf@width+1,i2___wmul@multiplier+1
 22659  001E66  0E00               	movlw	0
 22660  001E68  6E04               	movwf	i2___wmul@multiplicand+1,c
 22661  001E6A  0E0A               	movlw	10
 22662  001E6C  6E03               	movwf	i2___wmul@multiplicand,c
 22663  001E6E  ECBB  F029         	call	i2___wmul	;wreg free
 22664  001E72  C001  F028         	movff	?i2___wmul,i2printf@width
 22665  001E76  C002  F029         	movff	?i2___wmul+1,i2printf@width+1
 22666                           
 22667                           ;doprnt.c: 601: width += *f++ - '0';
 22668  001E7A  0ED0               	movlw	208
 22669  001E7C  6E19               	movwf	??i2_printf& (0+255),c
 22670  001E7E  0EFF               	movlw	255
 22671  001E80  6E1A               	movwf	(??i2_printf+1)& (0+255),c
 22672  001E82  C00D  FFF6         	movff	i2printf@f,tblptrl
 22673  001E86  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 22674  001E8A                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 22675  001E8A  6AF8               	clrf	tblptru,c
 22676  001E8C                     	endif
 22677  001E8C                     	if	0	;tblptru may be non-zero
 22678  001E8C                     	endif
 22679  001E8C  0008               	tblrd		*
 22680  001E8E  50F5               	movf	tablat,w,c
 22681  001E90  6E1B               	movwf	(??i2_printf+2)& (0+255),c
 22682  001E92  6A1C               	clrf	(??i2_printf+3)& (0+255),c
 22683  001E94  5019               	movf	??i2_printf,w,c
 22684  001E96  261B               	addwf	??i2_printf+2,f,c
 22685  001E98  501A               	movf	??i2_printf+1,w,c
 22686  001E9A  221C               	addwfc	??i2_printf+3,f,c
 22687  001E9C  501B               	movf	??i2_printf+2,w,c
 22688  001E9E  2628               	addwf	i2printf@width,f,c
 22689  001EA0  501C               	movf	??i2_printf+3,w,c
 22690  001EA2  2229               	addwfc	i2printf@width+1,f,c
 22691  001EA4  4A0D               	infsnz	i2printf@f,f,c
 22692  001EA6  2A0E               	incf	i2printf@f+1,f,c
 22693                           
 22694                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 22695  001EA8  C00D  FFF6         	movff	i2printf@f,tblptrl
 22696  001EAC  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 22697  001EB0                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 22698  001EB0  6AF8               	clrf	tblptru,c
 22699  001EB2                     	endif
 22700  001EB2                     	if	0	;tblptru may be non-zero
 22701  001EB2                     	endif
 22702  001EB2  0008               	tblrd		*
 22703  001EB4  50F5               	movf	tablat,w,c
 22704  001EB6  EC15  F02A         	call	i2_isdigit
 22705  001EBA  A0D8               	btfss	status,0,c
 22706  001EBC  D072               	goto	i2l6720
 22707  001EBE  D7CF               	goto	i2l6678
 22708  001EC0                     i2l6686:
 22709                           
 22710                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
 22711  001EC0  C020  FFD9         	movff	i2printf@ap,fsr2l
 22712  001EC4  C021  FFDA         	movff	i2printf@ap+1,fsr2h
 22713  001EC8  CFDE F01E          	movff	postinc2,i2printf@cp
 22714  001ECC  CFDD F01F          	movff	postdec2,i2printf@cp+1
 22715  001ED0  0E02               	movlw	2
 22716  001ED2  2620               	addwf	i2printf@ap,f,c
 22717  001ED4  0E00               	movlw	0
 22718  001ED6  2221               	addwfc	i2printf@ap+1,f,c
 22719                           
 22720                           ;doprnt.c: 740: if(!cp)
 22721  001ED8  501E               	movf	i2printf@cp,w,c
 22722  001EDA  101F               	iorwf	i2printf@cp+1,w,c
 22723  001EDC  A4D8               	btfss	status,2,c
 22724  001EDE  D004               	goto	i2l6694
 22725                           
 22726                           ;doprnt.c: 741: cp = "(null)";
 22727  001EE0  0EB5               	movlw	low STR_126
 22728  001EE2  6E1E               	movwf	i2printf@cp,c
 22729  001EE4  0EFF               	movlw	high STR_126
 22730  001EE6  6E1F               	movwf	i2printf@cp+1,c
 22731  001EE8                     i2l6694:
 22732                           
 22733                           ;doprnt.c: 745: len = 0;
 22734  001EE8  0E00               	movlw	0
 22735  001EEA  6E23               	movwf	i2printf@len+1,c
 22736  001EEC  0E00               	movlw	0
 22737  001EEE  6E22               	movwf	i2printf@len,c
 22738                           
 22739                           ;doprnt.c: 746: while(cp[len])
 22740  001EF0  D002               	goto	i2l6698
 22741  001EF2                     i2l6696:
 22742                           
 22743                           ;doprnt.c: 747: len++;
 22744  001EF2  4A22               	infsnz	i2printf@len,f,c
 22745  001EF4  2A23               	incf	i2printf@len+1,f,c
 22746  001EF6                     i2l6698:
 22747  001EF6  5022               	movf	i2printf@len,w,c
 22748  001EF8  241E               	addwf	i2printf@cp,w,c
 22749  001EFA  6E19               	movwf	??i2_printf& (0+255),c
 22750  001EFC  5023               	movf	i2printf@len+1,w,c
 22751  001EFE  201F               	addwfc	i2printf@cp+1,w,c
 22752  001F00  6E1A               	movwf	(??i2_printf+1)& (0+255),c
 22753  001F02  C019  FFF6         	movff	??i2_printf,tblptrl
 22754  001F06  C01A  FFF7         	movff	??i2_printf+1,tblptrh
 22755  001F0A  0E00               	movlw	low (__mediumconst shr (0+16))
 22756  001F0C  6EF8               	movwf	tblptru,c
 22757  001F0E  0E0F               	movlw	(high __ramtop+-1)
 22758  001F10  64F7               	cpfsgt	tblptrh,c
 22759  001F12  D003               	bra	i2u523_47
 22760  001F14  0008               	tblrd		*
 22761  001F16  50F5               	movf	tablat,w,c
 22762  001F18  D005               	bra	i2u523_40
 22763  001F1A                     i2u523_47:
 22764  001F1A  CFF6 FFE9          	movff	tblptrl,fsr0l
 22765  001F1E  CFF7 FFEA          	movff	tblptrh,fsr0h
 22766  001F22  50EF               	movf	indf0,w,c
 22767  001F24                     i2u523_40:
 22768  001F24  0900               	iorlw	0
 22769  001F26  A4D8               	btfss	status,2,c
 22770  001F28  D7E4               	goto	i2l6696
 22771                           
 22772                           ;doprnt.c: 757: if(width > len)
 22773  001F2A  5028               	movf	i2printf@width,w,c
 22774  001F2C  5C22               	subwf	i2printf@len,w,c
 22775  001F2E  5029               	movf	i2printf@width+1,w,c
 22776  001F30  5823               	subwfb	i2printf@len+1,w,c
 22777  001F32  B0D8               	btfsc	status,0,c
 22778  001F34  D005               	goto	i2l6704
 22779                           
 22780                           ;doprnt.c: 758: width -= len;
 22781  001F36  5022               	movf	i2printf@len,w,c
 22782  001F38  5E28               	subwf	i2printf@width,f,c
 22783  001F3A  5023               	movf	i2printf@len+1,w,c
 22784  001F3C  5A29               	subwfb	i2printf@width+1,f,c
 22785  001F3E  D008               	goto	i2l6708
 22786  001F40                     i2l6704:
 22787                           
 22788                           ;doprnt.c: 759: else
 22789                           ;doprnt.c: 760: width = 0;
 22790  001F40  0E00               	movlw	0
 22791  001F42  6E29               	movwf	i2printf@width+1,c
 22792  001F44  0E00               	movlw	0
 22793  001F46  6E28               	movwf	i2printf@width,c
 22794                           
 22795                           ;doprnt.c: 764: while(width--)
 22796  001F48  D003               	goto	i2l6708
 22797  001F4A                     i2l6706:
 22798                           
 22799                           ;doprnt.c: 765: (putch(' ') );
 22800  001F4A  0E20               	movlw	32
 22801  001F4C  EC7A  F02A         	call	i2_putch
 22802  001F50                     i2l6708:
 22803  001F50  0628               	decf	i2printf@width,f,c
 22804  001F52  A0D8               	btfss	status,0,c
 22805  001F54  0629               	decf	i2printf@width+1,f,c
 22806  001F56  2828               	incf	i2printf@width,w,c
 22807  001F58  E1F8               	bnz	i2l6706
 22808  001F5A  2829               	incf	i2printf@width+1,w,c
 22809  001F5C  B4D8               	btfsc	status,2,c
 22810  001F5E  D016               	goto	i2l6714
 22811  001F60  D7F4               	goto	i2l6706
 22812  001F62                     i2l6710:
 22813                           
 22814                           ;doprnt.c: 768: (putch(*cp++) );
 22815  001F62  C01E  FFF6         	movff	i2printf@cp,tblptrl
 22816  001F66  C01F  FFF7         	movff	i2printf@cp+1,tblptrh
 22817  001F6A  0E00               	movlw	low (__mediumconst shr (0+16))
 22818  001F6C  6EF8               	movwf	tblptru,c
 22819  001F6E  0E0F               	movlw	(high __ramtop+-1)
 22820  001F70  64F7               	cpfsgt	tblptrh,c
 22821  001F72  D003               	bra	i2u527_47
 22822  001F74  0008               	tblrd		*
 22823  001F76  50F5               	movf	tablat,w,c
 22824  001F78  D005               	bra	i2u527_40
 22825  001F7A                     i2u527_47:
 22826  001F7A  CFF6 FFE9          	movff	tblptrl,fsr0l
 22827  001F7E  CFF7 FFEA          	movff	tblptrh,fsr0h
 22828  001F82  50EF               	movf	indf0,w,c
 22829  001F84                     i2u527_40:
 22830  001F84  EC7A  F02A         	call	i2_putch
 22831  001F88  4A1E               	infsnz	i2printf@cp,f,c
 22832  001F8A  2A1F               	incf	i2printf@cp+1,f,c
 22833  001F8C                     i2l6714:
 22834  001F8C  0622               	decf	i2printf@len,f,c
 22835  001F8E  A0D8               	btfss	status,0,c
 22836  001F90  0623               	decf	i2printf@len+1,f,c
 22837  001F92  2822               	incf	i2printf@len,w,c
 22838  001F94  E1E6               	bnz	i2l6710
 22839  001F96  2823               	incf	i2printf@len+1,w,c
 22840  001F98  B4D8               	btfsc	status,2,c
 22841  001F9A  D0DA               	goto	i2l6792
 22842  001F9C  D7E2               	goto	i2l6710
 22843  001F9E                     i2l6716:
 22844                           
 22845                           ;doprnt.c: 818: flag |= 0x40;
 22846  001F9E  8C26               	bsf	i2printf@flag,6,c
 22847                           
 22848                           ;doprnt.c: 822: }
 22849                           
 22850                           ;doprnt.c: 819: break;
 22851  001FA0  D01B               	goto	i2l1470
 22852  001FA2                     i2l6720:
 22853  001FA2  C00D  FFF6         	movff	i2printf@f,tblptrl
 22854  001FA6  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 22855  001FAA  4A0D               	infsnz	i2printf@f,f,c
 22856  001FAC  2A0E               	incf	i2printf@f+1,f,c
 22857  001FAE                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 22858  001FAE  6AF8               	clrf	tblptru,c
 22859  001FB0                     	endif
 22860  001FB0                     	if	0	;tblptru may be non-zero
 22861  001FB0                     	endif
 22862  001FB0  0008               	tblrd		*
 22863  001FB2  CFF5 F027          	movff	tablat,i2printf@c
 22864  001FB6  5027               	movf	i2printf@c,w,c
 22865                           
 22866                           ; Switch size 1, requested type "space"
 22867                           ; Number of cases is 5, Range of values is 0 to 117
 22868                           ; switch strategies available:
 22869                           ; Name         Instructions Cycles
 22870                           ; simple_byte           16     9 (average)
 22871                           ;	Chosen strategy is simple_byte
 22872  001FB8  0A00               	xorlw	0	; case 0
 22873  001FBA  B4D8               	btfsc	status,2,c
 22874  001FBC  0012               	return	
 22875  001FBE  0A64               	xorlw	100	; case 100
 22876  001FC0  B4D8               	btfsc	status,2,c
 22877  001FC2  D00A               	goto	i2l1470
 22878  001FC4  0A0D               	xorlw	13	; case 105
 22879  001FC6  B4D8               	btfsc	status,2,c
 22880  001FC8  D007               	goto	i2l1470
 22881  001FCA  0A1A               	xorlw	26	; case 115
 22882  001FCC  B4D8               	btfsc	status,2,c
 22883  001FCE  D778               	goto	i2l6686
 22884  001FD0  0A06               	xorlw	6	; case 117
 22885  001FD2  B4D8               	btfsc	status,2,c
 22886  001FD4  D7E4               	goto	i2l6716
 22887  001FD6  D0BC               	goto	i2l6792
 22888  001FD8                     i2l1470:
 22889                           
 22890                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
 22891  001FD8  BC26               	btfsc	i2printf@flag,6,c
 22892  001FDA  D015               	goto	i2l6732
 22893                           
 22894                           ;doprnt.c: 1253: {
 22895                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 22896  001FDC  C020  FFD9         	movff	i2printf@ap,fsr2l
 22897  001FE0  C021  FFDA         	movff	i2printf@ap+1,fsr2h
 22898  001FE4  CFDE F024          	movff	postinc2,i2printf@val
 22899  001FE8  CFDD F025          	movff	postdec2,i2printf@val+1
 22900  001FEC  0E02               	movlw	2
 22901  001FEE  2620               	addwf	i2printf@ap,f,c
 22902  001FF0  0E00               	movlw	0
 22903  001FF2  2221               	addwfc	i2printf@ap+1,f,c
 22904                           
 22905                           ;doprnt.c: 1261: if((int)val < 0) {
 22906  001FF4  AE25               	btfss	i2printf@val+1,7,c
 22907  001FF6  D013               	goto	i2l6736
 22908                           
 22909                           ;doprnt.c: 1262: flag |= 0x03;
 22910  001FF8  0E03               	movlw	3
 22911  001FFA  1226               	iorwf	i2printf@flag,f,c
 22912                           
 22913                           ;doprnt.c: 1263: val = -val;
 22914  001FFC  6C24               	negf	i2printf@val,c
 22915  001FFE  1E25               	comf	i2printf@val+1,f,c
 22916  002000  B0D8               	btfsc	status,0,c
 22917  002002  2A25               	incf	i2printf@val+1,f,c
 22918                           
 22919                           ;doprnt.c: 1264: }
 22920                           ;doprnt.c: 1266: }
 22921  002004  D00C               	goto	i2l6736
 22922  002006                     i2l6732:
 22923                           
 22924                           ;doprnt.c: 1268: else
 22925                           ;doprnt.c: 1273: {
 22926                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 22927  002006  C020  FFD9         	movff	i2printf@ap,fsr2l
 22928  00200A  C021  FFDA         	movff	i2printf@ap+1,fsr2h
 22929  00200E  CFDE F024          	movff	postinc2,i2printf@val
 22930  002012  CFDD F025          	movff	postdec2,i2printf@val+1
 22931  002016  0E02               	movlw	2
 22932  002018  2620               	addwf	i2printf@ap,f,c
 22933  00201A  0E00               	movlw	0
 22934  00201C  2221               	addwfc	i2printf@ap+1,f,c
 22935  00201E                     i2l6736:
 22936                           
 22937                           ;doprnt.c: 1287: }
 22938                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 22939  00201E  0E01               	movlw	1
 22940  002020  6E27               	movwf	i2printf@c,c
 22941  002022                     i2l6738:
 22942  002022  0E05               	movlw	5
 22943  002024  1827               	xorwf	i2printf@c,w,c
 22944  002026  B4D8               	btfsc	status,2,c
 22945  002028  D015               	goto	i2l6750
 22946                           
 22947                           ;doprnt.c: 1306: if(val < dpowers[c])
 22948  00202A  5027               	movf	i2printf@c,w,c
 22949  00202C  0D02               	mullw	2
 22950  00202E  0EC6               	movlw	low _dpowers
 22951  002030  24F3               	addwf	prodl,w,c
 22952  002032  6EF6               	movwf	tblptrl,c
 22953  002034  0EFA               	movlw	high _dpowers
 22954  002036  20F4               	addwfc	prodh,w,c
 22955  002038  6EF7               	movwf	tblptrh,c
 22956  00203A                     	if	1	;There are 3 active tblptr bytes
 22957  00203A  6AF8               	clrf	tblptru,c
 22958  00203C  0E00               	movlw	low (__mediumconst shr (0+16))
 22959  00203E  22F8               	addwfc	tblptru,f,c
 22960  002040                     	endif
 22961  002040  0009               	tblrd		*+
 22962  002042  50F5               	movf	tablat,w,c
 22963  002044  5C24               	subwf	i2printf@val,w,c
 22964  002046  0009               	tblrd		*+
 22965  002048  50F5               	movf	tablat,w,c
 22966  00204A  5825               	subwfb	i2printf@val+1,w,c
 22967  00204C  A0D8               	btfss	status,0,c
 22968  00204E  D002               	goto	i2l6750
 22969                           
 22970                           ;doprnt.c: 1307: break;
 22971  002050  2A27               	incf	i2printf@c,f,c
 22972  002052  D7E7               	goto	i2l6738
 22973  002054                     i2l6750:
 22974                           
 22975                           ;doprnt.c: 1345: if(width && flag & 0x03)
 22976  002054  5028               	movf	i2printf@width,w,c
 22977  002056  1029               	iorwf	i2printf@width+1,w,c
 22978  002058  B4D8               	btfsc	status,2,c
 22979  00205A  D009               	goto	i2l6756
 22980  00205C  C026  F019         	movff	i2printf@flag,??i2_printf
 22981  002060  0E03               	movlw	3
 22982  002062  1619               	andwf	??i2_printf,f,c
 22983  002064  B4D8               	btfsc	status,2,c
 22984  002066  D003               	goto	i2l6756
 22985                           
 22986                           ;doprnt.c: 1346: width--;
 22987  002068  0628               	decf	i2printf@width,f,c
 22988  00206A  A0D8               	btfss	status,0,c
 22989  00206C  0629               	decf	i2printf@width+1,f,c
 22990  00206E                     i2l6756:
 22991                           
 22992                           ;doprnt.c: 1381: if(width > c)
 22993  00206E  0E80               	movlw	128
 22994  002070  BE27               	btfsc	i2printf@c,7,c
 22995  002072  0E7F               	movlw	127
 22996  002074  6E19               	movwf	??i2_printf& (0+255),c
 22997  002076  5028               	movf	i2printf@width,w,c
 22998  002078  5C27               	subwf	i2printf@c,w,c
 22999  00207A  5029               	movf	i2printf@width+1,w,c
 23000  00207C  0A80               	xorlw	128
 23001  00207E  5819               	subwfb	??i2_printf& (0+255),w,c
 23002  002080  B0D8               	btfsc	status,0,c
 23003  002082  D007               	goto	i2l6760
 23004                           
 23005                           ;doprnt.c: 1382: width -= c;
 23006  002084  5027               	movf	i2printf@c,w,c
 23007  002086  5E28               	subwf	i2printf@width,f,c
 23008  002088  0E00               	movlw	0
 23009  00208A  BE27               	btfsc	i2printf@c,7,c
 23010  00208C  0EFF               	movlw	255
 23011  00208E  5A29               	subwfb	i2printf@width+1,f,c
 23012  002090  D004               	goto	i2l6762
 23013  002092                     i2l6760:
 23014                           
 23015                           ;doprnt.c: 1383: else
 23016                           ;doprnt.c: 1384: width = 0;
 23017  002092  0E00               	movlw	0
 23018  002094  6E29               	movwf	i2printf@width+1,c
 23019  002096  0E00               	movlw	0
 23020  002098  6E28               	movwf	i2printf@width,c
 23021  00209A                     i2l6762:
 23022                           
 23023                           ;doprnt.c: 1387: if(flag & 0x04) {
 23024  00209A  A426               	btfss	i2printf@flag,2,c
 23025  00209C  D014               	goto	i2l6774
 23026                           
 23027                           ;doprnt.c: 1392: if(flag & 0x03)
 23028  00209E  C026  F019         	movff	i2printf@flag,??i2_printf
 23029  0020A2  0E03               	movlw	3
 23030  0020A4  1619               	andwf	??i2_printf,f,c
 23031  0020A6  B4D8               	btfsc	status,2,c
 23032  0020A8  D003               	goto	i2l6768
 23033                           
 23034                           ;doprnt.c: 1393: (putch('-') );
 23035  0020AA  0E2D               	movlw	45
 23036  0020AC  EC7A  F02A         	call	i2_putch
 23037  0020B0                     i2l6768:
 23038                           
 23039                           ;doprnt.c: 1415: if(width)
 23040  0020B0  5028               	movf	i2printf@width,w,c
 23041  0020B2  1029               	iorwf	i2printf@width+1,w,c
 23042  0020B4  B4D8               	btfsc	status,2,c
 23043  0020B6  D01E               	goto	i2l6784
 23044                           
 23045                           ;doprnt.c: 1417: (putch('0') );
 23046                           
 23047                           ;doprnt.c: 1416: do
 23048  0020B8  0E30               	movlw	48
 23049  0020BA  EC7A  F02A         	call	i2_putch
 23050                           
 23051                           ;doprnt.c: 1418: while(--width);
 23052  0020BE  0628               	decf	i2printf@width,f,c
 23053  0020C0  A0D8               	btfss	status,0,c
 23054  0020C2  0629               	decf	i2printf@width+1,f,c
 23055  0020C4  D7F5               	goto	i2l6768
 23056  0020C6                     i2l6774:
 23057                           
 23058                           ;doprnt.c: 1422: {
 23059                           ;doprnt.c: 1424: if(width
 23060                           ;doprnt.c: 1428: )
 23061  0020C6  5028               	movf	i2printf@width,w,c
 23062  0020C8  1029               	iorwf	i2printf@width+1,w,c
 23063  0020CA  B4D8               	btfsc	status,2,c
 23064  0020CC  D00A               	goto	i2l6780
 23065  0020CE                     i2l6776:
 23066                           
 23067                           ;doprnt.c: 1430: (putch(' ') );
 23068  0020CE  0E20               	movlw	32
 23069  0020D0  EC7A  F02A         	call	i2_putch
 23070                           
 23071                           ;doprnt.c: 1431: while(--width);
 23072  0020D4  0628               	decf	i2printf@width,f,c
 23073  0020D6  A0D8               	btfss	status,0,c
 23074  0020D8  0629               	decf	i2printf@width+1,f,c
 23075  0020DA  5028               	movf	i2printf@width,w,c
 23076  0020DC  1029               	iorwf	i2printf@width+1,w,c
 23077  0020DE  A4D8               	btfss	status,2,c
 23078  0020E0  D7F6               	goto	i2l6776
 23079  0020E2                     i2l6780:
 23080                           
 23081                           ;doprnt.c: 1438: if(flag & 0x03)
 23082  0020E2  C026  F019         	movff	i2printf@flag,??i2_printf
 23083  0020E6  0E03               	movlw	3
 23084  0020E8  1619               	andwf	??i2_printf,f,c
 23085  0020EA  B4D8               	btfsc	status,2,c
 23086  0020EC  D003               	goto	i2l6784
 23087                           
 23088                           ;doprnt.c: 1439: (putch('-') );
 23089  0020EE  0E2D               	movlw	45
 23090  0020F0  EC7A  F02A         	call	i2_putch
 23091  0020F4                     i2l6784:
 23092                           
 23093                           ;doprnt.c: 1469: }
 23094                           ;doprnt.c: 1472: prec = c;
 23095  0020F4  C027  F01D         	movff	i2printf@c,i2printf@prec
 23096                           
 23097                           ;doprnt.c: 1474: while(prec--) {
 23098  0020F8  D027               	goto	i2l6790
 23099  0020FA                     i2l6786:
 23100                           
 23101                           ;doprnt.c: 1478: {
 23102                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 23103  0020FA  501D               	movf	i2printf@prec,w,c
 23104  0020FC  0D02               	mullw	2
 23105  0020FE  0EC6               	movlw	low _dpowers
 23106  002100  24F3               	addwf	prodl,w,c
 23107  002102  6EF6               	movwf	tblptrl,c
 23108  002104  0EFA               	movlw	high _dpowers
 23109  002106  20F4               	addwfc	prodh,w,c
 23110  002108  6EF7               	movwf	tblptrh,c
 23111  00210A                     	if	1	;There are 3 active tblptr bytes
 23112  00210A  6AF8               	clrf	tblptru,c
 23113  00210C  0E00               	movlw	low (__mediumconst shr (0+16))
 23114  00210E  22F8               	addwfc	tblptru,f,c
 23115  002110                     	endif
 23116  002110  0009               	tblrd		*+
 23117  002112  CFF5 F008          	movff	tablat,i2___lwdiv@divisor
 23118  002116  000A               	tblrd		*-
 23119  002118  CFF5 F009          	movff	tablat,i2___lwdiv@divisor+1
 23120  00211C  C024  F006         	movff	i2printf@val,i2___lwdiv@dividend
 23121  002120  C025  F007         	movff	i2printf@val+1,i2___lwdiv@dividend+1
 23122  002124  EC97  F026         	call	i2___lwdiv	;wreg free
 23123  002128  C006  F001         	movff	?i2___lwdiv,i2___lwmod@dividend
 23124  00212C  C007  F002         	movff	?i2___lwdiv+1,i2___lwmod@dividend+1
 23125  002130  0E00               	movlw	0
 23126  002132  6E04               	movwf	i2___lwmod@divisor+1,c
 23127  002134  0E0A               	movlw	10
 23128  002136  6E03               	movwf	i2___lwmod@divisor,c
 23129  002138  EC56  F027         	call	i2___lwmod	;wreg free
 23130  00213C  5001               	movf	?i2___lwmod,w,c
 23131  00213E  0F30               	addlw	48
 23132  002140  6E27               	movwf	i2printf@c,c
 23133                           
 23134                           ;doprnt.c: 1523: }
 23135                           ;doprnt.c: 1524: (putch(c) );
 23136  002142  5027               	movf	i2printf@c,w,c
 23137  002144  EC7A  F02A         	call	i2_putch
 23138  002148                     i2l6790:
 23139  002148  061D               	decf	i2printf@prec,f,c
 23140  00214A  281D               	incf	i2printf@prec,w,c
 23141  00214C  A4D8               	btfss	status,2,c
 23142  00214E  D7D5               	goto	i2l6786
 23143  002150                     i2l6792:
 23144  002150  C00D  FFF6         	movff	i2printf@f,tblptrl
 23145  002154  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 23146  002158  4A0D               	infsnz	i2printf@f,f,c
 23147  00215A  2A0E               	incf	i2printf@f+1,f,c
 23148  00215C                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 23149  00215C  6AF8               	clrf	tblptru,c
 23150  00215E                     	endif
 23151  00215E                     	if	0	;tblptru may be non-zero
 23152  00215E                     	endif
 23153  00215E  0008               	tblrd		*
 23154  002160  CFF5 F027          	movff	tablat,i2printf@c
 23155  002164  5027               	movf	i2printf@c,w,c
 23156  002166  B4D8               	btfsc	status,2,c
 23157  002168  0012               	return	
 23158  00216A  D64E               	goto	i2l6662
 23159  00216C                     __end_ofi2_printf:
 23160                           	opt stack 0
 23161                           pclatu	equ	0xFFB
 23162                           pclath	equ	0xFFA
 23163                           tblptru	equ	0xFF8
 23164                           tblptrh	equ	0xFF7
 23165                           tblptrl	equ	0xFF6
 23166                           tablat	equ	0xFF5
 23167                           prodh	equ	0xFF4
 23168                           prodl	equ	0xFF3
 23169                           intcon	equ	0xFF2
 23170                           intcon2	equ	0xFF1
 23171                           intcon3	equ	0xFF0
 23172                           indf0	equ	0xFEF
 23173                           postinc0	equ	0xFEE
 23174                           fsr0h	equ	0xFEA
 23175                           fsr0l	equ	0xFE9
 23176                           wreg	equ	0xFE8
 23177                           postdec1	equ	0xFE5
 23178                           fsr1h	equ	0xFE2
 23179                           fsr1l	equ	0xFE1
 23180                           indf2	equ	0xFDF
 23181                           postinc2	equ	0xFDE
 23182                           postdec2	equ	0xFDD
 23183                           fsr2h	equ	0xFDA
 23184                           fsr2l	equ	0xFD9
 23185                           status	equ	0xFD8
 23186                           
 23187 ;; *************** function i2_putch *****************
 23188 ;; Defined at:
 23189 ;;		line 20 in file "lcd.c"
 23190 ;; Parameters:    Size  Location     Type
 23191 ;;  data            1    wreg     unsigned char 
 23192 ;; Auto vars:     Size  Location     Type
 23193 ;;  data            1    2[COMRAM] unsigned char 
 23194 ;; Return value:  Size  Location     Type
 23195 ;;                  1    wreg      void 
 23196 ;; Registers used:
 23197 ;;		wreg, status,2, status,0, cstack
 23198 ;; Tracked objects:
 23199 ;;		On entry : 0/0
 23200 ;;		On exit  : 0/0
 23201 ;;		Unchanged: 0/0
 23202 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23203 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23204 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23205 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23206 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23207 ;;Total ram usage:        1 bytes
 23208 ;; Hardware stack levels used:    1
 23209 ;; Hardware stack levels required when called:    1
 23210 ;; This function calls:
 23211 ;;		i2_lcdNibble
 23212 ;; This function is called by:
 23213 ;;		i2_printf
 23214 ;; This function uses a non-reentrant model
 23215 ;;
 23216                           
 23217                           	psect	text83
 23218  0054F4                     __ptext83:
 23219                           	opt stack 0
 23220  0054F4                     i2_putch:
 23221                           	opt stack 20
 23222                           
 23223                           ;incstack = 0
 23224                           ;i2putch@data stored from wreg
 23225  0054F4  6E03               	movwf	i2putch@data,c
 23226                           
 23227                           ;lcd.c: 21: LATDbits.LATD2 = 1;
 23228  0054F6  848C               	bsf	3980,2,c	;volatile
 23229                           
 23230                           ;lcd.c: 22: lcdNibble(data);
 23231  0054F8  5003               	movf	i2putch@data,w,c
 23232  0054FA  EC6C  F026         	call	i2_lcdNibble
 23233  0054FE  0012               	return		;funcret
 23234  005500                     __end_ofi2_putch:
 23235                           	opt stack 0
 23236                           pclatu	equ	0xFFB
 23237                           pclath	equ	0xFFA
 23238                           tblptru	equ	0xFF8
 23239                           tblptrh	equ	0xFF7
 23240                           tblptrl	equ	0xFF6
 23241                           tablat	equ	0xFF5
 23242                           prodh	equ	0xFF4
 23243                           prodl	equ	0xFF3
 23244                           intcon	equ	0xFF2
 23245                           intcon2	equ	0xFF1
 23246                           intcon3	equ	0xFF0
 23247                           indf0	equ	0xFEF
 23248                           postinc0	equ	0xFEE
 23249                           fsr0h	equ	0xFEA
 23250                           fsr0l	equ	0xFE9
 23251                           wreg	equ	0xFE8
 23252                           postdec1	equ	0xFE5
 23253                           fsr1h	equ	0xFE2
 23254                           fsr1l	equ	0xFE1
 23255                           indf2	equ	0xFDF
 23256                           postinc2	equ	0xFDE
 23257                           postdec2	equ	0xFDD
 23258                           fsr2h	equ	0xFDA
 23259                           fsr2l	equ	0xFD9
 23260                           status	equ	0xFD8
 23261                           
 23262 ;; *************** function i2_isdigit *****************
 23263 ;; Defined at:
 23264 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
 23265 ;; Parameters:    Size  Location     Type
 23266 ;;  c               1    wreg     unsigned char 
 23267 ;; Auto vars:     Size  Location     Type
 23268 ;;  c               1    2[COMRAM] unsigned char 
 23269 ;; Return value:  Size  Location     Type
 23270 ;;		None               void
 23271 ;; Registers used:
 23272 ;;		wreg, status,2, status,0
 23273 ;; Tracked objects:
 23274 ;;		On entry : 0/0
 23275 ;;		On exit  : 0/0
 23276 ;;		Unchanged: 0/0
 23277 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23278 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23279 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23280 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23281 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23282 ;;Total ram usage:        3 bytes
 23283 ;; Hardware stack levels used:    1
 23284 ;; This function calls:
 23285 ;;		Nothing
 23286 ;; This function is called by:
 23287 ;;		i2_printf
 23288 ;; This function uses a non-reentrant model
 23289 ;;
 23290                           
 23291                           	psect	text84
 23292  00542A                     __ptext84:
 23293                           	opt stack 0
 23294  00542A                     i2_isdigit:
 23295                           	opt stack 21
 23296                           
 23297                           ;incstack = 0
 23298                           ;i2isdigit@c stored from wreg
 23299  00542A  6E03               	movwf	i2isdigit@c,c
 23300  00542C  0E00               	movlw	0
 23301  00542E  6E02               	movwf	i2_isdigit$2052,c
 23302  005430  0E3A               	movlw	58
 23303  005432  6003               	cpfslt	i2isdigit@c,c
 23304  005434  D005               	goto	i2l6362
 23305  005436  0E2F               	movlw	47
 23306  005438  6403               	cpfsgt	i2isdigit@c,c
 23307  00543A  D002               	goto	i2l6362
 23308  00543C  0E01               	movlw	1
 23309  00543E  6E02               	movwf	i2_isdigit$2052,c
 23310  005440                     i2l6362:
 23311  005440  C002  F001         	movff	i2_isdigit$2052,??i2_isdigit
 23312  005444  3001               	rrcf	??i2_isdigit,w,c
 23313  005446  0012               	return	
 23314  005448                     __end_ofi2_isdigit:
 23315                           	opt stack 0
 23316                           pclatu	equ	0xFFB
 23317                           pclath	equ	0xFFA
 23318                           tblptru	equ	0xFF8
 23319                           tblptrh	equ	0xFF7
 23320                           tblptrl	equ	0xFF6
 23321                           tablat	equ	0xFF5
 23322                           prodh	equ	0xFF4
 23323                           prodl	equ	0xFF3
 23324                           intcon	equ	0xFF2
 23325                           intcon2	equ	0xFF1
 23326                           intcon3	equ	0xFF0
 23327                           indf0	equ	0xFEF
 23328                           postinc0	equ	0xFEE
 23329                           fsr0h	equ	0xFEA
 23330                           fsr0l	equ	0xFE9
 23331                           wreg	equ	0xFE8
 23332                           postdec1	equ	0xFE5
 23333                           fsr1h	equ	0xFE2
 23334                           fsr1l	equ	0xFE1
 23335                           indf2	equ	0xFDF
 23336                           postinc2	equ	0xFDE
 23337                           postdec2	equ	0xFDD
 23338                           fsr2h	equ	0xFDA
 23339                           fsr2l	equ	0xFD9
 23340                           status	equ	0xFD8
 23341                           
 23342 ;; *************** function i2___wmul *****************
 23343 ;; Defined at:
 23344 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
 23345 ;; Parameters:    Size  Location     Type
 23346 ;;  multiplier      2    0[COMRAM] unsigned int 
 23347 ;;  multiplicand    2    2[COMRAM] unsigned int 
 23348 ;; Auto vars:     Size  Location     Type
 23349 ;;  __wmul          2    4[COMRAM] unsigned int 
 23350 ;; Return value:  Size  Location     Type
 23351 ;;                  2    0[COMRAM] unsigned int 
 23352 ;; Registers used:
 23353 ;;		wreg, status,2, status,0, prodl, prodh
 23354 ;; Tracked objects:
 23355 ;;		On entry : 0/0
 23356 ;;		On exit  : 0/0
 23357 ;;		Unchanged: 0/0
 23358 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23359 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23360 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23361 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23362 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23363 ;;Total ram usage:        6 bytes
 23364 ;; Hardware stack levels used:    1
 23365 ;; This function calls:
 23366 ;;		Nothing
 23367 ;; This function is called by:
 23368 ;;		_printSortTimer
 23369 ;;		_retrieveLog
 23370 ;;		i2_printf
 23371 ;; This function uses a non-reentrant model
 23372 ;;
 23373                           
 23374                           	psect	text85
 23375  005376                     __ptext85:
 23376                           	opt stack 0
 23377  005376                     i2___wmul:
 23378                           	opt stack 21
 23379                           
 23380                           ;incstack = 0
 23381  005376  5001               	movf	i2___wmul@multiplier,w,c
 23382  005378  0203               	mulwf	i2___wmul@multiplicand,c
 23383  00537A  CFF3 F005          	movff	prodl,i2___wmul@product
 23384  00537E  CFF4 F006          	movff	prodh,i2___wmul@product+1
 23385  005382  5001               	movf	i2___wmul@multiplier,w,c
 23386  005384  0204               	mulwf	i2___wmul@multiplicand+1,c
 23387  005386  50F3               	movf	prodl,w,c
 23388  005388  2606               	addwf	i2___wmul@product+1,f,c
 23389  00538A  5002               	movf	i2___wmul@multiplier+1,w,c
 23390  00538C  0203               	mulwf	i2___wmul@multiplicand,c
 23391  00538E  50F3               	movf	prodl,w,c
 23392  005390  2606               	addwf	i2___wmul@product+1,f,c
 23393  005392  C005  F001         	movff	i2___wmul@product,?i2___wmul
 23394  005396  C006  F002         	movff	i2___wmul@product+1,?i2___wmul+1
 23395  00539A  0012               	return	
 23396  00539C                     __end_ofi2___wmul:
 23397                           	opt stack 0
 23398                           pclatu	equ	0xFFB
 23399                           pclath	equ	0xFFA
 23400                           tblptru	equ	0xFF8
 23401                           tblptrh	equ	0xFF7
 23402                           tblptrl	equ	0xFF6
 23403                           tablat	equ	0xFF5
 23404                           prodh	equ	0xFF4
 23405                           prodl	equ	0xFF3
 23406                           intcon	equ	0xFF2
 23407                           intcon2	equ	0xFF1
 23408                           intcon3	equ	0xFF0
 23409                           indf0	equ	0xFEF
 23410                           postinc0	equ	0xFEE
 23411                           fsr0h	equ	0xFEA
 23412                           fsr0l	equ	0xFE9
 23413                           wreg	equ	0xFE8
 23414                           postdec1	equ	0xFE5
 23415                           fsr1h	equ	0xFE2
 23416                           fsr1l	equ	0xFE1
 23417                           indf2	equ	0xFDF
 23418                           postinc2	equ	0xFDE
 23419                           postdec2	equ	0xFDD
 23420                           fsr2h	equ	0xFDA
 23421                           fsr2l	equ	0xFD9
 23422                           status	equ	0xFD8
 23423                           
 23424 ;; *************** function i2___lwmod *****************
 23425 ;; Defined at:
 23426 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
 23427 ;; Parameters:    Size  Location     Type
 23428 ;;  dividend        2    0[COMRAM] unsigned int 
 23429 ;;  divisor         2    2[COMRAM] unsigned int 
 23430 ;; Auto vars:     Size  Location     Type
 23431 ;;  __lwmod         1    4[COMRAM] unsigned char 
 23432 ;; Return value:  Size  Location     Type
 23433 ;;                  2    0[COMRAM] unsigned int 
 23434 ;; Registers used:
 23435 ;;		wreg, status,2, status,0
 23436 ;; Tracked objects:
 23437 ;;		On entry : 0/0
 23438 ;;		On exit  : 0/0
 23439 ;;		Unchanged: 0/0
 23440 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23441 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23442 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23443 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23444 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23445 ;;Total ram usage:        5 bytes
 23446 ;; Hardware stack levels used:    1
 23447 ;; This function calls:
 23448 ;;		Nothing
 23449 ;; This function is called by:
 23450 ;;		_printSortTimer
 23451 ;;		i2_printf
 23452 ;; This function uses a non-reentrant model
 23453 ;;
 23454                           
 23455                           	psect	text86
 23456  004EAC                     __ptext86:
 23457                           	opt stack 0
 23458  004EAC                     i2___lwmod:
 23459                           	opt stack 21
 23460                           
 23461                           ;incstack = 0
 23462  004EAC  5003               	movf	i2___lwmod@divisor,w,c
 23463  004EAE  1004               	iorwf	i2___lwmod@divisor+1,w,c
 23464  004EB0  B4D8               	btfsc	status,2,c
 23465  004EB2  D018               	goto	i2l1927
 23466  004EB4  0E01               	movlw	1
 23467  004EB6  6E05               	movwf	i2___lwmod@counter,c
 23468  004EB8  D004               	goto	i2l6394
 23469  004EBA                     i2l6392:
 23470  004EBA  90D8               	bcf	status,0,c
 23471  004EBC  3603               	rlcf	i2___lwmod@divisor,f,c
 23472  004EBE  3604               	rlcf	i2___lwmod@divisor+1,f,c
 23473  004EC0  2A05               	incf	i2___lwmod@counter,f,c
 23474  004EC2                     i2l6394:
 23475  004EC2  AE04               	btfss	i2___lwmod@divisor+1,7,c
 23476  004EC4  D7FA               	goto	i2l6392
 23477  004EC6                     i2l6396:
 23478  004EC6  5003               	movf	i2___lwmod@divisor,w,c
 23479  004EC8  5C01               	subwf	i2___lwmod@dividend,w,c
 23480  004ECA  5004               	movf	i2___lwmod@divisor+1,w,c
 23481  004ECC  5802               	subwfb	i2___lwmod@dividend+1,w,c
 23482  004ECE  A0D8               	btfss	status,0,c
 23483  004ED0  D004               	goto	i2l6400
 23484  004ED2  5003               	movf	i2___lwmod@divisor,w,c
 23485  004ED4  5E01               	subwf	i2___lwmod@dividend,f,c
 23486  004ED6  5004               	movf	i2___lwmod@divisor+1,w,c
 23487  004ED8  5A02               	subwfb	i2___lwmod@dividend+1,f,c
 23488  004EDA                     i2l6400:
 23489  004EDA  90D8               	bcf	status,0,c
 23490  004EDC  3204               	rrcf	i2___lwmod@divisor+1,f,c
 23491  004EDE  3203               	rrcf	i2___lwmod@divisor,f,c
 23492  004EE0  2E05               	decfsz	i2___lwmod@counter,f,c
 23493  004EE2  D7F1               	goto	i2l6396
 23494  004EE4                     i2l1927:
 23495  004EE4  C001  F001         	movff	i2___lwmod@dividend,?i2___lwmod
 23496  004EE8  C002  F002         	movff	i2___lwmod@dividend+1,?i2___lwmod+1
 23497  004EEC  0012               	return		;funcret
 23498  004EEE                     __end_ofi2___lwmod:
 23499                           	opt stack 0
 23500                           pclatu	equ	0xFFB
 23501                           pclath	equ	0xFFA
 23502                           tblptru	equ	0xFF8
 23503                           tblptrh	equ	0xFF7
 23504                           tblptrl	equ	0xFF6
 23505                           tablat	equ	0xFF5
 23506                           prodh	equ	0xFF4
 23507                           prodl	equ	0xFF3
 23508                           intcon	equ	0xFF2
 23509                           intcon2	equ	0xFF1
 23510                           intcon3	equ	0xFF0
 23511                           indf0	equ	0xFEF
 23512                           postinc0	equ	0xFEE
 23513                           fsr0h	equ	0xFEA
 23514                           fsr0l	equ	0xFE9
 23515                           wreg	equ	0xFE8
 23516                           postdec1	equ	0xFE5
 23517                           fsr1h	equ	0xFE2
 23518                           fsr1l	equ	0xFE1
 23519                           indf2	equ	0xFDF
 23520                           postinc2	equ	0xFDE
 23521                           postdec2	equ	0xFDD
 23522                           fsr2h	equ	0xFDA
 23523                           fsr2l	equ	0xFD9
 23524                           status	equ	0xFD8
 23525                           
 23526 ;; *************** function i2___lwdiv *****************
 23527 ;; Defined at:
 23528 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
 23529 ;; Parameters:    Size  Location     Type
 23530 ;;  dividend        2    5[COMRAM] unsigned int 
 23531 ;;  divisor         2    7[COMRAM] unsigned int 
 23532 ;; Auto vars:     Size  Location     Type
 23533 ;;  __lwdiv         2    9[COMRAM] unsigned int 
 23534 ;;  __lwdiv         1   11[COMRAM] unsigned char 
 23535 ;; Return value:  Size  Location     Type
 23536 ;;                  2    5[COMRAM] unsigned int 
 23537 ;; Registers used:
 23538 ;;		wreg, status,2, status,0
 23539 ;; Tracked objects:
 23540 ;;		On entry : 0/0
 23541 ;;		On exit  : 0/0
 23542 ;;		Unchanged: 0/0
 23543 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23544 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23545 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23546 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23547 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23548 ;;Total ram usage:        7 bytes
 23549 ;; Hardware stack levels used:    1
 23550 ;; This function calls:
 23551 ;;		Nothing
 23552 ;; This function is called by:
 23553 ;;		_printSortTimer
 23554 ;;		i2_printf
 23555 ;; This function uses a non-reentrant model
 23556 ;;
 23557                           
 23558                           	psect	text87
 23559  004D2E                     __ptext87:
 23560                           	opt stack 0
 23561  004D2E                     i2___lwdiv:
 23562                           	opt stack 21
 23563                           
 23564                           ;incstack = 0
 23565  004D2E  0E00               	movlw	0
 23566  004D30  6E0B               	movwf	i2___lwdiv@quotient+1,c
 23567  004D32  0E00               	movlw	0
 23568  004D34  6E0A               	movwf	i2___lwdiv@quotient,c
 23569  004D36  5008               	movf	i2___lwdiv@divisor,w,c
 23570  004D38  1009               	iorwf	i2___lwdiv@divisor+1,w,c
 23571  004D3A  B4D8               	btfsc	status,2,c
 23572  004D3C  D01C               	goto	i2l1917
 23573  004D3E  0E01               	movlw	1
 23574  004D40  6E0C               	movwf	i2___lwdiv@counter,c
 23575  004D42  D004               	goto	i2l6374
 23576  004D44                     i2l6372:
 23577  004D44  90D8               	bcf	status,0,c
 23578  004D46  3608               	rlcf	i2___lwdiv@divisor,f,c
 23579  004D48  3609               	rlcf	i2___lwdiv@divisor+1,f,c
 23580  004D4A  2A0C               	incf	i2___lwdiv@counter,f,c
 23581  004D4C                     i2l6374:
 23582  004D4C  AE09               	btfss	i2___lwdiv@divisor+1,7,c
 23583  004D4E  D7FA               	goto	i2l6372
 23584  004D50                     i2l6376:
 23585  004D50  90D8               	bcf	status,0,c
 23586  004D52  360A               	rlcf	i2___lwdiv@quotient,f,c
 23587  004D54  360B               	rlcf	i2___lwdiv@quotient+1,f,c
 23588  004D56  5008               	movf	i2___lwdiv@divisor,w,c
 23589  004D58  5C06               	subwf	i2___lwdiv@dividend,w,c
 23590  004D5A  5009               	movf	i2___lwdiv@divisor+1,w,c
 23591  004D5C  5807               	subwfb	i2___lwdiv@dividend+1,w,c
 23592  004D5E  A0D8               	btfss	status,0,c
 23593  004D60  D005               	goto	i2l6384
 23594  004D62  5008               	movf	i2___lwdiv@divisor,w,c
 23595  004D64  5E06               	subwf	i2___lwdiv@dividend,f,c
 23596  004D66  5009               	movf	i2___lwdiv@divisor+1,w,c
 23597  004D68  5A07               	subwfb	i2___lwdiv@dividend+1,f,c
 23598  004D6A  800A               	bsf	i2___lwdiv@quotient,0,c
 23599  004D6C                     i2l6384:
 23600  004D6C  90D8               	bcf	status,0,c
 23601  004D6E  3209               	rrcf	i2___lwdiv@divisor+1,f,c
 23602  004D70  3208               	rrcf	i2___lwdiv@divisor,f,c
 23603  004D72  2E0C               	decfsz	i2___lwdiv@counter,f,c
 23604  004D74  D7ED               	goto	i2l6376
 23605  004D76                     i2l1917:
 23606  004D76  C00A  F006         	movff	i2___lwdiv@quotient,?i2___lwdiv
 23607  004D7A  C00B  F007         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
 23608  004D7E  0012               	return		;funcret
 23609  004D80                     __end_ofi2___lwdiv:
 23610                           	opt stack 0
 23611                           pclatu	equ	0xFFB
 23612                           pclath	equ	0xFFA
 23613                           tblptru	equ	0xFF8
 23614                           tblptrh	equ	0xFF7
 23615                           tblptrl	equ	0xFF6
 23616                           tablat	equ	0xFF5
 23617                           prodh	equ	0xFF4
 23618                           prodl	equ	0xFF3
 23619                           intcon	equ	0xFF2
 23620                           intcon2	equ	0xFF1
 23621                           intcon3	equ	0xFF0
 23622                           indf0	equ	0xFEF
 23623                           postinc0	equ	0xFEE
 23624                           fsr0h	equ	0xFEA
 23625                           fsr0l	equ	0xFE9
 23626                           wreg	equ	0xFE8
 23627                           postdec1	equ	0xFE5
 23628                           fsr1h	equ	0xFE2
 23629                           fsr1l	equ	0xFE1
 23630                           indf2	equ	0xFDF
 23631                           postinc2	equ	0xFDE
 23632                           postdec2	equ	0xFDD
 23633                           fsr2h	equ	0xFDA
 23634                           fsr2l	equ	0xFD9
 23635                           status	equ	0xFD8
 23636                           
 23637 ;; *************** function i2_lcdInst *****************
 23638 ;; Defined at:
 23639 ;;		line 15 in file "lcd.c"
 23640 ;; Parameters:    Size  Location     Type
 23641 ;;  data            1    wreg     unsigned char 
 23642 ;; Auto vars:     Size  Location     Type
 23643 ;;  data            1    2[COMRAM] unsigned char 
 23644 ;; Return value:  Size  Location     Type
 23645 ;;                  1    wreg      void 
 23646 ;; Registers used:
 23647 ;;		wreg, status,2, status,0, cstack
 23648 ;; Tracked objects:
 23649 ;;		On entry : 0/0
 23650 ;;		On exit  : 0/0
 23651 ;;		Unchanged: 0/0
 23652 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23653 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23654 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23655 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23656 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23657 ;;Total ram usage:        1 bytes
 23658 ;; Hardware stack levels used:    1
 23659 ;; Hardware stack levels required when called:    1
 23660 ;; This function calls:
 23661 ;;		i2_lcdNibble
 23662 ;; This function is called by:
 23663 ;;		_change_state_to_menu_11
 23664 ;;		_change_state_to_menu_23
 23665 ;;		_change_state_to_logs_11
 23666 ;;		_change_state_to_logs_12
 23667 ;;		_change_state_to_logs_22
 23668 ;;		_change_state_to_logs_23
 23669 ;;		_change_state_to_logs_33
 23670 ;;		_change_state_to_logs_34
 23671 ;;		_printSortTimer
 23672 ;;		i2_change_state_to_menu_start
 23673 ;;		i2_change_state_to_menu_12
 23674 ;;		i2_change_state_to_menu_22
 23675 ;;		i2_printRTC
 23676 ;; This function uses a non-reentrant model
 23677 ;;
 23678                           
 23679                           	psect	text88
 23680  005500                     __ptext88:
 23681                           	opt stack 0
 23682  005500                     i2_lcdInst:
 23683                           	opt stack 20
 23684                           
 23685                           ;incstack = 0
 23686                           ;i2lcdInst@data stored from wreg
 23687  005500  6E03               	movwf	i2lcdInst@data,c
 23688                           
 23689                           ;lcd.c: 16: LATDbits.LATD2 = 0;
 23690  005502  948C               	bcf	3980,2,c	;volatile
 23691                           
 23692                           ;lcd.c: 17: lcdNibble(data);
 23693  005504  5003               	movf	i2lcdInst@data,w,c
 23694  005506  EC6C  F026         	call	i2_lcdNibble
 23695  00550A  0012               	return		;funcret
 23696  00550C                     __end_ofi2_lcdInst:
 23697                           	opt stack 0
 23698                           pclatu	equ	0xFFB
 23699                           pclath	equ	0xFFA
 23700                           tblptru	equ	0xFF8
 23701                           tblptrh	equ	0xFF7
 23702                           tblptrl	equ	0xFF6
 23703                           tablat	equ	0xFF5
 23704                           prodh	equ	0xFF4
 23705                           prodl	equ	0xFF3
 23706                           intcon	equ	0xFF2
 23707                           intcon2	equ	0xFF1
 23708                           intcon3	equ	0xFF0
 23709                           indf0	equ	0xFEF
 23710                           postinc0	equ	0xFEE
 23711                           fsr0h	equ	0xFEA
 23712                           fsr0l	equ	0xFE9
 23713                           wreg	equ	0xFE8
 23714                           postdec1	equ	0xFE5
 23715                           fsr1h	equ	0xFE2
 23716                           fsr1l	equ	0xFE1
 23717                           indf2	equ	0xFDF
 23718                           postinc2	equ	0xFDE
 23719                           postdec2	equ	0xFDD
 23720                           fsr2h	equ	0xFDA
 23721                           fsr2l	equ	0xFD9
 23722                           status	equ	0xFD8
 23723                           
 23724 ;; *************** function i2_lcdNibble *****************
 23725 ;; Defined at:
 23726 ;;		line 25 in file "lcd.c"
 23727 ;; Parameters:    Size  Location     Type
 23728 ;;  data            1    wreg     unsigned char 
 23729 ;; Auto vars:     Size  Location     Type
 23730 ;;  data            1    1[COMRAM] unsigned char 
 23731 ;;  lcdNibble       1    0[COMRAM] unsigned char 
 23732 ;; Return value:  Size  Location     Type
 23733 ;;                  1    wreg      void 
 23734 ;; Registers used:
 23735 ;;		wreg, status,2, status,0
 23736 ;; Tracked objects:
 23737 ;;		On entry : 0/0
 23738 ;;		On exit  : 0/0
 23739 ;;		Unchanged: 0/0
 23740 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23741 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23742 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23743 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23744 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23745 ;;Total ram usage:        2 bytes
 23746 ;; Hardware stack levels used:    1
 23747 ;; This function calls:
 23748 ;;		Nothing
 23749 ;; This function is called by:
 23750 ;;		i2_lcdInst
 23751 ;;		i2_putch
 23752 ;; This function uses a non-reentrant model
 23753 ;;
 23754                           
 23755                           	psect	text89
 23756  004CD8                     __ptext89:
 23757                           	opt stack 0
 23758  004CD8                     i2_lcdNibble:
 23759                           	opt stack 20
 23760                           
 23761                           ;incstack = 0
 23762                           ;i2lcdNibble@data stored from wreg
 23763  004CD8  6E02               	movwf	i2lcdNibble@data,c
 23764                           
 23765                           ;lcd.c: 27: char temp = data & 0xF0;
 23766  004CDA  5002               	movf	i2lcdNibble@data,w,c
 23767  004CDC  0BF0               	andlw	240
 23768  004CDE  6E01               	movwf	i2lcdNibble@temp,c
 23769                           
 23770                           ;lcd.c: 28: LATD = LATD & 0x0F;
 23771  004CE0  508C               	movf	3980,w,c	;volatile
 23772  004CE2  0B0F               	andlw	15
 23773  004CE4  6E8C               	movwf	3980,c	;volatile
 23774                           
 23775                           ;lcd.c: 29: LATD = temp | LATD;
 23776  004CE6  5001               	movf	i2lcdNibble@temp,w,c
 23777  004CE8  108C               	iorwf	3980,w,c	;volatile
 23778  004CEA  6E8C               	movwf	3980,c	;volatile
 23779                           
 23780                           ;lcd.c: 31: LATDbits.LATD3 = 1;
 23781  004CEC  868C               	bsf	3980,3,c	;volatile
 23782                           
 23783                           ;lcd.c: 32: _delay((unsigned long)((25)*(32000000/4000000.0)));
 23784  004CEE  0E42               	movlw	66
 23785  004CF0                     i2u1063_47:
 23786  004CF0  2EE8               	decfsz	wreg,f,c
 23787  004CF2  D7FE               	bra	i2u1063_47
 23788  004CF4  D000               	nop2	
 23789                           
 23790                           ;lcd.c: 33: LATDbits.LATD3 = 0;
 23791  004CF6  968C               	bcf	3980,3,c	;volatile
 23792                           
 23793                           ;lcd.c: 34: _delay((unsigned long)((25)*(32000000/4000000.0)));
 23794  004CF8  0E42               	movlw	66
 23795  004CFA                     i2u1064_47:
 23796  004CFA  2EE8               	decfsz	wreg,f,c
 23797  004CFC  D7FE               	bra	i2u1064_47
 23798  004CFE  D000               	nop2	
 23799                           
 23800                           ;lcd.c: 36: data = data << 4;
 23801  004D00  3802               	swapf	i2lcdNibble@data,w,c
 23802  004D02  0BF0               	andlw	240
 23803  004D04  6E02               	movwf	i2lcdNibble@data,c
 23804                           
 23805                           ;lcd.c: 38: temp = data & 0xF0;
 23806  004D06  5002               	movf	i2lcdNibble@data,w,c
 23807  004D08  0BF0               	andlw	240
 23808  004D0A  6E01               	movwf	i2lcdNibble@temp,c
 23809                           
 23810                           ;lcd.c: 39: LATD = LATD & 0x0F;
 23811  004D0C  508C               	movf	3980,w,c	;volatile
 23812  004D0E  0B0F               	andlw	15
 23813  004D10  6E8C               	movwf	3980,c	;volatile
 23814                           
 23815                           ;lcd.c: 40: LATD = temp | LATD;
 23816  004D12  5001               	movf	i2lcdNibble@temp,w,c
 23817  004D14  108C               	iorwf	3980,w,c	;volatile
 23818  004D16  6E8C               	movwf	3980,c	;volatile
 23819                           
 23820                           ;lcd.c: 42: LATDbits.LATD3 = 1;
 23821  004D18  868C               	bsf	3980,3,c	;volatile
 23822                           
 23823                           ;lcd.c: 43: _delay((unsigned long)((25)*(32000000/4000000.0)));
 23824  004D1A  0E42               	movlw	66
 23825  004D1C                     i2u1065_47:
 23826  004D1C  2EE8               	decfsz	wreg,f,c
 23827  004D1E  D7FE               	bra	i2u1065_47
 23828  004D20  D000               	nop2	
 23829                           
 23830                           ;lcd.c: 44: LATDbits.LATD3 = 0;
 23831  004D22  968C               	bcf	3980,3,c	;volatile
 23832                           
 23833                           ;lcd.c: 45: _delay((unsigned long)((25)*(32000000/4000000.0)));
 23834  004D24  0E42               	movlw	66
 23835  004D26                     i2u1066_47:
 23836  004D26  2EE8               	decfsz	wreg,f,c
 23837  004D28  D7FE               	bra	i2u1066_47
 23838  004D2A  D000               	nop2	
 23839  004D2C  0012               	return		;funcret
 23840  004D2E                     __end_ofi2_lcdNibble:
 23841                           	opt stack 0
 23842                           pclatu	equ	0xFFB
 23843                           pclath	equ	0xFFA
 23844                           tblptru	equ	0xFF8
 23845                           tblptrh	equ	0xFF7
 23846                           tblptrl	equ	0xFF6
 23847                           tablat	equ	0xFF5
 23848                           prodh	equ	0xFF4
 23849                           prodl	equ	0xFF3
 23850                           intcon	equ	0xFF2
 23851                           intcon2	equ	0xFF1
 23852                           intcon3	equ	0xFF0
 23853                           indf0	equ	0xFEF
 23854                           postinc0	equ	0xFEE
 23855                           fsr0h	equ	0xFEA
 23856                           fsr0l	equ	0xFE9
 23857                           wreg	equ	0xFE8
 23858                           postdec1	equ	0xFE5
 23859                           fsr1h	equ	0xFE2
 23860                           fsr1l	equ	0xFE1
 23861                           indf2	equ	0xFDF
 23862                           postinc2	equ	0xFDE
 23863                           postdec2	equ	0xFDD
 23864                           fsr2h	equ	0xFDA
 23865                           fsr2l	equ	0xFD9
 23866                           status	equ	0xFD8
 23867                           
 23868 ;; *************** function i2_getRTC *****************
 23869 ;; Defined at:
 23870 ;;		line 44 in file "RTC.c"
 23871 ;; Parameters:    Size  Location     Type
 23872 ;;		None
 23873 ;; Auto vars:     Size  Location     Type
 23874 ;;  getRTC          2    3[COMRAM] int 
 23875 ;; Return value:  Size  Location     Type
 23876 ;;                  1    wreg      void 
 23877 ;; Registers used:
 23878 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 23879 ;; Tracked objects:
 23880 ;;		On entry : 0/0
 23881 ;;		On exit  : 0/0
 23882 ;;		Unchanged: 0/0
 23883 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23884 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23885 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23886 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23887 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23888 ;;Total ram usage:        2 bytes
 23889 ;; Hardware stack levels used:    1
 23890 ;; Hardware stack levels required when called:    2
 23891 ;; This function calls:
 23892 ;;		i2_I2C_Master_Read
 23893 ;;		i2_I2C_Master_Start
 23894 ;;		i2_I2C_Master_Stop
 23895 ;;		i2_I2C_Master_Write
 23896 ;; This function is called by:
 23897 ;;		_printSortTimer
 23898 ;;		i2_printRTC
 23899 ;; This function uses a non-reentrant model
 23900 ;;
 23901                           
 23902                           	psect	text90
 23903  004A0C                     __ptext90:
 23904                           	opt stack 0
 23905  004A0C                     i2_getRTC:
 23906                           	opt stack 19
 23907                           
 23908                           ;RTC.c: 48: I2C_Master_Start();
 23909                           
 23910                           ;incstack = 0
 23911  004A0C  ECA0  F02A         	call	i2_I2C_Master_Start	;wreg free
 23912                           
 23913                           ;RTC.c: 49: I2C_Master_Write(0b11010000);
 23914  004A10  0E00               	movlw	0
 23915  004A12  6E03               	movwf	i2I2C_Master_Write@d+1,c
 23916  004A14  0ED0               	movlw	208
 23917  004A16  6E02               	movwf	i2I2C_Master_Write@d,c
 23918  004A18  EC8B  F02A         	call	i2_I2C_Master_Write	;wreg free
 23919                           
 23920                           ;RTC.c: 50: I2C_Master_Write(0x00);
 23921  004A1C  0E00               	movlw	0
 23922  004A1E  6E03               	movwf	i2I2C_Master_Write@d+1,c
 23923  004A20  0E00               	movlw	0
 23924  004A22  6E02               	movwf	i2I2C_Master_Write@d,c
 23925  004A24  EC8B  F02A         	call	i2_I2C_Master_Write	;wreg free
 23926                           
 23927                           ;RTC.c: 51: I2C_Master_Stop();
 23928  004A28  EC9C  F02A         	call	i2_I2C_Master_Stop	;wreg free
 23929                           
 23930                           ;RTC.c: 54: I2C_Master_Start();
 23931  004A2C  ECA0  F02A         	call	i2_I2C_Master_Start	;wreg free
 23932                           
 23933                           ;RTC.c: 55: I2C_Master_Write(0b11010001);
 23934  004A30  0E00               	movlw	0
 23935  004A32  6E03               	movwf	i2I2C_Master_Write@d+1,c
 23936  004A34  0ED1               	movlw	209
 23937  004A36  6E02               	movwf	i2I2C_Master_Write@d,c
 23938  004A38  EC8B  F02A         	call	i2_I2C_Master_Write	;wreg free
 23939                           
 23940                           ;RTC.c: 56: for(int i = 0; i < 6; i++){
 23941  004A3C  0E00               	movlw	0
 23942  004A3E  6E05               	movwf	i2getRTC@i+1,c
 23943  004A40  0E00               	movlw	0
 23944  004A42  6E04               	movwf	i2getRTC@i,c
 23945  004A44                     i2l6634:
 23946  004A44  BE05               	btfsc	i2getRTC@i+1,7,c
 23947  004A46  D006               	goto	i2l6638
 23948  004A48  5005               	movf	i2getRTC@i+1,w,c
 23949  004A4A  E111               	bnz	i2l6644
 23950  004A4C  0E06               	movlw	6
 23951  004A4E  5C04               	subwf	i2getRTC@i,w,c
 23952  004A50  B0D8               	btfsc	status,0,c
 23953  004A52  D00D               	goto	i2l6644
 23954  004A54                     i2l6638:
 23955                           
 23956                           ;RTC.c: 57: time[i] = I2C_Master_Read(1);
 23957  004A54  0E1C               	movlw	low _time
 23958  004A56  2404               	addwf	i2getRTC@i,w,c
 23959  004A58  6ED9               	movwf	fsr2l,c
 23960  004A5A  0E01               	movlw	high _time
 23961  004A5C  2005               	addwfc	i2getRTC@i+1,w,c
 23962  004A5E  6EDA               	movwf	fsr2h,c
 23963  004A60  0E01               	movlw	1
 23964  004A62  ECCE  F029         	call	i2_I2C_Master_Read
 23965  004A66  6EDF               	movwf	indf2,c
 23966  004A68  4A04               	infsnz	i2getRTC@i,f,c
 23967  004A6A  2A05               	incf	i2getRTC@i+1,f,c
 23968  004A6C  D7EB               	goto	i2l6634
 23969  004A6E                     i2l6644:
 23970                           
 23971                           ;RTC.c: 58: }
 23972                           ;RTC.c: 59: time[6] = I2C_Master_Read(0);
 23973  004A6E  0E00               	movlw	0
 23974  004A70  ECCE  F029         	call	i2_I2C_Master_Read
 23975  004A74  0101               	movlb	1	; () banked
 23976  004A76  6F22               	movwf	(_time+6)& (0+255),b
 23977                           
 23978                           ;RTC.c: 60: I2C_Master_Stop();
 23979  004A78  EC9C  F02A         	call	i2_I2C_Master_Stop	;wreg free
 23980  004A7C  0012               	return		;funcret
 23981  004A7E                     __end_ofi2_getRTC:
 23982                           	opt stack 0
 23983                           pclatu	equ	0xFFB
 23984                           pclath	equ	0xFFA
 23985                           tblptru	equ	0xFF8
 23986                           tblptrh	equ	0xFF7
 23987                           tblptrl	equ	0xFF6
 23988                           tablat	equ	0xFF5
 23989                           prodh	equ	0xFF4
 23990                           prodl	equ	0xFF3
 23991                           intcon	equ	0xFF2
 23992                           intcon2	equ	0xFF1
 23993                           intcon3	equ	0xFF0
 23994                           indf0	equ	0xFEF
 23995                           postinc0	equ	0xFEE
 23996                           fsr0h	equ	0xFEA
 23997                           fsr0l	equ	0xFE9
 23998                           wreg	equ	0xFE8
 23999                           postdec1	equ	0xFE5
 24000                           fsr1h	equ	0xFE2
 24001                           fsr1l	equ	0xFE1
 24002                           indf2	equ	0xFDF
 24003                           postinc2	equ	0xFDE
 24004                           postdec2	equ	0xFDD
 24005                           fsr2h	equ	0xFDA
 24006                           fsr2l	equ	0xFD9
 24007                           status	equ	0xFD8
 24008                           
 24009 ;; *************** function i2_I2C_Master_Write *****************
 24010 ;; Defined at:
 24011 ;;		line 49 in file "I2C.c"
 24012 ;; Parameters:    Size  Location     Type
 24013 ;;  d               2    1[COMRAM] unsigned int 
 24014 ;; Auto vars:     Size  Location     Type
 24015 ;;		None
 24016 ;; Return value:  Size  Location     Type
 24017 ;;                  1    wreg      void 
 24018 ;; Registers used:
 24019 ;;		wreg, status,2, status,0, cstack
 24020 ;; Tracked objects:
 24021 ;;		On entry : 0/0
 24022 ;;		On exit  : 0/0
 24023 ;;		Unchanged: 0/0
 24024 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24025 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24026 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24027 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24028 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24029 ;;Total ram usage:        2 bytes
 24030 ;; Hardware stack levels used:    1
 24031 ;; Hardware stack levels required when called:    1
 24032 ;; This function calls:
 24033 ;;		i2_I2C_Master_Wait
 24034 ;; This function is called by:
 24035 ;;		i2_getRTC
 24036 ;; This function uses a non-reentrant model
 24037 ;;
 24038                           
 24039                           	psect	text91
 24040  005516                     __ptext91:
 24041                           	opt stack 0
 24042  005516                     i2_I2C_Master_Write:
 24043                           	opt stack 19
 24044                           
 24045                           ;I2C.c: 51: I2C_Master_Wait();
 24046                           
 24047                           ;incstack = 0
 24048  005516  EC61  F02A         	call	i2_I2C_Master_Wait	;wreg free
 24049                           
 24050                           ;I2C.c: 52: SSPBUF = d;
 24051  00551A  C002  FFC9         	movff	i2I2C_Master_Write@d,4041	;volatile
 24052  00551E  0012               	return		;funcret
 24053  005520                     __end_ofi2_I2C_Master_Write:
 24054                           	opt stack 0
 24055                           pclatu	equ	0xFFB
 24056                           pclath	equ	0xFFA
 24057                           tblptru	equ	0xFF8
 24058                           tblptrh	equ	0xFF7
 24059                           tblptrl	equ	0xFF6
 24060                           tablat	equ	0xFF5
 24061                           prodh	equ	0xFF4
 24062                           prodl	equ	0xFF3
 24063                           intcon	equ	0xFF2
 24064                           intcon2	equ	0xFF1
 24065                           intcon3	equ	0xFF0
 24066                           indf0	equ	0xFEF
 24067                           postinc0	equ	0xFEE
 24068                           fsr0h	equ	0xFEA
 24069                           fsr0l	equ	0xFE9
 24070                           wreg	equ	0xFE8
 24071                           postdec1	equ	0xFE5
 24072                           fsr1h	equ	0xFE2
 24073                           fsr1l	equ	0xFE1
 24074                           indf2	equ	0xFDF
 24075                           postinc2	equ	0xFDE
 24076                           postdec2	equ	0xFDD
 24077                           fsr2h	equ	0xFDA
 24078                           fsr2l	equ	0xFD9
 24079                           status	equ	0xFD8
 24080                           
 24081 ;; *************** function i2_I2C_Master_Stop *****************
 24082 ;; Defined at:
 24083 ;;		line 43 in file "I2C.c"
 24084 ;; Parameters:    Size  Location     Type
 24085 ;;		None
 24086 ;; Auto vars:     Size  Location     Type
 24087 ;;		None
 24088 ;; Return value:  Size  Location     Type
 24089 ;;                  1    wreg      void 
 24090 ;; Registers used:
 24091 ;;		wreg, status,2, status,0, cstack
 24092 ;; Tracked objects:
 24093 ;;		On entry : 0/0
 24094 ;;		On exit  : 0/0
 24095 ;;		Unchanged: 0/0
 24096 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24097 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24098 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24099 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24100 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24101 ;;Total ram usage:        0 bytes
 24102 ;; Hardware stack levels used:    1
 24103 ;; Hardware stack levels required when called:    1
 24104 ;; This function calls:
 24105 ;;		i2_I2C_Master_Wait
 24106 ;; This function is called by:
 24107 ;;		i2_getRTC
 24108 ;; This function uses a non-reentrant model
 24109 ;;
 24110                           
 24111                           	psect	text92
 24112  005538                     __ptext92:
 24113                           	opt stack 0
 24114  005538                     i2_I2C_Master_Stop:
 24115                           	opt stack 19
 24116                           
 24117                           ;I2C.c: 45: I2C_Master_Wait();
 24118                           
 24119                           ;incstack = 0
 24120  005538  EC61  F02A         	call	i2_I2C_Master_Wait	;wreg free
 24121                           
 24122                           ;I2C.c: 46: PEN = 1;
 24123  00553C  84C5               	bsf	4037,2,c	;volatile
 24124  00553E  0012               	return		;funcret
 24125  005540                     __end_ofi2_I2C_Master_Stop:
 24126                           	opt stack 0
 24127                           pclatu	equ	0xFFB
 24128                           pclath	equ	0xFFA
 24129                           tblptru	equ	0xFF8
 24130                           tblptrh	equ	0xFF7
 24131                           tblptrl	equ	0xFF6
 24132                           tablat	equ	0xFF5
 24133                           prodh	equ	0xFF4
 24134                           prodl	equ	0xFF3
 24135                           intcon	equ	0xFF2
 24136                           intcon2	equ	0xFF1
 24137                           intcon3	equ	0xFF0
 24138                           indf0	equ	0xFEF
 24139                           postinc0	equ	0xFEE
 24140                           fsr0h	equ	0xFEA
 24141                           fsr0l	equ	0xFE9
 24142                           wreg	equ	0xFE8
 24143                           postdec1	equ	0xFE5
 24144                           fsr1h	equ	0xFE2
 24145                           fsr1l	equ	0xFE1
 24146                           indf2	equ	0xFDF
 24147                           postinc2	equ	0xFDE
 24148                           postdec2	equ	0xFDD
 24149                           fsr2h	equ	0xFDA
 24150                           fsr2l	equ	0xFD9
 24151                           status	equ	0xFD8
 24152                           
 24153 ;; *************** function i2_I2C_Master_Start *****************
 24154 ;; Defined at:
 24155 ;;		line 31 in file "I2C.c"
 24156 ;; Parameters:    Size  Location     Type
 24157 ;;		None
 24158 ;; Auto vars:     Size  Location     Type
 24159 ;;		None
 24160 ;; Return value:  Size  Location     Type
 24161 ;;                  1    wreg      void 
 24162 ;; Registers used:
 24163 ;;		wreg, status,2, status,0, cstack
 24164 ;; Tracked objects:
 24165 ;;		On entry : 0/0
 24166 ;;		On exit  : 0/0
 24167 ;;		Unchanged: 0/0
 24168 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24169 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24170 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24171 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24172 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24173 ;;Total ram usage:        0 bytes
 24174 ;; Hardware stack levels used:    1
 24175 ;; Hardware stack levels required when called:    1
 24176 ;; This function calls:
 24177 ;;		i2_I2C_Master_Wait
 24178 ;; This function is called by:
 24179 ;;		i2_getRTC
 24180 ;; This function uses a non-reentrant model
 24181 ;;
 24182                           
 24183                           	psect	text93
 24184  005540                     __ptext93:
 24185                           	opt stack 0
 24186  005540                     i2_I2C_Master_Start:
 24187                           	opt stack 19
 24188                           
 24189                           ;I2C.c: 33: I2C_Master_Wait();
 24190                           
 24191                           ;incstack = 0
 24192  005540  EC61  F02A         	call	i2_I2C_Master_Wait	;wreg free
 24193                           
 24194                           ;I2C.c: 34: SEN = 1;
 24195  005544  80C5               	bsf	4037,0,c	;volatile
 24196  005546  0012               	return		;funcret
 24197  005548                     __end_ofi2_I2C_Master_Start:
 24198                           	opt stack 0
 24199                           pclatu	equ	0xFFB
 24200                           pclath	equ	0xFFA
 24201                           tblptru	equ	0xFF8
 24202                           tblptrh	equ	0xFF7
 24203                           tblptrl	equ	0xFF6
 24204                           tablat	equ	0xFF5
 24205                           prodh	equ	0xFF4
 24206                           prodl	equ	0xFF3
 24207                           intcon	equ	0xFF2
 24208                           intcon2	equ	0xFF1
 24209                           intcon3	equ	0xFF0
 24210                           indf0	equ	0xFEF
 24211                           postinc0	equ	0xFEE
 24212                           fsr0h	equ	0xFEA
 24213                           fsr0l	equ	0xFE9
 24214                           wreg	equ	0xFE8
 24215                           postdec1	equ	0xFE5
 24216                           fsr1h	equ	0xFE2
 24217                           fsr1l	equ	0xFE1
 24218                           indf2	equ	0xFDF
 24219                           postinc2	equ	0xFDE
 24220                           postdec2	equ	0xFDD
 24221                           fsr2h	equ	0xFDA
 24222                           fsr2l	equ	0xFD9
 24223                           status	equ	0xFD8
 24224                           
 24225 ;; *************** function i2_I2C_Master_Read *****************
 24226 ;; Defined at:
 24227 ;;		line 55 in file "I2C.c"
 24228 ;; Parameters:    Size  Location     Type
 24229 ;;  a               1    wreg     unsigned char 
 24230 ;; Auto vars:     Size  Location     Type
 24231 ;;  a               1    1[COMRAM] unsigned char 
 24232 ;;  I2C_Master_R    1    2[COMRAM] unsigned char 
 24233 ;; Return value:  Size  Location     Type
 24234 ;;                  1    wreg      unsigned char 
 24235 ;; Registers used:
 24236 ;;		wreg, status,2, status,0, cstack
 24237 ;; Tracked objects:
 24238 ;;		On entry : 0/0
 24239 ;;		On exit  : 0/0
 24240 ;;		Unchanged: 0/0
 24241 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24242 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24243 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24244 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24245 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24246 ;;Total ram usage:        2 bytes
 24247 ;; Hardware stack levels used:    1
 24248 ;; Hardware stack levels required when called:    1
 24249 ;; This function calls:
 24250 ;;		i2_I2C_Master_Wait
 24251 ;; This function is called by:
 24252 ;;		i2_getRTC
 24253 ;; This function uses a non-reentrant model
 24254 ;;
 24255                           
 24256                           	psect	text94
 24257  00539C                     __ptext94:
 24258                           	opt stack 0
 24259  00539C                     i2_I2C_Master_Read:
 24260                           	opt stack 19
 24261                           
 24262                           ;incstack = 0
 24263                           ;i2I2C_Master_Read@a stored from wreg
 24264  00539C  6E02               	movwf	i2I2C_Master_Read@a,c
 24265                           
 24266                           ;I2C.c: 57: unsigned char temp;
 24267                           ;I2C.c: 58: I2C_Master_Wait();
 24268  00539E  EC61  F02A         	call	i2_I2C_Master_Wait	;wreg free
 24269                           
 24270                           ;I2C.c: 59: RCEN = 1;
 24271  0053A2  86C5               	bsf	4037,3,c	;volatile
 24272                           
 24273                           ;I2C.c: 60: I2C_Master_Wait();
 24274  0053A4  EC61  F02A         	call	i2_I2C_Master_Wait	;wreg free
 24275                           
 24276                           ;I2C.c: 61: temp = SSPBUF;
 24277  0053A8  CFC9 F003          	movff	4041,i2I2C_Master_Read@temp	;volatile
 24278                           
 24279                           ;I2C.c: 62: I2C_Master_Wait();
 24280  0053AC  EC61  F02A         	call	i2_I2C_Master_Wait	;wreg free
 24281                           
 24282                           ;I2C.c: 63: ACKDT = (a)?0:1;
 24283  0053B0  5002               	movf	i2I2C_Master_Read@a,w,c
 24284  0053B2  A4D8               	btfss	status,2,c
 24285  0053B4  D002               	goto	i2u468_40
 24286  0053B6  8AC5               	bsf	4037,5,c	;volatile
 24287  0053B8  D001               	goto	i2l6338
 24288  0053BA                     i2u468_40:
 24289  0053BA  9AC5               	bcf	4037,5,c	;volatile
 24290  0053BC                     i2l6338:
 24291                           
 24292                           ;I2C.c: 64: ACKEN = 1;
 24293  0053BC  88C5               	bsf	4037,4,c	;volatile
 24294                           
 24295                           ;I2C.c: 65: return temp;
 24296  0053BE  5003               	movf	i2I2C_Master_Read@temp,w,c
 24297  0053C0  0012               	return	
 24298  0053C2                     __end_ofi2_I2C_Master_Read:
 24299                           	opt stack 0
 24300                           pclatu	equ	0xFFB
 24301                           pclath	equ	0xFFA
 24302                           tblptru	equ	0xFF8
 24303                           tblptrh	equ	0xFF7
 24304                           tblptrl	equ	0xFF6
 24305                           tablat	equ	0xFF5
 24306                           prodh	equ	0xFF4
 24307                           prodl	equ	0xFF3
 24308                           intcon	equ	0xFF2
 24309                           intcon2	equ	0xFF1
 24310                           intcon3	equ	0xFF0
 24311                           indf0	equ	0xFEF
 24312                           postinc0	equ	0xFEE
 24313                           fsr0h	equ	0xFEA
 24314                           fsr0l	equ	0xFE9
 24315                           wreg	equ	0xFE8
 24316                           postdec1	equ	0xFE5
 24317                           fsr1h	equ	0xFE2
 24318                           fsr1l	equ	0xFE1
 24319                           indf2	equ	0xFDF
 24320                           postinc2	equ	0xFDE
 24321                           postdec2	equ	0xFDD
 24322                           fsr2h	equ	0xFDA
 24323                           fsr2l	equ	0xFD9
 24324                           status	equ	0xFD8
 24325                           
 24326 ;; *************** function i2_I2C_Master_Wait *****************
 24327 ;; Defined at:
 24328 ;;		line 26 in file "I2C.c"
 24329 ;; Parameters:    Size  Location     Type
 24330 ;;		None
 24331 ;; Auto vars:     Size  Location     Type
 24332 ;;		None
 24333 ;; Return value:  Size  Location     Type
 24334 ;;                  1    wreg      void 
 24335 ;; Registers used:
 24336 ;;		wreg, status,2, status,0
 24337 ;; Tracked objects:
 24338 ;;		On entry : 0/0
 24339 ;;		On exit  : 0/0
 24340 ;;		Unchanged: 0/0
 24341 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24342 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24343 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24344 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24345 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24346 ;;Total ram usage:        1 bytes
 24347 ;; Hardware stack levels used:    1
 24348 ;; This function calls:
 24349 ;;		Nothing
 24350 ;; This function is called by:
 24351 ;;		i2_I2C_Master_Start
 24352 ;;		i2_I2C_Master_Stop
 24353 ;;		i2_I2C_Master_Write
 24354 ;;		i2_I2C_Master_Read
 24355 ;; This function uses a non-reentrant model
 24356 ;;
 24357                           
 24358                           	psect	text95
 24359  0054C2                     __ptext95:
 24360                           	opt stack 0
 24361  0054C2                     i2_I2C_Master_Wait:
 24362                           	opt stack 19
 24363  0054C2                     i2l66:
 24364  0054C2  B4C7               	btfsc	4039,2,c	;volatile
 24365  0054C4  D7FE               	goto	i2l66
 24366  0054C6  CFC5 F001          	movff	4037,??i2_I2C_Master_Wait	;volatile
 24367  0054CA  0E1F               	movlw	31
 24368  0054CC  1601               	andwf	??i2_I2C_Master_Wait,f,c
 24369  0054CE  B4D8               	btfsc	status,2,c
 24370  0054D0  0012               	return	
 24371  0054D2  D7F7               	goto	i2l66
 24372  0054D4                     __end_ofi2_I2C_Master_Wait:
 24373                           	opt stack 0
 24374                           pclatu	equ	0xFFB
 24375                           pclath	equ	0xFFA
 24376                           tblptru	equ	0xFF8
 24377                           tblptrh	equ	0xFF7
 24378                           tblptrl	equ	0xFF6
 24379                           tablat	equ	0xFF5
 24380                           prodh	equ	0xFF4
 24381                           prodl	equ	0xFF3
 24382                           intcon	equ	0xFF2
 24383                           intcon2	equ	0xFF1
 24384                           intcon3	equ	0xFF0
 24385                           indf0	equ	0xFEF
 24386                           postinc0	equ	0xFEE
 24387                           fsr0h	equ	0xFEA
 24388                           fsr0l	equ	0xFE9
 24389                           wreg	equ	0xFE8
 24390                           postdec1	equ	0xFE5
 24391                           fsr1h	equ	0xFE2
 24392                           fsr1l	equ	0xFE1
 24393                           indf2	equ	0xFDF
 24394                           postinc2	equ	0xFDE
 24395                           postdec2	equ	0xFDD
 24396                           fsr2h	equ	0xFDA
 24397                           fsr2l	equ	0xFD9
 24398                           status	equ	0xFD8
 24399                           
 24400 ;; *************** function i2_delay_ms *****************
 24401 ;; Defined at:
 24402 ;;		line 632 in file "sort.c"
 24403 ;; Parameters:    Size  Location     Type
 24404 ;;  milliseconds    1    wreg     unsigned char 
 24405 ;; Auto vars:     Size  Location     Type
 24406 ;;  milliseconds    1    1[COMRAM] unsigned char 
 24407 ;; Return value:  Size  Location     Type
 24408 ;;                  1    wreg      void 
 24409 ;; Registers used:
 24410 ;;		wreg, status,2, status,0, cstack
 24411 ;; Tracked objects:
 24412 ;;		On entry : 0/0
 24413 ;;		On exit  : 0/0
 24414 ;;		Unchanged: 0/0
 24415 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24416 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24417 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24418 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24419 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24420 ;;Total ram usage:        2 bytes
 24421 ;; Hardware stack levels used:    1
 24422 ;; This function calls:
 24423 ;;		Nothing
 24424 ;; This function is called by:
 24425 ;;		_printSortTimer
 24426 ;; This function uses a non-reentrant model
 24427 ;;
 24428                           
 24429                           	psect	text96
 24430  005464                     __ptext96:
 24431                           	opt stack 0
 24432  005464                     i2_delay_ms:
 24433                           	opt stack 22
 24434                           
 24435                           ;incstack = 0
 24436                           ;i2delay_ms@milliseconds stored from wreg
 24437  005464  6E02               	movwf	i2delay_ms@milliseconds,c
 24438                           
 24439                           ;sort.c: 633: while(milliseconds > 0)
 24440  005466  D008               	goto	i2l8762
 24441  005468                     i2l8758:
 24442                           
 24443                           ;sort.c: 634: {
 24444                           ;sort.c: 635: milliseconds--;
 24445  005468  0602               	decf	i2delay_ms@milliseconds,f,c
 24446                           
 24447                           ;sort.c: 636: _delay((unsigned long)((990)*(32000000/4000000.0)));
 24448  00546A  0E0B               	movlw	11
 24449  00546C  6E01               	movwf	??i2_delay_ms& (0+255),c
 24450  00546E  0E48               	movlw	72
 24451  005470                     i2u1067_47:
 24452  005470  2EE8               	decfsz	wreg,f,c
 24453  005472  D7FE               	bra	i2u1067_47
 24454  005474  2E01               	decfsz	??i2_delay_ms& (0+255),f,c
 24455  005476  D7FC               	bra	i2u1067_47
 24456  005478                     i2l8762:
 24457  005478  5002               	movf	i2delay_ms@milliseconds,w,c
 24458  00547A  B4D8               	btfsc	status,2,c
 24459  00547C  0012               	return	
 24460  00547E  D7F4               	goto	i2l8758
 24461  005480                     __end_ofi2_delay_ms:
 24462                           	opt stack 0
 24463                           pclatu	equ	0xFFB
 24464                           pclath	equ	0xFFA
 24465                           tblptru	equ	0xFF8
 24466                           tblptrh	equ	0xFF7
 24467                           tblptrl	equ	0xFF6
 24468                           tablat	equ	0xFF5
 24469                           prodh	equ	0xFF4
 24470                           prodl	equ	0xFF3
 24471                           intcon	equ	0xFF2
 24472                           intcon2	equ	0xFF1
 24473                           intcon3	equ	0xFF0
 24474                           indf0	equ	0xFEF
 24475                           postinc0	equ	0xFEE
 24476                           fsr0h	equ	0xFEA
 24477                           fsr0l	equ	0xFE9
 24478                           wreg	equ	0xFE8
 24479                           postdec1	equ	0xFE5
 24480                           fsr1h	equ	0xFE2
 24481                           fsr1l	equ	0xFE1
 24482                           indf2	equ	0xFDF
 24483                           postinc2	equ	0xFDE
 24484                           postdec2	equ	0xFDD
 24485                           fsr2h	equ	0xFDA
 24486                           fsr2l	equ	0xFD9
 24487                           status	equ	0xFD8
 24488                           pclatu	equ	0xFFB
 24489                           pclath	equ	0xFFA
 24490                           tblptru	equ	0xFF8
 24491                           tblptrh	equ	0xFF7
 24492                           tblptrl	equ	0xFF6
 24493                           tablat	equ	0xFF5
 24494                           prodh	equ	0xFF4
 24495                           prodl	equ	0xFF3
 24496                           intcon	equ	0xFF2
 24497                           intcon2	equ	0xFF1
 24498                           intcon3	equ	0xFF0
 24499                           indf0	equ	0xFEF
 24500                           postinc0	equ	0xFEE
 24501                           fsr0h	equ	0xFEA
 24502                           fsr0l	equ	0xFE9
 24503                           wreg	equ	0xFE8
 24504                           postdec1	equ	0xFE5
 24505                           fsr1h	equ	0xFE2
 24506                           fsr1l	equ	0xFE1
 24507                           indf2	equ	0xFDF
 24508                           postinc2	equ	0xFDE
 24509                           postdec2	equ	0xFDD
 24510                           fsr2h	equ	0xFDA
 24511                           fsr2l	equ	0xFD9
 24512                           status	equ	0xFD8
 24513                           
 24514                           	psect	rparam
 24515  0000                     pclatu	equ	0xFFB
 24516                           pclath	equ	0xFFA
 24517                           tblptru	equ	0xFF8
 24518                           tblptrh	equ	0xFF7
 24519                           tblptrl	equ	0xFF6
 24520                           tablat	equ	0xFF5
 24521                           prodh	equ	0xFF4
 24522                           prodl	equ	0xFF3
 24523                           intcon	equ	0xFF2
 24524                           intcon2	equ	0xFF1
 24525                           intcon3	equ	0xFF0
 24526                           indf0	equ	0xFEF
 24527                           postinc0	equ	0xFEE
 24528                           fsr0h	equ	0xFEA
 24529                           fsr0l	equ	0xFE9
 24530                           wreg	equ	0xFE8
 24531                           postdec1	equ	0xFE5
 24532                           fsr1h	equ	0xFE2
 24533                           fsr1l	equ	0xFE1
 24534                           indf2	equ	0xFDF
 24535                           postinc2	equ	0xFDE
 24536                           postdec2	equ	0xFDD
 24537                           fsr2h	equ	0xFDA
 24538                           fsr2l	equ	0xFD9
 24539                           status	equ	0xFD8
 24540                           
 24541                           	psect	temp
 24542  00007E                     btemp:
 24543                           	opt stack 0
 24544  00007E                     	ds	1
 24545  0000                     int$flags	set	btemp
 24546                           pclatu	equ	0xFFB
 24547                           pclath	equ	0xFFA
 24548                           tblptru	equ	0xFF8
 24549                           tblptrh	equ	0xFF7
 24550                           tblptrl	equ	0xFF6
 24551                           tablat	equ	0xFF5
 24552                           prodh	equ	0xFF4
 24553                           prodl	equ	0xFF3
 24554                           intcon	equ	0xFF2
 24555                           intcon2	equ	0xFF1
 24556                           intcon3	equ	0xFF0
 24557                           indf0	equ	0xFEF
 24558                           postinc0	equ	0xFEE
 24559                           fsr0h	equ	0xFEA
 24560                           fsr0l	equ	0xFE9
 24561                           wreg	equ	0xFE8
 24562                           postdec1	equ	0xFE5
 24563                           fsr1h	equ	0xFE2
 24564                           fsr1l	equ	0xFE1
 24565                           indf2	equ	0xFDF
 24566                           postinc2	equ	0xFDE
 24567                           postdec2	equ	0xFDD
 24568                           fsr2h	equ	0xFDA
 24569                           fsr2l	equ	0xFD9
 24570                           status	equ	0xFD8


Data Sizes:
    Strings     1326
    Constant    27
    Data        8
    BSS         144
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     90     125
    BANK0           128     90     128
    BANK1           256      0      79
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    strcpy@from	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_62(CODE[4]), STR_61(CODE[4]), STR_60(CODE[4]), STR_59(CODE[4]), 
		 -> STR_58(CODE[4]), STR_57(CODE[4]), STR_56(CODE[4]), STR_55(CODE[4]), 
		 -> STR_54(CODE[4]), STR_53(CODE[4]), STR_52(CODE[4]), STR_51(CODE[4]), 
		 -> STR_20(CODE[4]), STR_19(CODE[4]), STR_18(CODE[4]), STR_17(CODE[4]), 
		 -> STR_16(CODE[4]), STR_15(CODE[4]), STR_14(CODE[4]), STR_13(CODE[4]), 
		 -> STR_12(CODE[4]), STR_11(CODE[4]), STR_10(CODE[4]), STR_9(CODE[4]), 
		 -> STR_8(CODE[4]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 

    printf@cp	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_126(CODE[7]), count_total(BANK0[2]), printRTC@month(BANK0[4]), UI@month(BANK0[4]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 24
		 -> STR_125(CODE[17]), STR_124(CODE[17]), STR_123(CODE[18]), STR_122(CODE[18]), 
		 -> STR_121(CODE[18]), STR_120(CODE[18]), STR_119(CODE[18]), STR_118(CODE[18]), 
		 -> STR_117(CODE[17]), STR_116(CODE[17]), STR_115(CODE[17]), STR_114(CODE[17]), 
		 -> STR_113(CODE[17]), STR_112(CODE[17]), STR_111(CODE[18]), STR_110(CODE[17]), 
		 -> STR_109(CODE[15]), STR_108(CODE[15]), STR_107(CODE[15]), STR_106(CODE[17]), 
		 -> STR_105(CODE[17]), STR_104(CODE[17]), STR_103(CODE[16]), STR_102(CODE[17]), 
		 -> STR_101(CODE[17]), STR_100(CODE[17]), STR_99(CODE[17]), STR_98(CODE[17]), 
		 -> STR_97(CODE[17]), STR_96(CODE[15]), STR_95(CODE[11]), STR_94(CODE[17]), 
		 -> STR_93(CODE[11]), STR_92(CODE[17]), STR_91(CODE[14]), STR_90(CODE[15]), 
		 -> STR_89(CODE[14]), STR_88(CODE[10]), STR_87(CODE[9]), STR_86(CODE[9]), 
		 -> STR_85(CODE[10]), STR_84(CODE[10]), STR_83(CODE[16]), STR_82(CODE[15]), 
		 -> STR_81(CODE[3]), STR_80(CODE[15]), STR_79(CODE[13]), STR_78(CODE[14]), 
		 -> STR_77(CODE[8]), STR_76(CODE[14]), STR_75(CODE[15]), STR_74(CODE[12]), 
		 -> STR_73(CODE[14]), STR_72(CODE[17]), STR_71(CODE[14]), STR_70(CODE[15]), 
		 -> STR_69(CODE[17]), STR_68(CODE[17]), STR_67(CODE[7]), STR_66(CODE[21]), 
		 -> STR_65(CODE[13]), STR_64(CODE[11]), STR_63(CODE[24]), STR_50(CODE[17]), 
		 -> STR_49(CODE[17]), STR_48(CODE[17]), STR_47(CODE[17]), STR_46(CODE[17]), 
		 -> STR_45(CODE[17]), STR_44(CODE[17]), STR_43(CODE[17]), STR_42(CODE[17]), 
		 -> STR_41(CODE[17]), STR_40(CODE[17]), STR_39(CODE[17]), STR_38(CODE[17]), 
		 -> STR_37(CODE[17]), STR_36(CODE[17]), STR_35(CODE[17]), STR_34(CODE[17]), 
		 -> STR_33(CODE[17]), STR_32(CODE[17]), STR_31(CODE[17]), STR_30(CODE[17]), 
		 -> STR_29(CODE[3]), STR_28(CODE[17]), STR_27(CODE[17]), STR_26(CODE[17]), 
		 -> STR_25(CODE[17]), STR_24(CODE[17]), STR_23(CODE[14]), STR_22(CODE[10]), 
		 -> STR_21(CODE[24]), STR_7(CODE[7]), STR_6(CODE[17]), STR_5(CODE[18]), 
		 -> STR_4(CODE[16]), STR_3(CODE[18]), STR_2(CODE[14]), STR_1(CODE[18]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i2_printf(COMRAM[2]), ?_printf(BANK0[2]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _handler in COMRAM

    _handler->_printSortTimer
    _updateServoStates->i2_updateServoPosition
    i2_change_state_to_menu_start->i2_printRTC
    i2_printRTC->i2_printf
    i2_change_state_to_menu_22->i2_printf
    i2_change_state_to_menu_12->i2_printf
    _change_state_to_menu_23->i2_printf
    _change_state_to_menu_11->i2_printf
    _change_state_to_logs_34->i2_printf
    _change_state_to_logs_33->i2_printf
    _change_state_to_logs_23->i2_printf
    _change_state_to_logs_22->i2_printf
    _change_state_to_logs_12->i2_printf
    _change_state_to_logs_11->i2_printf
    _dispLogs->_retrieveLog
    _retrieveLog->i2___wmul
    _printSortTimer->i2_printf
    i2_printf->i2___lwdiv
    i2_putch->i2_lcdNibble
    i2___lwdiv->i2___lwmod
    i2_lcdInst->i2_lcdNibble
    i2_getRTC->i2_I2C_Master_Read
    i2_getRTC->i2_I2C_Master_Write
    i2_I2C_Master_Write->i2_I2C_Master_Wait
    i2_I2C_Master_Stop->i2_I2C_Master_Wait
    i2_I2C_Master_Start->i2_I2C_Master_Wait
    i2_I2C_Master_Read->i2_I2C_Master_Wait

Critical Paths under _main in BANK0

    _main->_UI
    _sort->_Loading
    _Loading->_EEPROM_write
    _initSortTimer->_getRTC
    _getMAG->_readMAG
    _getIR->_readIR
    _readIR->_readADC
    _ID->_delay_ms
    _Distribution->_updateServoPosition
    _logRun->_EEPROM_write
    _EEPROM_write->_printf
    _loadRTC->_I2C_Master_Init
    _I2C_Master_Init->___lldiv
    _change_state_to_menu_start->_printRTC
    _initLCD->_lcdInst
    _UI->_printRTC
    _printRTC->_printf
    _getRTC->_I2C_Master_Read
    _getRTC->_I2C_Master_Write
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Read->_I2C_Master_Wait
    _change_state_to_menu_22->_printf
    _change_state_to_menu_12->_printf
    ___awdiv->___awmod
    _Test->_actuatorTest
    _sensorTest->_printf
    _readMAG->_readADC
    _arm->_printf
    _algorithmTest->_printf
    _actuatorTest->_printf
    _SpeedTest->_printf
    _PortTestDC->_printf
    _PlatformTest->_printf
    _BothServos->_printf
    _initServos->_updateServoPosition
    _BlockerTest->_printf
    _printf->___awdiv
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _lcdInst->_lcdNibble

Critical Paths under _handler in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _handler in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _handler in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _handler in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _handler in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _handler in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _handler in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _handler in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _handler in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _handler in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _handler in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _handler in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _handler in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _handler in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _handler in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _handler in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  219834
                    _I2C_Master_Init
                               _Test
                                 _UI
                            _initLCD
                           _initTime
                             _initUI
                             _logRun
                      _machineConfig
                               _sort
                        _stopSignals
 ---------------------------------------------------------------------------------
 (1) _sort                                                 0     0      0   22783
                       _Distribution
                                 _ID
                            _Loading
 ---------------------------------------------------------------------------------
 (2) _Loading                                             19    19      0   17463
                                             49 BANK0     19    19      0
                        _EEPROM_read
                       _EEPROM_write
                           _delay_ms
                              _getIR
                             _getMAG
                     _initGlobalVars
                         _initServos
                      _initSortTimer
                            _lcdInst
                             _readIR
 ---------------------------------------------------------------------------------
 (3) _initSortTimer                                        5     5      0     631
                                              5 BANK0      5     5      0
                             _getRTC
 ---------------------------------------------------------------------------------
 (3) _initGlobalVars                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _getMAG                                               2     2      0      45
                                              6 BANK0      2     2      0
                            _readMAG
 ---------------------------------------------------------------------------------
 (3) _getIR                                                3     3      0      91
                                              6 BANK0      3     3      0
                             _readIR
 ---------------------------------------------------------------------------------
 (3) _readIR                                               4     4      0      45
                                              2 BANK0      4     4      0
                            _readADC
 ---------------------------------------------------------------------------------
 (2) _ID                                                   8     8      0     183
                                              2 BANK0      8     8      0
                           _delay_ms
 ---------------------------------------------------------------------------------
 (3) _delay_ms                                             2     2      0      23
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _Distribution                                         2     2      0    5137
                                              8 BANK0      2     2      0
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (1) _machineConfig                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _logRun                                              10    10      0   11286
                                             49 BANK0     10    10      0
                        _EEPROM_read
                       _EEPROM_write
 ---------------------------------------------------------------------------------
 (3) _EEPROM_write                                         6     3      3   10539
                                             43 BANK0      6     3      3
                        _EEPROM_read
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (4) _EEPROM_read                                          2     0      2     426
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _initUI                                               0     0      0   22968
         _change_state_to_menu_start
                            _loadRTC
 ---------------------------------------------------------------------------------
 (2) _loadRTC                                              3     3      0     914
                                             21 BANK0      3     3      0
                    _I2C_Master_Init
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Init                                      8     4      4     440
                                             13 BANK0      8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     290
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_start                           0     0      0   22054
                            _lcdInst
                           _printRTC
                             _printf
 ---------------------------------------------------------------------------------
 (1) _initTime                                             7     1      6     538
                                              0 BANK0      7     1      6
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     135
                                              3 BANK0      1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _UI                                                  24    24      0   45688
                                             68 BANK0     22    22      0
                            ___awdiv
                            ___awmod
            _change_state_to_menu_12
            _change_state_to_menu_22
                            _lcdInst
                           _printRTC
                             _printf
                             _strcpy
 ---------------------------------------------------------------------------------
 (3) _printRTC                                            25    25      0   13211
                                             43 BANK0     25    25      0
                             _getRTC
                            _lcdInst
                             _printf
                             _strcpy
 ---------------------------------------------------------------------------------
 (4) _strcpy                                               6     2      4    3275
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) _getRTC                                               2     2      0     519
                                              3 BANK0      2     2      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Write                                     2     0      2     406
                                              1 BANK0      2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Read                                      2     2      0      45
                                              1 BANK0      2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (6) _I2C_Master_Wait                                      1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_22                              0     0      0    8843
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_12                              0     0      0    8843
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4    1064
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     556
                                              6 BANK0      8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (1) _Test                                                 2     2      0  115996
                                             70 BANK0      2     2      0
                        _BlockerTest
                         _BothServos
                         _EEPROMTest
                       _PlatformTest
                         _PortTestDC
                          _SpeedTest
                       _actuatorTest
                      _algorithmTest
                                _arm
                            _lcdInst
                             _printf
                         _sensorTest
 ---------------------------------------------------------------------------------
 (2) _sensorTest                                           4     4      0    8955
                                             43 BANK0      4     4      0
                            _lcdInst
                             _printf
                            _readADC
                            _readMAG
 ---------------------------------------------------------------------------------
 (4) _readMAG                                              4     4      0      45
                                              2 BANK0      4     4      0
                            _readADC
 ---------------------------------------------------------------------------------
 (2) _arm                                                  3     3      0   14049
                                             43 BANK0      3     3      0
                         _initServos
                            _lcdInst
                             _printf
                        _stopSignals
 ---------------------------------------------------------------------------------
 (2) _algorithmTest                                        2     2      0    8843
                                             43 BANK0      2     2      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _actuatorTest                                        27    27      0   15223
                                             43 BANK0     27    27      0
                            _lcdInst
                             _printf
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (2) _SpeedTest                                            1     1      0    8843
                                             43 BANK0      1     1      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _PortTestDC                                           1     1      0    8843
                                             43 BANK0      1     1      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _PlatformTest                                        12    12      0   14253
                                             43 BANK0     12    12      0
                         _initServos
                            _lcdInst
                             _printf
                            _readADC
                        _stopSignals
 ---------------------------------------------------------------------------------
 (1) _stopSignals                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _readADC                                              2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _EEPROMTest                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _BothServos                                           2     2      0   19117
                                             43 BANK0      2     2      0
                         _initServos
                            _lcdInst
                             _printf
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (3) _initServos                                           1     1      0    5137
                                              8 BANK0      1     1      0
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (4) _updateServoPosition                                  8     4      4    5137
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (2) _BlockerTest                                          7     7      0    9027
                                             43 BANK0      7     7      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (4) _printf                                              33    21     12    8708
                                             14 BANK0     29    17     12
                            ___awdiv (ARG)
                            ___awmod (ARG)
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0     135
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (5) _isdigit                                              3     3      0      68
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4     669
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (5) ___lwmod                                              5     1      4     515
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (5) ___lwdiv                                              7     3      4     366
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (3) _lcdInst                                              1     1      0     135
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNibble                                            2     2      0     113
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _handler                                             16    16      0   83967
                                             74 COMRAM    16    16      0
                     _printSortTimer
                     _updateArmState
                         _updateMenu
                  _updateServoStates
       i2_change_state_to_menu_start
 ---------------------------------------------------------------------------------
 (8) _updateServoStates                                    2     2      0     593
                                              8 COMRAM     2     2      0
              i2_updateServoPosition
 ---------------------------------------------------------------------------------
 (9) i2_updateServoPosition                                8     4      4     593
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (8) _updateMenu                                           2     2      0   70855
                                             66 COMRAM     2     2      0
            _change_state_to_logs_11
            _change_state_to_logs_12
            _change_state_to_logs_22
            _change_state_to_logs_23
            _change_state_to_logs_33
            _change_state_to_logs_34
            _change_state_to_menu_11
            _change_state_to_menu_23
                           _dispLogs
                       _inputHandler
          i2_change_state_to_menu_12
          i2_change_state_to_menu_22
       i2_change_state_to_menu_start
 ---------------------------------------------------------------------------------
 (8) i2_change_state_to_menu_start                         0     0      0    7640
                          i2_lcdInst
                         i2_printRTC
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) i2_printRTC                                          25    25      0    4553
                                             41 COMRAM    25    25      0
                           i2_getRTC
                          i2_lcdInst
                           i2_printf
                           i2_strcpy
 ---------------------------------------------------------------------------------
 (10) i2_strcpy                                            6     2      4     699
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (9) _inputHandler                                         4     2      2   30870
                                             41 COMRAM     4     2      2
            _change_state_to_logs_11
            _change_state_to_logs_12
            _change_state_to_logs_22
            _change_state_to_logs_23
            _change_state_to_logs_33
            _change_state_to_logs_34
            _change_state_to_menu_11
            _change_state_to_menu_23
          i2_change_state_to_menu_12
          i2_change_state_to_menu_22
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_22                            0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_12                            0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_menu_23                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_menu_11                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_34                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_33                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_23                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_22                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_12                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_11                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) _dispLogs                                             2     0      2    1475
                                             17 COMRAM     2     0      2
                        _retrieveLog
 ---------------------------------------------------------------------------------
 (10) _retrieveLog                                        11     9      2    1047
                                              6 COMRAM    11     9      2
                      i2_EEPROM_read
                           i2___wmul
 ---------------------------------------------------------------------------------
 (11) i2_EEPROM_read                                       2     0      2     174
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (8) _updateArmState                                       2     2      0       0
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (8) _printSortTimer                                      33    33      0    4879
                                             41 COMRAM    33    33      0
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                         i2_delay_ms
                           i2_getRTC
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) i2_printf                                            33    21     12    2952
                                             12 COMRAM    29    17     12
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                          i2_isdigit
                            i2_putch
 ---------------------------------------------------------------------------------
 (10) i2_putch                                             1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (10) i2_isdigit                                           3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (10) i2___wmul                                            6     2      4     469
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (10) i2___lwmod                                           5     1      4     367
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (10) i2___lwdiv                                           7     3      4     266
                                              5 COMRAM     7     3      4
                          i2___lwmod (ARG)
 ---------------------------------------------------------------------------------
 (10) i2_lcdInst                                           1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (11) i2_lcdNibble                                         2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (10) i2_getRTC                                            2     2      0     213
                                              3 COMRAM     2     2      0
                  i2_I2C_Master_Read
                 i2_I2C_Master_Start
                  i2_I2C_Master_Stop
                 i2_I2C_Master_Write
 ---------------------------------------------------------------------------------
 (11) i2_I2C_Master_Write                                  2     0      2     100
                                              1 COMRAM     2     0      2
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (11) i2_I2C_Master_Stop                                   0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (11) i2_I2C_Master_Start                                  0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (11) i2_I2C_Master_Read                                   2     2      0      45
                                              1 COMRAM     2     2      0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Wait                                   1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (9) i2_delay_ms                                           2     2      0      23
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_Master_Init
     ___lldiv
   _Test
     _BlockerTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _BothServos
       _initServos
         _updateServoPosition
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _updateServoPosition
     _EEPROMTest
     _PlatformTest
       _initServos
         _updateServoPosition
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _readADC
       _stopSignals
     _PortTestDC
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _SpeedTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _actuatorTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _updateServoPosition
     _algorithmTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _arm
       _initServos
         _updateServoPosition
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _stopSignals
     _lcdInst
       _lcdNibble
     _printf
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___lwdiv (ARG)
       ___lwmod (ARG)
         ___lwdiv (ARG)
       ___wmul (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNibble
     _sensorTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _readADC
       _readMAG
         _readADC
   _UI
     ___awdiv
       ___awmod (ARG)
     ___awmod
     _change_state_to_menu_12
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _change_state_to_menu_22
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _lcdInst
       _lcdNibble
     _printRTC
       _getRTC
         _I2C_Master_Read
           _I2C_Master_Wait
         _I2C_Master_Start
           _I2C_Master_Wait
         _I2C_Master_Stop
           _I2C_Master_Wait
         _I2C_Master_Write
           _I2C_Master_Wait
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _strcpy
     _printf
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___lwdiv (ARG)
       ___lwmod (ARG)
         ___lwdiv (ARG)
       ___wmul (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNibble
     _strcpy
   _initLCD
     _lcdInst
       _lcdNibble
   _initTime
   _initUI
     _change_state_to_menu_start
       _lcdInst
         _lcdNibble
       _printRTC
         _getRTC
           _I2C_Master_Read
             _I2C_Master_Wait
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
         _lcdInst
           _lcdNibble
         _printf
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
           _isdigit (ARG)
           _putch (ARG)
             _lcdNibble
         _strcpy
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _loadRTC
       _I2C_Master_Init
         ___lldiv
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
   _logRun
     _EEPROM_read
     _EEPROM_write
       _EEPROM_read
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
   _machineConfig
   _sort
     _Distribution
       _updateServoPosition
     _ID
       _delay_ms
     _Loading
       _EEPROM_read
       _EEPROM_write
         _EEPROM_read
         _lcdInst
           _lcdNibble
         _printf
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
           _isdigit (ARG)
           _putch (ARG)
             _lcdNibble
       _delay_ms
       _getIR
         _readIR
           _readADC
       _getMAG
         _readMAG
           _readADC
       _initGlobalVars
       _initServos
         _updateServoPosition
       _initSortTimer
         _getRTC
           _I2C_Master_Read
             _I2C_Master_Wait
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
       _lcdInst
         _lcdNibble
       _readIR
         _readADC
   _stopSignals

 _handler (ROOT)
   _printSortTimer
     i2___lwdiv
       i2___lwmod (ARG)
     i2___lwmod
     i2___wmul
     i2_delay_ms
     i2_getRTC
       i2_I2C_Master_Read
         i2_I2C_Master_Wait
       i2_I2C_Master_Start
         i2_I2C_Master_Wait
       i2_I2C_Master_Stop
         i2_I2C_Master_Wait
       i2_I2C_Master_Write
         i2_I2C_Master_Wait
     i2_lcdInst
       i2_lcdNibble
     i2_printf
       i2___lwdiv
         i2___lwmod (ARG)
       i2___lwmod
       i2___wmul
       i2_isdigit
       i2_putch
         i2_lcdNibble
   _updateArmState
   _updateMenu
     _change_state_to_logs_11
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_12
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_22
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_23
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_33
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_34
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_menu_11
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_menu_23
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _dispLogs
       _retrieveLog
         i2_EEPROM_read
         i2___wmul
     _inputHandler
       _change_state_to_logs_11
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_12
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_22
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_23
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_33
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_34
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_menu_11
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_menu_23
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       i2_change_state_to_menu_12
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       i2_change_state_to_menu_22
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
     i2_change_state_to_menu_12
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     i2_change_state_to_menu_22
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     i2_change_state_to_menu_start
       i2_lcdInst
         i2_lcdNibble
       i2_printRTC
         i2_getRTC
           i2_I2C_Master_Read
             i2_I2C_Master_Wait
           i2_I2C_Master_Start
             i2_I2C_Master_Wait
           i2_I2C_Master_Stop
             i2_I2C_Master_Wait
           i2_I2C_Master_Write
             i2_I2C_Master_Wait
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
         i2_strcpy
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
   _updateServoStates
     i2_updateServoPosition
   i2_change_state_to_menu_start
     i2_lcdInst
       i2_lcdNibble
     i2_printRTC
       i2_getRTC
         i2_I2C_Master_Read
           i2_I2C_Master_Wait
         i2_I2C_Master_Start
           i2_I2C_Master_Wait
         i2_I2C_Master_Stop
           i2_I2C_Master_Wait
         i2_I2C_Master_Write
           i2_I2C_Master_Wait
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
       i2_strcpy
     i2_printf
       i2___lwdiv
         i2___lwmod (ARG)
       i2___lwmod
       i2___wmul
       i2_isdigit
       i2_putch
         i2_lcdNibble

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      4F       7       30.9%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     5A      80       5      100.0%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     5A      7D       1       99.2%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     14C      34        0.0%
DATA                 0      0     14C       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Sat Apr 08 15:09:31 2017

                                    _i 013D                     i2_I2C_Master_Start 5540  
                   i2_I2C_Master_Write 5516                                     l66 54AE  
                                   _ID 2F68                       _f_panning_to_bin 0061  
                          __CFG_CPD$ON 000000                                     _UI 0012  
                         ___awdiv@sign 008B                                     _up 0075  
                  ___wmul@multiplicand 0082                     i2___lwdiv@dividend 0006  
                          __CFG_BORV$3 000000                     EEPROM_read@address 0080  
                         __CFG_CP0$OFF 000000                           __CFG_CP1$OFF 000000  
                         __CFG_CP2$OFF 000000                           __CFG_CP3$OFF 000000  
               __end_of_updateArmState 4F28                                    ID@i 0084  
                                  ?_ID 0001                                    ?_UI 0001  
                                  UI@i 00C8                                    l180 00E2  
                                  l183 00E6                                    l188 0102  
                                  l801 15E2                                    l618 27EC  
                                  l810 155A                                    l811 156E  
                                  l812 1582                                    l813 1598  
                                  l831 30DC                                    l807 1534  
                                  l832 30F6                                    l833 3134  
                                  l817 162E                                    l809 1546  
                                  l834 311A                                    l499 42E4  
                                  l838 31CC                                    l774 125E  
                                  l792 13F6                                    l784 1322  
                                  l890 47E4                                    l795 1430  
                                  l787 135C                           __CFG_CPB$OFF 000000  
                                  _PR2 000FCB                                    _PEN 007E2A  
                                  _SEN 007E28                    ?i2_I2C_Master_Start 0001  
            __end_of_updateServoStates 39B6                         ?_machineConfig 0001  
                  ?i2_I2C_Master_Write 0002                                    _arm 3EA4  
                                  _log 00F4                                    _sel 00FD  
                                  _var 0145                           ___awmod@sign 0085  
                                  wreg 000FE8                    i2printRTC@RTC_month 003B  
                  __end_of_BlockerTest 3B3A                    _log_count_can_w_lab 0141  
                           i2_delay_ms 5464        __end_of_change_state_to_menu_11 5158  
      __end_of_change_state_to_menu_12 4F98        __end_of_change_state_to_menu_22 4F60  
      __end_of_change_state_to_menu_23 5128           _f_can_coming_to_distribution 0133  
                       ??_Distribution 0088        __end_of_change_state_to_logs_11 5248  
      __end_of_change_state_to_logs_12 5218        __end_of_change_state_to_logs_22 51E8  
      __end_of_change_state_to_logs_23 52A4        __end_of_change_state_to_logs_33 51B8  
      __end_of_change_state_to_logs_34 5188                                   ??_ID 0082  
                                 ??_UI 00C4                           __CFG_LVP$OFF 000000  
                         __CFG_WDT$OFF 000000                                   l1200 3DE4  
                                 l1105 3C68                                   l1203 3E04  
                                 l1223 41CE                                   l1312 111C  
                                 l1232 21CA                                   l1226 41D2  
                                 l1331 4CD0                                   l1307 1046  
                                 l1235 21CE                                   l1083 3FC8  
                                 l1412 3AD8                                   l1413 3AF2  
                                 l1325 4CC0                                   l1261 0944  
                                 l1270 0B04                                   l1407 3A8C  
                                 l1271 0B52                                   l1096 5490  
                                 l1361 271C                                   l1265 09EA  
                                 l1346 2722                                   l1258 0940  
                                 l1355 2694                                   l1427 3F98  
                                 l1268 0A50                                   l1436 3F92  
                                 l1428 3F5A                                   l1269 0A9E  
                                 l1470 1882                                   l1390 487A  
                                 l1359 26EE                                   l1383 486A  
                                 l1295 0EAC                                   ?_arm 0001  
                                 l1917 4990                                   l1927 4C12  
                                 l1864 4530                                   l7000 4550  
                                 l7010 45DC                                   l7100 49A8  
                                 l7004 4566                                   l6310 4BE0  
                                 l6230 52F6                                   l7120 4A00  
                                 l7104 49BE                                   l6314 4C04  
                                 l6306 4BCE                                   l8002 0BD8  
                                 l7050 403E                                   l6308 4BDA  
                                 l6228 52E4                                   l8012 0C00  
                                 l6252 526E                                   l7212 46E6  
                                 l7116 49E8                                   l6270 531C  
                                 l6510 1916                                   l6422 164A  
                                 l8110 0E00                                   l8102 0DDE  
                                 l8006 0BF0                                   l7062 4076  
                                 l7046 4034                                   l7054 4056  
                                 l6520 1970                                   l6432 167A  
                                 l8200 0FC2                                   l8120 0E28  
                                 l8112 0E06                                   l8032 0C74  
                                 l8024 0C52                                   l8016 0C18  
                                 l8008 0BF6                                   l7208 46D0  
                                 l7072 5342                                   l6290 4952  
                                 l6522 197A                                   l6426 165E  
                                 l8106 0DE8                                   l8050 0CD6  
                                 l8042 0C9C                                   l8034 0C7A  
                                 l6610 44B4                                   l7218 4712  
                                 l7058 406C                                   l6540 19D6  
                                 l6516 1938                                   l6428 1670  
                                 l8212 1006                                   l8132 0E6C  
                                 l8116 0E10                                   l8060 0CFE  
                                 l8028 0C5C                                   l9100 0870  
                                 l9020 0700                                   l6612 44C4  
                                 l7068 532C                                   l6286 4940  
                                 l6550 1A48                                   l6534 19B0  
                                 l6470 17FE                                   l6454 175C  
                                 l6446 172A                                   l6438 16AE  
                                 l8222 102E                                   l8142 0E94  
                                 l8054 0CE0                                   l8038 0C84  
                                 l9110 089A                                   l9030 072A  
                                 l6622 451E                                   l6614 44CA  
                                 _ADIE 007CEE                                   l6288 494C  
                                 l6536 19BC                                   l6544 19EA  
                                 l6528 1994                                   l6464 17D4  
                                 l6456 1768                                   l6480 1848  
                                 l6552 1A54                                   l8216 101E  
                                 l8208 0FFC                                   l8160 0EFE  
                                 l8136 0E84                                   l8128 0E62  
                                 l8080 0D64                                   l8064 0D08  
                                 l9104 0888                                   l9024 0718  
                                 l9016 06F6                                   l7424 121C  
                                 l6298 4982                                   l6546 19F0  
                                 l6474 182A                                   l6466 17E0  
                                 l6458 176E                                   l8250 10B8  
                                 l8242 1096                                   l8218 1024  
                                 l8170 0F26                                   l8138 0E8A  
                                 l8090 0D8C                                   l8058 0CF8  
                                 l9114 08A4                                   l9034 0734  
                                 l9122 08C8                                   l7506 13E0  
                                 l7450 12A2                                   l7434 1266  
                                 l6492 18BA                                   l6476 1842  
                                 l6468 17E6                                   l8260 10E0  
                                 l8252 10BE                                   l8164 0F16  
                                 l8156 0EF4                                   l8084 0D7C  
                                 l8076 0D5A                                   l8068 0D20  
                                 l8332 3F42                                   l8340 3F60  
                                 l6564 475A                                   l6556 4FA2  
                                 l9060 07BC                                   l7540 14AE  
                                 l7532 1470                                   l7516 1410  
                                 l8430 255C                                   l8246 10A0  
                                 l8190 0F9A                                   l8182 0F78  
                                 l8174 0F3E                                   l8166 0F1C  
                                 l8094 0DA4                                   l8086 0D82  
                                 l8342 3F7A                                   l8334 3F4C  
                                 l6574 4790                                   l6558 4FAE  
                                 l6830 2850                                   l9118 08BC  
                                 l9070 07E6                                   l9038 074C  
                                 l7606 1622                                   l7518 141A  
                                 l6496 18D4                                   l6592 47C8  
                                 l8440 25DE                                   l8256 10C8  
                                 l8192 0FA0                                   l8344 3F84  
                                 l8328 3F1C                                   l7800 221E  
                                 l6568 4770                                   l6840 28E6  
                                 l6832 286E                                   l6824 27F6  
                                 l9064 07D4                                   l9056 07B2  
                                 l7720 40A6                                   l7528 144A  
                                 l7608 1630                                   l7480 1346  
                                 l6498 18DA                                   l8418 24D4  
                                 l8282 1146                                   l8266 1106  
                                 l8186 0F82                                   l6842 2904  
                                 l6834 288C                                   l6826 2814  
                                 l6850 295E                                   l6818 276A  
                                 l9074 07F0                                   l7722 40C0  
                                 l7730 410E                                   l7706 318A  
                                 l7714 31CE                                   l7490 1376  
                                 l8604 3A2A                                   l8460 2656  
                                 l8452 2620                                   l8428 2556  
                                 l8292 116E                                   l8276 1136  
                                 l8196 0FAA                                   l9412 3DA0  
                                 l6844 2922                                   l6836 28AA  
                                 l6828 2832                                   l6852 29BC  
                                 l7724 40DA                                   l7732 413C  
                                 l7660 30A0                                   l7644 3058  
                                 l7556 1512                                   l7468 130C  
                                 l6598 4802                                   l8286 115E  
                                 l8278 113C                                   l7830 2326  
                                 l9430 3E10                                   l6846 2940  
                                 l6838 28C8                                   l9078 0808  
                                 l7726 40F4                                   l7670 30C6  
                                 l7662 30A2                                   l7558 151C  
                                 l7478 133C                                   l8632 3AB8  
                                 l8624 3A8E                                   l8608 3A5A  
                                 l8464 266A                                   l8296 1186  
                                 l8288 1164                                   l7912 09AE  
                                 l9440 3E2E                                   l9432 3E16  
                                 l8720 4662                                   l8712 462C  
                                 l8704 4608                                   l9096 0866  
                                 l7680 30FA                                   l7656 3090  
                                 l7648 3068                                   l8634 3AC2  
                                 l8626 3A9E                                   l8650 3B34  
                                 l8482 26D8                                   l8458 2640  
                                 l8394 48A2                                   l7922 09D6  
                                 l7914 09B4                                   l7818 22D6  
                                 l9442 3E34                                   l9434 3E1C  
                                 l9450 3E46                                   l8714 4638  
                                 l8810 0144                                   l8802 0128  
                                 l7682 3104                                   l7586 15A4  
                                 l7594 15EA                                   l8644 3AF4  
                                 l8468 267E                                   l7860 241A  
                                 l7836 2368                                   l9444 3E3A  
                                 l9436 3E22                                   l9428 3E0A  
                                 l9452 3E98                                   l8660 43E4  
                                 l8716 463E                                   l8724 4670  
                                 l8708 4618                                   l8900 02F2  
                                 l9372 3B86                                   l7588 15DA  
                                 l8646 3B04                                   l8478 26C4  
                                 l7918 09BE                                   l9446 3E40  
                                 l9438 3E28                                   l8910 0388  
                                 l8902 0310                                   l8814 015C  
                                 l8806 013A                                   l9374 3B9A  
                                 l7872 2462                                   l7856 23E4  
                                 l7848 23B4                                   l8672 4418  
                                 l8728 4684                                   l8920 041E  
                                 l8912 03A6                                   l8904 032E  
                                 l8832 01C2                                   l8674 4424  
                                 l8666 43FA                                   l8922 043C  
                                 l8914 03C4                                   l8906 034C  
                                 l8930 04DC                                   l8842 01EA  
                                 l8834 01C8                                   l8818 016E  
                                 l9650 42B6                                   l7868 242C  
                                 l8692 447C                                   l8684 445A  
                                 l8676 442A                                   l8924 045A  
                                 l8916 03E2                                   l8908 036A  
                                 l9652 42BC                                   l9644 4290  
                                 l8942 0540                                   l8934 051E  
                                 l8918 0400                                   l8870 026C  
                                 l8862 024A                                   l8838 01D2  
                                 l9398 3C22                                   l9662 42DA  
                                 l9654 42C2                                   l9646 42A6  
                                 l8688 4468                                   l8952 055C  
                                 l8928 0478                                   l8880 0288  
                                 l8848 01F8                                   l9664 42E0  
                                 l8938 0528                                   l8866 0254  
                                 l8980 0644                                   l8956 0574  
                                 l8948 0552                                   l8884 02A0  
                                 l8876 027E                                   l8796 00FE  
                                 l9668 42E6                                   l7998 0BCE  
                                 l8990 066E                                   STR_1 FB69  
                                 l8984 065C                                   l8976 063A  
                                 STR_2 FF31                                   STR_3 FB57  
                                 l8994 0678                                   STR_4 FE54  
                                 STR_5 FB57                                   STR_6 FDF0  
                                 STR_7 FFC3                                   l8998 0690  
                                 STR_8 FFDA                                   STR_9 FFCA  
              ??i2_updateServoPosition 0005                                   _LATA 000F89  
                                 _LATB 000F8A                                   _LATC 000F8B  
                                 _LATD 000F8C                                   _LATE 000F8D  
                                 u6040 148E                                   _PEIE 007F96  
                                 u7030 3F38                                   u6310 31CC  
                                 u6150 2FC2                                   u7200 2518  
                                 u7040 3F3A                                   u4800 4E5C  
                                 u6160 3018                                   u4801 4E58  
                                 u4810 4E5E                                   u6410 2408  
                                 u6058 1492                                   u4900 1820  
                                 u7220 259E                                   u4580 526C  
                                 u6308 319A                                   _RCEN 007E2B  
                                 u7230 25A0                                   u6510 09EA  
                                 u6158 2FC6                                   u7320 264E  
                                 u7080 3F70                                   u6440 2450  
                                 u6168 301C                                   u7330 2666  
                                 u6530 0A9E                                   u7090 3F72  
                                 u6418 240C                                   u6370 2260  
                                 u5490 27EC                                   u6290 3196  
                                 u4907 1816                                   u7331 2662  
                                 u5475 4C4C                                   u4860 17A8  
                                 u7420 39EC                                   u6380 2262  
                                 u4780 4E10                                   u7430 3A48  
                                 u7270 2608                                   u7190 2516  
                                 u6550 0B52                                   u4790 4E12  
                                 u6448 2454                                   u5840 1228  
                                 i2l66 54C2                                   u4867 179E  
                                 u7531 3AAE                                   u9107 136A  
                                 u7540 3AB0                                   u7428 39F0  
                                 u5860 125E                                   u9117 1384  
                                 u7438 3A4C                                   u9207 1538  
                                 u9127 13AE                                   u7288 260C  
                                 u7481 3A82                                   u9217 1540  
                                 u9137 13FA                                   u9057 11AC  
                                 u7490 3A84                                   u5858 122C  
                                 u9307 159C                                   u9227 154A  
                                 u9147 1402                                   u9067 12D0  
                                 u9317 1604                                   u9237 1554  
                                 u9157 1434                                   u9077 1326  
                                 u7590 3B22                                   u9407 311E  
                                 u9327 5022                                   u9247 155E  
                                 u9167 143E                                   u9087 132E  
                                 u9417 3128                                   u9337 49C6  
                                 u9257 1568                                   u9177 1458  
                                 u9097 1360                                   u9507 0114  
                                 u9427 314E                                   u9347 2F82  
                                 u9267 1572                                   u9187 14C8  
                                 u9517 014C                                   u9437 5338  
                                 u9357 2FA8                                   u9277 157A  
                                 u9197 1500                                   u7598 3B26  
                                 u8670 3C68                                   u9607 058E  
                                 u9527 0184                                   u9447 3FEA  
                                 u9367 2FE0                                   u9287 1586  
                                 u9617 064C                                   u9537 01DA  
                                 u9457 4046                                   u9377 2FFE  
                                 u9297 1590                                   u9707 0878  
                                 u9627 0680                                   u9547 0206  
                                 u9467 407E                                   u9387 30E0  
                                 u9717 08AC                                   u9637 06AA  
                                 u9557 025C                                   u9477 4E6E  
                                 u9397 30EA                                   u9807 2318  
                                 u9727 3DAE                                   u9647 0708  
                                 u9567 0290                                   u9487 4EA2  
                                 u9817 235C                                   u9737 217A  
                                 u9657 073C                                   u9577 02BA  
                                 u9497 002A                                   u9907 0934  
                                 u9827 237A                                   u9747 21BE  
                                 u9667 0766                                   u9587 0530  
                                 u9917 0956                                   u9837 23A8  
                                 u9757 21E0                                   u9677 07C4  
                                 u9597 0564                                   u9927 09C6  
                                 u9847 23C2                                   u9767 220E  
                                 u9687 07F8                                   u9937 09FA  
                                 u9857 3EB2                                   u9777 2276  
                                 u9697 0822                                   u9947 0A60  
                                 u9867 417E                                   u9787 22CA  
                                 u9957 0A7E                                   u9877 41C2  
                                 u9797 22EA                                   u9967 0AAE  
                                 u9887 41E4                                   u9977 0B14  
                                 u9897 08F0                                   u9987 0B32  
                                 _RSEN 007E29                                   u9997 0B62  
                          _stopSignals 5448                                   _Test 3D9E  
                                 _back 005B                                   _main 4246  
                                 _down 005D                                   _keys FAB5  
                                 _time 011C                                   fsr0h 000FEA  
                                 fsr1h 000FE2                     i2___lwdiv@quotient 000A  
                                 indf0 000FEF                                   fsr2h 000FDA  
                                 fsr0l 000FE9                                   indf2 000FDF  
                                 fsr1l 000FE1                                   fsr2l 000FD9  
                                 _sort 53E6                                   btemp 007E  
                 ??i2_I2C_Master_Start 0002                   ??i2_I2C_Master_Write 0004  
                                 prodh 000FF4                                   prodl 000FF3  
                                 start 000E                          __CFG_IESO$OFF 000000  
                 _log_count_can_no_lab 013F                        __end_ofi2_putch 5500  
                  __size_of_EEPROMTest 0002                          __CFG_MCLRE$ON 000000  
                         ___param_bank 000000                             i2_printRTC 31DA  
                          i2_lcdNibble 4CD8                        __end_of_Loading 163C  
                 __end_of_actuatorTest 118E                                  ??_arm 00AB  
           i2updateServoPosition@timer 0003                       ?_I2C_Master_Init 008D  
                     ?_I2C_Master_Read 0001                       ?_I2C_Master_Wait 0001  
          ??i2_change_state_to_menu_12 002A            ??i2_change_state_to_menu_22 002A  
                     ?_I2C_Master_Stop 0001                                  ?_Test 0001  
                 __end_of_EEPROM_write 408E                                  ?_main 0001  
                                _ACKEN 007E2C                                  _ACKDT 007E2D  
                      __end_of___awdiv 4486                        ?_updateArmState 0001  
                                _EEADR 000FA9                                  STR_10 FFE6  
                                STR_11 FFEA                                  STR_12 FFFA  
                                STR_20 FFEE                                  STR_13 FFDE  
                                STR_21 FAD0                                  STR_14 FFD6  
                                STR_22 FF9A                                  STR_30 FE01  
                                STR_15 FFD2                                  STR_23 FF23  
                                STR_31 FDDF                                  STR_16 FFE2  
                                STR_24 FD46                                  STR_32 FD24  
                                STR_40 FCE0                                  STR_17 FFF2  
                                STR_25 FE23                                  STR_33 FD35  
                                STR_41 FCCF                                  STR_18 FFF6  
                                STR_34 FDCE                                  STR_50 FDAC  
                                STR_42 FD8A                                  STR_26 FD57  
                                STR_43 FD8A                                  STR_35 FDCE  
                                STR_51 FFDA                                  STR_19 FFCE  
                                STR_27 FE12                                  STR_52 FFCA  
                                STR_60 FFF2                                  STR_28 FD68  
                                STR_36 FD13                                  STR_44 FCF1  
                      __end_of___awmod 468E                                  STR_45 FCE0  
                                STR_37 FD24                                  STR_53 FFE6  
                                STR_61 FFF6                                  STR_29 FE20  
                                STR_62 FFCE                                  STR_54 FFEA  
                                STR_70 FEDC                                  STR_38 FDBD  
                                STR_46 FD9B                                  STR_47 FD9B  
                                STR_55 FFFA                                  STR_63 FAD0  
                                STR_71 FF15                                  STR_39 FD79  
                                STR_56 FFDE                                  STR_64 FF7B  
                                STR_80 FE64                                  STR_48 FD02  
                                STR_72 FC58                                  STR_49 FCF1  
                                STR_57 FFD6                                  STR_81 FE20  
                                STR_65 FF4C                                  STR_73 FEF9  
                                STR_58 FFD2                                  STR_74 FF59  
                                STR_90 FECD                                  STR_82 FE91  
                                STR_66 FAE8                                  STR_59 FFE2  
                                STR_67 FFBC                                  STR_91 FEEB  
                                STR_75 FEBE                                  STR_83 FE34  
                                STR_84 FF86                                  STR_76 FF07  
                                STR_68 FC8B                                  STR_92 FC69  
                                STR_85 FF86                                  STR_77 FFAD  
                                STR_93 FF65                                  STR_69 FC9C  
                                STR_78 FF15                                  STR_86 FFA4  
                                STR_94 FC7A                                  STR_87 FFA4  
                                STR_95 FF70                                  STR_79 FF3F  
                                STR_88 FF90                                  STR_96 FEAF  
                                STR_89 FF15                                  STR_97 FBD0  
                                STR_98 FBBF                                  STR_99 FB9D  
         i2updateServoPosition@my_time 0007                                  ?_sort 0001  
                      __end_of___lldiv 4542           i2updateServoPosition@time_us 0001  
                                u10007 0BE0                                  u10017 0C08  
                                u10107 0E74                                  u10027 0C64  
                                u10117 0E9C                                  u10037 0C8C  
                                u10207 10D0                                  u10127 0F06  
                                u10047 0CE8                                  u10217 1120  
                                u10137 0F2E                                  u10057 0D10  
                                u10307 254A                                  u10227 112A  
                                u10147 0F8A                                  u10067 0D6C  
                                u10317 25D2                                  u10237 114E  
                                u10157 0FB2                                  u10077 0D94  
                                u10407 1B4E                                  u10327 269E  
                                u10247 1176                                  u10167 100E  
                                u10087 0DF0                                  _T0CON 000FD5  
                                u10417 1B80                                  u10337 26B2  
                                u10257 4834                                  u10177 1036  
                                u10097 0E18                                  u10507 1DB0  
                                u10427 1BCC                                  u10347 26F8  
                                u10267 4884                                  u10187 1058  
                      ___awdiv@divisor 0088                                  u10517 1DE2  
                                u10437 1C00                                  u10357 270A  
                                u10277 4898                                  u10197 10A8  
                                u10607 4B4E                                  u10527 48EC  
                                u10447 1C32                                  u10367 52EC  
                                u10287 4C8A                                  _T1CON 000FCD  
                                u10537 4908                                  u10457 1C7E  
                                u10377 1A82                                  u10297 24B2  
                                u10547 39C4                                  u10467 1CCA  
                                u10387 1ACE                                  u10557 3ADC  
                                u10477 1CFE                                  u10397 1B1A  
                                u10567 3AE6                                  u10487 1D30  
                                _T2CON 000FCA                                  u10577 4B0E  
                                u10497 1D7C                                  u10587 4B18  
                                u10597 4B44                                  _T3CON 000FB1  
                      __end_of___lwdiv 499A                        __end_of___lwmod 4C1C  
                                i2l263 2CBC                                  i2l618 3268  
                                i2l917 4F24                                  i2l890 4AB4  
                      ___awdiv@counter 008A                                  i2l869 2E8E  
                                _TMR0H 000FD7                                  _TMR1H 000FCF  
                                _TMR0L 000FD6                                  _TMR3H 000FB3  
                                _TMR1L 000FCE                                  _TMR3L 000FB2  
                           _BothServos 1A74                                  _PORTB 000F81  
                                _TRISA 000F92                                  _TRISB 000F93  
                                _TRISC 000F94                                  _TRISD 000F95  
                                _TRISE 000F96                          __CFG_PWRT$OFF 000000  
                        __CFG_WRT0$OFF 000000                          __CFG_WRT1$OFF 000000  
                        __CFG_WRT2$OFF 000000                          __CFG_WRT3$OFF 000000  
                      __end_of_lcdInst 54F4                        __end_of_handler 3602  
                       __CFG_EBTR0$OFF 000000                         __CFG_FCMEN$OFF 000000  
                       __CFG_EBTR1$OFF 000000                         __CFG_EBTR2$OFF 000000  
                       __CFG_EBTR3$OFF 000000                                  _nRBPU 007F8F  
                        __CFG_WRTB$OFF 000000                          __CFG_WRTC$OFF 000000  
                        __CFG_WRTD$OFF 000000                        __end_of_readADC 52FC  
                      __end_of_initLCD 4EAC                         __CFG_EBTRB$OFF 000000  
                                _debug 012D                             i2isdigit@c 0003  
                                _getIR 499A                        __end_of_loadRTC 471A  
                      __end_of_readMAG 4E66                        __end_of_dpowers FAD0  
                                _first 0139                                  _enter 005F  
                                arm@on 00AC                        __end_of_isdigit 5326  
                                _input 007D                                  _putch 54D4  
                                pclath 000FFA                                  tablat 000FF5  
                     __end_ofi2___wmul 539C                       __end_ofi2_getRTC 4A7E  
                  _log_count_pop_w_tab 0067                                  status 000FD8  
                       __CFG_PBADEN$ON 000000                          i2printf@width 0028  
                     __end_ofi2_printf 216C                     __size_ofi2___lwdiv 0052  
                   __size_ofi2___lwmod 0042                       __end_ofi2_strcpy 5068  
                          Loading@addr 00B3                       _count_can_no_lab 0123  
                 printSortTimer@i_1194 0047                   __size_of_EEPROM_read 0018  
                      __initialization 4D80                           __end_of_Test 3EA4  
                   __size_ofi2_lcdInst 000C                           __end_of_main 430A  
                         __end_of_keys FAC6                           __end_of_sort 5408  
                           i2printf@ap 0020                             i2printf@cp 001E  
                   __size_ofi2_isdigit 001E                            _BlockerTest 39B6  
                               ??_Test 00C6    __size_of_change_state_to_menu_start 002C  
                      ??_machineConfig 0080                                 ??_main 00DA  
                               ??_sort 00C4                          __activetblptr 000003  
           __size_of_updateServoStates 01C8             updateServoPosition@my_time 0086  
           updateServoPosition@time_us 0080                             i2strcpy@cp 0005  
                           i2strcpy@to 0001                      ?_I2C_Master_Start 0001  
                  EEPROM_write@address 00AB                 __size_ofi2_EEPROM_read 0016  
                    ?_I2C_Master_Write 0081                            ?i2_delay_ms 0001  
                               ?_getIR 0001                     ??_I2C_Master_Start 0081  
                               _ADCON0 000FC2                                 _ADCON1 000FC1  
                   ??_I2C_Master_Write 0083                                 _ADCON2 000FC0  
                               STR_100 FC25                                 STR_101 FC36  
                               STR_110 FCBE                                 STR_102 FB7B  
                               STR_103 FE44                                 STR_111 FAFD  
                               STR_112 FBE1                                 STR_104 FBAE  
                               STR_120 FB45                                 STR_113 FC14  
                               STR_105 FB8C                                 STR_121 FB33  
                               STR_106 FBAE                                 STR_122 FB45  
                               STR_114 FC03                                 _ADRESH 000FC4  
                               STR_115 FC03                                 STR_123 FB45  
                               STR_107 FEA0                                 STR_124 FBF2  
                               STR_108 FE82                                 STR_116 FBF2  
                               _EEADRH 000FAA                                 STR_109 FE73  
                               STR_125 FCAD                                 STR_117 FC47  
                               STR_126 FFB5                                 STR_118 FB21  
                               _ADRESL 000FC3                                 STR_119 FB0F  
                               _EEDATA 000FA8                                 _EECON2 000FA7  
                     ___awdiv@dividend 0086                        i2lcdNibble@data 0002  
                               ?_putch 0001                 __size_of_initSortTimer 00AA  
                      i2lcdNibble@temp 0001              i2_change_state_to_menu_12 50C8  
            i2_change_state_to_menu_22 5098                                 _INT1IE 007F83  
                               _INT1IF 007F80                                 _CVRCON 000FB5  
                               i2l1020 35C6                                 i2l1009 34FE  
                               i2l1018 35A6                                 i2l1096 54A6  
                               i2l1470 1FD8                                 i2l1917 4D76  
                               i2l1927 4EE4                                 i2l6400 4EDA  
                               i2l7310 36DA                                 i2l7160 3206  
                               i2l6338 53BC                                 i2l6362 5440  
                               i2l7170 329E                                 i2l6372 4D44  
                               i2l7340 373E                                 i2l7324 3700  
                               i2l7180 330C                                 i2l7172 32B4  
                               i2l6374 4D4C                                 i2l6710 1F62  
                               i2l7334 3726                                 i2l7318 36F2  
                               i2l7270 3640                                 i2l7262 3626  
                               i2l7182 3322                                 i2l7174 32CA  
                               i2l7166 3272                                 i2l6384 4D6C  
                               i2l6376 4D50                                 i2l6392 4EBA  
                               i2l6704 1F40                                 i2l6720 1FA2  
                               i2l7352 3760                                 i2l7344 3748  
                               i2l7328 371C                                 i2l7272 3650  
                               i2l7280 365E                                 i2l7184 3338  
                               i2l7176 32E0                                 i2l7168 3288  
                               i2l7192 337A                                 i2l6634 4A44  
                               i2l6394 4EC2                                 i2l6714 1F8C  
                               i2l6706 1F4A                                 i2l7370 37A4  
                               i2l7362 3780                                 i2l7338 373A  
                               i2l7290 3684                                 i2l7274 3654  
                               i2l7186 334E                                 i2l7178 32F6  
                               i2l7194 33D4                                 i2l9210 2B2E  
                               i2l9202 2B12                                 i2l6644 4A6E  
                               i2l6396 4EC6                                 i2l6732 2006  
                               i2l6716 1F9E                                 i2l6708 1F50  
                               i2l7292 368A                                 i2l7284 3672  
                               i2l7380 37C0                                 i2l7188 3364  
                               i2l6638 4A54                                 i2l6750 2054  
                               i2l6662 1E08                                 i2l7374 37B6  
                               i2l7366 3792                                 i2l7358 376E  
                               i2l7294 3690                                 i2l7286 3678  
                               i2l9230 2B84                                 i2l9222 2B60  
                               i2l9214 2B44                                 i2l9206 2B20  
                               i2l9150 2A60                                 i2l9142 2A44  
                               i2l6760 2092                                 i2l6736 201E  
                               i2l6672 1E2C                                 i2l7288 367E  
                               i2l9136 2A30                                 i2l6762 209A  
                               i2l6738 2022                                 i2l6666 1E18  
                               i2l7298 3696                                 i2l9250 2BD2  
                               i2l9242 2BAE                                 i2l9234 2B92  
                               i2l9226 2B6E                                 i2l9218 2B52  
                               i2l9170 2A98                                 i2l9162 2A7C  
                               i2l9154 2A6E                                 i2l9146 2A52  
                               i2l9138 2A36                                 i2l6780 20E2  
                               i2l6756 206E                                 i2l6668 1E26  
                               i2l6790 2148                                 i2l6774 20C6  
                               i2l6694 1EE8                                 i2l6686 1EC0  
                               i2l6678 1E5E                                 i2l9510 2ECA  
                               i2l9270 2C20                                 i2l9262 2C04  
                               i2l9254 2BE0                                 i2l9246 2BC4  
                               i2l9238 2BA0                                 i2l9190 2AE0  
                               i2l9182 2AC4                                 i2l9174 2AA8  
                               i2l9166 2A8A                                 i2l6776 20CE  
                               i2l6784 20F4                                 i2l6768 20B0  
                               i2l6696 1EF2                                 i2l6792 2150  
                               i2l9504 2E90                                 i2l6786 20FA  
                               i2l6698 1EF6                                 i2l9274 2C2E  
                               i2l9266 2C12                                 i2l9258 2BEE  
                               i2l9194 2AEE                                 i2l9186 2AD2  
                               i2l9178 2AB6                                 i2l9530 380C  
                               i2l9508 2EC4                                 i2l9620 4EF8  
                               i2l6980 3D86                                 i2l6972 3D52  
                               i2l6796 5040                                 i2l9284 2C52  
                               i2l9462 2CCC                                 i2l9622 4EFE  
                               i2l6798 5048                                 i2l9278 2C44  
                               i2l9198 2B04                                 i2l8750 4ACE  
                               i2l9550 386C                                 i2l9542 3842  
                               i2l9534 3822                                 i2l9710 34D2  
                               i2l9472 2D36                                 i2l6968 3D42  
                               i2l8744 4A9C                                 i2l9536 382C  
                               i2l9560 38CA                                 i2l8762 5478  
                               i2l9466 2CDC                                 i2l9626 4F04  
                               i2l9570 3908                                 i2l9484 2E04  
                               i2l9564 38E2                                 i2l9548 3858  
                               i2l9556 3876                                 i2l9732 351C  
                               i2l8758 5468                                 i2l9590 3984  
                               i2l9558 38C0                                 i2l9496 2E5C  
                               i2l9576 392E                                 i2l9760 3574  
                               i2l9680 347C                                 i2l9754 355A  
                               i2l9738 352A                                 i2l9682 3480  
                               i2l9690 3494                                 i2l9764 357A  
                               i2l9692 34AC                                 i2l9686 348C  
                               i2l9696 34B6                                 i2l9786 35C4  
              _f_most_recent_sort_time 0137                          PlatformTest@i 00B1  
                               _OSCCON 000FD3                                 _TMR0IE 007F95  
                               _TMR0IF 007F92                              ??i2_putch 0003  
                               _TMR1IE 007CE8                                 _TMR1IF 007CF0  
                               _TMR2IE 007CE9                                 _TMR2IF 007CF1  
                               _TMR3IE 007D01                                 _TMR3IF 007D09  
                               _TMR0ON 007EAF                                 _TMR1ON 007E68  
                               _TMR2ON 007E52                                 _TMR3ON 007D88  
                               _SSPADD 000FC8                                 _TRISC3 007CA3  
                               _TRISC4 007CA4                                 _SSPBUF 000FC9  
                            ??_Loading 00B1                       __end_of_delay_ms 534E  
                 delay_ms@milliseconds 0081                         __CFG_XINST$OFF 000000  
                     __end_of_dispLogs 53E6                            ?i2_printRTC 0001  
                     retrieveLog@byte1 000B                       retrieveLog@byte2 000C  
                     retrieveLog@byte3 000D                   __end_of_Distribution 4170  
                               ___wmul 4FCE                              ??___awdiv 008A  
                       __CFG_STVREN$ON 000000                                 _getMAG 5004  
                            ??___awmod 0084                            logRun@byte1 00B2  
                          logRun@byte2 00B3                            logRun@byte3 00B4  
                               _getRTC 471A                              ??___lldiv 0088  
                            ??___lwdiv 0084                              ??___lwmod 008B  
                     ??_printSortTimer 002A                       __end_of_initTime 542A  
                               _initUI 5068                                 _readIR 4DCE  
                               _logRun 3B3A                                 getIR@i 0087  
                               clear_0 4DA6                                 clear_1 4DB2  
                               clear_2 4DBE                       ___awdiv@quotient 008C  
                      ___awmod@divisor 0082                             _PortTestDC 4C7C  
                      ___awmod@counter 0084                              ??_lcdInst 0082  
                               _printf 163C                              ??_handler 004B  
              __size_of_initGlobalVars 00BE                           ?_retrieveLog 0007  
                               _strcpy 4F98                     __size_of_SpeedTest 0084  
                            ??_readADC 0080                              ??_initLCD 0083  
                            ??_loadRTC 0095                              ??_readMAG 0082  
 __end_ofi2_change_state_to_menu_start 5376  __size_ofi2_change_state_to_menu_start 0028  
         i2_change_state_to_menu_start 534E                            ?_BothServos 0001  
                         ??_EEPROMTest 0080                              ??_isdigit 0080  
                    __end_ofi2___lwdiv 4D80                       __end_of_printRTC 2A00  
                         __mediumconst FAB4                      __end_ofi2___lwmod 4EEE  
                               tblptrh 000FF7                                 tblptrl 000FF6  
                               tblptru 000FF8                   _log_count_pop_no_tab 0065  
                __end_of_algorithmTest 4246                      __end_ofi2_lcdInst 550C  
                    __end_ofi2_isdigit 5448                             __accesstop 0080  
              __end_of__initialization 4DC4                          ?_inputHandler 002A  
                _most_recent_sort_time 0069                          ___rparam_used 000001  
                        ?_PlatformTest 0001                printSortTimer@start_sec 003B  
                __size_of_actuatorTest 08B8                          i2_EEPROM_read 5498  
                         Loading@byte1 00B5                     i2___lwmod@dividend 0001  
                   __end_of_EEPROMTest 554A                         __pcstackCOMRAM 0001  
                __size_of_EEPROM_write 00E8                    __size_ofi2_delay_ms 001C  
                         __pidataBANK1 5520                    BlockerTest@cam_flag 00AE  
                        __end_of_getIR 4A0C                            i2printRTC@i 0041  
                        _initSortTimer 4542            __end_of_updateServoPosition 4826  
                        __end_of_putch 54E4                            i2printf@len 0022  
                          i2printf@val 0024                             __end_of_ID 31DA  
                           __end_of_UI 08D6                              ?i2___wmul 0001  
                   __size_of_lcdNibble 0068                              ?i2_getRTC 0001  
                          i2putch@data 0003                  printSortTimer@curTime 002D  
   __end_of_change_state_to_menu_start 52D0          ?i2_change_state_to_menu_start 0001  
           _change_state_to_menu_start 52A4                  printSortTimer@cur_sec 003D  
                            ?i2_printf 000D                                ??_getIR 0086  
                            ?i2_strcpy 0001                       _count_pop_no_tab 0127  
                  __size_ofi2_printRTC 0236                                ??_putch 0082  
                         _actuatorTest 08D6                             __pbssBANK0 00DA  
                           __pbssBANK1 0100                           ?_stopSignals 0001  
                       ??_inputHandler 002C         __size_ofi2_updateServoPosition 0070  
        __end_ofi2_updateServoPosition 4AEE                           _EEPROM_write 3FA6  
                       ??_PlatformTest 00AB               ?_change_state_to_menu_11 0001  
             ?_change_state_to_menu_12 0001                                UI@F3241 0147  
             ?_change_state_to_menu_22 0001               ?_change_state_to_menu_23 0001  
                    __end_of_SpeedTest 48AA                         ?i2_EEPROM_read 0001  
             ?_change_state_to_logs_11 0001               ?_change_state_to_logs_12 0001  
             ?_change_state_to_logs_22 0001               ?_change_state_to_logs_23 0001  
             ?_change_state_to_logs_33 0001               ?_change_state_to_logs_34 0001  
                  __size_of_BothServos 038A                      printRTC@RTC_month 00BC  
                         ?i2_lcdNibble 0001                                UI@i_412 00CA  
                              UI@i_413 00CB                                UI@i_431 00CC  
                              UI@i_440 00D1                                UI@i_432 00CD  
                              UI@i_409 00C9                                UI@i_443 00D2  
                              UI@i_435 00CE                                UI@i_444 00D3  
                              UI@i_436 00CF                                UI@i_447 00D4  
                              UI@i_439 00D0                                UI@i_448 00D5  
                     ??_updateArmState 0001                         ?_initSortTimer 0001  
                              ?___wmul 0080                                ?_getMAG 0001  
                              ?_getRTC 0001                                ?_initUI 0001  
                              ?_readIR 0001                                ?_logRun 0001  
             updateServoPosition@timer 0082                                UI@month 00D6  
                          ?_PortTestDC 0001                                ?_printf 008E  
                              _UI$2412 00C6                                ?_strcpy 0080  
                      _pan_servo_state 006B                             ??i2___wmul 0005  
                           ??i2_getRTC 0004                                i2l10240 38B8  
                              i2l10250 2C92                                i2l10242 399C  
                              i2l10234 389A                                i2l10252 2CAE  
                              i2l10244 39AC                                i2l10236 38A4  
                              i2l10238 38AE                                i2l10256 36AE  
                              i2l10248 2C70                                i2l10258 36CA  
                            ?_delay_ms 0001                         PlatformTest@on 00B5  
                           ??i2_printf 0019                             ??i2_strcpy 0005  
                            ?_dispLogs 0012                                _SSPCON1 000FC6  
                              _SSPCON2 000FC5                                _SSPSTAT 000FC7  
                              _RTCflag 00EA                                i2_putch 54F4  
                            ?_initTime 0080                        _f_loadingNewCan 00F2  
                      i2printRTC@month 003D                  __size_of_Distribution 00E2  
          __size_ofi2_I2C_Master_Start 0008                      __end_of_lcdNibble 4B56  
                              _Loading 118E            __size_ofi2_I2C_Master_Write 000A  
                     EEPROM_write@data 00AD                                __Hparam 0000  
                              __Lparam 0000     __size_ofi2_change_state_to_menu_12 0030  
   __size_ofi2_change_state_to_menu_22 0030                              ?_printRTC 0001  
                              ___awdiv 43C8                                ___awmod 45EC  
                           _initServos 48AA                                ___lldiv 4486  
                      __size_of___wmul 0036                        __size_of_getMAG 0032  
                              ___lwdiv 4922                                ___lwmod 4BBA  
                      __size_of_getRTC 0086                        printSortTimer@i 0049  
                            _CMCONbits 000FB4                      retrieveLog@logNum 0007  
                         logRun@byte11 00B6                           ?_BlockerTest 0001  
                      __size_of_initUI 0030                        __size_of_readIR 004C  
                              __pcinit 4D80                   i2EEPROM_read@address 0001  
                      __size_of_logRun 0144                           logRun@byte_i 00B5  
                              __ramtop 1000                         _initGlobalVars 430A  
                              _lcdInst 54E4                                _handler 0008  
                              __ptext0 4246                                __ptext1 53E6  
                              __ptext2 118E                                __ptext3 4542  
                              __ptext4 430A                                __ptext5 5004  
                              __ptext6 499A                                __ptext7 4DCE  
                              __ptext8 2F68                                __ptext9 5326  
                      __size_of_printf 0438                                _readADC 52D0  
                      __size_of_strcpy 0036                                _initLCD 4E66  
                              _cur_can 012B                                _loadRTC 468E  
                              _readMAG 4E1A                                _dpowers FAC6  
                   actuatorTest@i_1740 00B1                     actuatorTest@i_1742 00B2  
                   actuatorTest@i_1751 00B8                     actuatorTest@i_1743 00B3  
                   actuatorTest@i_1752 00B9                     actuatorTest@i_1736 00AE  
                   actuatorTest@i_1761 00BE                     actuatorTest@i_1745 00B4  
                   actuatorTest@i_1737 00AF                     actuatorTest@i_1729 00AD  
                   actuatorTest@i_1762 00BF                     actuatorTest@i_1746 00B5  
                   actuatorTest@i_1755 00BA                     actuatorTest@i_1739 00B0  
                         __size_of_arm 0102                     actuatorTest@i_1756 00BB  
                   actuatorTest@i_1748 00B6                     actuatorTest@i_1765 00C0  
                   actuatorTest@i_1749 00B7                     actuatorTest@i_1766 00C1  
                   actuatorTest@i_1758 00BC                     actuatorTest@i_1759 00BD  
                   actuatorTest@i_1768 00C2                     actuatorTest@i_1769 00C3  
                              _isdigit 52FC                       ___awmod@dividend 0080  
                              getRTC@i 0083                   __size_of_retrieveLog 0120  
                         ??i2_delay_ms 0001                             ??_delay_ms 0080  
             __size_of_I2C_Master_Init 0060               __size_of_I2C_Master_Read 002E  
                        _log_startTime 0100               __size_of_I2C_Master_Wait 0014  
             __size_of_I2C_Master_Stop 0008                             ??_dispLogs 0014  
                         _Distribution 408E                   PlatformTest@res_1780 00AF  
                       __pintcode_body 3410                   end_of_initialization 4DC4  
                              logRun@i 00B7                             ??_initTime 0086  
                      ??i2_EEPROM_read 0003                                int_func 3410  
                  i2___wmul@multiplier 0001                          ??_EEPROM_read 0082  
                  __size_of_PortTestDC 005C                              i2u1061_47 3646  
                            i2u1062_47 2E36                              i2u1063_47 4CF0  
                            i2u1064_47 4CFA                              i2u1065_47 4D1C  
                            i2u1066_47 4D26                              i2u1067_47 5470  
            __size_of_I2C_Master_Start 0008              __size_of_I2C_Master_Write 000A  
                      ___lldiv@divisor 0084                        ___lldiv@counter 008C  
                      ??_initSortTimer 0085                                printf@c 00A8  
                         ??i2_printRTC 002A                                printf@f 008E  
                           ??_printRTC 00AB                       I2C_Master_Init@c 008D  
                     I2C_Master_Read@a 0081                                postdec1 000FE5  
                              postdec2 000FDD                                postinc0 000FEE  
                              postinc2 000FDE                     __end_ofi2_delay_ms 5480  
               __end_of_initGlobalVars 43C8                             _sensorTest 216C  
                           _servoTimes 00DA                              _PORTAbits 000F80  
                            _PORTBbits 000F81                   __end_of_inputHandler 37EE  
                         ??_BothServos 00AB                  __end_of_machineConfig 4BBA  
                 __end_of_PlatformTest 2736                             _updateMenu 2A00  
                    i2_I2C_Master_Read 539C                              _IR_signal 00E6  
                    i2_I2C_Master_Wait 54C2                      i2_I2C_Master_Stop 5538  
                    i2___lwdiv@divisor 0008                        _log_count_total 0143  
                            i2___lwdiv 4D2E                              i2___lwmod 4EAC  
                    i2___lwdiv@counter 000C                     ?i2_I2C_Master_Read 0001  
                   ?i2_I2C_Master_Wait 0001                     __end_ofi2_printRTC 3410  
                   ?i2_I2C_Master_Stop 0001                          actuatorTest@i 00C4  
         ??_change_state_to_menu_start 00C4                              i2_lcdInst 5500  
                        Loading@i_1170 00BE                          Loading@i_1156 00B6  
                        Loading@i_1165 00B8                          Loading@i_1167 00BA  
                        Loading@i_1168 00BC                             _total_time 00FA  
                          printf@width 00A9                   __size_of_stopSignals 001C  
                  ??i2_I2C_Master_Read 0002                              i2_isdigit 542A  
                  ??i2_I2C_Master_Wait 0001                    ??i2_I2C_Master_Stop 0002  
                            i2getRTC@i 0004                     __end_of_BothServos 1DFE  
                  __end_of_EEPROM_read 5498                            ?_initServos 0001  
                      ?_initGlobalVars 0001                         __end_of___wmul 5004  
                       __end_of_getMAG 5036                         __end_of_getRTC 47A0  
                 __size_ofi2_lcdNibble 0056                         _timer2_counter 0073  
                        EEPROM_write@i 00AF                          i2lcdInst@data 0003  
                       __end_of_initUI 5098                         __end_of_readIR 4E1A  
                       __end_of_logRun 3C7E                       i2___wmul@product 0005  
                       __end_of_printf 1A74                           i2printf@flag 0026  
                       __end_of_strcpy 4FCE              __end_ofi2_I2C_Master_Read 53C2  
            __end_ofi2_I2C_Master_Wait 54D4                           i2printf@prec 001D  
                  start_initialization 4D80              __end_ofi2_I2C_Master_Stop 5540  
                           readMAG@res 0084                      __size_ofi2___wmul 0026  
                      _count_can_w_lab 0125            ?_change_state_to_menu_start 0001  
                    __size_ofi2_getRTC 0072                            __end_of_arm 3FA6  
                            i2printf@c 0027                              i2printf@f 000D  
                   EEPROM_write@i_1436 00B0                  i2I2C_Master_Read@temp 0003  
                 BlockerTest@cond_flag 00B0                             ?i2___lwdiv 0006  
                           ?i2___lwmod 0001                      __size_ofi2_printf 036E  
                    __size_ofi2_strcpy 0032                      ??_I2C_Master_Init 0091  
                    ??_I2C_Master_Read 0081                      ??_I2C_Master_Wait 0080  
                           ?i2_lcdInst 0001                      ??_I2C_Master_Stop 0081  
                     __CFG_OSC$INTIO67 000000                             ?i2_isdigit 0001  
                           initTime@DD 0083                             initTime@MM 0084  
                           initTime@YY 0085                        retrieveLog@addr 0010  
                           logRun@addr 00B9                              _SpeedTest 4826  
                             ??___wmul 0084                               ??_getMAG 0086  
                             ??_getRTC 0083                 __size_of_algorithmTest 00D6  
                          ?_sensorTest 0001                            __pdataBANK1 0147  
                     __CFG_LPT1OSC$OFF 000000                               ??_initUI 00C4  
                             ??_readIR 0082                               ??_logRun 00B1  
                             ID@i_1181 0086                               ID@i_1182 0088  
                         ??_PortTestDC 00AB                 printSortTimer@timeDiff 0045  
     __size_of_change_state_to_menu_11 0030       __size_of_change_state_to_menu_12 0038  
     __size_of_change_state_to_menu_22 0038       __size_of_change_state_to_menu_23 0030  
                             ??_printf 009A       __size_of_change_state_to_logs_11 0030  
     __size_of_change_state_to_logs_12 0030       __size_of_change_state_to_logs_22 0030  
     __size_of_change_state_to_logs_23 002E       __size_of_change_state_to_logs_33 0030  
     __size_of_change_state_to_logs_34 0030                               ??_strcpy 0084  
                  _printSortTimer$2544 0043                   __size_of_BlockerTest 0184  
                          __pbssCOMRAM 005B           __size_of_updateServoPosition 0086  
                          ?_updateMenu 0001                          __pcstackBANK0 0080  
              __size_of_printSortTimer 02A8                      i2___lwmod@divisor 0003  
                    i2___lwmod@counter 0005                           _isdigit$2052 0081  
                    __size_of_delay_ms 0028                         initSortTimer@i 0088  
                    printSortTimer@min 003F                      printSortTimer@sec 0041  
                  __size_of_initServos 0078                      __size_of_dispLogs 0024  
                     printRTC@INT_time 00AE                       _tilt_servo_state 0071  
                         i2strcpy@from 0003                               ?i2_putch 0001  
                      _count_pop_w_tab 0129                            _EEPROM_read 5480  
                     _I2C_Master_Start 5530                     __end_of_PortTestDC 4CD8  
                            _f_lastCan 00F0                               ?_Loading 0001  
                  i2I2C_Master_Write@d 0002                       _I2C_Master_Write 550C  
                    __size_of_initTime 0022                  i2_updateServoPosition 4A7E  
                     ___lwdiv@dividend 0080                      __CFG_CCP2MX$PORTC 000000  
                            __pintcode 0008                             ?_SpeedTest 0001  
                        __pmediumconst FAB4                              _lcdNibble 4AEE  
                __size_of_inputHandler 01EC                               ?___awdiv 0086  
                             ?___awmod 0080                               ?___lldiv 0080  
                       _sensor_outputs 00E2                               ?___lwdiv 0080  
                             ?___lwmod 0087                  __size_of_PlatformTest 02CC  
                    __size_of_printRTC 02CA                               ?_lcdInst 0001  
                             ?_handler 0001                               ?_readADC 0001  
                             ?_initLCD 0001                               ?_loadRTC 0001  
                             ?_readMAG 0001                               ?_isdigit 0001  
           __size_ofi2_I2C_Master_Read 0026             __size_ofi2_I2C_Master_Wait 0012  
           __size_ofi2_I2C_Master_Stop 0008                              _firstboot 013B  
                            _cur_state 00EC                       ___lwdiv@quotient 0084  
                       __size_of_getIR 0072                          _algorithmTest 4170  
                          ??i2___lwdiv 000A                            ??i2___lwmod 0005  
                       __size_of_putch 0010                            __size_of_ID 0272  
                          __size_of_UI 08C4                    __size_of_sensorTest 02FE  
           __end_ofi2_I2C_Master_Start 5548             __end_ofi2_I2C_Master_Write 5520  
                          ??i2_lcdInst 0003                         ___wmul@product 0084  
                             _LATAbits 000F89                               _LATBbits 000F8A  
                             _LATCbits 000F8B                               _LATDbits 000F8C  
                         _inputHandler 3602                            ??i2_isdigit 0001  
                         _PlatformTest 246A                           BlockerTest@i 00AC  
                             i2u523_40 1F24                               _PIR2bits 000FA1  
                             i2u523_47 1F1A                               i2u527_40 1F84  
                      PlatformTest@res 00AD                               i2u527_47 1F7A  
                             i2u468_40 53BA                               i2u568_40 3268  
                             i2u876_40 2E66                               i2u878_40 2E8E  
                             i2u877_48 2E68                    __size_of_updateMenu 02C0  
                       _log_completion 0063                       __CFG_WDTPS$32768 000000  
                           ?_lcdNibble 0001                              _was_low_1 0077  
                            _was_low_2 0079                              _was_low_3 007B  
                        ??_retrieveLog 0009                             _ADCON0bits 000FC2  
                    ___wmul@multiplier 0080                              _startTime 010E  
                             i2___wmul 5376                          lcdNibble@data 0081  
                             i2_getRTC 4A0C                             printf@flag 00A7  
                        lcdNibble@temp 0080                             printf@prec 009E  
              __size_of_updateArmState 003A                               Loading@i 00C2  
                             Loading@j 00C0                               i2_printf 1DFE  
                             i2_strcpy 5036                         ?_algorithmTest 0001  
                  I2C_Master_Read@temp 0082                              copy_data0 4D94  
                            readIR@res 0084                 ?i2_updateServoPosition 0001  
                     __size_ofi2_putch 000C                             _EECON1bits 000FA6  
                __end_ofi2_EEPROM_read 54AE                            _count_total 00FE  
               i2delay_ms@milliseconds 0002                       ??_initGlobalVars 0080  
                             __Hrparam 0000                       __size_of_Loading 04AE  
                            initTime@h 0081                              initTime@m 0080  
                            initTime@s 0086                              initTime@w 0082  
                             __Lrparam 0000                     __CFG_BOREN$SBORDIS 000000  
                            logRun@num 00B1                            ??_SpeedTest 00AB  
                __end_of_initSortTimer 45EC                           ??_initServos 0088  
                     __size_of___awdiv 00BE                       __size_of___awmod 00A2  
              _change_state_to_menu_11 5128             ?i2_change_state_to_menu_12 0001  
              _change_state_to_menu_12 4F60             ?i2_change_state_to_menu_22 0001  
              _change_state_to_menu_22 4F28                _change_state_to_menu_23 50F8  
                i2___wmul@multiplicand 0003                       __size_of___lldiv 00BC  
                     __size_of___lwdiv 0078                _change_state_to_logs_11 5218  
              _change_state_to_logs_12 51E8                _change_state_to_logs_22 51B8  
              _change_state_to_logs_23 5276                _change_state_to_logs_33 5188  
              _change_state_to_logs_34 5158                       __size_of___lwmod 0062  
                       readADC@channel 0081                     i2I2C_Master_Read@a 0002  
                     __size_of_lcdInst 0010                       __size_of_handler 35FA  
                           _EEPROMTest 5548                        _I2C_Master_Init 4C1C  
                     __size_of_readADC 002C                        _I2C_Master_Read 5248  
                     __size_of_initLCD 0046                           _f_ID_receive 012F  
                     __size_of_loadRTC 008C                       __size_of_readMAG 004C  
                      _I2C_Master_Wait 54AE                        _I2C_Master_Stop 5528  
                     __size_of_isdigit 002A                               _delay_ms 5326  
                       _printSortTimer 2CC0                        ___lwdiv@divisor 0082  
                      ___lwdiv@counter 0086                    __end_of_retrieveLog 3D9E  
                             __ptext10 408E                               __ptext11 4B56  
                             __ptext20 5408                               __ptext12 3B3A  
                             __ptext21 4E66                               __ptext13 3FA6  
                             __ptext30 54AE                               __ptext22 0012  
                             __ptext14 5480                               __ptext31 4F28  
                             __ptext23 2736                               __ptext15 5068  
                             __ptext40 08D6                               __ptext32 4F60  
                             __ptext24 4F98                               __ptext16 468E  
                             __ptext41 4826                               __ptext33 45EC  
                             __ptext25 471A                               __ptext17 4C1C  
                             __ptext50 39B6                               __ptext42 4C7C  
                             __ptext34 43C8                               __ptext26 550C  
                             __ptext18 4486                               __ptext51 163C  
                             __ptext43 246A                               __ptext35 3D9E  
                             __ptext27 5528                               __ptext19 52A4  
                             __ptext60 37EE                               __ptext52 54D4  
                             __ptext44 5448                               __ptext36 216C  
                             __ptext28 5530                               __ptext61 4A7E  
                             __ptext53 52FC                               __ptext45 52D0  
                             __ptext37 4E1A                               __ptext29 5248  
                             __ptext70 5128                               __ptext62 2A00  
                             __ptext54 4FCE                               __ptext46 5548  
                             __ptext38 3EA4                               __ptext71 5158  
                             __ptext63 534E                               __ptext55 4BBA  
                             __ptext47 1A74                               __ptext39 4170  
                             __ptext80 4EEE                               __ptext72 5188  
                             __ptext64 31DA                               __ptext56 4922  
                             __ptext48 48AA                               __ptext81 2CC0  
                             __ptext73 5276                               __ptext65 5036  
                             __ptext57 54E4                               __ptext49 47A0  
                             __ptext90 4A0C                               __ptext82 1DFE  
                             __ptext74 51B8                               __ptext66 3602  
                             __ptext58 4AEE                               __ptext91 5516  
                             __ptext83 54F4                               __ptext75 51E8  
                             __ptext67 5098                               __ptext92 5538  
                             __ptext84 542A                               __ptext76 5218  
                             __ptext68 50C8                               __ptext93 5540  
                             __ptext85 5376                               __ptext77 53C2  
                             __ptext69 50F8                               __ptext94 539C  
                             __ptext86 4EAC                               __ptext78 3C7E  
                             __ptext95 54C2                               __ptext87 4D2E  
                             __ptext79 5498                               __ptext96 5464  
                             __ptext88 5500                               __ptext89 4CD8  
                             _dispLogs 53C2                          ?_actuatorTest 0001  
                   PlatformTest@i_1783 00B3                          ??_stopSignals 0080  
                       i2_isdigit$2052 0002                             strcpy@from 0082  
                   __end_of_initServos 4922                          __size_of_Test 0106  
                        ?_EEPROM_write 00AB                               _initTime 5408  
                        __size_of_main 00C4                          __size_of_sort 0022  
       ??i2_change_state_to_menu_start 0043                               _logstate 00F8  
                  _updateServoPosition 47A0                 __size_of_machineConfig 0064  
                        ??i2_lcdNibble 0001                               _printRTC 2736  
                          ??_lcdNibble 0080                              printRTC@i 00C2  
                             int$flags 007E                           ??_sensorTest 00AB  
                       _log_total_time 00F6                     _f_can_coming_to_ID 0131  
                            printf@len 00A3                              printf@val 00A5  
    __end_ofi2_change_state_to_menu_12 50F8      __end_ofi2_change_state_to_menu_22 50C8  
                             loadRTC@i 0096                 __end_of_printSortTimer 2F68  
                            putch@data 0082               __end_of_I2C_Master_Start 5538  
                          _OSCTUNEbits 000F9B               __end_of_I2C_Master_Write 5516  
                           _INTCONbits 000FF2                   ?_updateServoPosition 0080  
                         ??_updateMenu 0043                        ??_algorithmTest 00AB  
                           _MAG_signal 00E8                               isdigit@c 0082  
                        sensorTest@res 00AD                         ??_actuatorTest 00AB  
                  _servo_timer_counter 006D                               intlevel2 0000  
                       ??_EEPROM_write 00AE                     __end_of_sensorTest 246A  
                     ___lwmod@dividend 0087                       ___lldiv@dividend 0080  
                         ?_EEPROM_read 0080                    __end_of_stopSignals 5464  
            ??_change_state_to_menu_11 002A              ??_change_state_to_menu_12 00AB  
            ??_change_state_to_menu_22 00AB              ??_change_state_to_menu_23 002A  
            ??_change_state_to_logs_11 002A              ??_change_state_to_logs_12 002A  
            ??_change_state_to_logs_22 002A              ??_change_state_to_logs_23 002A  
            ??_change_state_to_logs_33 002A              ??_change_state_to_logs_34 002A  
                             printf@ap 00A1                               printf@cp 009F  
                   __end_of_updateMenu 2CC0                __end_of_I2C_Master_Init 4C7C  
              __end_of_I2C_Master_Read 5276                __end_of_I2C_Master_Wait 54C2  
                        ??_BlockerTest 00AB                __end_of_I2C_Master_Stop 5530  
                        printRTC@F3231 014B                            lcdInst@data 0082  
                         retrieveLog@i 000E                            _retrieveLog 3C7E  
                  __end_ofi2_lcdNibble 4D2E                  ??_updateServoPosition 0084  
                      ?_printSortTimer 0001                     _servo_timer_target 006F  
                     ___lldiv@quotient 0088                      I2C_Master_Write@d 0081  
                          ?_EEPROMTest 0001                        ___lwmod@divisor 0089  
                       _updateArmState 4EEE                      _f_can_distributed 0135  
                             strcpy@cp 0084                               strcpy@to 0080  
                        _machineConfig 4B56                        ___lwmod@counter 008B  
                    _updateServoStates 37EE                          printRTC@month 00BE  
                        ?_Distribution 0001                     ?_updateServoStates 0001  
                        _machine_state 00FC                          dispLogs@myLog 0012  
                       _f_arm_position 00EE                    ??_updateServoStates 0009  
                   i2printRTC@INT_time 002D  
