

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Wed Mar 29 14:00:53 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    11                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,delta=1
    49                           	psect	text35,global,reloc=2,class=CODE,delta=1
    50                           	psect	text36,global,reloc=2,class=CODE,delta=1
    51                           	psect	text37,global,reloc=2,class=CODE,delta=1
    52                           	psect	text38,global,reloc=2,class=CODE,delta=1
    53                           	psect	text39,global,reloc=2,class=CODE,delta=1
    54                           	psect	text40,global,reloc=2,class=CODE,delta=1
    55                           	psect	text41,global,reloc=2,class=CODE,delta=1
    56                           	psect	text42,global,reloc=2,class=CODE,delta=1
    57                           	psect	text43,global,reloc=2,class=CODE,delta=1
    58                           	psect	text44,global,reloc=2,class=CODE,delta=1
    59                           	psect	text45,global,reloc=2,class=CODE,delta=1
    60                           	psect	text46,global,reloc=2,class=CODE,delta=1
    61                           	psect	text47,global,reloc=2,class=CODE,delta=1
    62                           	psect	text48,global,reloc=2,class=CODE,delta=1
    63                           	psect	text49,global,reloc=2,class=CODE,delta=1
    64                           	psect	text50,global,reloc=2,class=CODE,delta=1
    65                           	psect	text51,global,reloc=2,class=CODE,delta=1
    66                           	psect	text52,global,reloc=2,class=CODE,delta=1
    67                           	psect	text53,global,reloc=2,class=CODE,delta=1
    68                           	psect	text54,global,reloc=2,class=CODE,delta=1
    69                           	psect	text55,global,reloc=2,class=CODE,delta=1
    70                           	psect	text56,global,reloc=2,class=CODE,delta=1
    71                           	psect	text57,global,reloc=2,class=CODE,delta=1
    72                           	psect	text58,global,reloc=2,class=CODE,delta=1
    73                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    74                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    75                           	psect	text60,global,reloc=2,class=CODE,delta=1
    76                           	psect	text61,global,reloc=2,class=CODE,delta=1
    77                           	psect	text62,global,reloc=2,class=CODE,delta=1
    78                           	psect	text63,global,reloc=2,class=CODE,delta=1
    79                           	psect	text64,global,reloc=2,class=CODE,delta=1
    80                           	psect	text65,global,reloc=2,class=CODE,delta=1
    81                           	psect	text66,global,reloc=2,class=CODE,delta=1
    82                           	psect	text67,global,reloc=2,class=CODE,delta=1
    83                           	psect	text68,global,reloc=2,class=CODE,delta=1
    84                           	psect	text69,global,reloc=2,class=CODE,delta=1
    85                           	psect	text70,global,reloc=2,class=CODE,delta=1
    86                           	psect	text71,global,reloc=2,class=CODE,delta=1
    87                           	psect	text72,global,reloc=2,class=CODE,delta=1
    88                           	psect	text73,global,reloc=2,class=CODE,delta=1
    89                           	psect	text74,global,reloc=2,class=CODE,delta=1
    90                           	psect	text75,global,reloc=2,class=CODE,delta=1
    91                           	psect	text76,global,reloc=2,class=CODE,delta=1
    92                           	psect	text77,global,reloc=2,class=CODE,delta=1
    93                           	psect	text78,global,reloc=2,class=CODE,delta=1
    94                           	psect	text79,global,reloc=2,class=CODE,delta=1
    95                           	psect	text80,global,reloc=2,class=CODE,delta=1
    96                           	psect	text81,global,reloc=2,class=CODE,delta=1
    97                           	psect	text82,global,reloc=2,class=CODE,delta=1
    98                           	psect	text83,global,reloc=2,class=CODE,delta=1
    99                           	psect	text84,global,reloc=2,class=CODE,delta=1
   100                           	psect	text85,global,reloc=2,class=CODE,delta=1
   101                           	psect	text86,global,reloc=2,class=CODE,delta=1
   102                           	psect	text87,global,reloc=2,class=CODE,delta=1
   103                           	psect	text88,global,reloc=2,class=CODE,delta=1
   104                           	psect	text89,global,reloc=2,class=CODE,delta=1
   105                           	psect	text90,global,reloc=2,class=CODE,delta=1
   106                           	psect	text91,global,reloc=2,class=CODE,delta=1
   107                           	psect	text92,global,reloc=2,class=CODE,delta=1
   108                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   109                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   110                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   111  0000                     
   112                           ; Version 1.40
   113                           ; Generated 01/12/2016 GMT
   114                           ; 
   115                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
   116                           ; All rights reserved.
   117                           ; 
   118                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   119                           ; 
   120                           ; Redistribution and use in source and binary forms, with or without modification, are
   121                           ; permitted provided that the following conditions are met:
   122                           ; 
   123                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   124                           ;        conditions and the following disclaimer.
   125                           ; 
   126                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   127                           ;        of conditions and the following disclaimer in the documentation and/or other
   128                           ;        materials provided with the distribution.
   129                           ; 
   130                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   131                           ;        software without specific prior written permission.
   132                           ; 
   133                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   134                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   135                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   136                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   137                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   138                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   139                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   140                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   141                           ; 
   142                           ; 
   143                           ; Code-generator required, PIC18F4620 Definitions
   144                           ; 
   145                           ; SFR Addresses
   146  0000                     
   147                           	psect	idataBANK1
   148  00508C                     __pidataBANK1:
   149                           	opt stack 0
   150                           
   151                           ;initializer for UI@F3228
   152  00508C  4D                 	db	77
   153  00508D  4D                 	db	77
   154  00508E  4D                 	db	77
   155  00508F  00                 	db	0
   156                           
   157                           ;initializer for printRTC@F3219
   158  005090  4D                 	db	77
   159  005091  4D                 	db	77
   160  005092  4D                 	db	77
   161  005093  00                 	db	0
   162                           
   163                           	psect	mediumconst
   164  00FAEE                     __pmediumconst:
   165                           	opt stack 0
   166  00FAEE  00                 	db	0
   167  00FAEF                     _keys:
   168                           	opt stack 0
   169  00FAEF  31                 	db	49
   170  00FAF0  32                 	db	50
   171  00FAF1  33                 	db	51
   172  00FAF2  41                 	db	65
   173  00FAF3  34                 	db	52
   174  00FAF4  35                 	db	53
   175  00FAF5  36                 	db	54
   176  00FAF6  42                 	db	66
   177  00FAF7  37                 	db	55
   178  00FAF8  38                 	db	56
   179  00FAF9  39                 	db	57
   180  00FAFA  43                 	db	67
   181  00FAFB  2A                 	db	42
   182  00FAFC  30                 	db	48
   183  00FAFD  23                 	db	35
   184  00FAFE  44                 	db	68
   185  00FAFF  00                 	db	0
   186  00FB00                     __end_of_keys:
   187                           	opt stack 0
   188  00FB00                     _dpowers:
   189                           	opt stack 0
   190  00FB00  0001               	dw	1
   191  00FB02  000A               	dw	10
   192  00FB04  0064               	dw	100
   193  00FB06  03E8               	dw	1000
   194  00FB08  2710               	dw	10000
   195  00FB0A                     __end_of_dpowers:
   196                           	opt stack 0
   197  0000                     _ADCON0	set	4034
   198  0000                     _ADCON0bits	set	4034
   199  0000                     _ADCON1	set	4033
   200  0000                     _ADCON2	set	4032
   201  0000                     _ADRESH	set	4036
   202  0000                     _ADRESL	set	4035
   203  0000                     _CMCONbits	set	4020
   204  0000                     _CVRCON	set	4021
   205  0000                     _EEADR	set	4009
   206  0000                     _EEADRH	set	4010
   207  0000                     _EECON1bits	set	4006
   208  0000                     _EECON2	set	4007
   209  0000                     _EEDATA	set	4008
   210  0000                     _INTCONbits	set	4082
   211  0000                     _LATA	set	3977
   212  0000                     _LATAbits	set	3977
   213  0000                     _LATB	set	3978
   214  0000                     _LATC	set	3979
   215  0000                     _LATCbits	set	3979
   216  0000                     _LATD	set	3980
   217  0000                     _LATDbits	set	3980
   218  0000                     _LATE	set	3981
   219  0000                     _LATEbits	set	3981
   220  0000                     _OSCCON	set	4051
   221  0000                     _OSCTUNEbits	set	3995
   222  0000                     _PIR2bits	set	4001
   223  0000                     _PORTAbits	set	3968
   224  0000                     _PORTB	set	3969
   225  0000                     _PORTBbits	set	3969
   226  0000                     _SSPADD	set	4040
   227  0000                     _SSPBUF	set	4041
   228  0000                     _SSPCON1	set	4038
   229  0000                     _SSPCON2	set	4037
   230  0000                     _SSPSTAT	set	4039
   231  0000                     _T0CON	set	4053
   232  0000                     _T1CON	set	4045
   233  0000                     _T3CON	set	4017
   234  0000                     _TMR0H	set	4055
   235  0000                     _TMR0L	set	4054
   236  0000                     _TMR1H	set	4047
   237  0000                     _TMR1L	set	4046
   238  0000                     _TMR3H	set	4019
   239  0000                     _TMR3L	set	4018
   240  0000                     _TRISA	set	3986
   241  0000                     _TRISB	set	3987
   242  0000                     _TRISC	set	3988
   243  0000                     _TRISD	set	3989
   244  0000                     _TRISE	set	3990
   245  0000                     _ACKDT	set	32301
   246  0000                     _ACKEN	set	32300
   247  0000                     _ADIE	set	31982
   248  0000                     _INT1IE	set	32643
   249  0000                     _INT1IF	set	32640
   250  0000                     _PEIE	set	32662
   251  0000                     _PEN	set	32298
   252  0000                     _RCEN	set	32299
   253  0000                     _RSEN	set	32297
   254  0000                     _SEN	set	32296
   255  0000                     _TMR0IE	set	32661
   256  0000                     _TMR0IF	set	32658
   257  0000                     _TMR0ON	set	32431
   258  0000                     _TMR1IE	set	31976
   259  0000                     _TMR1IF	set	31984
   260  0000                     _TMR1ON	set	32360
   261  0000                     _TMR2IE	set	31977
   262  0000                     _TMR3IE	set	32001
   263  0000                     _TMR3IF	set	32009
   264  0000                     _TMR3ON	set	32136
   265  0000                     _TRISC3	set	31907
   266  0000                     _TRISC4	set	31908
   267  0000                     _nRBPU	set	32655
   268  00FB0A                     STR_21:
   269  00FB0A  25                 	db	37
   270  00FB0B  30                 	db	48	;'0'
   271  00FB0C  32                 	db	50	;'2'
   272  00FB0D  64                 	db	100	;'d'
   273  00FB0E  25                 	db	37
   274  00FB0F  73                 	db	115	;'s'
   275  00FB10  20                 	db	32
   276  00FB11  7C                 	db	124
   277  00FB12  20                 	db	32
   278  00FB13  25                 	db	37
   279  00FB14  30                 	db	48	;'0'
   280  00FB15  32                 	db	50	;'2'
   281  00FB16  64                 	db	100	;'d'
   282  00FB17  3A                 	db	58	;':'
   283  00FB18  25                 	db	37
   284  00FB19  30                 	db	48	;'0'
   285  00FB1A  32                 	db	50	;'2'
   286  00FB1B  64                 	db	100	;'d'
   287  00FB1C  3A                 	db	58	;':'
   288  00FB1D  25                 	db	37
   289  00FB1E  30                 	db	48	;'0'
   290  00FB1F  32                 	db	50	;'2'
   291  00FB20  64                 	db	100	;'d'
   292  00FB21  00                 	db	0
   293  00FB22                     STR_66:
   294  00FB22  28                 	db	40
   295  00FB23  64                 	db	100	;'d'
   296  00FB24  61                 	db	97	;'a'
   297  00FB25  74                 	db	116	;'t'
   298  00FB26  61                 	db	97	;'a'
   299  00FB27  3A                 	db	58	;':'
   300  00FB28  20                 	db	32
   301  00FB29  25                 	db	37
   302  00FB2A  75                 	db	117	;'u'
   303  00FB2B  2C                 	db	44
   304  00FB2C  20                 	db	32
   305  00FB2D  61                 	db	97	;'a'
   306  00FB2E  64                 	db	100	;'d'
   307  00FB2F  64                 	db	100	;'d'
   308  00FB30  72                 	db	114	;'r'
   309  00FB31  3A                 	db	58	;':'
   310  00FB32  20                 	db	32
   311  00FB33  25                 	db	37
   312  00FB34  75                 	db	117	;'u'
   313  00FB35  29                 	db	41
   314  00FB36  00                 	db	0
   315  00FB37                     STR_111:
   316  00FB37  44                 	db	68	;'D'
   317  00FB38  20                 	db	32
   318  00FB39  57                 	db	87	;'W'
   319  00FB3A  49                 	db	73	;'I'
   320  00FB3B  4C                 	db	76	;'L'
   321  00FB3C  4C                 	db	76	;'L'
   322  00FB3D  20                 	db	32
   323  00FB3E  52                 	db	82	;'R'
   324  00FB3F  45                 	db	69	;'E'
   325  00FB40  54                 	db	84	;'T'
   326  00FB41  55                 	db	85	;'U'
   327  00FB42  52                 	db	82	;'R'
   328  00FB43  4E                 	db	78	;'N'
   329  00FB44  20                 	db	32
   330  00FB45  20                 	db	32
   331  00FB46  20                 	db	32
   332  00FB47  20                 	db	32
   333  00FB48  00                 	db	0
   334  00FB49                     STR_112:
   335  00FB49  4F                 	db	79	;'O'
   336  00FB4A  54                 	db	84	;'T'
   337  00FB4B  48                 	db	72	;'H'
   338  00FB4C  45                 	db	69	;'E'
   339  00FB4D  52                 	db	82	;'R'
   340  00FB4E  20                 	db	32
   341  00FB4F  53                 	db	83	;'S'
   342  00FB50  45                 	db	69	;'E'
   343  00FB51  54                 	db	84	;'T'
   344  00FB52  53                 	db	83	;'S'
   345  00FB53  20                 	db	32
   346  00FB54  52                 	db	82	;'R'
   347  00FB55  41                 	db	65	;'A'
   348  00FB56  35                 	db	53	;'5'
   349  00FB57  20                 	db	32
   350  00FB58  20                 	db	32
   351  00FB59  20                 	db	32
   352  00FB5A  00                 	db	0
   353  00FB5B                     STR_120:
   354  00FB5B  53                 	db	83	;'S'
   355  00FB5C  3A                 	db	58	;':'
   356  00FB5D  20                 	db	32
   357  00FB5E  44                 	db	68	;'D'
   358  00FB5F  20                 	db	32
   359  00FB60  57                 	db	87	;'W'
   360  00FB61  49                 	db	73	;'I'
   361  00FB62  4C                 	db	76	;'L'
   362  00FB63  4C                 	db	76	;'L'
   363  00FB64  20                 	db	32
   364  00FB65  52                 	db	82	;'R'
   365  00FB66  45                 	db	69	;'E'
   366  00FB67  54                 	db	84	;'T'
   367  00FB68  55                 	db	85	;'U'
   368  00FB69  52                 	db	82	;'R'
   369  00FB6A  4E                 	db	78	;'N'
   370  00FB6B  20                 	db	32
   371  00FB6C  00                 	db	0
   372  00FB6D                     STR_123:
   373  00FB6D  4F                 	db	79	;'O'
   374  00FB6E  54                 	db	84	;'T'
   375  00FB6F  48                 	db	72	;'H'
   376  00FB70  45                 	db	69	;'E'
   377  00FB71  52                 	db	82	;'R'
   378  00FB72  3A                 	db	58	;':'
   379  00FB73  20                 	db	32
   380  00FB74  43                 	db	67	;'C'
   381  00FB75  41                 	db	65	;'A'
   382  00FB76  4D                 	db	77	;'M'
   383  00FB77  20                 	db	32
   384  00FB78  54                 	db	84	;'T'
   385  00FB79  4F                 	db	79	;'O'
   386  00FB7A  47                 	db	71	;'G'
   387  00FB7B  47                 	db	71	;'G'
   388  00FB7C  4C                 	db	76	;'L'
   389  00FB7D  45                 	db	69	;'E'
   390  00FB7E  00                 	db	0
   391  00FB7F                     STR_122:
   392  00FB7F  44                 	db	68	;'D'
   393  00FB80  3A                 	db	58	;':'
   394  00FB81  20                 	db	32
   395  00FB82  52                 	db	82	;'R'
   396  00FB83  45                 	db	69	;'E'
   397  00FB84  54                 	db	84	;'T'
   398  00FB85  7C                 	db	124
   399  00FB86  32                 	db	50	;'2'
   400  00FB87  3A                 	db	58	;':'
   401  00FB88  20                 	db	32
   402  00FB89  43                 	db	67	;'C'
   403  00FB8A  4F                 	db	79	;'O'
   404  00FB8B  4E                 	db	78	;'N'
   405  00FB8C  44                 	db	68	;'D'
   406  00FB8D  20                 	db	32
   407  00FB8E  25                 	db	37
   408  00FB8F  64                 	db	100	;'d'
   409  00FB90  00                 	db	0
   410  00FB91                     STR_3:
   411  00FB91  2D                 	db	45
   412  00FB92  2D                 	db	45
   413  00FB93  20                 	db	32
   414  00FB94  4C                 	db	76	;'L'
   415  00FB95  4F                 	db	79	;'O'
   416  00FB96  47                 	db	71	;'G'
   417  00FB97  20                 	db	32
   418  00FB98  25                 	db	37
   419  00FB99  32                 	db	50	;'2'
   420  00FB9A  64                 	db	100	;'d'
   421  00FB9B  20                 	db	32
   422  00FB9C  48                 	db	72	;'H'
   423  00FB9D  45                 	db	69	;'E'
   424  00FB9E  52                 	db	82	;'R'
   425  00FB9F  45                 	db	69	;'E'
   426  00FBA0  2D                 	db	45
   427  00FBA1  2D                 	db	45
   428  00FBA2  00                 	db	0
   429  00FBA3                     STR_1:
   430  00FBA3  52                 	db	82	;'R'
   431  00FBA4  45                 	db	69	;'E'
   432  00FBA5  53                 	db	83	;'S'
   433  00FBA6  55                 	db	85	;'U'
   434  00FBA7  4C                 	db	76	;'L'
   435  00FBA8  54                 	db	84	;'T'
   436  00FBA9  53                 	db	83	;'S'
   437  00FBAA  20                 	db	32
   438  00FBAB  49                 	db	73	;'I'
   439  00FBAC  4E                 	db	78	;'N'
   440  00FBAD  20                 	db	32
   441  00FBAE  4C                 	db	76	;'L'
   442  00FBAF  4F                 	db	79	;'O'
   443  00FBB0  47                 	db	71	;'G'
   444  00FBB1  20                 	db	32
   445  00FBB2  25                 	db	37
   446  00FBB3  64                 	db	100	;'d'
   447  00FBB4  00                 	db	0
   448  00FBB5                     STR_102:
   449  00FBB5  4D                 	db	77	;'M'
   450  00FBB6  49                 	db	73	;'I'
   451  00FBB7  44                 	db	68	;'D'
   452  00FBB8  20                 	db	32
   453  00FBB9  2D                 	db	45
   454  00FBBA  2D                 	db	45
   455  00FBBB  20                 	db	32
   456  00FBBC  32                 	db	50	;'2'
   457  00FBBD  73                 	db	115	;'s'
   458  00FBBE  20                 	db	32
   459  00FBBF  20                 	db	32
   460  00FBC0  20                 	db	32
   461  00FBC1  20                 	db	32
   462  00FBC2  20                 	db	32
   463  00FBC3  20                 	db	32
   464  00FBC4  20                 	db	32
   465  00FBC5  00                 	db	0
   466  00FBC6                     STR_105:
   467  00FBC6  44                 	db	68	;'D'
   468  00FBC7  52                 	db	82	;'R'
   469  00FBC8  4F                 	db	79	;'O'
   470  00FBC9  50                 	db	80	;'P'
   471  00FBCA  20                 	db	32
   472  00FBCB  2D                 	db	45
   473  00FBCC  2D                 	db	45
   474  00FBCD  20                 	db	32
   475  00FBCE  32                 	db	50	;'2'
   476  00FBCF  73                 	db	115	;'s'
   477  00FBD0  20                 	db	32
   478  00FBD1  20                 	db	32
   479  00FBD2  20                 	db	32
   480  00FBD3  20                 	db	32
   481  00FBD4  20                 	db	32
   482  00FBD5  20                 	db	32
   483  00FBD6  00                 	db	0
   484  00FBD7                     STR_99:
   485  00FBD7  4C                 	db	76	;'L'
   486  00FBD8  45                 	db	69	;'E'
   487  00FBD9  46                 	db	70	;'F'
   488  00FBDA  54                 	db	84	;'T'
   489  00FBDB  20                 	db	32
   490  00FBDC  2D                 	db	45
   491  00FBDD  2D                 	db	45
   492  00FBDE  20                 	db	32
   493  00FBDF  32                 	db	50	;'2'
   494  00FBE0  73                 	db	115	;'s'
   495  00FBE1  20                 	db	32
   496  00FBE2  20                 	db	32
   497  00FBE3  20                 	db	32
   498  00FBE4  20                 	db	32
   499  00FBE5  20                 	db	32
   500  00FBE6  20                 	db	32
   501  00FBE7  00                 	db	0
   502  00FBE8                     STR_104:
   503  00FBE8  4C                 	db	76	;'L'
   504  00FBE9  45                 	db	69	;'E'
   505  00FBEA  56                 	db	86	;'V'
   506  00FBEB  45                 	db	69	;'E'
   507  00FBEC  4C                 	db	76	;'L'
   508  00FBED  20                 	db	32
   509  00FBEE  2D                 	db	45
   510  00FBEF  2D                 	db	45
   511  00FBF0  20                 	db	32
   512  00FBF1  32                 	db	50	;'2'
   513  00FBF2  73                 	db	115	;'s'
   514  00FBF3  20                 	db	32
   515  00FBF4  20                 	db	32
   516  00FBF5  20                 	db	32
   517  00FBF6  20                 	db	32
   518  00FBF7  20                 	db	32
   519  00FBF8  00                 	db	0
   520  00FBF9                     STR_98:
   521  00FBF9  52                 	db	82	;'R'
   522  00FBFA  49                 	db	73	;'I'
   523  00FBFB  47                 	db	71	;'G'
   524  00FBFC  48                 	db	72	;'H'
   525  00FBFD  54                 	db	84	;'T'
   526  00FBFE  20                 	db	32
   527  00FBFF  2D                 	db	45
   528  00FC00  2D                 	db	45
   529  00FC01  20                 	db	32
   530  00FC02  32                 	db	50	;'2'
   531  00FC03  73                 	db	115	;'s'
   532  00FC04  20                 	db	32
   533  00FC05  20                 	db	32
   534  00FC06  20                 	db	32
   535  00FC07  20                 	db	32
   536  00FC08  20                 	db	32
   537  00FC09  00                 	db	0
   538  00FC0A                     STR_97:
   539  00FC0A  4D                 	db	77	;'M'
   540  00FC0B  49                 	db	73	;'I'
   541  00FC0C  44                 	db	68	;'D'
   542  00FC0D  44                 	db	68	;'D'
   543  00FC0E  4C                 	db	76	;'L'
   544  00FC0F  45                 	db	69	;'E'
   545  00FC10  20                 	db	32
   546  00FC11  2D                 	db	45
   547  00FC12  2D                 	db	45
   548  00FC13  20                 	db	32
   549  00FC14  32                 	db	50	;'2'
   550  00FC15  73                 	db	115	;'s'
   551  00FC16  20                 	db	32
   552  00FC17  20                 	db	32
   553  00FC18  20                 	db	32
   554  00FC19  20                 	db	32
   555  00FC1A  00                 	db	0
   556  00FC1B  44                 	db	68	;'D'
   557  00FC1C  20                 	db	32
   558  00FC1D  57                 	db	87	;'W'
   559  00FC1E  49                 	db	73	;'I'
   560  00FC1F  4C                 	db	76	;'L'
   561  00FC20  4C                 	db	76	;'L'
   562  00FC21  20                 	db	32
   563  00FC22  52                 	db	82	;'R'
   564  00FC23  45                 	db	69	;'E'
   565  00FC24  54                 	db	84	;'T'
   566  00FC25  55                 	db	85	;'U'
   567  00FC26  52                 	db	82	;'R'
   568  00FC27  4E                 	db	78	;'N'
   569  00FC28  20                 	db	32
   570  00FC29  20                 	db	32
   571  00FC2A  20                 	db	32
   572  00FC2B  00                 	db	0
   573  00FC2C                     STR_100:
   574  00FC2C  4D                 	db	77	;'M'
   575  00FC2D  49                 	db	73	;'I'
   576  00FC2E  44                 	db	68	;'D'
   577  00FC2F  2D                 	db	45
   578  00FC30  4C                 	db	76	;'L'
   579  00FC31  45                 	db	69	;'E'
   580  00FC32  46                 	db	70	;'F'
   581  00FC33  54                 	db	84	;'T'
   582  00FC34  20                 	db	32
   583  00FC35  2D                 	db	45
   584  00FC36  2D                 	db	45
   585  00FC37  20                 	db	32
   586  00FC38  32                 	db	50	;'2'
   587  00FC39  73                 	db	115	;'s'
   588  00FC3A  20                 	db	32
   589  00FC3B  20                 	db	32
   590  00FC3C  00                 	db	0
   591  00FC3D                     STR_101:
   592  00FC3D  4D                 	db	77	;'M'
   593  00FC3E  49                 	db	73	;'I'
   594  00FC3F  44                 	db	68	;'D'
   595  00FC40  2D                 	db	45
   596  00FC41  52                 	db	82	;'R'
   597  00FC42  49                 	db	73	;'I'
   598  00FC43  47                 	db	71	;'G'
   599  00FC44  48                 	db	72	;'H'
   600  00FC45  54                 	db	84	;'T'
   601  00FC46  20                 	db	32
   602  00FC47  2D                 	db	45
   603  00FC48  2D                 	db	45
   604  00FC49  20                 	db	32
   605  00FC4A  32                 	db	50	;'2'
   606  00FC4B  73                 	db	115	;'s'
   607  00FC4C  20                 	db	32
   608  00FC4D  00                 	db	0
   609  00FC4E  45                 	db	69	;'E'
   610  00FC4F  4C                 	db	76	;'L'
   611  00FC50  53                 	db	83	;'S'
   612  00FC51  45                 	db	69	;'E'
   613  00FC52  20                 	db	32
   614  00FC53  54                 	db	84	;'T'
   615  00FC54  4F                 	db	79	;'O'
   616  00FC55  47                 	db	71	;'G'
   617  00FC56  47                 	db	71	;'G'
   618  00FC57  4C                 	db	76	;'L'
   619  00FC58  45                 	db	69	;'E'
   620  00FC59  53                 	db	83	;'S'
   621  00FC5A  20                 	db	32
   622  00FC5B  52                 	db	82	;'R'
   623  00FC5C  41                 	db	65	;'A'
   624  00FC5D  35                 	db	53	;'5'
   625  00FC5E  00                 	db	0
   626  00FC5F                     STR_72:
   627  00FC5F  41                 	db	65	;'A'
   628  00FC60  4C                 	db	76	;'L'
   629  00FC61  47                 	db	71	;'G'
   630  00FC62  31                 	db	49	;'1'
   631  00FC63  3A                 	db	58	;':'
   632  00FC64  20                 	db	32
   633  00FC65  39                 	db	57	;'9'
   634  00FC66  20                 	db	32
   635  00FC67  50                 	db	80	;'P'
   636  00FC68  4F                 	db	79	;'O'
   637  00FC69  50                 	db	80	;'P'
   638  00FC6A  4E                 	db	78	;'N'
   639  00FC6B  4F                 	db	79	;'O'
   640  00FC6C  54                 	db	84	;'T'
   641  00FC6D  41                 	db	65	;'A'
   642  00FC6E  42                 	db	66	;'B'
   643  00FC6F  00                 	db	0
   644  00FC70                     STR_92:
   645  00FC70  54                 	db	84	;'T'
   646  00FC71  53                 	db	83	;'S'
   647  00FC72  54                 	db	84	;'T'
   648  00FC73  3A                 	db	58	;':'
   649  00FC74  20                 	db	32
   650  00FC75  43                 	db	67	;'C'
   651  00FC76  4F                 	db	79	;'O'
   652  00FC77  4E                 	db	78	;'N'
   653  00FC78  44                 	db	68	;'D'
   654  00FC79  20                 	db	32
   655  00FC7A  53                 	db	83	;'S'
   656  00FC7B  4F                 	db	79	;'O'
   657  00FC7C  4C                 	db	76	;'L'
   658  00FC7D  4E                 	db	78	;'N'
   659  00FC7E  27                 	db	39
   660  00FC7F  44                 	db	68	;'D'
   661  00FC80  00                 	db	0
   662  00FC81                     STR_94:
   663  00FC81  54                 	db	84	;'T'
   664  00FC82  53                 	db	83	;'S'
   665  00FC83  54                 	db	84	;'T'
   666  00FC84  3A                 	db	58	;':'
   667  00FC85  20                 	db	32
   668  00FC86  50                 	db	80	;'P'
   669  00FC87  55                 	db	85	;'U'
   670  00FC88  53                 	db	83	;'S'
   671  00FC89  48                 	db	72	;'H'
   672  00FC8A  20                 	db	32
   673  00FC8B  53                 	db	83	;'S'
   674  00FC8C  4F                 	db	79	;'O'
   675  00FC8D  4C                 	db	76	;'L'
   676  00FC8E  4E                 	db	78	;'N'
   677  00FC8F  27                 	db	39
   678  00FC90  44                 	db	68	;'D'
   679  00FC91  00                 	db	0
   680  00FC92                     STR_68:
   681  00FC92  32                 	db	50	;'2'
   682  00FC93  2E                 	db	46
   683  00FC94  53                 	db	83	;'S'
   684  00FC95  4E                 	db	78	;'N'
   685  00FC96  52                 	db	82	;'R'
   686  00FC97  7C                 	db	124
   687  00FC98  34                 	db	52	;'4'
   688  00FC99  2E                 	db	46
   689  00FC9A  48                 	db	72	;'H'
   690  00FC9B  49                 	db	73	;'I'
   691  00FC9C  7C                 	db	124
   692  00FC9D  35                 	db	53	;'5'
   693  00FC9E  2E                 	db	46
   694  00FC9F  4D                 	db	77	;'M'
   695  00FCA0  45                 	db	69	;'E'
   696  00FCA1  44                 	db	68	;'D'
   697  00FCA2  00                 	db	0
   698  00FCA3                     STR_69:
   699  00FCA3  42                 	db	66	;'B'
   700  00FCA4  2E                 	db	46
   701  00FCA5  50                 	db	80	;'P'
   702  00FCA6  53                 	db	83	;'S'
   703  00FCA7  48                 	db	72	;'H'
   704  00FCA8  7C                 	db	124
   705  00FCA9  38                 	db	56	;'8'
   706  00FCAA  2E                 	db	46
   707  00FCAB  53                 	db	83	;'S'
   708  00FCAC  56                 	db	86	;'V'
   709  00FCAD  7C                 	db	124
   710  00FCAE  39                 	db	57	;'9'
   711  00FCAF  2E                 	db	46
   712  00FCB0  42                 	db	66	;'B'
   713  00FCB1  4C                 	db	76	;'L'
   714  00FCB2  4B                 	db	75	;'K'
   715  00FCB3  00                 	db	0
   716  00FCB4                     STR_110:
   717  00FCB4  54                 	db	84	;'T'
   718  00FCB5  53                 	db	83	;'S'
   719  00FCB6  54                 	db	84	;'T'
   720  00FCB7  3A                 	db	58	;':'
   721  00FCB8  20                 	db	32
   722  00FCB9  42                 	db	66	;'B'
   723  00FCBA  4F                 	db	79	;'O'
   724  00FCBB  54                 	db	84	;'T'
   725  00FCBC  48                 	db	72	;'H'
   726  00FCBD  20                 	db	32
   727  00FCBE  53                 	db	83	;'S'
   728  00FCBF  45                 	db	69	;'E'
   729  00FCC0  52                 	db	82	;'R'
   730  00FCC1  56                 	db	86	;'V'
   731  00FCC2  4F                 	db	79	;'O'
   732  00FCC3  53                 	db	83	;'S'
   733  00FCC4  00                 	db	0
   734  00FCC5                     STR_41:
   735  00FCC5  4C                 	db	76	;'L'
   736  00FCC6  4F                 	db	79	;'O'
   737  00FCC7  47                 	db	71	;'G'
   738  00FCC8  20                 	db	32
   739  00FCC9  31                 	db	49	;'1'
   740  00FCCA  20                 	db	32
   741  00FCCB  20                 	db	32
   742  00FCCC  20                 	db	32
   743  00FCCD  20                 	db	32
   744  00FCCE  20                 	db	32
   745  00FCCF  20                 	db	32
   746  00FCD0  20                 	db	32
   747  00FCD1  20                 	db	32
   748  00FCD2  20                 	db	32
   749  00FCD3  20                 	db	32
   750  00FCD4  20                 	db	32
   751  00FCD5  00                 	db	0
   752  00FCD6                     STR_40:
   753  00FCD6  4C                 	db	76	;'L'
   754  00FCD7  4F                 	db	79	;'O'
   755  00FCD8  47                 	db	71	;'G'
   756  00FCD9  20                 	db	32
   757  00FCDA  32                 	db	50	;'2'
   758  00FCDB  20                 	db	32
   759  00FCDC  20                 	db	32
   760  00FCDD  20                 	db	32
   761  00FCDE  20                 	db	32
   762  00FCDF  20                 	db	32
   763  00FCE0  20                 	db	32
   764  00FCE1  20                 	db	32
   765  00FCE2  20                 	db	32
   766  00FCE3  20                 	db	32
   767  00FCE4  20                 	db	32
   768  00FCE5  20                 	db	32
   769  00FCE6  00                 	db	0
   770  00FCE7                     STR_44:
   771  00FCE7  4C                 	db	76	;'L'
   772  00FCE8  4F                 	db	79	;'O'
   773  00FCE9  47                 	db	71	;'G'
   774  00FCEA  20                 	db	32
   775  00FCEB  33                 	db	51	;'3'
   776  00FCEC  20                 	db	32
   777  00FCED  20                 	db	32
   778  00FCEE  20                 	db	32
   779  00FCEF  20                 	db	32
   780  00FCF0  20                 	db	32
   781  00FCF1  20                 	db	32
   782  00FCF2  20                 	db	32
   783  00FCF3  20                 	db	32
   784  00FCF4  20                 	db	32
   785  00FCF5  20                 	db	32
   786  00FCF6  20                 	db	32
   787  00FCF7  00                 	db	0
   788  00FCF8                     STR_48:
   789  00FCF8  4C                 	db	76	;'L'
   790  00FCF9  4F                 	db	79	;'O'
   791  00FCFA  47                 	db	71	;'G'
   792  00FCFB  20                 	db	32
   793  00FCFC  34                 	db	52	;'4'
   794  00FCFD  20                 	db	32
   795  00FCFE  20                 	db	32
   796  00FCFF  20                 	db	32
   797  00FD00  20                 	db	32
   798  00FD01  20                 	db	32
   799  00FD02  20                 	db	32
   800  00FD03  20                 	db	32
   801  00FD04  20                 	db	32
   802  00FD05  20                 	db	32
   803  00FD06  20                 	db	32
   804  00FD07  20                 	db	32
   805  00FD08  00                 	db	0
   806  00FD09                     STR_36:
   807  00FD09  33                 	db	51	;'3'
   808  00FD0A  2E                 	db	46
   809  00FD0B  20                 	db	32
   810  00FD0C  4C                 	db	76	;'L'
   811  00FD0D  4F                 	db	79	;'O'
   812  00FD0E  47                 	db	71	;'G'
   813  00FD0F  53                 	db	83	;'S'
   814  00FD10  20                 	db	32
   815  00FD11  20                 	db	32
   816  00FD12  20                 	db	32
   817  00FD13  20                 	db	32
   818  00FD14  20                 	db	32
   819  00FD15  20                 	db	32
   820  00FD16  20                 	db	32
   821  00FD17  20                 	db	32
   822  00FD18  20                 	db	32
   823  00FD19  00                 	db	0
   824  00FD1A                     STR_32:
   825  00FD1A  32                 	db	50	;'2'
   826  00FD1B  2E                 	db	46
   827  00FD1C  20                 	db	32
   828  00FD1D  53                 	db	83	;'S'
   829  00FD1E  4F                 	db	79	;'O'
   830  00FD1F  52                 	db	82	;'R'
   831  00FD20  54                 	db	84	;'T'
   832  00FD21  20                 	db	32
   833  00FD22  20                 	db	32
   834  00FD23  20                 	db	32
   835  00FD24  20                 	db	32
   836  00FD25  20                 	db	32
   837  00FD26  20                 	db	32
   838  00FD27  20                 	db	32
   839  00FD28  20                 	db	32
   840  00FD29  20                 	db	32
   841  00FD2A  00                 	db	0
   842  00FD2B                     STR_33:
   843  00FD2B  31                 	db	49	;'1'
   844  00FD2C  2E                 	db	46
   845  00FD2D  20                 	db	32
   846  00FD2E  44                 	db	68	;'D'
   847  00FD2F  41                 	db	65	;'A'
   848  00FD30  54                 	db	84	;'T'
   849  00FD31  45                 	db	69	;'E'
   850  00FD32  2F                 	db	47
   851  00FD33  54                 	db	84	;'T'
   852  00FD34  49                 	db	73	;'I'
   853  00FD35  4D                 	db	77	;'M'
   854  00FD36  45                 	db	69	;'E'
   855  00FD37  20                 	db	32
   856  00FD38  20                 	db	32
   857  00FD39  20                 	db	32
   858  00FD3A  20                 	db	32
   859  00FD3B  00                 	db	0
   860  00FD3C                     STR_24:
   861  00FD3C  20                 	db	32
   862  00FD3D  2D                 	db	45
   863  00FD3E  2D                 	db	45
   864  00FD3F  20                 	db	32
   865  00FD40  50                 	db	80	;'P'
   866  00FD41  4F                 	db	79	;'O'
   867  00FD42  50                 	db	80	;'P'
   868  00FD43  20                 	db	32
   869  00FD44  20                 	db	32
   870  00FD45  43                 	db	67	;'C'
   871  00FD46  41                 	db	65	;'A'
   872  00FD47  4E                 	db	78	;'N'
   873  00FD48  20                 	db	32
   874  00FD49  2D                 	db	45
   875  00FD4A  2D                 	db	45
   876  00FD4B  20                 	db	32
   877  00FD4C  00                 	db	0
   878  00FD4D                     STR_26:
   879  00FD4D  20                 	db	32
   880  00FD4E  2D                 	db	45
   881  00FD4F  2D                 	db	45
   882  00FD50  20                 	db	32
   883  00FD51  53                 	db	83	;'S'
   884  00FD52  4F                 	db	79	;'O'
   885  00FD53  55                 	db	85	;'U'
   886  00FD54  50                 	db	80	;'P'
   887  00FD55  20                 	db	32
   888  00FD56  43                 	db	67	;'C'
   889  00FD57  41                 	db	65	;'A'
   890  00FD58  4E                 	db	78	;'N'
   891  00FD59  20                 	db	32
   892  00FD5A  2D                 	db	45
   893  00FD5B  2D                 	db	45
   894  00FD5C  20                 	db	32
   895  00FD5D  00                 	db	0
   896  00FD5E                     STR_28:
   897  00FD5E  2D                 	db	45
   898  00FD5F  2D                 	db	45
   899  00FD60  20                 	db	32
   900  00FD61  54                 	db	84	;'T'
   901  00FD62  4F                 	db	79	;'O'
   902  00FD63  54                 	db	84	;'T'
   903  00FD64  41                 	db	65	;'A'
   904  00FD65  4C                 	db	76	;'L'
   905  00FD66  20                 	db	32
   906  00FD67  43                 	db	67	;'C'
   907  00FD68  41                 	db	65	;'A'
   908  00FD69  4E                 	db	78	;'N'
   909  00FD6A  53                 	db	83	;'S'
   910  00FD6B  20                 	db	32
   911  00FD6C  2D                 	db	45
   912  00FD6D  2D                 	db	45
   913  00FD6E  00                 	db	0
   914  00FD6F                     STR_39:
   915  00FD6F  4C                 	db	76	;'L'
   916  00FD70  4F                 	db	79	;'O'
   917  00FD71  47                 	db	71	;'G'
   918  00FD72  20                 	db	32
   919  00FD73  31                 	db	49	;'1'
   920  00FD74  20                 	db	32
   921  00FD75  20                 	db	32
   922  00FD76  20                 	db	32
   923  00FD77  20                 	db	32
   924  00FD78  20                 	db	32
   925  00FD79  20                 	db	32
   926  00FD7A  20                 	db	32
   927  00FD7B  20                 	db	32
   928  00FD7C  20                 	db	32
   929  00FD7D  20                 	db	32
   930  00FD7E  3C                 	db	60	;'<'
   931  00FD7F  00                 	db	0
   932  00FD80                     STR_42:
   933  00FD80  4C                 	db	76	;'L'
   934  00FD81  4F                 	db	79	;'O'
   935  00FD82  47                 	db	71	;'G'
   936  00FD83  20                 	db	32
   937  00FD84  32                 	db	50	;'2'
   938  00FD85  20                 	db	32
   939  00FD86  20                 	db	32
   940  00FD87  20                 	db	32
   941  00FD88  20                 	db	32
   942  00FD89  20                 	db	32
   943  00FD8A  20                 	db	32
   944  00FD8B  20                 	db	32
   945  00FD8C  20                 	db	32
   946  00FD8D  20                 	db	32
   947  00FD8E  20                 	db	32
   948  00FD8F  3C                 	db	60	;'<'
   949  00FD90  00                 	db	0
   950  00FD91                     STR_46:
   951  00FD91  4C                 	db	76	;'L'
   952  00FD92  4F                 	db	79	;'O'
   953  00FD93  47                 	db	71	;'G'
   954  00FD94  20                 	db	32
   955  00FD95  33                 	db	51	;'3'
   956  00FD96  20                 	db	32
   957  00FD97  20                 	db	32
   958  00FD98  20                 	db	32
   959  00FD99  20                 	db	32
   960  00FD9A  20                 	db	32
   961  00FD9B  20                 	db	32
   962  00FD9C  20                 	db	32
   963  00FD9D  20                 	db	32
   964  00FD9E  20                 	db	32
   965  00FD9F  20                 	db	32
   966  00FDA0  3C                 	db	60	;'<'
   967  00FDA1  00                 	db	0
   968  00FDA2                     STR_50:
   969  00FDA2  4C                 	db	76	;'L'
   970  00FDA3  4F                 	db	79	;'O'
   971  00FDA4  47                 	db	71	;'G'
   972  00FDA5  20                 	db	32
   973  00FDA6  34                 	db	52	;'4'
   974  00FDA7  20                 	db	32
   975  00FDA8  20                 	db	32
   976  00FDA9  20                 	db	32
   977  00FDAA  20                 	db	32
   978  00FDAB  20                 	db	32
   979  00FDAC  20                 	db	32
   980  00FDAD  20                 	db	32
   981  00FDAE  20                 	db	32
   982  00FDAF  20                 	db	32
   983  00FDB0  20                 	db	32
   984  00FDB1  3C                 	db	60	;'<'
   985  00FDB2  00                 	db	0
   986  00FDB3                     STR_38:
   987  00FDB3  33                 	db	51	;'3'
   988  00FDB4  2E                 	db	46
   989  00FDB5  20                 	db	32
   990  00FDB6  4C                 	db	76	;'L'
   991  00FDB7  4F                 	db	79	;'O'
   992  00FDB8  47                 	db	71	;'G'
   993  00FDB9  53                 	db	83	;'S'
   994  00FDBA  20                 	db	32
   995  00FDBB  20                 	db	32
   996  00FDBC  20                 	db	32
   997  00FDBD  20                 	db	32
   998  00FDBE  20                 	db	32
   999  00FDBF  20                 	db	32
  1000  00FDC0  20                 	db	32
  1001  00FDC1  20                 	db	32
  1002  00FDC2  3C                 	db	60	;'<'
  1003  00FDC3  00                 	db	0
  1004  00FDC4                     STR_34:
  1005  00FDC4  32                 	db	50	;'2'
  1006  00FDC5  2E                 	db	46
  1007  00FDC6  20                 	db	32
  1008  00FDC7  53                 	db	83	;'S'
  1009  00FDC8  4F                 	db	79	;'O'
  1010  00FDC9  52                 	db	82	;'R'
  1011  00FDCA  54                 	db	84	;'T'
  1012  00FDCB  20                 	db	32
  1013  00FDCC  20                 	db	32
  1014  00FDCD  20                 	db	32
  1015  00FDCE  20                 	db	32
  1016  00FDCF  20                 	db	32
  1017  00FDD0  20                 	db	32
  1018  00FDD1  20                 	db	32
  1019  00FDD2  20                 	db	32
  1020  00FDD3  3C                 	db	60	;'<'
  1021  00FDD4  00                 	db	0
  1022  00FDD5                     STR_31:
  1023  00FDD5  31                 	db	49	;'1'
  1024  00FDD6  2E                 	db	46
  1025  00FDD7  20                 	db	32
  1026  00FDD8  44                 	db	68	;'D'
  1027  00FDD9  41                 	db	65	;'A'
  1028  00FDDA  54                 	db	84	;'T'
  1029  00FDDB  45                 	db	69	;'E'
  1030  00FDDC  2F                 	db	47
  1031  00FDDD  54                 	db	84	;'T'
  1032  00FDDE  49                 	db	73	;'I'
  1033  00FDDF  4D                 	db	77	;'M'
  1034  00FDE0  45                 	db	69	;'E'
  1035  00FDE1  20                 	db	32
  1036  00FDE2  20                 	db	32
  1037  00FDE3  20                 	db	32
  1038  00FDE4  3C                 	db	60	;'<'
  1039  00FDE5  00                 	db	0
  1040  00FDE6                     STR_6:
  1041  00FDE6  50                 	db	80	;'P'
  1042  00FDE7  41                 	db	65	;'A'
  1043  00FDE8  55                 	db	85	;'U'
  1044  00FDE9  53                 	db	83	;'S'
  1045  00FDEA  45                 	db	69	;'E'
  1046  00FDEB  20                 	db	32
  1047  00FDEC  3C                 	db	60	;'<'
  1048  00FDED  20                 	db	32
  1049  00FDEE  7C                 	db	124
  1050  00FDEF  20                 	db	32
  1051  00FDF0  42                 	db	66	;'B'
  1052  00FDF1  41                 	db	65	;'A'
  1053  00FDF2  43                 	db	67	;'C'
  1054  00FDF3  4B                 	db	75	;'K'
  1055  00FDF4  20                 	db	32
  1056  00FDF5  3E                 	db	62	;'>'
  1057  00FDF6  00                 	db	0
  1058  00FDF7                     STR_30:
  1059  00FDF7  50                 	db	80	;'P'
  1060  00FDF8  55                 	db	85	;'U'
  1061  00FDF9  53                 	db	83	;'S'
  1062  00FDFA  48                 	db	72	;'H'
  1063  00FDFB  20                 	db	32
  1064  00FDFC  54                 	db	84	;'T'
  1065  00FDFD  4F                 	db	79	;'O'
  1066  00FDFE  20                 	db	32
  1067  00FDFF  43                 	db	67	;'C'
  1068  00FE00  4F                 	db	79	;'O'
  1069  00FE01  4E                 	db	78	;'N'
  1070  00FE02  54                 	db	84	;'T'
  1071  00FE03  49                 	db	73	;'I'
  1072  00FE04  4E                 	db	78	;'N'
  1073  00FE05  55                 	db	85	;'U'
  1074  00FE06  45                 	db	69	;'E'
  1075  00FE07  00                 	db	0
  1076  00FE08                     STR_27:
  1077  00FE08  4E                 	db	78	;'N'
  1078  00FE09  4C                 	db	76	;'L'
  1079  00FE0A  41                 	db	65	;'A'
  1080  00FE0B  42                 	db	66	;'B'
  1081  00FE0C  3A                 	db	58	;':'
  1082  00FE0D  20                 	db	32
  1083  00FE0E  25                 	db	37
  1084  00FE0F  64                 	db	100	;'d'
  1085  00FE10  7C                 	db	124
  1086  00FE11  4C                 	db	76	;'L'
  1087  00FE12  41                 	db	65	;'A'
  1088  00FE13  42                 	db	66	;'B'
  1089  00FE14  3A                 	db	58	;':'
  1090  00FE15  20                 	db	32
  1091  00FE16  25                 	db	37
  1092  00FE17  64                 	db	100	;'d'
  1093  00FE18  00                 	db	0
  1094  00FE19                     STR_25:
  1095  00FE19  4E                 	db	78	;'N'
  1096  00FE1A  54                 	db	84	;'T'
  1097  00FE1B  41                 	db	65	;'A'
  1098  00FE1C  42                 	db	66	;'B'
  1099  00FE1D  3A                 	db	58	;':'
  1100  00FE1E  20                 	db	32
  1101  00FE1F  25                 	db	37
  1102  00FE20  64                 	db	100	;'d'
  1103  00FE21  7C                 	db	124
  1104  00FE22  54                 	db	84	;'T'
  1105  00FE23  41                 	db	65	;'A'
  1106  00FE24  42                 	db	66	;'B'
  1107  00FE25  3A                 	db	58	;':'
  1108  00FE26  20                 	db	32
  1109  00FE27  25                 	db	37
  1110  00FE28  64                 	db	100	;'d'
  1111  00FE29  00                 	db	0
  1112  00FE2A                     STR_83:
  1113  00FE2A  4D                 	db	77	;'M'
  1114  00FE2B  41                 	db	65	;'A'
  1115  00FE2C  47                 	db	71	;'G'
  1116  00FE2D  5F                 	db	95	;'_'
  1117  00FE2E  73                 	db	115	;'s'
  1118  00FE2F  69                 	db	105	;'i'
  1119  00FE30  67                 	db	103	;'g'
  1120  00FE31  6E                 	db	110	;'n'
  1121  00FE32  61                 	db	97	;'a'
  1122  00FE33  6C                 	db	108	;'l'
  1123  00FE34  3A                 	db	58	;':'
  1124  00FE35  20                 	db	32
  1125  00FE36  25                 	db	37
  1126  00FE37  64                 	db	100	;'d'
  1127  00FE38  20                 	db	32
  1128  00FE39  00                 	db	0
  1129  00FE3A                     STR_103:
  1130  00FE3A  54                 	db	84	;'T'
  1131  00FE3B  53                 	db	83	;'S'
  1132  00FE3C  54                 	db	84	;'T'
  1133  00FE3D  3A                 	db	58	;':'
  1134  00FE3E  20                 	db	32
  1135  00FE3F  54                 	db	84	;'T'
  1136  00FE40  49                 	db	73	;'I'
  1137  00FE41  4C                 	db	76	;'L'
  1138  00FE42  54                 	db	84	;'T'
  1139  00FE43  20                 	db	32
  1140  00FE44  53                 	db	83	;'S'
  1141  00FE45  45                 	db	69	;'E'
  1142  00FE46  52                 	db	82	;'R'
  1143  00FE47  56                 	db	86	;'V'
  1144  00FE48  4F                 	db	79	;'O'
  1145  00FE49  00                 	db	0
  1146  00FE4A                     STR_4:
  1147  00FE4A  44                 	db	68	;'D'
  1148  00FE4B  49                 	db	73	;'I'
  1149  00FE4C  44                 	db	68	;'D'
  1150  00FE4D  4E                 	db	78	;'N'
  1151  00FE4E  27                 	db	39
  1152  00FE4F  54                 	db	84	;'T'
  1153  00FE50  20                 	db	32
  1154  00FE51  43                 	db	67	;'C'
  1155  00FE52  4F                 	db	79	;'O'
  1156  00FE53  4D                 	db	77	;'M'
  1157  00FE54  50                 	db	80	;'P'
  1158  00FE55  4C                 	db	76	;'L'
  1159  00FE56  45                 	db	69	;'E'
  1160  00FE57  54                 	db	84	;'T'
  1161  00FE58  45                 	db	69	;'E'
  1162  00FE59  00                 	db	0
  1163  00FE5A                     STR_80:
  1164  00FE5A  49                 	db	73	;'I'
  1165  00FE5B  52                 	db	82	;'R'
  1166  00FE5C  5F                 	db	95	;'_'
  1167  00FE5D  73                 	db	115	;'s'
  1168  00FE5E  69                 	db	105	;'i'
  1169  00FE5F  67                 	db	103	;'g'
  1170  00FE60  6E                 	db	110	;'n'
  1171  00FE61  61                 	db	97	;'a'
  1172  00FE62  6C                 	db	108	;'l'
  1173  00FE63  3A                 	db	58	;':'
  1174  00FE64  20                 	db	32
  1175  00FE65  25                 	db	37
  1176  00FE66  64                 	db	100	;'d'
  1177  00FE67  20                 	db	32
  1178  00FE68  00                 	db	0
  1179  00FE69                     STR_109:
  1180  00FE69  43                 	db	67	;'C'
  1181  00FE6A  41                 	db	65	;'A'
  1182  00FE6B  4D                 	db	77	;'M'
  1183  00FE6C  20                 	db	32
  1184  00FE6D  44                 	db	68	;'D'
  1185  00FE6E  57                 	db	87	;'W'
  1186  00FE6F  4E                 	db	78	;'N'
  1187  00FE70  20                 	db	32
  1188  00FE71  7C                 	db	124
  1189  00FE72  52                 	db	82	;'R'
  1190  00FE73  43                 	db	67	;'C'
  1191  00FE74  30                 	db	48	;'0'
  1192  00FE75  3D                 	db	61	;'='
  1193  00FE76  30                 	db	48	;'0'
  1194  00FE77  00                 	db	0
  1195  00FE78                     STR_108:
  1196  00FE78  43                 	db	67	;'C'
  1197  00FE79  41                 	db	65	;'A'
  1198  00FE7A  4D                 	db	77	;'M'
  1199  00FE7B  20                 	db	32
  1200  00FE7C  55                 	db	85	;'U'
  1201  00FE7D  50                 	db	80	;'P'
  1202  00FE7E  20                 	db	32
  1203  00FE7F  20                 	db	32
  1204  00FE80  7C                 	db	124
  1205  00FE81  52                 	db	82	;'R'
  1206  00FE82  43                 	db	67	;'C'
  1207  00FE83  30                 	db	48	;'0'
  1208  00FE84  3D                 	db	61	;'='
  1209  00FE85  31                 	db	49	;'1'
  1210  00FE86  00                 	db	0
  1211  00FE87                     STR_82:
  1212  00FE87  54                 	db	84	;'T'
  1213  00FE88  53                 	db	83	;'S'
  1214  00FE89  54                 	db	84	;'T'
  1215  00FE8A  3A                 	db	58	;':'
  1216  00FE8B  20                 	db	32
  1217  00FE8C  4D                 	db	77	;'M'
  1218  00FE8D  41                 	db	65	;'A'
  1219  00FE8E  47                 	db	71	;'G'
  1220  00FE8F  4E                 	db	78	;'N'
  1221  00FE90  45                 	db	69	;'E'
  1222  00FE91  54                 	db	84	;'T'
  1223  00FE92  49                 	db	73	;'I'
  1224  00FE93  53                 	db	83	;'S'
  1225  00FE94  4D                 	db	77	;'M'
  1226  00FE95  00                 	db	0
  1227  00FE96                     STR_107:
  1228  00FE96  54                 	db	84	;'T'
  1229  00FE97  53                 	db	83	;'S'
  1230  00FE98  54                 	db	84	;'T'
  1231  00FE99  3A                 	db	58	;':'
  1232  00FE9A  20                 	db	32
  1233  00FE9B  43                 	db	67	;'C'
  1234  00FE9C  41                 	db	65	;'A'
  1235  00FE9D  4D                 	db	77	;'M'
  1236  00FE9E  20                 	db	32
  1237  00FE9F  53                 	db	83	;'S'
  1238  00FEA0  45                 	db	69	;'E'
  1239  00FEA1  52                 	db	82	;'R'
  1240  00FEA2  56                 	db	86	;'V'
  1241  00FEA3  4F                 	db	79	;'O'
  1242  00FEA4  00                 	db	0
  1243  00FEA5                     STR_96:
  1244  00FEA5  54                 	db	84	;'T'
  1245  00FEA6  53                 	db	83	;'S'
  1246  00FEA7  54                 	db	84	;'T'
  1247  00FEA8  3A                 	db	58	;':'
  1248  00FEA9  20                 	db	32
  1249  00FEAA  50                 	db	80	;'P'
  1250  00FEAB  41                 	db	65	;'A'
  1251  00FEAC  4E                 	db	78	;'N'
  1252  00FEAD  20                 	db	32
  1253  00FEAE  53                 	db	83	;'S'
  1254  00FEAF  45                 	db	69	;'E'
  1255  00FEB0  52                 	db	82	;'R'
  1256  00FEB1  56                 	db	86	;'V'
  1257  00FEB2  4F                 	db	79	;'O'
  1258  00FEB3  00                 	db	0
  1259  00FEB4                     STR_75:
  1260  00FEB4  41                 	db	65	;'A'
  1261  00FEB5  4C                 	db	76	;'L'
  1262  00FEB6  47                 	db	71	;'G'
  1263  00FEB7  34                 	db	52	;'4'
  1264  00FEB8  3A                 	db	58	;':'
  1265  00FEB9  20                 	db	32
  1266  00FEBA  41                 	db	65	;'A'
  1267  00FEBB  4C                 	db	76	;'L'
  1268  00FEBC  4C                 	db	76	;'L'
  1269  00FEBD  20                 	db	32
  1270  00FEBE  43                 	db	67	;'C'
  1271  00FEBF  41                 	db	65	;'A'
  1272  00FEC0  4E                 	db	78	;'N'
  1273  00FEC1  53                 	db	83	;'S'
  1274  00FEC2  00                 	db	0
  1275  00FEC3                     STR_90:
  1276  00FEC3  54                 	db	84	;'T'
  1277  00FEC4  53                 	db	83	;'S'
  1278  00FEC5  54                 	db	84	;'T'
  1279  00FEC6  3A                 	db	58	;':'
  1280  00FEC7  20                 	db	32
  1281  00FEC8  44                 	db	68	;'D'
  1282  00FEC9  43                 	db	67	;'C'
  1283  00FECA  20                 	db	32
  1284  00FECB  4D                 	db	77	;'M'
  1285  00FECC  4F                 	db	79	;'O'
  1286  00FECD  54                 	db	84	;'T'
  1287  00FECE  4F                 	db	79	;'O'
  1288  00FECF  52                 	db	82	;'R'
  1289  00FED0  53                 	db	83	;'S'
  1290  00FED1  00                 	db	0
  1291  00FED2                     STR_70:
  1292  00FED2  41                 	db	65	;'A'
  1293  00FED3  4C                 	db	76	;'L'
  1294  00FED4  47                 	db	71	;'G'
  1295  00FED5  4F                 	db	79	;'O'
  1296  00FED6  52                 	db	82	;'R'
  1297  00FED7  49                 	db	73	;'I'
  1298  00FED8  54                 	db	84	;'T'
  1299  00FED9  48                 	db	72	;'H'
  1300  00FEDA  4D                 	db	77	;'M'
  1301  00FEDB  20                 	db	32
  1302  00FEDC  54                 	db	84	;'T'
  1303  00FEDD  45                 	db	69	;'E'
  1304  00FEDE  53                 	db	83	;'S'
  1305  00FEDF  54                 	db	84	;'T'
  1306  00FEE0  00                 	db	0
  1307  00FEE1                     STR_91:
  1308  00FEE1  50                 	db	80	;'P'
  1309  00FEE2  49                 	db	73	;'I'
  1310  00FEE3  4E                 	db	78	;'N'
  1311  00FEE4  20                 	db	32
  1312  00FEE5  52                 	db	82	;'R'
  1313  00FEE6  41                 	db	65	;'A'
  1314  00FEE7  35                 	db	53	;'5'
  1315  00FEE8  20                 	db	32
  1316  00FEE9  48                 	db	72	;'H'
  1317  00FEEA  49                 	db	73	;'I'
  1318  00FEEB  47                 	db	71	;'G'
  1319  00FEEC  48                 	db	72	;'H'
  1320  00FEED  2E                 	db	46
  1321  00FEEE  00                 	db	0
  1322  00FEEF                     STR_73:
  1323  00FEEF  41                 	db	65	;'A'
  1324  00FEF0  4C                 	db	76	;'L'
  1325  00FEF1  47                 	db	71	;'G'
  1326  00FEF2  32                 	db	50	;'2'
  1327  00FEF3  3A                 	db	58	;':'
  1328  00FEF4  20                 	db	32
  1329  00FEF5  31                 	db	49	;'1'
  1330  00FEF6  32                 	db	50	;'2'
  1331  00FEF7  20                 	db	32
  1332  00FEF8  43                 	db	67	;'C'
  1333  00FEF9  41                 	db	65	;'A'
  1334  00FEFA  4E                 	db	78	;'N'
  1335  00FEFB  53                 	db	83	;'S'
  1336  00FEFC  00                 	db	0
  1337  00FEFD                     STR_76:
  1338  00FEFD  41                 	db	65	;'A'
  1339  00FEFE  4C                 	db	76	;'L'
  1340  00FEFF  47                 	db	71	;'G'
  1341  00FF00  35                 	db	53	;'5'
  1342  00FF01  3A                 	db	58	;':'
  1343  00FF02  20                 	db	32
  1344  00FF03  4E                 	db	78	;'N'
  1345  00FF04  4F                 	db	79	;'O'
  1346  00FF05  20                 	db	32
  1347  00FF06  43                 	db	67	;'C'
  1348  00FF07  41                 	db	65	;'A'
  1349  00FF08  4E                 	db	78	;'N'
  1350  00FF09  53                 	db	83	;'S'
  1351  00FF0A  00                 	db	0
  1352  00FF0B                     STR_71:
  1353  00FF0B  50                 	db	80	;'P'
  1354  00FF0C  55                 	db	85	;'U'
  1355  00FF0D  53                 	db	83	;'S'
  1356  00FF0E  48                 	db	72	;'H'
  1357  00FF0F  20                 	db	32
  1358  00FF10  54                 	db	84	;'T'
  1359  00FF11  4F                 	db	79	;'O'
  1360  00FF12  20                 	db	32
  1361  00FF13  53                 	db	83	;'S'
  1362  00FF14  54                 	db	84	;'T'
  1363  00FF15  41                 	db	65	;'A'
  1364  00FF16  52                 	db	82	;'R'
  1365  00FF17  54                 	db	84	;'T'
  1366  00FF18  00                 	db	0
  1367  00FF19                     STR_23:
  1368  00FF19  25                 	db	37
  1369  00FF1A  64                 	db	100	;'d'
  1370  00FF1B  20                 	db	32
  1371  00FF1C  4D                 	db	77	;'M'
  1372  00FF1D  49                 	db	73	;'I'
  1373  00FF1E  4E                 	db	78	;'N'
  1374  00FF1F  20                 	db	32
  1375  00FF20  25                 	db	37
  1376  00FF21  64                 	db	100	;'d'
  1377  00FF22  20                 	db	32
  1378  00FF23  53                 	db	83	;'S'
  1379  00FF24  45                 	db	69	;'E'
  1380  00FF25  43                 	db	67	;'C'
  1381  00FF26  00                 	db	0
  1382  00FF27                     STR_2:
  1383  00FF27  54                 	db	84	;'T'
  1384  00FF28  49                 	db	73	;'I'
  1385  00FF29  4D                 	db	77	;'M'
  1386  00FF2A  45                 	db	69	;'E'
  1387  00FF2B  3A                 	db	58	;':'
  1388  00FF2C  20                 	db	32
  1389  00FF2D  25                 	db	37
  1390  00FF2E  64                 	db	100	;'d'
  1391  00FF2F  3A                 	db	58	;':'
  1392  00FF30  25                 	db	37
  1393  00FF31  30                 	db	48	;'0'
  1394  00FF32  32                 	db	50	;'2'
  1395  00FF33  64                 	db	100	;'d'
  1396  00FF34  00                 	db	0
  1397  00FF35                     STR_79:
  1398  00FF35  54                 	db	84	;'T'
  1399  00FF36  53                 	db	83	;'S'
  1400  00FF37  54                 	db	84	;'T'
  1401  00FF38  3A                 	db	58	;':'
  1402  00FF39  20                 	db	32
  1403  00FF3A  49                 	db	73	;'I'
  1404  00FF3B  52                 	db	82	;'R'
  1405  00FF3C  20                 	db	32
  1406  00FF3D  53                 	db	83	;'S'
  1407  00FF3E  4E                 	db	78	;'N'
  1408  00FF3F  53                 	db	83	;'S'
  1409  00FF40  52                 	db	82	;'R'
  1410  00FF41  00                 	db	0
  1411  00FF42                     STR_65:
  1412  00FF42  54                 	db	84	;'T'
  1413  00FF43  49                 	db	73	;'I'
  1414  00FF44  4D                 	db	77	;'M'
  1415  00FF45  45                 	db	69	;'E'
  1416  00FF46  20                 	db	32
  1417  00FF47  25                 	db	37
  1418  00FF48  64                 	db	100	;'d'
  1419  00FF49  3A                 	db	58	;':'
  1420  00FF4A  25                 	db	37
  1421  00FF4B  30                 	db	48	;'0'
  1422  00FF4C  32                 	db	50	;'2'
  1423  00FF4D  64                 	db	100	;'d'
  1424  00FF4E  00                 	db	0
  1425  00FF4F                     STR_74:
  1426  00FF4F  41                 	db	65	;'A'
  1427  00FF50  4C                 	db	76	;'L'
  1428  00FF51  47                 	db	71	;'G'
  1429  00FF52  33                 	db	51	;'3'
  1430  00FF53  3A                 	db	58	;':'
  1431  00FF54  20                 	db	32
  1432  00FF55  31                 	db	49	;'1'
  1433  00FF56  20                 	db	32
  1434  00FF57  43                 	db	67	;'C'
  1435  00FF58  41                 	db	65	;'A'
  1436  00FF59  4E                 	db	78	;'N'
  1437  00FF5A  00                 	db	0
  1438  00FF5B                     STR_93:
  1439  00FF5B  50                 	db	80	;'P'
  1440  00FF5C  49                 	db	73	;'I'
  1441  00FF5D  4E                 	db	78	;'N'
  1442  00FF5E  20                 	db	32
  1443  00FF5F  52                 	db	82	;'R'
  1444  00FF60  41                 	db	65	;'A'
  1445  00FF61  33                 	db	51	;'3'
  1446  00FF62  2E                 	db	46
  1447  00FF63  2E                 	db	46
  1448  00FF64  2E                 	db	46
  1449  00FF65  00                 	db	0
  1450  00FF66                     STR_95:
  1451  00FF66  50                 	db	80	;'P'
  1452  00FF67  49                 	db	73	;'I'
  1453  00FF68  4E                 	db	78	;'N'
  1454  00FF69  20                 	db	32
  1455  00FF6A  52                 	db	82	;'R'
  1456  00FF6B  41                 	db	65	;'A'
  1457  00FF6C  34                 	db	52	;'4'
  1458  00FF6D  2E                 	db	46
  1459  00FF6E  2E                 	db	46
  1460  00FF6F  2E                 	db	46
  1461  00FF70  00                 	db	0
  1462  00FF71                     STR_113:
  1463  00FF71  50                 	db	80	;'P'
  1464  00FF72  55                 	db	85	;'U'
  1465  00FF73  53                 	db	83	;'S'
  1466  00FF74  48                 	db	72	;'H'
  1467  00FF75  45                 	db	69	;'E'
  1468  00FF76  52                 	db	82	;'R'
  1469  00FF77  20                 	db	32
  1470  00FF78  54                 	db	84	;'T'
  1471  00FF79  53                 	db	83	;'S'
  1472  00FF7A  54                 	db	84	;'T'
  1473  00FF7B  00                 	db	0
  1474  00FF7C                     STR_64:
  1475  00FF7C  53                 	db	83	;'S'
  1476  00FF7D  4F                 	db	79	;'O'
  1477  00FF7E  52                 	db	82	;'R'
  1478  00FF7F  54                 	db	84	;'T'
  1479  00FF80  49                 	db	73	;'I'
  1480  00FF81  4E                 	db	78	;'N'
  1481  00FF82  47                 	db	71	;'G'
  1482  00FF83  2E                 	db	46
  1483  00FF84  2E                 	db	46
  1484  00FF85  2E                 	db	46
  1485  00FF86  00                 	db	0
  1486  00FF87                     STR_84:
  1487  00FF87  54                 	db	84	;'T'
  1488  00FF88  53                 	db	83	;'S'
  1489  00FF89  54                 	db	84	;'T'
  1490  00FF8A  3A                 	db	58	;':'
  1491  00FF8B  20                 	db	32
  1492  00FF8C  43                 	db	67	;'C'
  1493  00FF8D  4F                 	db	79	;'O'
  1494  00FF8E  4E                 	db	78	;'N'
  1495  00FF8F  44                 	db	68	;'D'
  1496  00FF90  00                 	db	0
  1497  00FF91                     STR_88:
  1498  00FF91  41                 	db	65	;'A'
  1499  00FF92  43                 	db	67	;'C'
  1500  00FF93  54                 	db	84	;'T'
  1501  00FF94  55                 	db	85	;'U'
  1502  00FF95  41                 	db	65	;'A'
  1503  00FF96  54                 	db	84	;'T'
  1504  00FF97  4F                 	db	79	;'O'
  1505  00FF98  52                 	db	82	;'R'
  1506  00FF99  53                 	db	83	;'S'
  1507  00FF9A  00                 	db	0
  1508  00FF9B                     STR_22:
  1509  00FF9B  44                 	db	68	;'D'
  1510  00FF9C  55                 	db	85	;'U'
  1511  00FF9D  52                 	db	82	;'R'
  1512  00FF9E  41                 	db	65	;'A'
  1513  00FF9F  54                 	db	84	;'T'
  1514  00FFA0  49                 	db	73	;'I'
  1515  00FFA1  4F                 	db	79	;'O'
  1516  00FFA2  4E                 	db	78	;'N'
  1517  00FFA3  3A                 	db	58	;':'
  1518  00FFA4  00                 	db	0
  1519  00FFA5                     STR_86:
  1520  00FFA5  43                 	db	67	;'C'
  1521  00FFA6  4F                 	db	79	;'O'
  1522  00FFA7  4E                 	db	78	;'N'
  1523  00FFA8  44                 	db	68	;'D'
  1524  00FFA9  3A                 	db	58	;':'
  1525  00FFAA  20                 	db	32
  1526  00FFAB  25                 	db	37
  1527  00FFAC  64                 	db	100	;'d'
  1528  00FFAD  00                 	db	0
  1529  00FFAE                     STR_77:
  1530  00FFAE  53                 	db	83	;'S'
  1531  00FFAF  45                 	db	69	;'E'
  1532  00FFB0  4E                 	db	78	;'N'
  1533  00FFB1  53                 	db	83	;'S'
  1534  00FFB2  4F                 	db	79	;'O'
  1535  00FFB3  52                 	db	82	;'R'
  1536  00FFB4  53                 	db	83	;'S'
  1537  00FFB5  00                 	db	0
  1538  00FFB6                     STR_126:
  1539  00FFB6  28                 	db	40
  1540  00FFB7  6E                 	db	110	;'n'
  1541  00FFB8  75                 	db	117	;'u'
  1542  00FFB9  6C                 	db	108	;'l'
  1543  00FFBA  6C                 	db	108	;'l'
  1544  00FFBB  29                 	db	41
  1545  00FFBC  00                 	db	0
  1546  00FFBD                     STR_67:
  1547  00FFBD  46                 	db	70	;'F'
  1548  00FFBE  41                 	db	65	;'A'
  1549  00FFBF  49                 	db	73	;'I'
  1550  00FFC0  4C                 	db	76	;'L'
  1551  00FFC1  45                 	db	69	;'E'
  1552  00FFC2  44                 	db	68	;'D'
  1553  00FFC3  00                 	db	0
  1554  00FFC4                     STR_7:
  1555  00FFC4  53                 	db	83	;'S'
  1556  00FFC5  54                 	db	84	;'T'
  1557  00FFC6  41                 	db	65	;'A'
  1558  00FFC7  52                 	db	82	;'R'
  1559  00FFC8  54                 	db	84	;'T'
  1560  00FFC9  3A                 	db	58	;':'
  1561  00FFCA  00                 	db	0
  1562  00FFCB                     STR_9:
  1563  00FFCB  46                 	db	70	;'F'
  1564  00FFCC  45                 	db	69	;'E'
  1565  00FFCD  42                 	db	66	;'B'
  1566  00FFCE  00                 	db	0
  1567  00FFCF                     STR_19:
  1568  00FFCF  44                 	db	68	;'D'
  1569  00FFD0  45                 	db	69	;'E'
  1570  00FFD1  43                 	db	67	;'C'
  1571  00FFD2  00                 	db	0
  1572  00FFD3                     STR_15:
  1573  00FFD3  41                 	db	65	;'A'
  1574  00FFD4  55                 	db	85	;'U'
  1575  00FFD5  47                 	db	71	;'G'
  1576  00FFD6  00                 	db	0
  1577  00FFD7                     STR_14:
  1578  00FFD7  4A                 	db	74	;'J'
  1579  00FFD8  55                 	db	85	;'U'
  1580  00FFD9  4C                 	db	76	;'L'
  1581  00FFDA  00                 	db	0
  1582  00FFDB                     STR_8:
  1583  00FFDB  4A                 	db	74	;'J'
  1584  00FFDC  41                 	db	65	;'A'
  1585  00FFDD  4E                 	db	78	;'N'
  1586  00FFDE  00                 	db	0
  1587  00FFDF                     STR_13:
  1588  00FFDF  4A                 	db	74	;'J'
  1589  00FFE0  55                 	db	85	;'U'
  1590  00FFE1  4E                 	db	78	;'N'
  1591  00FFE2  00                 	db	0
  1592  00FFE3                     STR_16:
  1593  00FFE3  53                 	db	83	;'S'
  1594  00FFE4  45                 	db	69	;'E'
  1595  00FFE5  50                 	db	80	;'P'
  1596  00FFE6  00                 	db	0
  1597  00FFE7                     STR_10:
  1598  00FFE7  4D                 	db	77	;'M'
  1599  00FFE8  41                 	db	65	;'A'
  1600  00FFE9  52                 	db	82	;'R'
  1601  00FFEA  00                 	db	0
  1602  00FFEB                     STR_11:
  1603  00FFEB  41                 	db	65	;'A'
  1604  00FFEC  50                 	db	80	;'P'
  1605  00FFED  52                 	db	82	;'R'
  1606  00FFEE  00                 	db	0
  1607  00FFEF                     STR_20:
  1608  00FFEF  45                 	db	69	;'E'
  1609  00FFF0  52                 	db	82	;'R'
  1610  00FFF1  52                 	db	82	;'R'
  1611  00FFF2  00                 	db	0
  1612  00FFF3                     STR_17:
  1613  00FFF3  4F                 	db	79	;'O'
  1614  00FFF4  43                 	db	67	;'C'
  1615  00FFF5  54                 	db	84	;'T'
  1616  00FFF6  00                 	db	0
  1617  00FFF7                     STR_18:
  1618  00FFF7  4E                 	db	78	;'N'
  1619  00FFF8  4F                 	db	79	;'O'
  1620  00FFF9  56                 	db	86	;'V'
  1621  00FFFA  00                 	db	0
  1622  00FFFB                     STR_12:
  1623  00FFFB  4D                 	db	77	;'M'
  1624  00FFFC  41                 	db	65	;'A'
  1625  00FFFD  59                 	db	89	;'Y'
  1626  00FFFE  00                 	db	0
  1627  0000                     
  1628                           ; #config settings
  1629  00FFFF  00                 	db	0	; dummy byte at the end
  1630  0000                     
  1631                           	psect	cinit
  1632  004946                     __pcinit:
  1633                           	opt stack 0
  1634  004946                     start_initialization:
  1635                           	opt stack 0
  1636  004946                     __initialization:
  1637                           	opt stack 0
  1638                           
  1639                           ; Initialize objects allocated to BANK1 (8 bytes)
  1640                           ; load TBLPTR registers with __pidataBANK1
  1641  004946  0E8C               	movlw	low __pidataBANK1
  1642  004948  6EF6               	movwf	tblptrl,c
  1643  00494A  0E50               	movlw	high __pidataBANK1
  1644  00494C  6EF7               	movwf	tblptrh,c
  1645  00494E  0E00               	movlw	low (__pidataBANK1 shr (0+16))
  1646  004950  6EF8               	movwf	tblptru,c
  1647  004952  EE01  F035         	lfsr	0,__pdataBANK1
  1648  004956  EE10 F008          	lfsr	1,8
  1649  00495A                     copy_data0:
  1650  00495A  0009               	tblrd		*+
  1651  00495C  CFF5 FFEE          	movff	tablat,postinc0
  1652  004960  50E5               	movf	postdec1,w,c
  1653  004962  50E1               	movf	fsr1l,w,c
  1654  004964  E1FA               	bnz	copy_data0
  1655                           
  1656                           ; Clear objects allocated to BANK1 (53 bytes)
  1657  004966  EE01  F000         	lfsr	0,__pbssBANK1
  1658  00496A  0E35               	movlw	53
  1659  00496C                     clear_0:
  1660  00496C  6AEE               	clrf	postinc0,c
  1661  00496E  06E8               	decf	wreg,f,c
  1662  004970  E1FD               	bnz	clear_0
  1663                           
  1664                           ; Clear objects allocated to BANK0 (38 bytes)
  1665  004972  EE00  F0DA         	lfsr	0,__pbssBANK0
  1666  004976  0E26               	movlw	38
  1667  004978                     clear_1:
  1668  004978  6AEE               	clrf	postinc0,c
  1669  00497A  06E8               	decf	wreg,f,c
  1670  00497C  E1FD               	bnz	clear_1
  1671                           
  1672                           ; Clear objects allocated to COMRAM (37 bytes)
  1673  00497E  EE00  F059         	lfsr	0,__pbssCOMRAM
  1674  004982  0E25               	movlw	37
  1675  004984                     clear_2:
  1676  004984  6AEE               	clrf	postinc0,c
  1677  004986  06E8               	decf	wreg,f,c
  1678  004988  E1FD               	bnz	clear_2
  1679  00498A                     end_of_initialization:
  1680                           	opt stack 0
  1681  00498A                     __end_of__initialization:
  1682                           	opt stack 0
  1683  00498A  907E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1684  00498C  927E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1685  00498E  0100               	movlb	0
  1686  004990  EF38  F01F         	goto	_main	;jump to C main() function
  1687                           tblptru	equ	0xFF8
  1688                           tblptrh	equ	0xFF7
  1689                           tblptrl	equ	0xFF6
  1690                           tablat	equ	0xFF5
  1691                           postinc0	equ	0xFEE
  1692                           wreg	equ	0xFE8
  1693                           postdec1	equ	0xFE5
  1694                           fsr1l	equ	0xFE1
  1695                           
  1696                           	psect	bssCOMRAM
  1697  000059                     __pbssCOMRAM:
  1698                           	opt stack 0
  1699  000059                     _back:
  1700                           	opt stack 0
  1701  000059                     	ds	2
  1702  00005B                     _count_pop_no_tab:
  1703                           	opt stack 0
  1704  00005B                     	ds	2
  1705  00005D                     _count_pop_w_tab:
  1706                           	opt stack 0
  1707  00005D                     	ds	2
  1708  00005F                     _debug:
  1709                           	opt stack 0
  1710  00005F                     	ds	2
  1711  000061                     _down:
  1712                           	opt stack 0
  1713  000061                     	ds	2
  1714  000063                     _enter:
  1715                           	opt stack 0
  1716  000063                     	ds	2
  1717  000065                     _f_ID_receive:
  1718                           	opt stack 0
  1719  000065                     	ds	2
  1720  000067                     _f_can_coming_to_ID:
  1721                           	opt stack 0
  1722  000067                     	ds	2
  1723  000069                     _f_can_coming_to_distribution:
  1724                           	opt stack 0
  1725  000069                     	ds	2
  1726  00006B                     _f_most_recent_sort_time:
  1727                           	opt stack 0
  1728  00006B                     	ds	2
  1729  00006D                     _first:
  1730                           	opt stack 0
  1731  00006D                     	ds	2
  1732  00006F                     _firstboot:
  1733                           	opt stack 0
  1734  00006F                     	ds	2
  1735  000071                     _log_count_can_no_lab:
  1736                           	opt stack 0
  1737  000071                     	ds	2
  1738  000073                     _log_count_can_w_lab:
  1739                           	opt stack 0
  1740  000073                     	ds	2
  1741  000075                     _log_count_total:
  1742                           	opt stack 0
  1743  000075                     	ds	2
  1744  000077                     _up:
  1745                           	opt stack 0
  1746  000077                     	ds	2
  1747  000079                     _was_low_1:
  1748                           	opt stack 0
  1749  000079                     	ds	2
  1750  00007B                     _was_low_3:
  1751                           	opt stack 0
  1752  00007B                     	ds	2
  1753  00007D                     _input:
  1754                           	opt stack 0
  1755  00007D                     	ds	1
  1756                           tblptru	equ	0xFF8
  1757                           tblptrh	equ	0xFF7
  1758                           tblptrl	equ	0xFF6
  1759                           tablat	equ	0xFF5
  1760                           postinc0	equ	0xFEE
  1761                           wreg	equ	0xFE8
  1762                           postdec1	equ	0xFE5
  1763                           fsr1l	equ	0xFE1
  1764                           
  1765                           	psect	bssBANK0
  1766  0000DA                     __pbssBANK0:
  1767                           	opt stack 0
  1768  0000DA                     _sensor_outputs:
  1769                           	opt stack 0
  1770  0000DA                     	ds	4
  1771  0000DE                     _IR_signal:
  1772                           	opt stack 0
  1773  0000DE                     	ds	2
  1774  0000E0                     _MAG_signal:
  1775                           	opt stack 0
  1776  0000E0                     	ds	2
  1777  0000E2                     _RTCflag:
  1778                           	opt stack 0
  1779  0000E2                     	ds	2
  1780  0000E4                     _cur_can:
  1781                           	opt stack 0
  1782  0000E4                     	ds	2
  1783  0000E6                     _cur_state:
  1784                           	opt stack 0
  1785  0000E6                     	ds	2
  1786  0000E8                     _f_lastCan:
  1787                           	opt stack 0
  1788  0000E8                     	ds	2
  1789  0000EA                     _f_loadingNewCan:
  1790                           	opt stack 0
  1791  0000EA                     	ds	2
  1792  0000EC                     _log:
  1793                           	opt stack 0
  1794  0000EC                     	ds	2
  1795  0000EE                     _log_completion:
  1796                           	opt stack 0
  1797  0000EE                     	ds	2
  1798  0000F0                     _log_count_pop_no_tab:
  1799                           	opt stack 0
  1800  0000F0                     	ds	2
  1801  0000F2                     _log_count_pop_w_tab:
  1802                           	opt stack 0
  1803  0000F2                     	ds	2
  1804  0000F4                     _log_total_time:
  1805                           	opt stack 0
  1806  0000F4                     	ds	2
  1807  0000F6                     _logstate:
  1808                           	opt stack 0
  1809  0000F6                     	ds	2
  1810  0000F8                     _total_time:
  1811                           	opt stack 0
  1812  0000F8                     	ds	2
  1813  0000FA                     _var:
  1814                           	opt stack 0
  1815  0000FA                     	ds	2
  1816  0000FC                     _machine_state:
  1817                           	opt stack 0
  1818  0000FC                     	ds	1
  1819  0000FD                     _sel:
  1820                           	opt stack 0
  1821  0000FD                     	ds	1
  1822  0000FE                     _count_total:
  1823                           	opt stack 0
  1824  0000FE                     	ds	2
  1825                           tblptru	equ	0xFF8
  1826                           tblptrh	equ	0xFF7
  1827                           tblptrl	equ	0xFF6
  1828                           tablat	equ	0xFF5
  1829                           postinc0	equ	0xFEE
  1830                           wreg	equ	0xFE8
  1831                           postdec1	equ	0xFE5
  1832                           fsr1l	equ	0xFE1
  1833                           
  1834                           	psect	bssBANK1
  1835  000100                     __pbssBANK1:
  1836                           	opt stack 0
  1837  000100                     _log_startTime:
  1838                           	opt stack 0
  1839  000100                     	ds	14
  1840  00010E                     _startTime:
  1841                           	opt stack 0
  1842  00010E                     	ds	14
  1843  00011C                     _servoTimes:
  1844                           	opt stack 0
  1845  00011C                     	ds	8
  1846  000124                     _time:
  1847                           	opt stack 0
  1848  000124                     	ds	7
  1849  00012B                     _count_can_no_lab:
  1850                           	opt stack 0
  1851  00012B                     	ds	2
  1852  00012D                     _count_can_w_lab:
  1853                           	opt stack 0
  1854  00012D                     	ds	2
  1855  00012F                     _f_can_distributed:
  1856                           	opt stack 0
  1857  00012F                     	ds	2
  1858  000131                     _i:
  1859                           	opt stack 0
  1860  000131                     	ds	2
  1861  000133                     _most_recent_sort_time:
  1862                           	opt stack 0
  1863  000133                     	ds	2
  1864                           tblptru	equ	0xFF8
  1865                           tblptrh	equ	0xFF7
  1866                           tblptrl	equ	0xFF6
  1867                           tablat	equ	0xFF5
  1868                           postinc0	equ	0xFEE
  1869                           wreg	equ	0xFE8
  1870                           postdec1	equ	0xFE5
  1871                           fsr1l	equ	0xFE1
  1872                           
  1873                           	psect	dataBANK1
  1874  000135                     __pdataBANK1:
  1875                           	opt stack 0
  1876  000135                     UI@F3228:
  1877                           	opt stack 0
  1878  000135                     	ds	4
  1879  000139                     printRTC@F3219:
  1880                           	opt stack 0
  1881  000139                     	ds	4
  1882                           tblptru	equ	0xFF8
  1883                           tblptrh	equ	0xFF7
  1884                           tblptrl	equ	0xFF6
  1885                           tablat	equ	0xFF5
  1886                           postinc0	equ	0xFEE
  1887                           wreg	equ	0xFE8
  1888                           postdec1	equ	0xFE5
  1889                           fsr1l	equ	0xFE1
  1890                           
  1891                           	psect	cstackBANK0
  1892  000080                     __pcstackBANK0:
  1893                           	opt stack 0
  1894  000080                     ??_delay_ms:
  1895  000080                     ??_PortTests:
  1896  000080                     ??_isdigit:
  1897  000080                     ??_readADC:
  1898  000080                     ??_I2C_Master_Wait:
  1899  000080                     ?___wmul:
  1900                           	opt stack 0
  1901  000080                     ?___awmod:
  1902                           	opt stack 0
  1903  000080                     ?___lwdiv:
  1904                           	opt stack 0
  1905  000080                     ?___lldiv:
  1906                           	opt stack 0
  1907  000080                     lcdNibble@temp:
  1908                           	opt stack 0
  1909  000080                     initTime@m:
  1910                           	opt stack 0
  1911  000080                     updateServoPosition@time_us:
  1912                           	opt stack 0
  1913  000080                     EEPROM_read@address:
  1914                           	opt stack 0
  1915  000080                     ___wmul@multiplier:
  1916                           	opt stack 0
  1917  000080                     ___awmod@dividend:
  1918                           	opt stack 0
  1919  000080                     ___lwdiv@dividend:
  1920                           	opt stack 0
  1921  000080                     strcpy@to:
  1922                           	opt stack 0
  1923  000080                     ___lldiv@dividend:
  1924                           	opt stack 0
  1925                           
  1926                           ; 4 bytes @ 0x0
  1927  000080                     	ds	1
  1928  000081                     readADC@channel:
  1929                           	opt stack 0
  1930  000081                     I2C_Master_Read@a:
  1931                           	opt stack 0
  1932  000081                     lcdNibble@data:
  1933                           	opt stack 0
  1934  000081                     initTime@h:
  1935                           	opt stack 0
  1936  000081                     delay_ms@milliseconds:
  1937                           	opt stack 0
  1938  000081                     _isdigit$1977:
  1939                           	opt stack 0
  1940  000081                     I2C_Master_Write@d:
  1941                           	opt stack 0
  1942                           
  1943                           ; 2 bytes @ 0x1
  1944  000081                     	ds	1
  1945  000082                     ??_ID:
  1946  000082                     ??_readIR:
  1947  000082                     ??_readMAG:
  1948  000082                     I2C_Master_Read@temp:
  1949                           	opt stack 0
  1950  000082                     lcdInst@data:
  1951                           	opt stack 0
  1952  000082                     putch@data:
  1953                           	opt stack 0
  1954  000082                     initTime@w:
  1955                           	opt stack 0
  1956  000082                     isdigit@c:
  1957                           	opt stack 0
  1958  000082                     updateServoPosition@timer:
  1959                           	opt stack 0
  1960  000082                     ___wmul@multiplicand:
  1961                           	opt stack 0
  1962  000082                     ___awmod@divisor:
  1963                           	opt stack 0
  1964  000082                     ___lwdiv@divisor:
  1965                           	opt stack 0
  1966  000082                     strcpy@from:
  1967                           	opt stack 0
  1968                           
  1969                           ; 2 bytes @ 0x2
  1970  000082                     	ds	1
  1971  000083                     ??_initLCD:
  1972  000083                     initTime@DD:
  1973                           	opt stack 0
  1974  000083                     getRTC@i:
  1975                           	opt stack 0
  1976                           
  1977                           ; 2 bytes @ 0x3
  1978  000083                     	ds	1
  1979  000084                     ??_updateServoPosition:
  1980  000084                     initTime@MM:
  1981                           	opt stack 0
  1982  000084                     ___awmod@counter:
  1983                           	opt stack 0
  1984  000084                     readIR@res:
  1985                           	opt stack 0
  1986  000084                     readMAG@res:
  1987                           	opt stack 0
  1988  000084                     ID@i:
  1989                           	opt stack 0
  1990  000084                     ___wmul@product:
  1991                           	opt stack 0
  1992  000084                     ___lwdiv@quotient:
  1993                           	opt stack 0
  1994  000084                     strcpy@cp:
  1995                           	opt stack 0
  1996  000084                     ___lldiv@divisor:
  1997                           	opt stack 0
  1998                           
  1999                           ; 4 bytes @ 0x4
  2000  000084                     	ds	1
  2001  000085                     ??_initSortTimer:
  2002  000085                     initTime@YY:
  2003                           	opt stack 0
  2004  000085                     ___awmod@sign:
  2005                           	opt stack 0
  2006                           
  2007                           ; 1 bytes @ 0x5
  2008  000085                     	ds	1
  2009  000086                     ??_getIR:
  2010  000086                     ??_getMAG:
  2011  000086                     ?___awdiv:
  2012                           	opt stack 0
  2013  000086                     initTime@s:
  2014                           	opt stack 0
  2015  000086                     ___lwdiv@counter:
  2016                           	opt stack 0
  2017  000086                     ID@i_1120:
  2018                           	opt stack 0
  2019  000086                     updateServoPosition@my_time:
  2020                           	opt stack 0
  2021  000086                     ___awdiv@dividend:
  2022                           	opt stack 0
  2023                           
  2024                           ; 2 bytes @ 0x6
  2025  000086                     	ds	1
  2026  000087                     ?___lwmod:
  2027                           	opt stack 0
  2028  000087                     getIR@i:
  2029                           	opt stack 0
  2030  000087                     ___lwmod@dividend:
  2031                           	opt stack 0
  2032                           
  2033                           ; 2 bytes @ 0x7
  2034  000087                     	ds	1
  2035  000088                     ??_Distribution:
  2036  000088                     ??_initServos:
  2037  000088                     initSortTimer@i:
  2038                           	opt stack 0
  2039  000088                     ___awdiv@divisor:
  2040                           	opt stack 0
  2041  000088                     ___lldiv@quotient:
  2042                           	opt stack 0
  2043                           
  2044                           ; 4 bytes @ 0x8
  2045  000088                     	ds	1
  2046  000089                     ___lwmod@divisor:
  2047                           	opt stack 0
  2048                           
  2049                           ; 2 bytes @ 0x9
  2050  000089                     	ds	1
  2051  00008A                     ___awdiv@counter:
  2052                           	opt stack 0
  2053                           
  2054                           ; 1 bytes @ 0xA
  2055  00008A                     	ds	1
  2056  00008B                     ___awdiv@sign:
  2057                           	opt stack 0
  2058  00008B                     ___lwmod@counter:
  2059                           	opt stack 0
  2060                           
  2061                           ; 1 bytes @ 0xB
  2062  00008B                     	ds	1
  2063  00008C                     ___lldiv@counter:
  2064                           	opt stack 0
  2065  00008C                     ___awdiv@quotient:
  2066                           	opt stack 0
  2067                           
  2068                           ; 2 bytes @ 0xC
  2069  00008C                     	ds	1
  2070  00008D                     I2C_Master_Init@c:
  2071                           	opt stack 0
  2072                           
  2073                           ; 4 bytes @ 0xD
  2074  00008D                     	ds	1
  2075  00008E                     ?_printf:
  2076                           	opt stack 0
  2077  00008E                     printf@f:
  2078                           	opt stack 0
  2079                           
  2080                           ; 2 bytes @ 0xE
  2081  00008E                     	ds	3
  2082  000091                     ??_I2C_Master_Init:
  2083                           
  2084                           ; 1 bytes @ 0x11
  2085  000091                     	ds	4
  2086  000095                     ??_loadRTC:
  2087                           
  2088                           ; 1 bytes @ 0x15
  2089  000095                     	ds	1
  2090  000096                     loadRTC@i:
  2091                           	opt stack 0
  2092                           
  2093                           ; 2 bytes @ 0x16
  2094  000096                     	ds	4
  2095  00009A                     ??_printf:
  2096                           
  2097                           ; 1 bytes @ 0x1A
  2098  00009A                     	ds	4
  2099  00009E                     printf@prec:
  2100                           	opt stack 0
  2101                           
  2102                           ; 1 bytes @ 0x1E
  2103  00009E                     	ds	1
  2104  00009F                     printf@cp:
  2105                           	opt stack 0
  2106                           
  2107                           ; 2 bytes @ 0x1F
  2108  00009F                     	ds	2
  2109  0000A1                     printf@ap:
  2110                           	opt stack 0
  2111                           
  2112                           ; 2 bytes @ 0x21
  2113  0000A1                     	ds	2
  2114  0000A3                     printf@len:
  2115                           	opt stack 0
  2116                           
  2117                           ; 2 bytes @ 0x23
  2118  0000A3                     	ds	2
  2119  0000A5                     printf@val:
  2120                           	opt stack 0
  2121                           
  2122                           ; 2 bytes @ 0x25
  2123  0000A5                     	ds	2
  2124  0000A7                     printf@flag:
  2125                           	opt stack 0
  2126                           
  2127                           ; 1 bytes @ 0x27
  2128  0000A7                     	ds	1
  2129  0000A8                     printf@c:
  2130                           	opt stack 0
  2131                           
  2132                           ; 1 bytes @ 0x28
  2133  0000A8                     	ds	1
  2134  0000A9                     printf@width:
  2135                           	opt stack 0
  2136                           
  2137                           ; 2 bytes @ 0x29
  2138  0000A9                     	ds	2
  2139  0000AB                     ??_printRTC:
  2140  0000AB                     ??_algorithmTest:
  2141  0000AB                     ??_sensorTest:
  2142  0000AB                     ??_actuatorTest:
  2143  0000AB                     ??_PortTestA5:
  2144  0000AB                     ??_SpeedTest:
  2145  0000AB                     ??_PusherTest:
  2146  0000AB                     ??_BothServos:
  2147  0000AB                     ??_BlockerTest:
  2148  0000AB                     EEPROM_write@address:
  2149                           	opt stack 0
  2150                           
  2151                           ; 2 bytes @ 0x2B
  2152  0000AB                     	ds	1
  2153  0000AC                     BlockerTest@i:
  2154                           	opt stack 0
  2155                           
  2156                           ; 2 bytes @ 0x2C
  2157  0000AC                     	ds	1
  2158  0000AD                     EEPROM_write@data:
  2159                           	opt stack 0
  2160  0000AD                     actuatorTest@i_1653:
  2161                           	opt stack 0
  2162  0000AD                     sensorTest@res:
  2163                           	opt stack 0
  2164  0000AD                     PusherTest@res:
  2165                           	opt stack 0
  2166                           
  2167                           ; 2 bytes @ 0x2D
  2168  0000AD                     	ds	1
  2169  0000AE                     ??_EEPROM_write:
  2170  0000AE                     actuatorTest@i_1660:
  2171                           	opt stack 0
  2172  0000AE                     BlockerTest@cam_flag:
  2173                           	opt stack 0
  2174  0000AE                     printRTC@INT_time:
  2175                           	opt stack 0
  2176                           
  2177                           ; 14 bytes @ 0x2E
  2178  0000AE                     	ds	1
  2179  0000AF                     EEPROM_write@i:
  2180                           	opt stack 0
  2181  0000AF                     actuatorTest@i_1661:
  2182                           	opt stack 0
  2183  0000AF                     PusherTest@res_1708:
  2184                           	opt stack 0
  2185                           
  2186                           ; 2 bytes @ 0x2F
  2187  0000AF                     	ds	1
  2188  0000B0                     EEPROM_write@i_1339:
  2189                           	opt stack 0
  2190  0000B0                     actuatorTest@i_1663:
  2191                           	opt stack 0
  2192  0000B0                     BlockerTest@cond_flag:
  2193                           	opt stack 0
  2194                           
  2195                           ; 2 bytes @ 0x30
  2196  0000B0                     	ds	1
  2197  0000B1                     ??_Loading:
  2198  0000B1                     logRun@num:
  2199                           	opt stack 0
  2200  0000B1                     actuatorTest@i_1664:
  2201                           	opt stack 0
  2202  0000B1                     PusherTest@i:
  2203                           	opt stack 0
  2204                           
  2205                           ; 2 bytes @ 0x31
  2206  0000B1                     	ds	1
  2207  0000B2                     logRun@byte1:
  2208                           	opt stack 0
  2209  0000B2                     actuatorTest@i_1666:
  2210                           	opt stack 0
  2211                           
  2212                           ; 1 bytes @ 0x32
  2213  0000B2                     	ds	1
  2214  0000B3                     logRun@byte2:
  2215                           	opt stack 0
  2216  0000B3                     actuatorTest@i_1667:
  2217                           	opt stack 0
  2218  0000B3                     Loading@addr:
  2219                           	opt stack 0
  2220  0000B3                     PusherTest@i_1712:
  2221                           	opt stack 0
  2222                           
  2223                           ; 2 bytes @ 0x33
  2224  0000B3                     	ds	1
  2225  0000B4                     logRun@byte3:
  2226                           	opt stack 0
  2227  0000B4                     actuatorTest@i_1669:
  2228                           	opt stack 0
  2229                           
  2230                           ; 1 bytes @ 0x34
  2231  0000B4                     	ds	1
  2232  0000B5                     Loading@byte1:
  2233                           	opt stack 0
  2234  0000B5                     logRun@byte_i:
  2235                           	opt stack 0
  2236  0000B5                     actuatorTest@i_1670:
  2237                           	opt stack 0
  2238                           
  2239                           ; 1 bytes @ 0x35
  2240  0000B5                     	ds	1
  2241  0000B6                     logRun@byte11:
  2242                           	opt stack 0
  2243  0000B6                     actuatorTest@i_1672:
  2244                           	opt stack 0
  2245  0000B6                     Loading@i_1103:
  2246                           	opt stack 0
  2247                           
  2248                           ; 2 bytes @ 0x36
  2249  0000B6                     	ds	1
  2250  0000B7                     actuatorTest@i_1673:
  2251                           	opt stack 0
  2252  0000B7                     logRun@i:
  2253                           	opt stack 0
  2254                           
  2255                           ; 2 bytes @ 0x37
  2256  0000B7                     	ds	1
  2257  0000B8                     actuatorTest@i_1675:
  2258                           	opt stack 0
  2259  0000B8                     Loading@i_1104:
  2260                           	opt stack 0
  2261                           
  2262                           ; 2 bytes @ 0x38
  2263  0000B8                     	ds	1
  2264  0000B9                     actuatorTest@i_1676:
  2265                           	opt stack 0
  2266  0000B9                     logRun@addr:
  2267                           	opt stack 0
  2268                           
  2269                           ; 2 bytes @ 0x39
  2270  0000B9                     	ds	1
  2271  0000BA                     actuatorTest@i_1679:
  2272                           	opt stack 0
  2273  0000BA                     Loading@i_1106:
  2274                           	opt stack 0
  2275                           
  2276                           ; 2 bytes @ 0x3A
  2277  0000BA                     	ds	1
  2278  0000BB                     actuatorTest@i_1680:
  2279                           	opt stack 0
  2280                           
  2281                           ; 1 bytes @ 0x3B
  2282  0000BB                     	ds	1
  2283  0000BC                     actuatorTest@i_1682:
  2284                           	opt stack 0
  2285  0000BC                     printRTC@RTC_month:
  2286                           	opt stack 0
  2287  0000BC                     Loading@i_1107:
  2288                           	opt stack 0
  2289                           
  2290                           ; 2 bytes @ 0x3C
  2291  0000BC                     	ds	1
  2292  0000BD                     actuatorTest@i_1683:
  2293                           	opt stack 0
  2294                           
  2295                           ; 1 bytes @ 0x3D
  2296  0000BD                     	ds	1
  2297  0000BE                     actuatorTest@i_1685:
  2298                           	opt stack 0
  2299  0000BE                     Loading@i_1109:
  2300                           	opt stack 0
  2301  0000BE                     printRTC@month:
  2302                           	opt stack 0
  2303                           
  2304                           ; 4 bytes @ 0x3E
  2305  0000BE                     	ds	1
  2306  0000BF                     actuatorTest@i_1686:
  2307                           	opt stack 0
  2308                           
  2309                           ; 1 bytes @ 0x3F
  2310  0000BF                     	ds	1
  2311  0000C0                     actuatorTest@i_1689:
  2312                           	opt stack 0
  2313  0000C0                     Loading@j:
  2314                           	opt stack 0
  2315                           
  2316                           ; 2 bytes @ 0x40
  2317  0000C0                     	ds	1
  2318  0000C1                     actuatorTest@i_1690:
  2319                           	opt stack 0
  2320                           
  2321                           ; 1 bytes @ 0x41
  2322  0000C1                     	ds	1
  2323  0000C2                     actuatorTest@i_1692:
  2324                           	opt stack 0
  2325  0000C2                     printRTC@i:
  2326                           	opt stack 0
  2327  0000C2                     Loading@i:
  2328                           	opt stack 0
  2329                           
  2330                           ; 2 bytes @ 0x42
  2331  0000C2                     	ds	1
  2332  0000C3                     actuatorTest@i_1693:
  2333                           	opt stack 0
  2334                           
  2335                           ; 1 bytes @ 0x43
  2336  0000C3                     	ds	1
  2337  0000C4                     ??_UI:
  2338  0000C4                     actuatorTest@i:
  2339                           	opt stack 0
  2340                           
  2341                           ; 2 bytes @ 0x44
  2342  0000C4                     	ds	2
  2343  0000C6                     ??_Test:
  2344  0000C6                     _UI$2333:
  2345                           	opt stack 0
  2346                           
  2347                           ; 2 bytes @ 0x46
  2348  0000C6                     	ds	2
  2349  0000C8                     UI@i:
  2350                           	opt stack 0
  2351                           
  2352                           ; 1 bytes @ 0x48
  2353  0000C8                     	ds	1
  2354  0000C9                     UI@i_409:
  2355                           	opt stack 0
  2356                           
  2357                           ; 1 bytes @ 0x49
  2358  0000C9                     	ds	1
  2359  0000CA                     UI@i_412:
  2360                           	opt stack 0
  2361                           
  2362                           ; 1 bytes @ 0x4A
  2363  0000CA                     	ds	1
  2364  0000CB                     UI@i_413:
  2365                           	opt stack 0
  2366                           
  2367                           ; 1 bytes @ 0x4B
  2368  0000CB                     	ds	1
  2369  0000CC                     UI@i_431:
  2370                           	opt stack 0
  2371                           
  2372                           ; 1 bytes @ 0x4C
  2373  0000CC                     	ds	1
  2374  0000CD                     UI@i_432:
  2375                           	opt stack 0
  2376                           
  2377                           ; 1 bytes @ 0x4D
  2378  0000CD                     	ds	1
  2379  0000CE                     UI@i_435:
  2380                           	opt stack 0
  2381                           
  2382                           ; 1 bytes @ 0x4E
  2383  0000CE                     	ds	1
  2384  0000CF                     UI@i_436:
  2385                           	opt stack 0
  2386                           
  2387                           ; 1 bytes @ 0x4F
  2388  0000CF                     	ds	1
  2389  0000D0                     UI@i_439:
  2390                           	opt stack 0
  2391                           
  2392                           ; 1 bytes @ 0x50
  2393  0000D0                     	ds	1
  2394  0000D1                     UI@i_440:
  2395                           	opt stack 0
  2396                           
  2397                           ; 1 bytes @ 0x51
  2398  0000D1                     	ds	1
  2399  0000D2                     UI@i_443:
  2400                           	opt stack 0
  2401                           
  2402                           ; 1 bytes @ 0x52
  2403  0000D2                     	ds	1
  2404  0000D3                     UI@i_444:
  2405                           	opt stack 0
  2406                           
  2407                           ; 1 bytes @ 0x53
  2408  0000D3                     	ds	1
  2409  0000D4                     UI@i_447:
  2410                           	opt stack 0
  2411                           
  2412                           ; 1 bytes @ 0x54
  2413  0000D4                     	ds	1
  2414  0000D5                     UI@i_448:
  2415                           	opt stack 0
  2416                           
  2417                           ; 1 bytes @ 0x55
  2418  0000D5                     	ds	1
  2419  0000D6                     UI@month:
  2420                           	opt stack 0
  2421                           
  2422                           ; 4 bytes @ 0x56
  2423  0000D6                     	ds	4
  2424  0000DA                     tblptru	equ	0xFF8
  2425                           tblptrh	equ	0xFF7
  2426                           tblptrl	equ	0xFF6
  2427                           tablat	equ	0xFF5
  2428                           postinc0	equ	0xFEE
  2429                           wreg	equ	0xFE8
  2430                           postdec1	equ	0xFE5
  2431                           fsr1l	equ	0xFE1
  2432                           
  2433                           ; 1 bytes @ 0x5A
  2434                           
  2435                           	psect	cstackCOMRAM
  2436  000001                     __pcstackCOMRAM:
  2437                           	opt stack 0
  2438  000001                     ??i2_I2C_Master_Wait:
  2439  000001                     ??i2_isdigit:
  2440  000001                     ?i2___wmul:
  2441                           	opt stack 0
  2442  000001                     ?i2___lwmod:
  2443                           	opt stack 0
  2444  000001                     i2lcdNibble@temp:
  2445                           	opt stack 0
  2446  000001                     i2EEPROM_read@address:
  2447                           	opt stack 0
  2448  000001                     i2___wmul@multiplier:
  2449                           	opt stack 0
  2450  000001                     i2___lwmod@dividend:
  2451                           	opt stack 0
  2452  000001                     i2strcpy@to:
  2453                           	opt stack 0
  2454                           
  2455                           ; 2 bytes @ 0x0
  2456  000001                     	ds	1
  2457  000002                     i2I2C_Master_Read@a:
  2458                           	opt stack 0
  2459  000002                     i2lcdNibble@data:
  2460                           	opt stack 0
  2461  000002                     i2_isdigit$1977:
  2462                           	opt stack 0
  2463  000002                     i2I2C_Master_Write@d:
  2464                           	opt stack 0
  2465                           
  2466                           ; 2 bytes @ 0x1
  2467  000002                     	ds	1
  2468  000003                     i2I2C_Master_Read@temp:
  2469                           	opt stack 0
  2470  000003                     i2lcdInst@data:
  2471                           	opt stack 0
  2472  000003                     i2putch@data:
  2473                           	opt stack 0
  2474  000003                     i2isdigit@c:
  2475                           	opt stack 0
  2476  000003                     i2___wmul@multiplicand:
  2477                           	opt stack 0
  2478  000003                     i2___lwmod@divisor:
  2479                           	opt stack 0
  2480  000003                     i2strcpy@from:
  2481                           	opt stack 0
  2482                           
  2483                           ; 2 bytes @ 0x2
  2484  000003                     	ds	1
  2485  000004                     i2getRTC@i:
  2486                           	opt stack 0
  2487                           
  2488                           ; 2 bytes @ 0x3
  2489  000004                     	ds	1
  2490  000005                     i2___lwmod@counter:
  2491                           	opt stack 0
  2492  000005                     i2___wmul@product:
  2493                           	opt stack 0
  2494  000005                     i2strcpy@cp:
  2495                           	opt stack 0
  2496                           
  2497                           ; 2 bytes @ 0x4
  2498  000005                     	ds	1
  2499  000006                     ?i2___lwdiv:
  2500                           	opt stack 0
  2501  000006                     i2___lwdiv@dividend:
  2502                           	opt stack 0
  2503                           
  2504                           ; 2 bytes @ 0x5
  2505  000006                     	ds	1
  2506  000007                     retrieveLog@logNum:
  2507                           	opt stack 0
  2508                           
  2509                           ; 2 bytes @ 0x6
  2510  000007                     	ds	1
  2511  000008                     i2___lwdiv@divisor:
  2512                           	opt stack 0
  2513                           
  2514                           ; 2 bytes @ 0x7
  2515  000008                     	ds	1
  2516  000009                     ??_retrieveLog:
  2517                           
  2518                           ; 1 bytes @ 0x8
  2519  000009                     	ds	1
  2520  00000A                     i2___lwdiv@quotient:
  2521                           	opt stack 0
  2522                           
  2523                           ; 2 bytes @ 0x9
  2524  00000A                     	ds	1
  2525  00000B                     retrieveLog@byte1:
  2526                           	opt stack 0
  2527                           
  2528                           ; 1 bytes @ 0xA
  2529  00000B                     	ds	1
  2530  00000C                     retrieveLog@byte2:
  2531                           	opt stack 0
  2532  00000C                     i2___lwdiv@counter:
  2533                           	opt stack 0
  2534                           
  2535                           ; 1 bytes @ 0xB
  2536  00000C                     	ds	1
  2537  00000D                     ?i2_printf:
  2538                           	opt stack 0
  2539  00000D                     retrieveLog@byte3:
  2540                           	opt stack 0
  2541  00000D                     i2printf@f:
  2542                           	opt stack 0
  2543                           
  2544                           ; 2 bytes @ 0xC
  2545  00000D                     	ds	1
  2546  00000E                     retrieveLog@i:
  2547                           	opt stack 0
  2548                           
  2549                           ; 2 bytes @ 0xD
  2550  00000E                     	ds	2
  2551  000010                     retrieveLog@addr:
  2552                           	opt stack 0
  2553                           
  2554                           ; 2 bytes @ 0xF
  2555  000010                     	ds	2
  2556  000012                     dispLogs@myLog:
  2557                           	opt stack 0
  2558                           
  2559                           ; 2 bytes @ 0x11
  2560  000012                     	ds	2
  2561  000014                     
  2562                           ; 1 bytes @ 0x13
  2563  000014                     	ds	5
  2564  000019                     ??i2_printf:
  2565                           
  2566                           ; 1 bytes @ 0x18
  2567  000019                     	ds	4
  2568  00001D                     i2printf@prec:
  2569                           	opt stack 0
  2570                           
  2571                           ; 1 bytes @ 0x1C
  2572  00001D                     	ds	1
  2573  00001E                     i2printf@cp:
  2574                           	opt stack 0
  2575                           
  2576                           ; 2 bytes @ 0x1D
  2577  00001E                     	ds	2
  2578  000020                     i2printf@ap:
  2579                           	opt stack 0
  2580                           
  2581                           ; 2 bytes @ 0x1F
  2582  000020                     	ds	2
  2583  000022                     i2printf@len:
  2584                           	opt stack 0
  2585                           
  2586                           ; 2 bytes @ 0x21
  2587  000022                     	ds	2
  2588  000024                     i2printf@val:
  2589                           	opt stack 0
  2590                           
  2591                           ; 2 bytes @ 0x23
  2592  000024                     	ds	2
  2593  000026                     i2printf@flag:
  2594                           	opt stack 0
  2595                           
  2596                           ; 1 bytes @ 0x25
  2597  000026                     	ds	1
  2598  000027                     i2printf@c:
  2599                           	opt stack 0
  2600                           
  2601                           ; 1 bytes @ 0x26
  2602  000027                     	ds	1
  2603  000028                     i2printf@width:
  2604                           	opt stack 0
  2605                           
  2606                           ; 2 bytes @ 0x27
  2607  000028                     	ds	2
  2608  00002A                     ??_printSortTimer:
  2609  00002A                     ??i2_printRTC:
  2610  00002A                     ?_inputHandler:
  2611                           	opt stack 0
  2612                           
  2613                           ; 2 bytes @ 0x29
  2614  00002A                     	ds	2
  2615  00002C                     ??_inputHandler:
  2616                           
  2617                           ; 1 bytes @ 0x2B
  2618  00002C                     	ds	1
  2619  00002D                     printSortTimer@curTime:
  2620                           	opt stack 0
  2621  00002D                     i2printRTC@INT_time:
  2622                           	opt stack 0
  2623                           
  2624                           ; 14 bytes @ 0x2C
  2625  00002D                     	ds	14
  2626  00003B                     printSortTimer@start_sec:
  2627                           	opt stack 0
  2628  00003B                     i2printRTC@RTC_month:
  2629                           	opt stack 0
  2630                           
  2631                           ; 2 bytes @ 0x3A
  2632  00003B                     	ds	2
  2633  00003D                     printSortTimer@cur_sec:
  2634                           	opt stack 0
  2635  00003D                     i2printRTC@month:
  2636                           	opt stack 0
  2637                           
  2638                           ; 4 bytes @ 0x3C
  2639  00003D                     	ds	2
  2640  00003F                     printSortTimer@min:
  2641                           	opt stack 0
  2642                           
  2643                           ; 2 bytes @ 0x3E
  2644  00003F                     	ds	2
  2645  000041                     printSortTimer@sec:
  2646                           	opt stack 0
  2647  000041                     i2printRTC@i:
  2648                           	opt stack 0
  2649                           
  2650                           ; 2 bytes @ 0x40
  2651  000041                     	ds	2
  2652  000043                     ??_updateMenu:
  2653  000043                     _printSortTimer$2453:
  2654                           	opt stack 0
  2655                           
  2656                           ; 2 bytes @ 0x42
  2657  000043                     	ds	2
  2658  000045                     printSortTimer@timeDiff:
  2659                           	opt stack 0
  2660                           
  2661                           ; 2 bytes @ 0x44
  2662  000045                     	ds	2
  2663  000047                     printSortTimer@i:
  2664                           	opt stack 0
  2665                           
  2666                           ; 2 bytes @ 0x46
  2667  000047                     	ds	2
  2668  000049                     ??_handler:
  2669                           
  2670                           ; 1 bytes @ 0x48
  2671  000049                     	ds	16
  2672                           tblptru	equ	0xFF8
  2673                           tblptrh	equ	0xFF7
  2674                           tblptrl	equ	0xFF6
  2675                           tablat	equ	0xFF5
  2676                           postinc0	equ	0xFEE
  2677                           wreg	equ	0xFE8
  2678                           postdec1	equ	0xFE5
  2679                           fsr1l	equ	0xFE1
  2680                           
  2681 ;;
  2682 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  2683 ;;
  2684 ;; *************** function _main *****************
  2685 ;; Defined at:
  2686 ;;		line 19 in file "main.c"
  2687 ;; Parameters:    Size  Location     Type
  2688 ;;		None
  2689 ;; Auto vars:     Size  Location     Type
  2690 ;;		None
  2691 ;; Return value:  Size  Location     Type
  2692 ;;                  1    wreg      void 
  2693 ;; Registers used:
  2694 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2695 ;; Tracked objects:
  2696 ;;		On entry : 0/0
  2697 ;;		On exit  : 0/0
  2698 ;;		Unchanged: 0/0
  2699 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2700 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2701 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2702 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2703 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2704 ;;Total ram usage:        0 bytes
  2705 ;; Hardware stack levels required when called:   13
  2706 ;; This function calls:
  2707 ;;		_I2C_Master_Init
  2708 ;;		_Test
  2709 ;;		_UI
  2710 ;;		_initLCD
  2711 ;;		_initTime
  2712 ;;		_initUI
  2713 ;;		_logRun
  2714 ;;		_machineConfig
  2715 ;;		_sort
  2716 ;;		_stopSignals
  2717 ;; This function is called by:
  2718 ;;		Startup code after reset
  2719 ;; This function uses a non-reentrant model
  2720 ;;
  2721                           
  2722                           	psect	text0
  2723  003E70                     __ptext0:
  2724                           	opt stack 0
  2725  003E70                     _main:
  2726                           	opt stack 18
  2727                           
  2728                           ;main.c: 20: machineConfig();
  2729                           
  2730                           ;incstack = 0
  2731  003E70  ECC6  F023         	call	_machineConfig	;wreg free
  2732                           
  2733                           ;main.c: 21: initLCD();
  2734  003E74  EC16  F025         	call	_initLCD	;wreg free
  2735                           
  2736                           ;main.c: 24: RTCflag = 0;
  2737  003E78  0E00               	movlw	0
  2738  003E7A  0100               	movlb	0	; () banked
  2739  003E7C  6FE3               	movwf	(_RTCflag+1)& (0+255),b
  2740  003E7E  0E00               	movlw	0
  2741  003E80  6FE2               	movwf	_RTCflag& (0+255),b
  2742                           
  2743                           ;main.c: 25: if(RTCflag){
  2744  003E82  0100               	movlb	0	; () banked
  2745  003E84  51E2               	movf	_RTCflag& (0+255),w,b
  2746  003E86  0100               	movlb	0	; () banked
  2747  003E88  11E3               	iorwf	(_RTCflag+1)& (0+255),w,b
  2748  003E8A  B4D8               	btfsc	status,2,c
  2749  003E8C  D016               	goto	l8934
  2750                           
  2751                           ; BSR set to: 0
  2752                           ;main.c: 26: initTime(0x42, 0x20, 0x15, 0x04, 0x15, 0x03, 0x17);
  2753  003E8E  0E20               	movlw	32
  2754  003E90  0100               	movlb	0	; () banked
  2755  003E92  6F80               	movwf	initTime@m& (0+255),b
  2756  003E94  0E15               	movlw	21
  2757  003E96  0100               	movlb	0	; () banked
  2758  003E98  6F81               	movwf	initTime@h& (0+255),b
  2759  003E9A  0E04               	movlw	4
  2760  003E9C  0100               	movlb	0	; () banked
  2761  003E9E  6F82               	movwf	initTime@w& (0+255),b
  2762  003EA0  0E15               	movlw	21
  2763  003EA2  0100               	movlb	0	; () banked
  2764  003EA4  6F83               	movwf	initTime@DD& (0+255),b
  2765  003EA6  0E03               	movlw	3
  2766  003EA8  0100               	movlb	0	; () banked
  2767  003EAA  6F84               	movwf	initTime@MM& (0+255),b
  2768  003EAC  0E17               	movlw	23
  2769  003EAE  0100               	movlb	0	; () banked
  2770  003EB0  6F85               	movwf	initTime@YY& (0+255),b
  2771  003EB2  0E42               	movlw	66
  2772  003EB4  ECC9  F027         	call	_initTime
  2773                           
  2774                           ;main.c: 27: }
  2775  003EB8  D00B               	goto	l8936
  2776  003EBA                     l8934:
  2777                           
  2778                           ;main.c: 28: else{
  2779                           ;main.c: 29: I2C_Master_Init(10000);
  2780  003EBA  0E10               	movlw	16
  2781  003EBC  0100               	movlb	0	; () banked
  2782  003EBE  6F8D               	movwf	I2C_Master_Init@c& (0+255),b
  2783  003EC0  0E27               	movlw	39
  2784  003EC2  6F8E               	movwf	(I2C_Master_Init@c+1)& (0+255),b
  2785  003EC4  0E00               	movlw	0
  2786  003EC6  6F8F               	movwf	(I2C_Master_Init@c+2)& (0+255),b
  2787  003EC8  0E00               	movlw	0
  2788  003ECA  6F90               	movwf	(I2C_Master_Init@c+3)& (0+255),b
  2789  003ECC  EC96  F023         	call	_I2C_Master_Init	;wreg free
  2790  003ED0                     l8936:
  2791                           
  2792                           ;main.c: 30: }
  2793                           ;main.c: 32: initUI();
  2794  003ED0  ECD2  F026         	call	_initUI	;wreg free
  2795                           
  2796                           ;main.c: 33: first = 1;
  2797  003ED4  0E00               	movlw	0
  2798  003ED6  6E6E               	movwf	_first+1,c
  2799  003ED8  0E01               	movlw	1
  2800  003EDA  6E6D               	movwf	_first,c
  2801                           
  2802                           ;main.c: 44: switch(machine_state){
  2803                           
  2804                           ;main.c: 43: while(1){
  2805  003EDC  D017               	goto	l8958
  2806  003EDE                     l8940:
  2807                           
  2808                           ;main.c: 46: UI();
  2809  003EDE  EC65  F004         	call	_UI	;wreg free
  2810                           
  2811                           ;main.c: 47: break;
  2812  003EE2  D014               	goto	l8958
  2813  003EE4                     l8942:
  2814                           
  2815                           ;main.c: 49: sort();
  2816  003EE4  ECB8  F027         	call	_sort	;wreg free
  2817                           
  2818                           ;main.c: 50: break;
  2819  003EE8  D011               	goto	l8958
  2820  003EEA                     l8944:
  2821                           
  2822                           ;main.c: 52: stopSignals();
  2823  003EEA  ECE9  F027         	call	_stopSignals	;wreg free
  2824                           
  2825                           ;main.c: 53: logRun();
  2826  003EEE  ECA1  F01C         	call	_logRun	;wreg free
  2827                           
  2828                           ;main.c: 54: first = 1;
  2829  003EF2  0E00               	movlw	0
  2830  003EF4  6E6E               	movwf	_first+1,c
  2831  003EF6  0E01               	movlw	1
  2832  003EF8  6E6D               	movwf	_first,c
  2833                           
  2834                           ;main.c: 55: UI();
  2835  003EFA  EC65  F004         	call	_UI	;wreg free
  2836                           
  2837                           ;main.c: 56: break;
  2838  003EFE  D006               	goto	l8958
  2839  003F00                     l8952:
  2840                           
  2841                           ;main.c: 58: Test();
  2842  003F00  ECD1  F01D         	call	_Test	;wreg free
  2843                           
  2844                           ;main.c: 59: break;
  2845  003F04  D003               	goto	l8958
  2846  003F06                     l8954:
  2847                           
  2848                           ;main.c: 61: stopSignals();
  2849  003F06  ECE9  F027         	call	_stopSignals	;wreg free
  2850  003F0A                     l491:
  2851  003F0A  D7FF               	goto	l491
  2852  003F0C                     l8958:
  2853  003F0C  0100               	movlb	0	; () banked
  2854  003F0E  51FC               	movf	_machine_state& (0+255),w,b
  2855                           
  2856                           ; Switch size 1, requested type "space"
  2857                           ; Number of cases is 5, Range of values is 0 to 4
  2858                           ; switch strategies available:
  2859                           ; Name         Instructions Cycles
  2860                           ; simple_byte           16     9 (average)
  2861                           ;	Chosen strategy is simple_byte
  2862  003F10  0A00               	xorlw	0	; case 0
  2863  003F12  B4D8               	btfsc	status,2,c
  2864  003F14  D7E4               	goto	l8940
  2865  003F16  0A01               	xorlw	1	; case 1
  2866  003F18  B4D8               	btfsc	status,2,c
  2867  003F1A  D7E4               	goto	l8942
  2868  003F1C  0A03               	xorlw	3	; case 2
  2869  003F1E  B4D8               	btfsc	status,2,c
  2870  003F20  D7E4               	goto	l8944
  2871  003F22  0A01               	xorlw	1	; case 3
  2872  003F24  B4D8               	btfsc	status,2,c
  2873  003F26  D7EC               	goto	l8952
  2874  003F28  0A07               	xorlw	7	; case 4
  2875  003F2A  B4D8               	btfsc	status,2,c
  2876  003F2C  D7EC               	goto	l8954
  2877                           
  2878                           ; BSR set to: 0
  2879                           
  2880                           ; BSR set to: 0
  2881  003F2E  D7EE               	goto	l8958
  2882  003F30                     __end_of_main:
  2883                           	opt stack 0
  2884                           tblptru	equ	0xFF8
  2885                           tblptrh	equ	0xFF7
  2886                           tblptrl	equ	0xFF6
  2887                           tablat	equ	0xFF5
  2888                           postinc0	equ	0xFEE
  2889                           wreg	equ	0xFE8
  2890                           postdec1	equ	0xFE5
  2891                           fsr1l	equ	0xFE1
  2892                           status	equ	0xFD8
  2893                           
  2894 ;; *************** function _stopSignals *****************
  2895 ;; Defined at:
  2896 ;;		line 70 in file "main.c"
  2897 ;; Parameters:    Size  Location     Type
  2898 ;;		None
  2899 ;; Auto vars:     Size  Location     Type
  2900 ;;		None
  2901 ;; Return value:  Size  Location     Type
  2902 ;;                  1    wreg      void 
  2903 ;; Registers used:
  2904 ;;		wreg, status,2
  2905 ;; Tracked objects:
  2906 ;;		On entry : 0/0
  2907 ;;		On exit  : 0/0
  2908 ;;		Unchanged: 0/0
  2909 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2910 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2911 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2912 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2913 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2914 ;;Total ram usage:        0 bytes
  2915 ;; Hardware stack levels used:    1
  2916 ;; Hardware stack levels required when called:    7
  2917 ;; This function calls:
  2918 ;;		Nothing
  2919 ;; This function is called by:
  2920 ;;		_main
  2921 ;; This function uses a non-reentrant model
  2922 ;;
  2923                           
  2924                           	psect	text1
  2925  004FD2                     __ptext1:
  2926                           	opt stack 0
  2927  004FD2                     _stopSignals:
  2928                           	opt stack 23
  2929                           
  2930                           ;main.c: 71: LATA = 0x00;
  2931                           
  2932                           ; BSR set to: 0
  2933                           ;incstack = 0
  2934  004FD2  0E00               	movlw	0
  2935  004FD4  6E89               	movwf	3977,c	;volatile
  2936                           
  2937                           ;main.c: 72: LATB = 0x00;
  2938  004FD6  0E00               	movlw	0
  2939  004FD8  6E8A               	movwf	3978,c	;volatile
  2940                           
  2941                           ;main.c: 73: LATC = 0x00;
  2942  004FDA  0E00               	movlw	0
  2943  004FDC  6E8B               	movwf	3979,c	;volatile
  2944                           
  2945                           ;main.c: 74: LATD = 0x00;
  2946  004FDE  0E00               	movlw	0
  2947  004FE0  6E8C               	movwf	3980,c	;volatile
  2948                           
  2949                           ;main.c: 75: LATE = 0x00;
  2950  004FE2  0E00               	movlw	0
  2951  004FE4  6E8D               	movwf	3981,c	;volatile
  2952                           
  2953                           ;main.c: 76: TMR1ON = 0;
  2954  004FE6  90CD               	bcf	4045,0,c	;volatile
  2955                           
  2956                           ;main.c: 77: TMR3ON = 0;
  2957  004FE8  90B1               	bcf	4017,0,c	;volatile
  2958  004FEA  0012               	return		;funcret
  2959  004FEC                     __end_of_stopSignals:
  2960                           	opt stack 0
  2961                           tblptru	equ	0xFF8
  2962                           tblptrh	equ	0xFF7
  2963                           tblptrl	equ	0xFF6
  2964                           tablat	equ	0xFF5
  2965                           postinc0	equ	0xFEE
  2966                           wreg	equ	0xFE8
  2967                           postdec1	equ	0xFE5
  2968                           fsr1l	equ	0xFE1
  2969                           status	equ	0xFD8
  2970                           
  2971 ;; *************** function _sort *****************
  2972 ;; Defined at:
  2973 ;;		line 58 in file "sort.c"
  2974 ;; Parameters:    Size  Location     Type
  2975 ;;		None
  2976 ;; Auto vars:     Size  Location     Type
  2977 ;;		None
  2978 ;; Return value:  Size  Location     Type
  2979 ;;                  1    wreg      void 
  2980 ;; Registers used:
  2981 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2982 ;; Tracked objects:
  2983 ;;		On entry : 0/0
  2984 ;;		On exit  : 0/0
  2985 ;;		Unchanged: 0/0
  2986 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2987 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2988 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2989 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2990 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2991 ;;Total ram usage:        0 bytes
  2992 ;; Hardware stack levels used:    1
  2993 ;; Hardware stack levels required when called:   12
  2994 ;; This function calls:
  2995 ;;		_Distribution
  2996 ;;		_ID
  2997 ;;		_Loading
  2998 ;; This function is called by:
  2999 ;;		_main
  3000 ;; This function uses a non-reentrant model
  3001 ;;
  3002                           
  3003                           	psect	text2
  3004  004F70                     __ptext2:
  3005                           	opt stack 0
  3006  004F70                     _sort:
  3007                           	opt stack 18
  3008                           
  3009                           ;sort.c: 59: if(machine_state == Sorting_state){
  3010                           
  3011                           ;incstack = 0
  3012  004F70  0100               	movlb	0	; () banked
  3013  004F72  05FC               	decf	_machine_state& (0+255),w,b
  3014  004F74  B4D8               	btfsc	status,2,c
  3015                           
  3016                           ; BSR set to: 0
  3017                           ;sort.c: 60: Loading();
  3018  004F76  ECB8  F008         	call	_Loading	;wreg free
  3019                           
  3020                           ;sort.c: 61: }
  3021                           ;sort.c: 62: if(machine_state == Sorting_state){
  3022  004F7A  0100               	movlb	0	; () banked
  3023  004F7C  05FC               	decf	_machine_state& (0+255),w,b
  3024  004F7E  B4D8               	btfsc	status,2,c
  3025                           
  3026                           ; BSR set to: 0
  3027                           ;sort.c: 63: ID();
  3028  004F80  EC00  F017         	call	_ID	;wreg free
  3029                           
  3030                           ;sort.c: 64: }
  3031                           ;sort.c: 65: if(machine_state == Sorting_state){
  3032  004F84  0100               	movlb	0	; () banked
  3033  004F86  05FC               	decf	_machine_state& (0+255),w,b
  3034  004F88  A4D8               	btfss	status,2,c
  3035  004F8A  0012               	return	
  3036                           
  3037                           ; BSR set to: 0
  3038                           ;sort.c: 66: Distribution();
  3039  004F8C  EC13  F018         	call	_Distribution	;wreg free
  3040  004F90  0012               	return	
  3041  004F92                     __end_of_sort:
  3042                           	opt stack 0
  3043                           tblptru	equ	0xFF8
  3044                           tblptrh	equ	0xFF7
  3045                           tblptrl	equ	0xFF6
  3046                           tablat	equ	0xFF5
  3047                           postinc0	equ	0xFEE
  3048                           wreg	equ	0xFE8
  3049                           postdec1	equ	0xFE5
  3050                           fsr1l	equ	0xFE1
  3051                           status	equ	0xFD8
  3052                           
  3053 ;; *************** function _Loading *****************
  3054 ;; Defined at:
  3055 ;;		line 70 in file "sort.c"
  3056 ;; Parameters:    Size  Location     Type
  3057 ;;		None
  3058 ;; Auto vars:     Size  Location     Type
  3059 ;;  i               2   62[BANK0 ] int 
  3060 ;;  i               2   60[BANK0 ] int 
  3061 ;;  i               2   58[BANK0 ] int 
  3062 ;;  i               2   56[BANK0 ] int 
  3063 ;;  i               2   54[BANK0 ] int 
  3064 ;;  j               2   64[BANK0 ] int 
  3065 ;;  i               2   66[BANK0 ] int 
  3066 ;;  addr            2   51[BANK0 ] unsigned short 
  3067 ;;  byte1           1   53[BANK0 ] unsigned char 
  3068 ;; Return value:  Size  Location     Type
  3069 ;;                  1    wreg      void 
  3070 ;; Registers used:
  3071 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3072 ;; Tracked objects:
  3073 ;;		On entry : 0/0
  3074 ;;		On exit  : 0/0
  3075 ;;		Unchanged: 0/0
  3076 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3077 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3078 ;;      Locals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3079 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3080 ;;      Totals:         0      19       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3081 ;;Total ram usage:       19 bytes
  3082 ;; Hardware stack levels used:    1
  3083 ;; Hardware stack levels required when called:   11
  3084 ;; This function calls:
  3085 ;;		_EEPROM_read
  3086 ;;		_EEPROM_write
  3087 ;;		_delay_ms
  3088 ;;		_getIR
  3089 ;;		_getMAG
  3090 ;;		_initGlobalVars
  3091 ;;		_initServos
  3092 ;;		_initSortTimer
  3093 ;;		_lcdInst
  3094 ;;		_readIR
  3095 ;; This function is called by:
  3096 ;;		_sort
  3097 ;; This function uses a non-reentrant model
  3098 ;;
  3099                           
  3100                           	psect	text3
  3101  001170                     __ptext3:
  3102                           	opt stack 0
  3103  001170                     _Loading:
  3104                           	opt stack 18
  3105                           
  3106                           ;sort.c: 71: if(first){
  3107                           
  3108                           ;incstack = 0
  3109  001170  506D               	movf	_first,w,c
  3110  001172  106E               	iorwf	_first+1,w,c
  3111  001174  B4D8               	btfsc	status,2,c
  3112  001176  D066               	goto	l6930
  3113                           
  3114                           ;sort.c: 72: initGlobalVars();
  3115  001178  EC08  F022         	call	_initGlobalVars	;wreg free
  3116                           
  3117                           ;sort.c: 73: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  3118  00117C  0E01               	movlw	1
  3119  00117E  EC28  F028         	call	_lcdInst
  3120  001182  0E68               	movlw	104
  3121  001184  0100               	movlb	0	; () banked
  3122  001186  6FB1               	movwf	??_Loading& (0+255),b
  3123  001188  0EE4               	movlw	228
  3124  00118A                     u8237:
  3125  00118A  2EE8               	decfsz	wreg,f,c
  3126  00118C  D7FE               	bra	u8237
  3127  00118E  2FB1               	decfsz	??_Loading& (0+255),f,b
  3128  001190  D7FC               	bra	u8237
  3129  001192  F000               	nop	
  3130                           
  3131                           ;sort.c: 74: initSortTimer();
  3132  001194  EC55  F020         	call	_initSortTimer	;wreg free
  3133                           
  3134                           ;sort.c: 75: LATCbits.LATC5 = 1;
  3135  001198  8A8B               	bsf	3979,5,c	;volatile
  3136                           
  3137                           ;sort.c: 80: sel = EEPROM_read(0);
  3138  00119A  0E00               	movlw	0
  3139  00119C  0100               	movlb	0	; () banked
  3140  00119E  6F81               	movwf	(EEPROM_read@address+1)& (0+255),b
  3141  0011A0  0E00               	movlw	0
  3142  0011A2  6F80               	movwf	EEPROM_read@address& (0+255),b
  3143  0011A4  ECF6  F027         	call	_EEPROM_read	;wreg free
  3144  0011A8  0100               	movlb	0	; () banked
  3145  0011AA  6FFD               	movwf	_sel& (0+255),b
  3146                           
  3147                           ; BSR set to: 0
  3148                           ;sort.c: 81: unsigned short addr = 1 + 11 * sel;
  3149  0011AC  0100               	movlb	0	; () banked
  3150  0011AE  51FD               	movf	_sel& (0+255),w,b
  3151  0011B0  0D0B               	mullw	11
  3152  0011B2  0E01               	movlw	1
  3153  0011B4  24F3               	addwf	prodl,w,c
  3154  0011B6  0100               	movlb	0	; () banked
  3155  0011B8  6FB3               	movwf	Loading@addr& (0+255),b
  3156  0011BA  0E00               	movlw	0
  3157  0011BC  20F4               	addwfc	prodh,w,c
  3158  0011BE  0100               	movlb	0	; () banked
  3159  0011C0  6FB4               	movwf	(Loading@addr+1)& (0+255),b
  3160                           
  3161                           ; BSR set to: 0
  3162                           ;sort.c: 82: unsigned char byte1 = 0b01111111;
  3163  0011C2  0E7F               	movlw	127
  3164  0011C4  0100               	movlb	0	; () banked
  3165  0011C6  6FB5               	movwf	Loading@byte1& (0+255),b
  3166                           
  3167                           ; BSR set to: 0
  3168                           ;sort.c: 83: EEPROM_write(addr, byte1);
  3169  0011C8  C0B3  F0AB         	movff	Loading@addr,EEPROM_write@address
  3170  0011CC  C0B4  F0AC         	movff	Loading@addr+1,EEPROM_write@address+1
  3171  0011D0  C0B5  F0AD         	movff	Loading@byte1,EEPROM_write@data
  3172  0011D4  EC5B  F01E         	call	_EEPROM_write	;wreg free
  3173                           
  3174                           ;sort.c: 86: LATAbits.LATA5 = 0;
  3175  0011D8  9A89               	bcf	3977,5,c	;volatile
  3176                           
  3177                           ;sort.c: 88: for(int i=0; i<46; i++){
  3178  0011DA  0E00               	movlw	0
  3179  0011DC  0100               	movlb	0	; () banked
  3180  0011DE  6FC3               	movwf	(Loading@i+1)& (0+255),b
  3181  0011E0  0E00               	movlw	0
  3182  0011E2  6FC2               	movwf	Loading@i& (0+255),b
  3183                           
  3184                           ; BSR set to: 0
  3185  0011E4  0100               	movlb	0	; () banked
  3186  0011E6  BFC3               	btfsc	(Loading@i+1)& (0+255),7,b
  3187  0011E8  D008               	goto	l6920
  3188  0011EA  0100               	movlb	0	; () banked
  3189  0011EC  51C3               	movf	(Loading@i+1)& (0+255),w,b
  3190  0011EE  E126               	bnz	l740
  3191  0011F0  0E2E               	movlw	46
  3192  0011F2  0100               	movlb	0	; () banked
  3193  0011F4  5DC2               	subwf	Loading@i& (0+255),w,b
  3194  0011F6  B0D8               	btfsc	status,0,c
  3195  0011F8  D021               	goto	l740
  3196  0011FA                     l6920:
  3197                           
  3198                           ; BSR set to: 0
  3199                           ;sort.c: 89: LATAbits.LATA5 = !LATAbits.LATA5;
  3200  0011FA  BA89               	btfsc	3977,5,c	;volatile
  3201  0011FC  D004               	goto	u5430
  3202  0011FE  0100               	movlb	0	; () banked
  3203  001200  6BB1               	clrf	??_Loading& (0+255),b
  3204  001202  2BB1               	incf	??_Loading& (0+255),f,b
  3205  001204  D002               	goto	u5448
  3206  001206                     u5430:
  3207  001206  0100               	movlb	0	; () banked
  3208  001208  6BB1               	clrf	??_Loading& (0+255),b
  3209  00120A                     u5448:
  3210  00120A  0100               	movlb	0	; () banked
  3211  00120C  3BB1               	swapf	??_Loading& (0+255),f,b
  3212  00120E  47B1               	rlncf	??_Loading& (0+255),f,b
  3213  001210  5089               	movf	3977,w,c	;volatile
  3214  001212  0100               	movlb	0	; () banked
  3215  001214  19B1               	xorwf	??_Loading& (0+255),w,b
  3216  001216  0BDF               	andlw	-33
  3217  001218  19B1               	xorwf	??_Loading& (0+255),w,b
  3218  00121A  6E89               	movwf	3977,c	;volatile
  3219                           
  3220                           ; BSR set to: 0
  3221                           ;sort.c: 90: delay_ms(45-i);
  3222  00121C  0100               	movlb	0	; () banked
  3223  00121E  51C2               	movf	Loading@i& (0+255),w,b
  3224  001220  0800               	sublw	0
  3225  001222  0F2D               	addlw	45
  3226  001224  EC58  F027         	call	_delay_ms
  3227  001228  0100               	movlb	0	; () banked
  3228  00122A  4BC2               	infsnz	Loading@i& (0+255),f,b
  3229  00122C  2BC3               	incf	(Loading@i+1)& (0+255),f,b
  3230                           
  3231                           ; BSR set to: 0
  3232  00122E  0100               	movlb	0	; () banked
  3233  001230  BFC3               	btfsc	(Loading@i+1)& (0+255),7,b
  3234  001232  D7E3               	goto	l6920
  3235  001234  0100               	movlb	0	; () banked
  3236  001236  51C3               	movf	(Loading@i+1)& (0+255),w,b
  3237  001238  E101               	bnz	u5450
  3238  00123A  D7DA               	goto	L1
  3239  00123C                     u5450:
  3240  00123C                     l740:
  3241                           
  3242                           ; BSR set to: 0
  3243                           ;sort.c: 91: }
  3244                           ;sort.c: 92: LATAbits.LATA5 = 1;
  3245  00123C  8A89               	bsf	3977,5,c	;volatile
  3246                           
  3247                           ; BSR set to: 0
  3248                           ;sort.c: 95: initServos();
  3249  00123E  EC22  F024         	call	_initServos	;wreg free
  3250                           
  3251                           ;sort.c: 96: }
  3252  001242  0012               	return	
  3253  001244                     l6930:
  3254                           
  3255                           ;sort.c: 97: else{
  3256                           ;sort.c: 100: if(!f_loadingNewCan){
  3257  001244  0100               	movlb	0	; () banked
  3258  001246  51EA               	movf	_f_loadingNewCan& (0+255),w,b
  3259  001248  0100               	movlb	0	; () banked
  3260  00124A  11EB               	iorwf	(_f_loadingNewCan+1)& (0+255),w,b
  3261  00124C  A4D8               	btfss	status,2,c
  3262  00124E  D018               	goto	l6946
  3263                           
  3264                           ; BSR set to: 0
  3265                           ;sort.c: 102: getIR();
  3266  001250  ECBF  F022         	call	_getIR	;wreg free
  3267                           
  3268                           ;sort.c: 104: if(!f_loadingNewCan){
  3269  001254  0100               	movlb	0	; () banked
  3270  001256  51EA               	movf	_f_loadingNewCan& (0+255),w,b
  3271  001258  0100               	movlb	0	; () banked
  3272  00125A  11EB               	iorwf	(_f_loadingNewCan+1)& (0+255),w,b
  3273  00125C  B4D8               	btfsc	status,2,c
  3274  00125E  0012               	return	
  3275                           
  3276                           ; BSR set to: 0
  3277                           ;sort.c: 108: else{
  3278                           ;sort.c: 109: count_total++;
  3279                           
  3280                           ; BSR set to: 0
  3281                           
  3282                           ; BSR set to: 0
  3283                           ;sort.c: 106: }
  3284                           
  3285                           ; BSR set to: 0
  3286                           ;sort.c: 105: return;
  3287  001260  0100               	movlb	0	; () banked
  3288  001262  4BFE               	infsnz	_count_total& (0+255),f,b
  3289  001264  2BFF               	incf	(_count_total+1)& (0+255),f,b
  3290                           
  3291                           ; BSR set to: 0
  3292                           ;sort.c: 110: if(count_total == 12){
  3293  001266  0E0C               	movlw	12
  3294  001268  0100               	movlb	0	; () banked
  3295  00126A  19FE               	xorwf	_count_total& (0+255),w,b
  3296  00126C  0100               	movlb	0	; () banked
  3297  00126E  11FF               	iorwf	(_count_total+1)& (0+255),w,b
  3298  001270  A4D8               	btfss	status,2,c
  3299  001272  0012               	return	
  3300                           
  3301                           ; BSR set to: 0
  3302                           ;sort.c: 111: f_lastCan = 1;
  3303  001274  0E00               	movlw	0
  3304  001276  0100               	movlb	0	; () banked
  3305  001278  6FE9               	movwf	(_f_lastCan+1)& (0+255),b
  3306  00127A  0E01               	movlw	1
  3307  00127C  6FE8               	movwf	_f_lastCan& (0+255),b
  3308                           
  3309                           ; BSR set to: 0
  3310                           ;sort.c: 112: }
  3311                           ;sort.c: 113: }
  3312                           ;sort.c: 114: }
  3313                           
  3314                           ; BSR set to: 0
  3315  00127E  0012               	return	
  3316  001280                     l6946:
  3317                           
  3318                           ; BSR set to: 0
  3319                           ;sort.c: 117: else if(f_ID_receive){
  3320  001280  5065               	movf	_f_ID_receive,w,c
  3321  001282  1066               	iorwf	_f_ID_receive+1,w,c
  3322  001284  B4D8               	btfsc	status,2,c
  3323  001286  0012               	return	
  3324                           
  3325                           ; BSR set to: 0
  3326                           ;sort.c: 118: f_loadingNewCan = 0;
  3327  001288  0E00               	movlw	0
  3328  00128A  0100               	movlb	0	; () banked
  3329  00128C  6FEB               	movwf	(_f_loadingNewCan+1)& (0+255),b
  3330  00128E  0E00               	movlw	0
  3331  001290  6FEA               	movwf	_f_loadingNewCan& (0+255),b
  3332                           
  3333                           ; BSR set to: 0
  3334                           ;sort.c: 119: _delay((unsigned long)((1500)*(32000000/4000.0)));
  3335  001292  0E3D               	movlw	61
  3336  001294  0100               	movlb	0	; () banked
  3337  001296  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3338  001298  0EE1               	movlw	225
  3339  00129A  0100               	movlb	0	; () banked
  3340  00129C  6FB1               	movwf	??_Loading& (0+255),b
  3341  00129E  0E3F               	movlw	63
  3342  0012A0                     u8247:
  3343  0012A0  2EE8               	decfsz	wreg,f,c
  3344  0012A2  D7FE               	bra	u8247
  3345  0012A4  2FB1               	decfsz	??_Loading& (0+255),f,b
  3346  0012A6  D7FC               	bra	u8247
  3347  0012A8  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3348  0012AA  D7FA               	bra	u8247
  3349  0012AC  D000               	nop2	
  3350                           
  3351                           ;sort.c: 120: LATAbits.LATA5 = 0;
  3352  0012AE  9A89               	bcf	3977,5,c	;volatile
  3353                           
  3354                           ;sort.c: 124: getMAG();
  3355  0012B0  ECC8  F025         	call	_getMAG	;wreg free
  3356                           
  3357                           ;sort.c: 125: sensor_outputs[0] = MAG_signal;
  3358  0012B4  C0E0  F0DA         	movff	_MAG_signal,_sensor_outputs
  3359  0012B8  C0E1  F0DB         	movff	_MAG_signal+1,_sensor_outputs+1
  3360                           
  3361                           ;sort.c: 127: if(sensor_outputs[0]){
  3362  0012BC  0100               	movlb	0	; () banked
  3363  0012BE  51DA               	movf	_sensor_outputs& (0+255),w,b
  3364  0012C0  0100               	movlb	0	; () banked
  3365  0012C2  11DB               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  3366  0012C4  B4D8               	btfsc	status,2,c
  3367  0012C6  D01D               	goto	l6972
  3368                           
  3369                           ; BSR set to: 0
  3370                           ;sort.c: 128: for(int i = 0; i<2500; i++){
  3371  0012C8  0E00               	movlw	0
  3372  0012CA  0100               	movlb	0	; () banked
  3373  0012CC  6FB7               	movwf	(Loading@i_1103+1)& (0+255),b
  3374  0012CE  0E00               	movlw	0
  3375  0012D0  6FB6               	movwf	Loading@i_1103& (0+255),b
  3376  0012D2                     l6962:
  3377                           
  3378                           ; BSR set to: 0
  3379  0012D2  0100               	movlb	0	; () banked
  3380  0012D4  BFB7               	btfsc	(Loading@i_1103+1)& (0+255),7,b
  3381  0012D6  D008               	goto	l750
  3382  0012D8  0EC4               	movlw	196
  3383  0012DA  0100               	movlb	0	; () banked
  3384  0012DC  5DB6               	subwf	Loading@i_1103& (0+255),w,b
  3385  0012DE  0E09               	movlw	9
  3386  0012E0  0100               	movlb	0	; () banked
  3387  0012E2  59B7               	subwfb	(Loading@i_1103+1)& (0+255),w,b
  3388  0012E4  B0D8               	btfsc	status,0,c
  3389  0012E6  D02A               	goto	l6984
  3390  0012E8                     l750:
  3391                           
  3392                           ; BSR set to: 0
  3393                           ;sort.c: 129: LATAbits.LATA4 = 1;
  3394  0012E8  8889               	bsf	3977,4,c	;volatile
  3395                           
  3396                           ; BSR set to: 0
  3397                           ;sort.c: 130: _delay((unsigned long)((75)*(32000000/4000000.0)));
  3398  0012EA  0EC8               	movlw	200
  3399  0012EC                     u8257:
  3400  0012EC  2EE8               	decfsz	wreg,f,c
  3401  0012EE  D7FE               	bra	u8257
  3402                           
  3403                           ;sort.c: 131: LATAbits.LATA4 = 0;
  3404  0012F0  9889               	bcf	3977,4,c	;volatile
  3405                           
  3406                           ;sort.c: 132: _delay((unsigned long)((25)*(32000000/4000000.0)));
  3407  0012F2  0E42               	movlw	66
  3408  0012F4                     u8267:
  3409  0012F4  2EE8               	decfsz	wreg,f,c
  3410  0012F6  D7FE               	bra	u8267
  3411  0012F8  D000               	nop2	
  3412  0012FA  0100               	movlb	0	; () banked
  3413  0012FC  4BB6               	infsnz	Loading@i_1103& (0+255),f,b
  3414  0012FE  2BB7               	incf	(Loading@i_1103+1)& (0+255),f,b
  3415  001300  D7E8               	goto	l6962
  3416  001302                     l6972:
  3417                           
  3418                           ; BSR set to: 0
  3419                           ;sort.c: 135: else{
  3420                           ;sort.c: 136: for(int i = 0; i<2500; i++){
  3421  001302  0E00               	movlw	0
  3422  001304  0100               	movlb	0	; () banked
  3423  001306  6FB9               	movwf	(Loading@i_1104+1)& (0+255),b
  3424  001308  0E00               	movlw	0
  3425  00130A  6FB8               	movwf	Loading@i_1104& (0+255),b
  3426  00130C                     l6974:
  3427                           
  3428                           ; BSR set to: 0
  3429  00130C  0100               	movlb	0	; () banked
  3430  00130E  BFB9               	btfsc	(Loading@i_1104+1)& (0+255),7,b
  3431  001310  D008               	goto	l753
  3432  001312  0EC4               	movlw	196
  3433  001314  0100               	movlb	0	; () banked
  3434  001316  5DB8               	subwf	Loading@i_1104& (0+255),w,b
  3435  001318  0E09               	movlw	9
  3436  00131A  0100               	movlb	0	; () banked
  3437  00131C  59B9               	subwfb	(Loading@i_1104+1)& (0+255),w,b
  3438  00131E  B0D8               	btfsc	status,0,c
  3439  001320  D00D               	goto	l6984
  3440  001322                     l753:
  3441                           
  3442                           ; BSR set to: 0
  3443                           ;sort.c: 137: LATAbits.LATA4 = 1;
  3444  001322  8889               	bsf	3977,4,c	;volatile
  3445                           
  3446                           ; BSR set to: 0
  3447                           ;sort.c: 138: _delay((unsigned long)((58)*(32000000/4000000.0)));
  3448  001324  0E9A               	movlw	154
  3449  001326                     u8277:
  3450  001326  2EE8               	decfsz	wreg,f,c
  3451  001328  D7FE               	bra	u8277
  3452  00132A  D000               	nop2	
  3453                           
  3454                           ;sort.c: 139: LATAbits.LATA4 = 0;
  3455  00132C  9889               	bcf	3977,4,c	;volatile
  3456                           
  3457                           ;sort.c: 140: _delay((unsigned long)((42)*(32000000/4000000.0)));
  3458  00132E  0E70               	movlw	112
  3459  001330                     u8287:
  3460  001330  2EE8               	decfsz	wreg,f,c
  3461  001332  D7FE               	bra	u8287
  3462  001334  0100               	movlb	0	; () banked
  3463  001336  4BB8               	infsnz	Loading@i_1104& (0+255),f,b
  3464  001338  2BB9               	incf	(Loading@i_1104+1)& (0+255),f,b
  3465  00133A  D7E8               	goto	l6974
  3466  00133C                     l6984:
  3467                           
  3468                           ; BSR set to: 0
  3469                           ;sort.c: 141: }
  3470                           ;sort.c: 142: }
  3471                           ;sort.c: 144: _delay((unsigned long)((350)*(32000000/4000.0)));
  3472  00133C  0E0F               	movlw	15
  3473  00133E  0100               	movlb	0	; () banked
  3474  001340  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3475  001342  0E35               	movlw	53
  3476  001344  0100               	movlb	0	; () banked
  3477  001346  6FB1               	movwf	??_Loading& (0+255),b
  3478  001348  0E51               	movlw	81
  3479  00134A                     u8297:
  3480  00134A  2EE8               	decfsz	wreg,f,c
  3481  00134C  D7FE               	bra	u8297
  3482  00134E  2FB1               	decfsz	??_Loading& (0+255),f,b
  3483  001350  D7FC               	bra	u8297
  3484  001352  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3485  001354  D7FA               	bra	u8297
  3486                           
  3487                           ;sort.c: 146: readIR();
  3488  001356  ECCA  F024         	call	_readIR	;wreg free
  3489                           
  3490                           ;sort.c: 147: if(IR_signal==1){
  3491  00135A  0100               	movlb	0	; () banked
  3492  00135C  05DE               	decf	_IR_signal& (0+255),w,b
  3493  00135E  0100               	movlb	0	; () banked
  3494  001360  11DF               	iorwf	(_IR_signal+1)& (0+255),w,b
  3495  001362  A4D8               	btfss	status,2,c
  3496  001364  D130               	goto	l7096
  3497                           
  3498                           ; BSR set to: 0
  3499                           ;sort.c: 148: _delay((unsigned long)((100)*(32000000/4000.0)));
  3500  001366  0E05               	movlw	5
  3501  001368  0100               	movlb	0	; () banked
  3502  00136A  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3503  00136C  0E0F               	movlw	15
  3504  00136E  0100               	movlb	0	; () banked
  3505  001370  6FB1               	movwf	??_Loading& (0+255),b
  3506  001372  0EF1               	movlw	241
  3507  001374                     u8307:
  3508  001374  2EE8               	decfsz	wreg,f,c
  3509  001376  D7FE               	bra	u8307
  3510  001378  2FB1               	decfsz	??_Loading& (0+255),f,b
  3511  00137A  D7FC               	bra	u8307
  3512  00137C  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3513  00137E  D7FA               	bra	u8307
  3514                           
  3515                           ;sort.c: 149: readIR();
  3516  001380  ECCA  F024         	call	_readIR	;wreg free
  3517                           
  3518                           ;sort.c: 150: if(IR_signal==1){
  3519  001384  0100               	movlb	0	; () banked
  3520  001386  05DE               	decf	_IR_signal& (0+255),w,b
  3521  001388  0100               	movlb	0	; () banked
  3522  00138A  11DF               	iorwf	(_IR_signal+1)& (0+255),w,b
  3523  00138C  A4D8               	btfss	status,2,c
  3524  00138E  D040               	goto	l7022
  3525                           
  3526                           ; BSR set to: 0
  3527                           ;sort.c: 151: if(sensor_outputs[0]){
  3528  001390  0100               	movlb	0	; () banked
  3529  001392  51DA               	movf	_sensor_outputs& (0+255),w,b
  3530  001394  0100               	movlb	0	; () banked
  3531  001396  11DB               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  3532  001398  B4D8               	btfsc	status,2,c
  3533  00139A  D01D               	goto	l7010
  3534                           
  3535                           ; BSR set to: 0
  3536                           ;sort.c: 152: for(int i = 0; i<2500; i++){
  3537  00139C  0E00               	movlw	0
  3538  00139E  0100               	movlb	0	; () banked
  3539  0013A0  6FBB               	movwf	(Loading@i_1106+1)& (0+255),b
  3540  0013A2  0E00               	movlw	0
  3541  0013A4  6FBA               	movwf	Loading@i_1106& (0+255),b
  3542  0013A6                     l7000:
  3543                           
  3544                           ; BSR set to: 0
  3545  0013A6  0100               	movlb	0	; () banked
  3546  0013A8  BFBB               	btfsc	(Loading@i_1106+1)& (0+255),7,b
  3547  0013AA  D008               	goto	l758
  3548  0013AC  0EC4               	movlw	196
  3549  0013AE  0100               	movlb	0	; () banked
  3550  0013B0  5DBA               	subwf	Loading@i_1106& (0+255),w,b
  3551  0013B2  0E09               	movlw	9
  3552  0013B4  0100               	movlb	0	; () banked
  3553  0013B6  59BB               	subwfb	(Loading@i_1106+1)& (0+255),w,b
  3554  0013B8  B0D8               	btfsc	status,0,c
  3555  0013BA  D02A               	goto	l7022
  3556  0013BC                     l758:
  3557                           
  3558                           ; BSR set to: 0
  3559                           ;sort.c: 153: LATAbits.LATA4 = 1;
  3560  0013BC  8889               	bsf	3977,4,c	;volatile
  3561                           
  3562                           ; BSR set to: 0
  3563                           ;sort.c: 154: _delay((unsigned long)((75)*(32000000/4000000.0)));
  3564  0013BE  0EC8               	movlw	200
  3565  0013C0                     u8317:
  3566  0013C0  2EE8               	decfsz	wreg,f,c
  3567  0013C2  D7FE               	bra	u8317
  3568                           
  3569                           ;sort.c: 155: LATAbits.LATA4 = 0;
  3570  0013C4  9889               	bcf	3977,4,c	;volatile
  3571                           
  3572                           ;sort.c: 156: _delay((unsigned long)((25)*(32000000/4000000.0)));
  3573  0013C6  0E42               	movlw	66
  3574  0013C8                     u8327:
  3575  0013C8  2EE8               	decfsz	wreg,f,c
  3576  0013CA  D7FE               	bra	u8327
  3577  0013CC  D000               	nop2	
  3578  0013CE  0100               	movlb	0	; () banked
  3579  0013D0  4BBA               	infsnz	Loading@i_1106& (0+255),f,b
  3580  0013D2  2BBB               	incf	(Loading@i_1106+1)& (0+255),f,b
  3581  0013D4  D7E8               	goto	l7000
  3582  0013D6                     l7010:
  3583                           
  3584                           ; BSR set to: 0
  3585                           ;sort.c: 159: else{
  3586                           ;sort.c: 160: for(int i = 0; i<2500; i++){
  3587  0013D6  0E00               	movlw	0
  3588  0013D8  0100               	movlb	0	; () banked
  3589  0013DA  6FBD               	movwf	(Loading@i_1107+1)& (0+255),b
  3590  0013DC  0E00               	movlw	0
  3591  0013DE  6FBC               	movwf	Loading@i_1107& (0+255),b
  3592  0013E0                     l7012:
  3593                           
  3594                           ; BSR set to: 0
  3595  0013E0  0100               	movlb	0	; () banked
  3596  0013E2  BFBD               	btfsc	(Loading@i_1107+1)& (0+255),7,b
  3597  0013E4  D008               	goto	l761
  3598  0013E6  0EC4               	movlw	196
  3599  0013E8  0100               	movlb	0	; () banked
  3600  0013EA  5DBC               	subwf	Loading@i_1107& (0+255),w,b
  3601  0013EC  0E09               	movlw	9
  3602  0013EE  0100               	movlb	0	; () banked
  3603  0013F0  59BD               	subwfb	(Loading@i_1107+1)& (0+255),w,b
  3604  0013F2  B0D8               	btfsc	status,0,c
  3605  0013F4  D00D               	goto	l7022
  3606  0013F6                     l761:
  3607                           
  3608                           ; BSR set to: 0
  3609                           ;sort.c: 161: LATAbits.LATA4 = 1;
  3610  0013F6  8889               	bsf	3977,4,c	;volatile
  3611                           
  3612                           ; BSR set to: 0
  3613                           ;sort.c: 162: _delay((unsigned long)((58)*(32000000/4000000.0)));
  3614  0013F8  0E9A               	movlw	154
  3615  0013FA                     u8337:
  3616  0013FA  2EE8               	decfsz	wreg,f,c
  3617  0013FC  D7FE               	bra	u8337
  3618  0013FE  D000               	nop2	
  3619                           
  3620                           ;sort.c: 163: LATAbits.LATA4 = 0;
  3621  001400  9889               	bcf	3977,4,c	;volatile
  3622                           
  3623                           ;sort.c: 164: _delay((unsigned long)((42)*(32000000/4000000.0)));
  3624  001402  0E70               	movlw	112
  3625  001404                     u8347:
  3626  001404  2EE8               	decfsz	wreg,f,c
  3627  001406  D7FE               	bra	u8347
  3628  001408  0100               	movlb	0	; () banked
  3629  00140A  4BBC               	infsnz	Loading@i_1107& (0+255),f,b
  3630  00140C  2BBD               	incf	(Loading@i_1107+1)& (0+255),f,b
  3631  00140E  D7E8               	goto	l7012
  3632  001410                     l7022:
  3633                           
  3634                           ; BSR set to: 0
  3635                           ;sort.c: 165: }
  3636                           ;sort.c: 166: }
  3637                           ;sort.c: 167: }
  3638                           ;sort.c: 169: _delay((unsigned long)((350)*(32000000/4000.0)));
  3639  001410  0E0F               	movlw	15
  3640  001412  0100               	movlb	0	; () banked
  3641  001414  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3642  001416  0E35               	movlw	53
  3643  001418  0100               	movlb	0	; () banked
  3644  00141A  6FB1               	movwf	??_Loading& (0+255),b
  3645  00141C  0E51               	movlw	81
  3646  00141E                     u8357:
  3647  00141E  2EE8               	decfsz	wreg,f,c
  3648  001420  D7FE               	bra	u8357
  3649  001422  2FB1               	decfsz	??_Loading& (0+255),f,b
  3650  001424  D7FC               	bra	u8357
  3651  001426  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3652  001428  D7FA               	bra	u8357
  3653                           
  3654                           ;sort.c: 171: int j = 1;
  3655  00142A  0E00               	movlw	0
  3656  00142C  0100               	movlb	0	; () banked
  3657  00142E  6FC1               	movwf	(Loading@j+1)& (0+255),b
  3658  001430  0E01               	movlw	1
  3659  001432  6FC0               	movwf	Loading@j& (0+255),b
  3660                           
  3661                           ;sort.c: 172: while(IR_signal == 1){
  3662  001434  D0C2               	goto	l7094
  3663  001436                     l7026:
  3664                           
  3665                           ; BSR set to: 0
  3666                           ;sort.c: 173: readIR();
  3667  001436  ECCA  F024         	call	_readIR	;wreg free
  3668                           
  3669                           ;sort.c: 174: if(IR_signal==1){
  3670  00143A  0100               	movlb	0	; () banked
  3671  00143C  05DE               	decf	_IR_signal& (0+255),w,b
  3672  00143E  0100               	movlb	0	; () banked
  3673  001440  11DF               	iorwf	(_IR_signal+1)& (0+255),w,b
  3674  001442  A4D8               	btfss	status,2,c
  3675  001444  D0BA               	goto	l7094
  3676                           
  3677                           ; BSR set to: 0
  3678                           ;sort.c: 175: _delay((unsigned long)((350)*(32000000/4000.0)));
  3679  001446  0E0F               	movlw	15
  3680  001448  0100               	movlb	0	; () banked
  3681  00144A  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3682  00144C  0E35               	movlw	53
  3683  00144E  0100               	movlb	0	; () banked
  3684  001450  6FB1               	movwf	??_Loading& (0+255),b
  3685  001452  0E51               	movlw	81
  3686  001454                     u8367:
  3687  001454  2EE8               	decfsz	wreg,f,c
  3688  001456  D7FE               	bra	u8367
  3689  001458  2FB1               	decfsz	??_Loading& (0+255),f,b
  3690  00145A  D7FC               	bra	u8367
  3691  00145C  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3692  00145E  D7FA               	bra	u8367
  3693                           
  3694                           ;sort.c: 176: readIR();
  3695  001460  ECCA  F024         	call	_readIR	;wreg free
  3696                           
  3697                           ;sort.c: 177: if(IR_signal==1){
  3698  001464  0100               	movlb	0	; () banked
  3699  001466  05DE               	decf	_IR_signal& (0+255),w,b
  3700  001468  0100               	movlb	0	; () banked
  3701  00146A  11DF               	iorwf	(_IR_signal+1)& (0+255),w,b
  3702  00146C  A4D8               	btfss	status,2,c
  3703  00146E  D07F               	goto	l766
  3704                           
  3705                           ; BSR set to: 0
  3706                           ;sort.c: 178: if(sensor_outputs[0]){
  3707  001470  0100               	movlb	0	; () banked
  3708  001472  51DA               	movf	_sensor_outputs& (0+255),w,b
  3709  001474  0100               	movlb	0	; () banked
  3710  001476  11DB               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  3711  001478  B4D8               	btfsc	status,2,c
  3712  00147A  D011               	goto	l7044
  3713                           
  3714                           ; BSR set to: 0
  3715                           ;sort.c: 179: LATAbits.LATA4 = 1;
  3716  00147C  8889               	bsf	3977,4,c	;volatile
  3717                           
  3718                           ; BSR set to: 0
  3719                           ;sort.c: 180: _delay((unsigned long)((250)*(32000000/4000.0)));
  3720  00147E  0E0B               	movlw	11
  3721  001480  0100               	movlb	0	; () banked
  3722  001482  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3723  001484  0E26               	movlw	38
  3724  001486  0100               	movlb	0	; () banked
  3725  001488  6FB1               	movwf	??_Loading& (0+255),b
  3726  00148A  0E5D               	movlw	93
  3727  00148C                     u8377:
  3728  00148C  2EE8               	decfsz	wreg,f,c
  3729  00148E  D7FE               	bra	u8377
  3730  001490  2FB1               	decfsz	??_Loading& (0+255),f,b
  3731  001492  D7FC               	bra	u8377
  3732  001494  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3733  001496  D7FA               	bra	u8377
  3734  001498  D000               	nop2	
  3735                           
  3736                           ;sort.c: 181: LATAbits.LATA4 = 0;
  3737  00149A  9889               	bcf	3977,4,c	;volatile
  3738                           
  3739                           ;sort.c: 182: }
  3740  00149C  D068               	goto	l766
  3741  00149E                     l7044:
  3742                           
  3743                           ;sort.c: 183: else{
  3744                           ;sort.c: 184: for(int i = 0; i<2500; i++){
  3745  00149E  0E00               	movlw	0
  3746  0014A0  0100               	movlb	0	; () banked
  3747  0014A2  6FBF               	movwf	(Loading@i_1109+1)& (0+255),b
  3748  0014A4  0E00               	movlw	0
  3749  0014A6  6FBE               	movwf	Loading@i_1109& (0+255),b
  3750  0014A8                     l7046:
  3751                           
  3752                           ; BSR set to: 0
  3753  0014A8  0100               	movlb	0	; () banked
  3754  0014AA  BFBF               	btfsc	(Loading@i_1109+1)& (0+255),7,b
  3755  0014AC  D041               	goto	l7074
  3756  0014AE  0EC4               	movlw	196
  3757  0014B0  0100               	movlb	0	; () banked
  3758  0014B2  5DBE               	subwf	Loading@i_1109& (0+255),w,b
  3759  0014B4  0E09               	movlw	9
  3760  0014B6  0100               	movlb	0	; () banked
  3761  0014B8  59BF               	subwfb	(Loading@i_1109+1)& (0+255),w,b
  3762  0014BA  B0D8               	btfsc	status,0,c
  3763  0014BC  D058               	goto	l766
  3764  0014BE  D038               	goto	l7074
  3765  0014C0                     l772:
  3766                           
  3767                           ; BSR set to: 0
  3768                           ;sort.c: 187: LATAbits.LATA4 = 1;
  3769  0014C0  8889               	bsf	3977,4,c	;volatile
  3770                           
  3771                           ; BSR set to: 0
  3772                           ;sort.c: 188: _delay((unsigned long)((75)*(32000000/4000000.0)));
  3773  0014C2  0EC8               	movlw	200
  3774  0014C4                     u8387:
  3775  0014C4  2EE8               	decfsz	wreg,f,c
  3776  0014C6  D7FE               	bra	u8387
  3777                           
  3778                           ;sort.c: 189: LATAbits.LATA4 = 0;
  3779  0014C8  9889               	bcf	3977,4,c	;volatile
  3780                           
  3781                           ;sort.c: 190: _delay((unsigned long)((25)*(32000000/4000000.0)));
  3782  0014CA  0E42               	movlw	66
  3783  0014CC                     u8397:
  3784  0014CC  2EE8               	decfsz	wreg,f,c
  3785  0014CE  D7FE               	bra	u8397
  3786  0014D0  D01C               	goto	L2
  3787  0014D2                     l774:
  3788                           
  3789                           ; BSR set to: 0
  3790                           ;sort.c: 193: LATAbits.LATA4 = 1;
  3791  0014D2  8889               	bsf	3977,4,c	;volatile
  3792                           
  3793                           ; BSR set to: 0
  3794                           ;sort.c: 194: _delay((unsigned long)((80)*(32000000/4000000.0)));
  3795  0014D4  0ED5               	movlw	213
  3796  0014D6                     u8407:
  3797  0014D6  2EE8               	decfsz	wreg,f,c
  3798  0014D8  D7FE               	bra	u8407
  3799  0014DA  F000               	nop	
  3800                           
  3801                           ;sort.c: 195: LATAbits.LATA4 = 0;
  3802  0014DC  9889               	bcf	3977,4,c	;volatile
  3803                           
  3804                           ;sort.c: 196: _delay((unsigned long)((20)*(32000000/4000000.0)));
  3805  0014DE  0E35               	movlw	53
  3806  0014E0                     u8417:
  3807  0014E0  2EE8               	decfsz	wreg,f,c
  3808  0014E2  D7FE               	bra	u8417
  3809  0014E4  D01D               	goto	L3
  3810  0014E6                     l775:
  3811                           
  3812                           ; BSR set to: 0
  3813                           ;sort.c: 199: LATAbits.LATA4 = 1;
  3814  0014E6  8889               	bsf	3977,4,c	;volatile
  3815                           
  3816                           ; BSR set to: 0
  3817                           ;sort.c: 200: _delay((unsigned long)((85)*(32000000/4000000.0)));
  3818  0014E8  0EE2               	movlw	226
  3819  0014EA                     u8427:
  3820  0014EA  2EE8               	decfsz	wreg,f,c
  3821  0014EC  D7FE               	bra	u8427
  3822  0014EE  D000               	nop2	
  3823                           
  3824                           ;sort.c: 201: LATAbits.LATA4 = 0;
  3825  0014F0  9889               	bcf	3977,4,c	;volatile
  3826                           
  3827                           ;sort.c: 202: _delay((unsigned long)((15)*(32000000/4000000.0)));
  3828  0014F2  0E28               	movlw	40
  3829  0014F4                     u8437:
  3830  0014F4  2EE8               	decfsz	wreg,f,c
  3831  0014F6  D7FE               	bra	u8437
  3832                           
  3833                           ;sort.c: 203: break;
  3834  0014F8  D036               	goto	l7076
  3835  0014FA                     l776:
  3836                           
  3837                           ; BSR set to: 0
  3838                           ;sort.c: 205: LATAbits.LATA4 = 1;
  3839  0014FA  8889               	bsf	3977,4,c	;volatile
  3840                           
  3841                           ; BSR set to: 0
  3842                           ;sort.c: 206: _delay((unsigned long)((90)*(32000000/4000000.0)));
  3843  0014FC  0EF0               	movlw	240
  3844  0014FE                     u8447:
  3845  0014FE  2EE8               	decfsz	wreg,f,c
  3846  001500  D7FE               	bra	u8447
  3847                           
  3848                           ;sort.c: 207: LATAbits.LATA4 = 0;
  3849  001502  9889               	bcf	3977,4,c	;volatile
  3850                           
  3851                           ;sort.c: 208: _delay((unsigned long)((10)*(32000000/4000000.0)));
  3852  001504  0E1A               	movlw	26
  3853  001506                     u8457:
  3854  001506  2EE8               	decfsz	wreg,f,c
  3855  001508  D7FE               	bra	u8457
  3856  00150A                     L2:
  3857  00150A  D000               	nop2	
  3858                           
  3859                           ;sort.c: 209: break;
  3860  00150C  D02C               	goto	l7076
  3861  00150E                     l777:
  3862                           
  3863                           ; BSR set to: 0
  3864                           ;sort.c: 211: LATAbits.LATA4 = 1;
  3865  00150E  8889               	bsf	3977,4,c	;volatile
  3866                           
  3867                           ; BSR set to: 0
  3868                           ;sort.c: 212: _delay((unsigned long)((95)*(32000000/4000000.0)));
  3869  001510  0EFD               	movlw	253
  3870  001512                     u8467:
  3871  001512  2EE8               	decfsz	wreg,f,c
  3872  001514  D7FE               	bra	u8467
  3873  001516  F000               	nop	
  3874                           
  3875                           ;sort.c: 213: LATAbits.LATA4 = 0;
  3876  001518  9889               	bcf	3977,4,c	;volatile
  3877                           
  3878                           ;sort.c: 214: _delay((unsigned long)((5)*(32000000/4000000.0)));
  3879  00151A  0E0D               	movlw	13
  3880  00151C                     u8477:
  3881  00151C  2EE8               	decfsz	wreg,f,c
  3882  00151E  D7FE               	bra	u8477
  3883  001520                     L3:
  3884  001520  F000               	nop	
  3885                           
  3886                           ;sort.c: 215: break;
  3887  001522  D021               	goto	l7076
  3888  001524                     l778:
  3889                           
  3890                           ; BSR set to: 0
  3891                           ;sort.c: 217: LATAbits.LATA4 = 1;
  3892  001524  8889               	bsf	3977,4,c	;volatile
  3893                           
  3894                           ; BSR set to: 0
  3895                           ;sort.c: 218: _delay((unsigned long)((100)*(32000000/4000000.0)));
  3896  001526  0EA0               	movlw	160
  3897  001528                     u8487:
  3898  001528  D000               	nop2	
  3899  00152A  2EE8               	decfsz	wreg,f,c
  3900  00152C  D7FD               	bra	u8487
  3901                           
  3902                           ;sort.c: 220: }
  3903                           
  3904                           ;sort.c: 219: break;
  3905  00152E  D01B               	goto	l7076
  3906  001530                     l7074:
  3907  001530  C0C0  F0B1         	movff	Loading@j,??_Loading
  3908  001534  C0C1  F0B2         	movff	Loading@j+1,??_Loading+1
  3909                           
  3910                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3911                           ; Switch size 1, requested type "space"
  3912                           ; Number of cases is 1, Range of values is 0 to 0
  3913                           ; switch strategies available:
  3914                           ; Name         Instructions Cycles
  3915                           ; simple_byte            4     3 (average)
  3916                           ;	Chosen strategy is simple_byte
  3917  001538  0100               	movlb	0	; () banked
  3918  00153A  51B2               	movf	(??_Loading+1)& (0+255),w,b
  3919  00153C  0A00               	xorlw	0	; case 0
  3920  00153E  A4D8               	btfss	status,2,c
  3921  001540  D7F1               	goto	l778
  3922                           
  3923                           ; BSR set to: 0
  3924                           ; Switch size 1, requested type "space"
  3925                           ; Number of cases is 5, Range of values is 1 to 5
  3926                           ; switch strategies available:
  3927                           ; Name         Instructions Cycles
  3928                           ; simple_byte           16     9 (average)
  3929                           ;	Chosen strategy is simple_byte
  3930  001542  0100               	movlb	0	; () banked
  3931  001544  51B1               	movf	??_Loading& (0+255),w,b
  3932  001546  0A01               	xorlw	1	; case 1
  3933  001548  B4D8               	btfsc	status,2,c
  3934  00154A  D7BA               	goto	l772
  3935  00154C  0A03               	xorlw	3	; case 2
  3936  00154E  B4D8               	btfsc	status,2,c
  3937  001550  D7C0               	goto	l774
  3938  001552  0A01               	xorlw	1	; case 3
  3939  001554  B4D8               	btfsc	status,2,c
  3940  001556  D7C7               	goto	l775
  3941  001558  0A07               	xorlw	7	; case 4
  3942  00155A  B4D8               	btfsc	status,2,c
  3943  00155C  D7CE               	goto	l776
  3944  00155E  0A01               	xorlw	1	; case 5
  3945  001560  B4D8               	btfsc	status,2,c
  3946  001562  D7D5               	goto	l777
  3947  001564  D7DF               	goto	l778
  3948  001566                     l7076:
  3949  001566  0100               	movlb	0	; () banked
  3950  001568  4BBE               	infsnz	Loading@i_1109& (0+255),f,b
  3951  00156A  2BBF               	incf	(Loading@i_1109+1)& (0+255),f,b
  3952  00156C  D79D               	goto	l7046
  3953  00156E                     l766:
  3954                           
  3955                           ;sort.c: 221: }
  3956                           ;sort.c: 222: }
  3957                           ;sort.c: 223: }
  3958                           ;sort.c: 224: LATAbits.LATA4 = 0;
  3959  00156E  9889               	bcf	3977,4,c	;volatile
  3960                           
  3961                           ;sort.c: 225: if(IR_signal==1){
  3962  001570  0100               	movlb	0	; () banked
  3963  001572  05DE               	decf	_IR_signal& (0+255),w,b
  3964  001574  0100               	movlb	0	; () banked
  3965  001576  11DF               	iorwf	(_IR_signal+1)& (0+255),w,b
  3966  001578  A4D8               	btfss	status,2,c
  3967  00157A  D01C               	goto	l7092
  3968                           
  3969                           ; BSR set to: 0
  3970                           ;sort.c: 226: if(j == 10){
  3971  00157C  0E0A               	movlw	10
  3972  00157E  0100               	movlb	0	; () banked
  3973  001580  19C0               	xorwf	Loading@j& (0+255),w,b
  3974  001582  0100               	movlb	0	; () banked
  3975  001584  11C1               	iorwf	(Loading@j+1)& (0+255),w,b
  3976  001586  A4D8               	btfss	status,2,c
  3977  001588  D015               	goto	l7092
  3978                           
  3979                           ; BSR set to: 0
  3980                           ;sort.c: 227: LATAbits.LATA5 = 1;
  3981  00158A  8A89               	bsf	3977,5,c	;volatile
  3982                           
  3983                           ; BSR set to: 0
  3984                           ;sort.c: 228: _delay((unsigned long)((5000)*(32000000/4000.0)));
  3985  00158C  0ECB               	movlw	203
  3986  00158E  0100               	movlb	0	; () banked
  3987  001590  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3988  001592  0EEC               	movlw	236
  3989  001594  0100               	movlb	0	; () banked
  3990  001596  6FB1               	movwf	??_Loading& (0+255),b
  3991  001598  0E84               	movlw	132
  3992  00159A                     u8497:
  3993  00159A  2EE8               	decfsz	wreg,f,c
  3994  00159C  D7FE               	bra	u8497
  3995  00159E  2FB1               	decfsz	??_Loading& (0+255),f,b
  3996  0015A0  D7FC               	bra	u8497
  3997  0015A2  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3998  0015A4  D7FA               	bra	u8497
  3999  0015A6  F000               	nop	
  4000                           
  4001                           ;sort.c: 229: LATAbits.LATA5 = 0;
  4002  0015A8  9A89               	bcf	3977,5,c	;volatile
  4003                           
  4004                           ;sort.c: 230: j = 0;
  4005  0015AA  0E00               	movlw	0
  4006  0015AC  0100               	movlb	0	; () banked
  4007  0015AE  6FC1               	movwf	(Loading@j+1)& (0+255),b
  4008  0015B0  0E00               	movlw	0
  4009  0015B2  6FC0               	movwf	Loading@j& (0+255),b
  4010  0015B4                     l7092:
  4011                           
  4012                           ; BSR set to: 0
  4013                           ;sort.c: 231: }
  4014                           ;sort.c: 232: }
  4015                           ;sort.c: 233: j++;
  4016  0015B4  0100               	movlb	0	; () banked
  4017  0015B6  4BC0               	infsnz	Loading@j& (0+255),f,b
  4018  0015B8  2BC1               	incf	(Loading@j+1)& (0+255),f,b
  4019  0015BA                     l7094:
  4020                           
  4021                           ; BSR set to: 0
  4022  0015BA  0100               	movlb	0	; () banked
  4023  0015BC  05DE               	decf	_IR_signal& (0+255),w,b
  4024  0015BE  0100               	movlb	0	; () banked
  4025  0015C0  11DF               	iorwf	(_IR_signal+1)& (0+255),w,b
  4026  0015C2  B4D8               	btfsc	status,2,c
  4027  0015C4  D738               	goto	l7026
  4028  0015C6                     l7096:
  4029                           
  4030                           ; BSR set to: 0
  4031                           ;sort.c: 234: }
  4032                           ;sort.c: 235: }
  4033                           ;sort.c: 236: }
  4034                           ;sort.c: 237: f_can_coming_to_ID = 1;
  4035  0015C6  0E00               	movlw	0
  4036  0015C8  6E68               	movwf	_f_can_coming_to_ID+1,c
  4037  0015CA  0E01               	movlw	1
  4038  0015CC  6E67               	movwf	_f_can_coming_to_ID,c
  4039                           
  4040                           ; BSR set to: 0
  4041                           
  4042                           ; BSR set to: 0
  4043  0015CE  0012               	return	
  4044  0015D0                     __end_of_Loading:
  4045                           	opt stack 0
  4046                           tblptru	equ	0xFF8
  4047                           tblptrh	equ	0xFF7
  4048                           tblptrl	equ	0xFF6
  4049                           tablat	equ	0xFF5
  4050                           prodh	equ	0xFF4
  4051                           prodl	equ	0xFF3
  4052                           postinc0	equ	0xFEE
  4053                           wreg	equ	0xFE8
  4054                           postdec1	equ	0xFE5
  4055                           fsr1l	equ	0xFE1
  4056                           status	equ	0xFD8
  4057                           
  4058 ;; *************** function _initSortTimer *****************
  4059 ;; Defined at:
  4060 ;;		line 406 in file "sort.c"
  4061 ;; Parameters:    Size  Location     Type
  4062 ;;		None
  4063 ;; Auto vars:     Size  Location     Type
  4064 ;;  i               2    8[BANK0 ] int 
  4065 ;; Return value:  Size  Location     Type
  4066 ;;                  1    wreg      void 
  4067 ;; Registers used:
  4068 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4069 ;; Tracked objects:
  4070 ;;		On entry : 0/0
  4071 ;;		On exit  : 0/0
  4072 ;;		Unchanged: 0/0
  4073 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4074 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4075 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4076 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4077 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4078 ;;Total ram usage:        5 bytes
  4079 ;; Hardware stack levels used:    1
  4080 ;; Hardware stack levels required when called:   10
  4081 ;; This function calls:
  4082 ;;		_getRTC
  4083 ;; This function is called by:
  4084 ;;		_Loading
  4085 ;; This function uses a non-reentrant model
  4086 ;;
  4087                           
  4088                           	psect	text4
  4089  0040AA                     __ptext4:
  4090                           	opt stack 0
  4091  0040AA                     _initSortTimer:
  4092                           	opt stack 18
  4093                           
  4094                           ;sort.c: 408: getRTC();
  4095                           
  4096                           ;incstack = 0
  4097  0040AA  EC41  F021         	call	_getRTC	;wreg free
  4098                           
  4099                           ;sort.c: 409: for(int i = 0; i < 7; i++){
  4100  0040AE  0E00               	movlw	0
  4101  0040B0  0100               	movlb	0	; () banked
  4102  0040B2  6F89               	movwf	(initSortTimer@i+1)& (0+255),b
  4103  0040B4  0E00               	movlw	0
  4104  0040B6  6F88               	movwf	initSortTimer@i& (0+255),b
  4105  0040B8                     l6504:
  4106                           
  4107                           ; BSR set to: 0
  4108  0040B8  0100               	movlb	0	; () banked
  4109  0040BA  BF89               	btfsc	(initSortTimer@i+1)& (0+255),7,b
  4110  0040BC  D008               	goto	l6508
  4111  0040BE  0100               	movlb	0	; () banked
  4112  0040C0  5189               	movf	(initSortTimer@i+1)& (0+255),w,b
  4113  0040C2  E140               	bnz	l6514
  4114  0040C4  0E07               	movlw	7
  4115  0040C6  0100               	movlb	0	; () banked
  4116  0040C8  5D88               	subwf	initSortTimer@i& (0+255),w,b
  4117  0040CA  B0D8               	btfsc	status,0,c
  4118  0040CC  D03B               	goto	l6514
  4119  0040CE                     l6508:
  4120                           
  4121                           ; BSR set to: 0
  4122                           ;sort.c: 410: startTime[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
  4123  0040CE  0E24               	movlw	low _time
  4124  0040D0  0100               	movlb	0	; () banked
  4125  0040D2  2588               	addwf	initSortTimer@i& (0+255),w,b
  4126  0040D4  6ED9               	movwf	fsr2l,c
  4127  0040D6  0E01               	movlw	high _time
  4128  0040D8  0100               	movlb	0	; () banked
  4129  0040DA  2189               	addwfc	(initSortTimer@i+1)& (0+255),w,b
  4130  0040DC  6EDA               	movwf	fsr2h,c
  4131  0040DE  50DF               	movf	indf2,w,c
  4132  0040E0  0100               	movlb	0	; () banked
  4133  0040E2  6F85               	movwf	??_initSortTimer& (0+255),b
  4134  0040E4  0100               	movlb	0	; () banked
  4135  0040E6  3B85               	swapf	??_initSortTimer& (0+255),f,b
  4136  0040E8  0E0F               	movlw	15
  4137  0040EA  1785               	andwf	??_initSortTimer& (0+255),f,b
  4138  0040EC  0E0F               	movlw	15
  4139  0040EE  0100               	movlb	0	; () banked
  4140  0040F0  1785               	andwf	??_initSortTimer& (0+255),f,b
  4141  0040F2  0100               	movlb	0	; () banked
  4142  0040F4  5185               	movf	??_initSortTimer& (0+255),w,b
  4143  0040F6  0D0A               	mullw	10
  4144  0040F8  0E24               	movlw	low _time
  4145  0040FA  0100               	movlb	0	; () banked
  4146  0040FC  2588               	addwf	initSortTimer@i& (0+255),w,b
  4147  0040FE  6ED9               	movwf	fsr2l,c
  4148  004100  0E01               	movlw	high _time
  4149  004102  0100               	movlb	0	; () banked
  4150  004104  2189               	addwfc	(initSortTimer@i+1)& (0+255),w,b
  4151  004106  6EDA               	movwf	fsr2h,c
  4152  004108  50DF               	movf	indf2,w,c
  4153  00410A  0B0F               	andlw	15
  4154  00410C  0100               	movlb	0	; () banked
  4155  00410E  6F86               	movwf	(??_initSortTimer+1)& (0+255),b
  4156  004110  6B87               	clrf	(??_initSortTimer+2)& (0+255),b
  4157  004112  50F3               	movf	prodl,w,c
  4158  004114  0100               	movlb	0	; () banked
  4159  004116  2786               	addwf	(??_initSortTimer+1)& (0+255),f,b
  4160  004118  50F4               	movf	prodh,w,c
  4161  00411A  0100               	movlb	0	; () banked
  4162  00411C  2387               	addwfc	(??_initSortTimer+2)& (0+255),f,b
  4163  00411E  90D8               	bcf	status,0,c
  4164  004120  0100               	movlb	0	; () banked
  4165  004122  3588               	rlcf	initSortTimer@i& (0+255),w,b
  4166  004124  6ED9               	movwf	fsr2l,c
  4167  004126  0100               	movlb	0	; () banked
  4168  004128  3589               	rlcf	(initSortTimer@i+1)& (0+255),w,b
  4169  00412A  6EDA               	movwf	fsr2h,c
  4170  00412C  0E0E               	movlw	low _startTime
  4171  00412E  26D9               	addwf	fsr2l,f,c
  4172  004130  0E01               	movlw	high _startTime
  4173  004132  22DA               	addwfc	fsr2h,f,c
  4174  004134  C086  FFDE         	movff	??_initSortTimer+1,postinc2
  4175  004138  C087  FFDD         	movff	??_initSortTimer+2,postdec2
  4176                           
  4177                           ; BSR set to: 0
  4178  00413C  0100               	movlb	0	; () banked
  4179  00413E  4B88               	infsnz	initSortTimer@i& (0+255),f,b
  4180  004140  2B89               	incf	(initSortTimer@i+1)& (0+255),f,b
  4181  004142  D7BA               	goto	l6504
  4182  004144                     l6514:
  4183                           
  4184                           ; BSR set to: 0
  4185                           ;sort.c: 411: }
  4186                           ;sort.c: 413: T0CON = 0b00010111;
  4187  004144  0E17               	movlw	23
  4188  004146  6ED5               	movwf	4053,c	;volatile
  4189                           
  4190                           ;sort.c: 422: TMR0H = 0b10000101;
  4191  004148  0E85               	movlw	133
  4192  00414A  6ED7               	movwf	4055,c	;volatile
  4193                           
  4194                           ;sort.c: 423: TMR0L = 0b11101110;
  4195  00414C  0EEE               	movlw	238
  4196  00414E  6ED6               	movwf	4054,c	;volatile
  4197                           
  4198                           ; BSR set to: 0
  4199                           ;sort.c: 424: TMR0ON = 1;
  4200  004150  8ED5               	bsf	4053,7,c	;volatile
  4201                           
  4202                           ; BSR set to: 0
  4203  004152  0012               	return		;funcret
  4204  004154                     __end_of_initSortTimer:
  4205                           	opt stack 0
  4206                           tblptru	equ	0xFF8
  4207                           tblptrh	equ	0xFF7
  4208                           tblptrl	equ	0xFF6
  4209                           tablat	equ	0xFF5
  4210                           prodh	equ	0xFF4
  4211                           prodl	equ	0xFF3
  4212                           postinc0	equ	0xFEE
  4213                           wreg	equ	0xFE8
  4214                           postdec1	equ	0xFE5
  4215                           fsr1l	equ	0xFE1
  4216                           indf2	equ	0xFDF
  4217                           postinc2	equ	0xFDE
  4218                           postdec2	equ	0xFDD
  4219                           fsr2h	equ	0xFDA
  4220                           fsr2l	equ	0xFD9
  4221                           status	equ	0xFD8
  4222                           
  4223 ;; *************** function _initGlobalVars *****************
  4224 ;; Defined at:
  4225 ;;		line 383 in file "sort.c"
  4226 ;; Parameters:    Size  Location     Type
  4227 ;;		None
  4228 ;; Auto vars:     Size  Location     Type
  4229 ;;		None
  4230 ;; Return value:  Size  Location     Type
  4231 ;;                  1    wreg      void 
  4232 ;; Registers used:
  4233 ;;		wreg, status,2
  4234 ;; Tracked objects:
  4235 ;;		On entry : 0/0
  4236 ;;		On exit  : 0/0
  4237 ;;		Unchanged: 0/0
  4238 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4239 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4240 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4241 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4242 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4243 ;;Total ram usage:        0 bytes
  4244 ;; Hardware stack levels used:    1
  4245 ;; Hardware stack levels required when called:    7
  4246 ;; This function calls:
  4247 ;;		Nothing
  4248 ;; This function is called by:
  4249 ;;		_Loading
  4250 ;; This function uses a non-reentrant model
  4251 ;;
  4252                           
  4253                           	psect	text5
  4254  004410                     __ptext5:
  4255                           	opt stack 0
  4256  004410                     _initGlobalVars:
  4257                           	opt stack 21
  4258                           
  4259                           ;sort.c: 385: first = 0;
  4260                           
  4261                           ; BSR set to: 0
  4262                           ;incstack = 0
  4263  004410  0E00               	movlw	0
  4264  004412  6E6E               	movwf	_first+1,c
  4265  004414  0E00               	movlw	0
  4266  004416  6E6D               	movwf	_first,c
  4267                           
  4268                           ;sort.c: 388: f_loadingNewCan = 0;
  4269  004418  0E00               	movlw	0
  4270  00441A  0100               	movlb	0	; () banked
  4271  00441C  6FEB               	movwf	(_f_loadingNewCan+1)& (0+255),b
  4272  00441E  0E00               	movlw	0
  4273  004420  6FEA               	movwf	_f_loadingNewCan& (0+255),b
  4274                           
  4275                           ;sort.c: 389: f_lastCan = 0;
  4276  004422  0E00               	movlw	0
  4277  004424  0100               	movlb	0	; () banked
  4278  004426  6FE9               	movwf	(_f_lastCan+1)& (0+255),b
  4279  004428  0E00               	movlw	0
  4280  00442A  6FE8               	movwf	_f_lastCan& (0+255),b
  4281                           
  4282                           ;sort.c: 390: f_ID_receive = 1;
  4283  00442C  0E00               	movlw	0
  4284  00442E  6E66               	movwf	_f_ID_receive+1,c
  4285  004430  0E01               	movlw	1
  4286  004432  6E65               	movwf	_f_ID_receive,c
  4287                           
  4288                           ;sort.c: 391: f_can_coming_to_ID = 0;
  4289  004434  0E00               	movlw	0
  4290  004436  6E68               	movwf	_f_can_coming_to_ID+1,c
  4291  004438  0E00               	movlw	0
  4292  00443A  6E67               	movwf	_f_can_coming_to_ID,c
  4293                           
  4294                           ;sort.c: 392: f_can_coming_to_distribution = 0;
  4295  00443C  0E00               	movlw	0
  4296  00443E  6E6A               	movwf	_f_can_coming_to_distribution+1,c
  4297  004440  0E00               	movlw	0
  4298  004442  6E69               	movwf	_f_can_coming_to_distribution,c
  4299                           
  4300                           ;sort.c: 393: f_can_distributed = 0;
  4301  004444  0E00               	movlw	0
  4302  004446  0101               	movlb	1	; () banked
  4303  004448  6F30               	movwf	(_f_can_distributed+1)& (0+255),b
  4304  00444A  0E00               	movlw	0
  4305  00444C  6F2F               	movwf	_f_can_distributed& (0+255),b
  4306                           
  4307                           ;sort.c: 394: f_most_recent_sort_time = 0;
  4308  00444E  0E00               	movlw	0
  4309  004450  6E6C               	movwf	_f_most_recent_sort_time+1,c
  4310  004452  0E00               	movlw	0
  4311  004454  6E6B               	movwf	_f_most_recent_sort_time,c
  4312                           
  4313                           ;sort.c: 397: count_total = 0;
  4314  004456  0E00               	movlw	0
  4315  004458  0100               	movlb	0	; () banked
  4316  00445A  6FFF               	movwf	(_count_total+1)& (0+255),b
  4317  00445C  0E00               	movlw	0
  4318  00445E  6FFE               	movwf	_count_total& (0+255),b
  4319                           
  4320                           ;sort.c: 398: count_pop_no_tab = 0;
  4321  004460  0E00               	movlw	0
  4322  004462  6E5C               	movwf	_count_pop_no_tab+1,c
  4323  004464  0E00               	movlw	0
  4324  004466  6E5B               	movwf	_count_pop_no_tab,c
  4325                           
  4326                           ;sort.c: 399: count_pop_w_tab = 0;
  4327  004468  0E00               	movlw	0
  4328  00446A  6E5E               	movwf	_count_pop_w_tab+1,c
  4329  00446C  0E00               	movlw	0
  4330  00446E  6E5D               	movwf	_count_pop_w_tab,c
  4331                           
  4332                           ;sort.c: 400: count_can_w_lab = 0;
  4333  004470  0E00               	movlw	0
  4334  004472  0101               	movlb	1	; () banked
  4335  004474  6F2E               	movwf	(_count_can_w_lab+1)& (0+255),b
  4336  004476  0E00               	movlw	0
  4337  004478  6F2D               	movwf	_count_can_w_lab& (0+255),b
  4338                           
  4339                           ;sort.c: 401: count_can_no_lab = 0;
  4340  00447A  0E00               	movlw	0
  4341  00447C  0101               	movlb	1	; () banked
  4342  00447E  6F2C               	movwf	(_count_can_no_lab+1)& (0+255),b
  4343  004480  0E00               	movlw	0
  4344  004482  6F2B               	movwf	_count_can_no_lab& (0+255),b
  4345                           
  4346                           ;sort.c: 404: most_recent_sort_time = 999;
  4347  004484  0E03               	movlw	3
  4348  004486  0101               	movlb	1	; () banked
  4349  004488  6F34               	movwf	(_most_recent_sort_time+1)& (0+255),b
  4350  00448A  0EE7               	movlw	231
  4351  00448C  6F33               	movwf	_most_recent_sort_time& (0+255),b
  4352                           
  4353                           ; BSR set to: 1
  4354  00448E  0012               	return		;funcret
  4355  004490                     __end_of_initGlobalVars:
  4356                           	opt stack 0
  4357                           tblptru	equ	0xFF8
  4358                           tblptrh	equ	0xFF7
  4359                           tblptrl	equ	0xFF6
  4360                           tablat	equ	0xFF5
  4361                           prodh	equ	0xFF4
  4362                           prodl	equ	0xFF3
  4363                           postinc0	equ	0xFEE
  4364                           wreg	equ	0xFE8
  4365                           postdec1	equ	0xFE5
  4366                           fsr1l	equ	0xFE1
  4367                           indf2	equ	0xFDF
  4368                           postinc2	equ	0xFDE
  4369                           postdec2	equ	0xFDD
  4370                           fsr2h	equ	0xFDA
  4371                           fsr2l	equ	0xFD9
  4372                           status	equ	0xFD8
  4373                           
  4374 ;; *************** function _getMAG *****************
  4375 ;; Defined at:
  4376 ;;		line 489 in file "sort.c"
  4377 ;; Parameters:    Size  Location     Type
  4378 ;;		None
  4379 ;; Auto vars:     Size  Location     Type
  4380 ;;		None
  4381 ;; Return value:  Size  Location     Type
  4382 ;;                  1    wreg      void 
  4383 ;; Registers used:
  4384 ;;		wreg, status,2, status,0, cstack
  4385 ;; Tracked objects:
  4386 ;;		On entry : 0/0
  4387 ;;		On exit  : 0/0
  4388 ;;		Unchanged: 0/0
  4389 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4390 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4391 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4392 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4393 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4394 ;;Total ram usage:        2 bytes
  4395 ;; Hardware stack levels used:    1
  4396 ;; Hardware stack levels required when called:    9
  4397 ;; This function calls:
  4398 ;;		_readMAG
  4399 ;; This function is called by:
  4400 ;;		_Loading
  4401 ;; This function uses a non-reentrant model
  4402 ;;
  4403                           
  4404                           	psect	text6
  4405  004B90                     __ptext6:
  4406                           	opt stack 0
  4407  004B90                     _getMAG:
  4408                           	opt stack 19
  4409                           
  4410                           ;sort.c: 490: readMAG();
  4411                           
  4412                           ; BSR set to: 1
  4413                           ;incstack = 0
  4414  004B90  ECF0  F024         	call	_readMAG	;wreg free
  4415                           
  4416                           ;sort.c: 492: if(MAG_signal==1){
  4417  004B94  0100               	movlb	0	; () banked
  4418  004B96  05E0               	decf	_MAG_signal& (0+255),w,b
  4419  004B98  0100               	movlb	0	; () banked
  4420  004B9A  11E1               	iorwf	(_MAG_signal+1)& (0+255),w,b
  4421  004B9C  A4D8               	btfss	status,2,c
  4422  004B9E  0012               	return	
  4423                           
  4424                           ; BSR set to: 0
  4425                           ;sort.c: 493: _delay((unsigned long)((500)*(32000000/4000.0)));
  4426  004BA0  0E15               	movlw	21
  4427  004BA2  0100               	movlb	0	; () banked
  4428  004BA4  6F87               	movwf	(??_getMAG+1)& (0+255),b
  4429  004BA6  0E4B               	movlw	75
  4430  004BA8  0100               	movlb	0	; () banked
  4431  004BAA  6F86               	movwf	??_getMAG& (0+255),b
  4432  004BAC  0EBE               	movlw	190
  4433  004BAE                     u8507:
  4434  004BAE  2EE8               	decfsz	wreg,f,c
  4435  004BB0  D7FE               	bra	u8507
  4436  004BB2  2F86               	decfsz	??_getMAG& (0+255),f,b
  4437  004BB4  D7FC               	bra	u8507
  4438  004BB6  2F87               	decfsz	(??_getMAG+1)& (0+255),f,b
  4439  004BB8  D7FA               	bra	u8507
  4440  004BBA  F000               	nop	
  4441                           
  4442                           ;sort.c: 494: readMAG();
  4443  004BBC  ECF0  F024         	call	_readMAG	;wreg free
  4444  004BC0  0012               	return	
  4445  004BC2                     __end_of_getMAG:
  4446                           	opt stack 0
  4447                           tblptru	equ	0xFF8
  4448                           tblptrh	equ	0xFF7
  4449                           tblptrl	equ	0xFF6
  4450                           tablat	equ	0xFF5
  4451                           prodh	equ	0xFF4
  4452                           prodl	equ	0xFF3
  4453                           postinc0	equ	0xFEE
  4454                           wreg	equ	0xFE8
  4455                           postdec1	equ	0xFE5
  4456                           fsr1l	equ	0xFE1
  4457                           indf2	equ	0xFDF
  4458                           postinc2	equ	0xFDE
  4459                           postdec2	equ	0xFDD
  4460                           fsr2h	equ	0xFDA
  4461                           fsr2l	equ	0xFD9
  4462                           status	equ	0xFD8
  4463                           
  4464 ;; *************** function _getIR *****************
  4465 ;; Defined at:
  4466 ;;		line 473 in file "sort.c"
  4467 ;; Parameters:    Size  Location     Type
  4468 ;;		None
  4469 ;; Auto vars:     Size  Location     Type
  4470 ;;  i               2    7[BANK0 ] int 
  4471 ;; Return value:  Size  Location     Type
  4472 ;;                  1    wreg      void 
  4473 ;; Registers used:
  4474 ;;		wreg, status,2, status,0, cstack
  4475 ;; Tracked objects:
  4476 ;;		On entry : 0/0
  4477 ;;		On exit  : 0/0
  4478 ;;		Unchanged: 0/0
  4479 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4480 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4481 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4482 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4483 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4484 ;;Total ram usage:        3 bytes
  4485 ;; Hardware stack levels used:    1
  4486 ;; Hardware stack levels required when called:    9
  4487 ;; This function calls:
  4488 ;;		_readIR
  4489 ;; This function is called by:
  4490 ;;		_Loading
  4491 ;; This function uses a non-reentrant model
  4492 ;;
  4493                           
  4494                           	psect	text7
  4495  00457E                     __ptext7:
  4496                           	opt stack 0
  4497  00457E                     _getIR:
  4498                           	opt stack 19
  4499                           
  4500                           ;sort.c: 474: readIR();
  4501                           
  4502                           ;incstack = 0
  4503  00457E  ECCA  F024         	call	_readIR	;wreg free
  4504                           
  4505                           ;sort.c: 475: for(int i = 0; i < 150; i++){
  4506  004582  0E00               	movlw	0
  4507  004584  0100               	movlb	0	; () banked
  4508  004586  6F88               	movwf	(getIR@i+1)& (0+255),b
  4509  004588  0E00               	movlw	0
  4510  00458A  6F87               	movwf	getIR@i& (0+255),b
  4511  00458C                     l6596:
  4512                           
  4513                           ; BSR set to: 0
  4514  00458C  0100               	movlb	0	; () banked
  4515  00458E  BF88               	btfsc	(getIR@i+1)& (0+255),7,b
  4516  004590  D008               	goto	l6600
  4517  004592  0100               	movlb	0	; () banked
  4518  004594  5188               	movf	(getIR@i+1)& (0+255),w,b
  4519  004596  E11A               	bnz	l6612
  4520  004598  0E96               	movlw	150
  4521  00459A  0100               	movlb	0	; () banked
  4522  00459C  5D87               	subwf	getIR@i& (0+255),w,b
  4523  00459E  B0D8               	btfsc	status,0,c
  4524  0045A0  D015               	goto	l6612
  4525  0045A2                     l6600:
  4526                           
  4527                           ; BSR set to: 0
  4528                           ;sort.c: 476: _delay((unsigned long)((500)*(32000000/4000000.0)));
  4529  0045A2  0E06               	movlw	6
  4530  0045A4  0100               	movlb	0	; () banked
  4531  0045A6  6F86               	movwf	??_getIR& (0+255),b
  4532  0045A8  0E30               	movlw	48
  4533  0045AA                     u8517:
  4534  0045AA  2EE8               	decfsz	wreg,f,c
  4535  0045AC  D7FE               	bra	u8517
  4536  0045AE  2F86               	decfsz	??_getIR& (0+255),f,b
  4537  0045B0  D7FC               	bra	u8517
  4538  0045B2  F000               	nop	
  4539                           
  4540                           ;sort.c: 477: readIR();
  4541  0045B4  ECCA  F024         	call	_readIR	;wreg free
  4542                           
  4543                           ;sort.c: 478: if(!IR_signal){
  4544  0045B8  0100               	movlb	0	; () banked
  4545  0045BA  51DE               	movf	_IR_signal& (0+255),w,b
  4546  0045BC  0100               	movlb	0	; () banked
  4547  0045BE  11DF               	iorwf	(_IR_signal+1)& (0+255),w,b
  4548  0045C0  B4D8               	btfsc	status,2,c
  4549  0045C2  D004               	goto	l6612
  4550                           
  4551                           ; BSR set to: 0
  4552                           
  4553                           ; BSR set to: 0
  4554                           
  4555                           ; BSR set to: 0
  4556                           ;sort.c: 479: break;
  4557  0045C4  0100               	movlb	0	; () banked
  4558  0045C6  4B87               	infsnz	getIR@i& (0+255),f,b
  4559  0045C8  2B88               	incf	(getIR@i+1)& (0+255),f,b
  4560  0045CA  D7E0               	goto	l6596
  4561  0045CC                     l6612:
  4562                           
  4563                           ; BSR set to: 0
  4564                           ;sort.c: 480: }
  4565                           ;sort.c: 481: }
  4566                           ;sort.c: 482: if(IR_signal==1){
  4567  0045CC  0100               	movlb	0	; () banked
  4568  0045CE  05DE               	decf	_IR_signal& (0+255),w,b
  4569  0045D0  0100               	movlb	0	; () banked
  4570  0045D2  11DF               	iorwf	(_IR_signal+1)& (0+255),w,b
  4571  0045D4  A4D8               	btfss	status,2,c
  4572  0045D6  D006               	goto	l6616
  4573                           
  4574                           ; BSR set to: 0
  4575                           ;sort.c: 483: f_loadingNewCan = 1;
  4576  0045D8  0E00               	movlw	0
  4577  0045DA  0100               	movlb	0	; () banked
  4578  0045DC  6FEB               	movwf	(_f_loadingNewCan+1)& (0+255),b
  4579  0045DE  0E01               	movlw	1
  4580  0045E0  6FEA               	movwf	_f_loadingNewCan& (0+255),b
  4581                           
  4582                           ;sort.c: 484: }
  4583  0045E2  0012               	return	
  4584  0045E4                     l6616:
  4585                           
  4586                           ; BSR set to: 0
  4587                           ;sort.c: 485: else{
  4588                           ;sort.c: 486: f_loadingNewCan = 0;
  4589  0045E4  0E00               	movlw	0
  4590  0045E6  0100               	movlb	0	; () banked
  4591  0045E8  6FEB               	movwf	(_f_loadingNewCan+1)& (0+255),b
  4592  0045EA  0E00               	movlw	0
  4593  0045EC  6FEA               	movwf	_f_loadingNewCan& (0+255),b
  4594  0045EE  0012               	return	
  4595  0045F0                     __end_of_getIR:
  4596                           	opt stack 0
  4597                           tblptru	equ	0xFF8
  4598                           tblptrh	equ	0xFF7
  4599                           tblptrl	equ	0xFF6
  4600                           tablat	equ	0xFF5
  4601                           prodh	equ	0xFF4
  4602                           prodl	equ	0xFF3
  4603                           postinc0	equ	0xFEE
  4604                           wreg	equ	0xFE8
  4605                           postdec1	equ	0xFE5
  4606                           fsr1l	equ	0xFE1
  4607                           indf2	equ	0xFDF
  4608                           postinc2	equ	0xFDE
  4609                           postdec2	equ	0xFDD
  4610                           fsr2h	equ	0xFDA
  4611                           fsr2l	equ	0xFD9
  4612                           status	equ	0xFD8
  4613                           
  4614 ;; *************** function _readIR *****************
  4615 ;; Defined at:
  4616 ;;		line 23 in file "ADCFunctionality.c"
  4617 ;; Parameters:    Size  Location     Type
  4618 ;;		None
  4619 ;; Auto vars:     Size  Location     Type
  4620 ;;  res             2    4[BANK0 ] int 
  4621 ;; Return value:  Size  Location     Type
  4622 ;;                  1    wreg      void 
  4623 ;; Registers used:
  4624 ;;		wreg, status,2, status,0, cstack
  4625 ;; Tracked objects:
  4626 ;;		On entry : 0/0
  4627 ;;		On exit  : 0/0
  4628 ;;		Unchanged: 0/0
  4629 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4630 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4631 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4632 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4633 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4634 ;;Total ram usage:        4 bytes
  4635 ;; Hardware stack levels used:    1
  4636 ;; Hardware stack levels required when called:    8
  4637 ;; This function calls:
  4638 ;;		_readADC
  4639 ;; This function is called by:
  4640 ;;		_Loading
  4641 ;;		_getIR
  4642 ;; This function uses a non-reentrant model
  4643 ;;
  4644                           
  4645                           	psect	text8
  4646  004994                     __ptext8:
  4647                           	opt stack 0
  4648  004994                     _readIR:
  4649                           	opt stack 20
  4650                           
  4651                           ;ADCFunctionality.c: 24: readADC(0);
  4652                           
  4653                           ; BSR set to: 0
  4654                           ;incstack = 0
  4655  004994  0E00               	movlw	0
  4656  004996  EC2D  F027         	call	_readADC
  4657                           
  4658                           ;ADCFunctionality.c: 25: int res = ADRESH<<8 | ADRESL;
  4659  00499A  50C3               	movf	4035,w,c	;volatile
  4660  00499C  CFC4 F082          	movff	4036,??_readIR	;volatile
  4661  0049A0  0100               	movlb	0	; () banked
  4662  0049A2  6B83               	clrf	(??_readIR+1)& (0+255),b
  4663  0049A4  C082  F083         	movff	??_readIR,??_readIR+1
  4664  0049A8  0100               	movlb	0	; () banked
  4665  0049AA  6B82               	clrf	??_readIR& (0+255),b
  4666  0049AC  0100               	movlb	0	; () banked
  4667  0049AE  1182               	iorwf	??_readIR& (0+255),w,b
  4668  0049B0  0100               	movlb	0	; () banked
  4669  0049B2  6F84               	movwf	readIR@res& (0+255),b
  4670  0049B4  0100               	movlb	0	; () banked
  4671  0049B6  5183               	movf	(??_readIR+1)& (0+255),w,b
  4672  0049B8  0100               	movlb	0	; () banked
  4673  0049BA  6F85               	movwf	(readIR@res+1)& (0+255),b
  4674                           
  4675                           ; BSR set to: 0
  4676                           ;ADCFunctionality.c: 26: IR_signal = (res > 800) ? 1 : 0;
  4677  0049BC  0100               	movlb	0	; () banked
  4678  0049BE  BF85               	btfsc	(readIR@res+1)& (0+255),7,b
  4679  0049C0  D00A               	goto	u4370
  4680  0049C2  0E21               	movlw	33
  4681  0049C4  0100               	movlb	0	; () banked
  4682  0049C6  5D84               	subwf	readIR@res& (0+255),w,b
  4683  0049C8  0E03               	movlw	3
  4684  0049CA  0100               	movlb	0	; () banked
  4685  0049CC  5985               	subwfb	(readIR@res+1)& (0+255),w,b
  4686  0049CE  A0D8               	btfss	status,0,c
  4687  0049D0  D002               	goto	u4370
  4688  0049D2  0E01               	movlw	1
  4689  0049D4  D001               	goto	u4380
  4690  0049D6                     u4370:
  4691  0049D6  0E00               	movlw	0
  4692  0049D8                     u4380:
  4693  0049D8  0100               	movlb	0	; () banked
  4694  0049DA  6FDE               	movwf	_IR_signal& (0+255),b
  4695  0049DC  6BDF               	clrf	(_IR_signal+1)& (0+255),b
  4696                           
  4697                           ; BSR set to: 0
  4698  0049DE  0012               	return		;funcret
  4699  0049E0                     __end_of_readIR:
  4700                           	opt stack 0
  4701                           tblptru	equ	0xFF8
  4702                           tblptrh	equ	0xFF7
  4703                           tblptrl	equ	0xFF6
  4704                           tablat	equ	0xFF5
  4705                           prodh	equ	0xFF4
  4706                           prodl	equ	0xFF3
  4707                           postinc0	equ	0xFEE
  4708                           wreg	equ	0xFE8
  4709                           postdec1	equ	0xFE5
  4710                           fsr1l	equ	0xFE1
  4711                           indf2	equ	0xFDF
  4712                           postinc2	equ	0xFDE
  4713                           postdec2	equ	0xFDD
  4714                           fsr2h	equ	0xFDA
  4715                           fsr2l	equ	0xFD9
  4716                           status	equ	0xFD8
  4717                           
  4718 ;; *************** function _ID *****************
  4719 ;; Defined at:
  4720 ;;		line 241 in file "sort.c"
  4721 ;; Parameters:    Size  Location     Type
  4722 ;;		None
  4723 ;; Auto vars:     Size  Location     Type
  4724 ;;  i               2    6[BANK0 ] int 
  4725 ;;  i               2    4[BANK0 ] int 
  4726 ;; Return value:  Size  Location     Type
  4727 ;;                  1    wreg      void 
  4728 ;; Registers used:
  4729 ;;		wreg, status,2, status,0, cstack
  4730 ;; Tracked objects:
  4731 ;;		On entry : 0/0
  4732 ;;		On exit  : 0/0
  4733 ;;		Unchanged: 0/0
  4734 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4735 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4736 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4737 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4738 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4739 ;;Total ram usage:        6 bytes
  4740 ;; Hardware stack levels used:    1
  4741 ;; Hardware stack levels required when called:    8
  4742 ;; This function calls:
  4743 ;;		_delay_ms
  4744 ;; This function is called by:
  4745 ;;		_sort
  4746 ;; This function uses a non-reentrant model
  4747 ;;
  4748                           
  4749                           	psect	text9
  4750  002E00                     __ptext9:
  4751                           	opt stack 0
  4752  002E00                     _ID:
  4753                           	opt stack 21
  4754                           
  4755                           ;sort.c: 242: if(f_can_coming_to_ID){
  4756                           
  4757                           ; BSR set to: 0
  4758                           ;incstack = 0
  4759  002E00  5067               	movf	_f_can_coming_to_ID,w,c
  4760  002E02  1068               	iorwf	_f_can_coming_to_ID+1,w,c
  4761  002E04  B4D8               	btfsc	status,2,c
  4762  002E06  0012               	return	
  4763                           
  4764                           ;sort.c: 244: _delay((unsigned long)((1500)*(32000000/4000.0)));
  4765  002E08  0E3D               	movlw	61
  4766  002E0A  0100               	movlb	0	; () banked
  4767  002E0C  6F83               	movwf	(??_ID+1)& (0+255),b
  4768  002E0E  0EE1               	movlw	225
  4769  002E10  0100               	movlb	0	; () banked
  4770  002E12  6F82               	movwf	??_ID& (0+255),b
  4771  002E14  0E3F               	movlw	63
  4772  002E16                     u8527:
  4773  002E16  2EE8               	decfsz	wreg,f,c
  4774  002E18  D7FE               	bra	u8527
  4775  002E1A  2F82               	decfsz	??_ID& (0+255),f,b
  4776  002E1C  D7FC               	bra	u8527
  4777  002E1E  2F83               	decfsz	(??_ID+1)& (0+255),f,b
  4778  002E20  D7FA               	bra	u8527
  4779  002E22  D000               	nop2	
  4780                           
  4781                           ;sort.c: 246: LATAbits.LATA3 = 1;
  4782  002E24  8689               	bsf	3977,3,c	;volatile
  4783                           
  4784                           ;sort.c: 247: _delay((unsigned long)((600)*(32000000/4000.0)));
  4785  002E26  0E19               	movlw	25
  4786  002E28  0100               	movlb	0	; () banked
  4787  002E2A  6F83               	movwf	(??_ID+1)& (0+255),b
  4788  002E2C  0E5A               	movlw	90
  4789  002E2E  0100               	movlb	0	; () banked
  4790  002E30  6F82               	movwf	??_ID& (0+255),b
  4791  002E32  0EB1               	movlw	177
  4792  002E34                     u8537:
  4793  002E34  2EE8               	decfsz	wreg,f,c
  4794  002E36  D7FE               	bra	u8537
  4795  002E38  2F82               	decfsz	??_ID& (0+255),f,b
  4796  002E3A  D7FC               	bra	u8537
  4797  002E3C  2F83               	decfsz	(??_ID+1)& (0+255),f,b
  4798  002E3E  D7FA               	bra	u8537
  4799  002E40  D000               	nop2	
  4800                           
  4801                           ;sort.c: 248: sensor_outputs[1] = PORTAbits.RA2;
  4802  002E42  A480               	btfss	3968,2,c	;volatile
  4803  002E44  D004               	goto	u5710
  4804  002E46  0100               	movlb	0	; () banked
  4805  002E48  6B82               	clrf	??_ID& (0+255),b
  4806  002E4A  2B82               	incf	??_ID& (0+255),f,b
  4807  002E4C  D002               	goto	u5718
  4808  002E4E                     u5710:
  4809  002E4E  0100               	movlb	0	; () banked
  4810  002E50  6B82               	clrf	??_ID& (0+255),b
  4811  002E52                     u5718:
  4812  002E52  0100               	movlb	0	; () banked
  4813  002E54  5182               	movf	??_ID& (0+255),w,b
  4814  002E56  0100               	movlb	0	; () banked
  4815  002E58  6FDC               	movwf	(_sensor_outputs+2)& (0+255),b
  4816  002E5A  6BDD               	clrf	(_sensor_outputs+3)& (0+255),b
  4817                           
  4818                           ; BSR set to: 0
  4819                           ;sort.c: 249: LATAbits.LATA3 = 0;
  4820  002E5C  9689               	bcf	3977,3,c	;volatile
  4821                           
  4822                           ; BSR set to: 0
  4823                           ;sort.c: 251: _delay((unsigned long)((200)*(32000000/4000.0)));
  4824  002E5E  0E09               	movlw	9
  4825  002E60  0100               	movlb	0	; () banked
  4826  002E62  6F83               	movwf	(??_ID+1)& (0+255),b
  4827  002E64  0E1E               	movlw	30
  4828  002E66  0100               	movlb	0	; () banked
  4829  002E68  6F82               	movwf	??_ID& (0+255),b
  4830  002E6A  0EE4               	movlw	228
  4831  002E6C                     u8547:
  4832  002E6C  2EE8               	decfsz	wreg,f,c
  4833  002E6E  D7FE               	bra	u8547
  4834  002E70  2F82               	decfsz	??_ID& (0+255),f,b
  4835  002E72  D7FC               	bra	u8547
  4836  002E74  2F83               	decfsz	(??_ID+1)& (0+255),f,b
  4837  002E76  D7FA               	bra	u8547
  4838  002E78  F000               	nop	
  4839                           
  4840                           ;sort.c: 252: LATAbits.LATA3 = 1;
  4841  002E7A  8689               	bsf	3977,3,c	;volatile
  4842                           
  4843                           ;sort.c: 253: _delay((unsigned long)((600)*(32000000/4000.0)));
  4844  002E7C  0E19               	movlw	25
  4845  002E7E  0100               	movlb	0	; () banked
  4846  002E80  6F83               	movwf	(??_ID+1)& (0+255),b
  4847  002E82  0E5A               	movlw	90
  4848  002E84  0100               	movlb	0	; () banked
  4849  002E86  6F82               	movwf	??_ID& (0+255),b
  4850  002E88  0EB1               	movlw	177
  4851  002E8A                     u8557:
  4852  002E8A  2EE8               	decfsz	wreg,f,c
  4853  002E8C  D7FE               	bra	u8557
  4854  002E8E  2F82               	decfsz	??_ID& (0+255),f,b
  4855  002E90  D7FC               	bra	u8557
  4856  002E92  2F83               	decfsz	(??_ID+1)& (0+255),f,b
  4857  002E94  D7FA               	bra	u8557
  4858  002E96  D000               	nop2	
  4859                           
  4860                           ;sort.c: 254: sensor_outputs[1] = (sensor_outputs[1] | PORTAbits.RA2);
  4861  002E98  A480               	btfss	3968,2,c	;volatile
  4862  002E9A  D004               	goto	u5720
  4863  002E9C  0100               	movlb	0	; () banked
  4864  002E9E  6B82               	clrf	??_ID& (0+255),b
  4865  002EA0  2B82               	incf	??_ID& (0+255),f,b
  4866  002EA2  D002               	goto	u5728
  4867  002EA4                     u5720:
  4868  002EA4  0100               	movlb	0	; () banked
  4869  002EA6  6B82               	clrf	??_ID& (0+255),b
  4870  002EA8                     u5728:
  4871  002EA8  0100               	movlb	0	; () banked
  4872  002EAA  51DC               	movf	(_sensor_outputs+2)& (0+255),w,b
  4873  002EAC  0100               	movlb	0	; () banked
  4874  002EAE  1182               	iorwf	??_ID& (0+255),w,b
  4875  002EB0  0100               	movlb	0	; () banked
  4876  002EB2  6FDC               	movwf	(_sensor_outputs+2)& (0+255),b
  4877  002EB4  0100               	movlb	0	; () banked
  4878  002EB6  51DD               	movf	(_sensor_outputs+3)& (0+255),w,b
  4879  002EB8  0100               	movlb	0	; () banked
  4880  002EBA  6FDD               	movwf	(_sensor_outputs+3)& (0+255),b
  4881                           
  4882                           ; BSR set to: 0
  4883                           ;sort.c: 262: if(!sensor_outputs[0]){
  4884  002EBC  0100               	movlb	0	; () banked
  4885  002EBE  51DA               	movf	_sensor_outputs& (0+255),w,b
  4886  002EC0  0100               	movlb	0	; () banked
  4887  002EC2  11DB               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  4888  002EC4  A4D8               	btfss	status,2,c
  4889  002EC6  D014               	goto	l7134
  4890                           
  4891                           ; BSR set to: 0
  4892                           ;sort.c: 263: if(!sensor_outputs[1]){
  4893  002EC8  0100               	movlb	0	; () banked
  4894  002ECA  51DC               	movf	(_sensor_outputs+2)& (0+255),w,b
  4895  002ECC  0100               	movlb	0	; () banked
  4896  002ECE  11DD               	iorwf	(_sensor_outputs+3)& (0+255),w,b
  4897  002ED0  A4D8               	btfss	status,2,c
  4898  002ED2  D007               	goto	l7130
  4899                           
  4900                           ; BSR set to: 0
  4901                           ;sort.c: 264: count_pop_no_tab++;
  4902  002ED4  4A5B               	infsnz	_count_pop_no_tab,f,c
  4903  002ED6  2A5C               	incf	_count_pop_no_tab+1,f,c
  4904                           
  4905                           ; BSR set to: 0
  4906                           ;sort.c: 265: cur_can = 0;
  4907  002ED8  0E00               	movlw	0
  4908  002EDA  0100               	movlb	0	; () banked
  4909  002EDC  6FE5               	movwf	(_cur_can+1)& (0+255),b
  4910  002EDE  0E00               	movlw	0
  4911  002EE0  D006               	goto	L4
  4912  002EE2                     l7130:
  4913                           
  4914                           ; BSR set to: 0
  4915                           ;sort.c: 267: else{
  4916                           ;sort.c: 268: count_pop_w_tab++;
  4917  002EE2  4A5D               	infsnz	_count_pop_w_tab,f,c
  4918  002EE4  2A5E               	incf	_count_pop_w_tab+1,f,c
  4919                           
  4920                           ; BSR set to: 0
  4921                           ;sort.c: 269: cur_can = 1;
  4922  002EE6  0E00               	movlw	0
  4923  002EE8  0100               	movlb	0	; () banked
  4924  002EEA  6FE5               	movwf	(_cur_can+1)& (0+255),b
  4925  002EEC  0E01               	movlw	1
  4926  002EEE                     L4:
  4927  002EEE  6FE4               	movwf	_cur_can& (0+255),b
  4928  002EF0                     l7134:
  4929                           
  4930                           ; BSR set to: 0
  4931                           ;sort.c: 270: }
  4932                           ;sort.c: 271: }
  4933                           ;sort.c: 272: if(sensor_outputs[0]){
  4934  002EF0  0100               	movlb	0	; () banked
  4935  002EF2  51DA               	movf	_sensor_outputs& (0+255),w,b
  4936  002EF4  0100               	movlb	0	; () banked
  4937  002EF6  11DB               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  4938  002EF8  B4D8               	btfsc	status,2,c
  4939  002EFA  D016               	goto	l7146
  4940                           
  4941                           ; BSR set to: 0
  4942                           ;sort.c: 273: if(!sensor_outputs[1]){
  4943  002EFC  0100               	movlb	0	; () banked
  4944  002EFE  51DC               	movf	(_sensor_outputs+2)& (0+255),w,b
  4945  002F00  0100               	movlb	0	; () banked
  4946  002F02  11DD               	iorwf	(_sensor_outputs+3)& (0+255),w,b
  4947  002F04  A4D8               	btfss	status,2,c
  4948  002F06  D008               	goto	l7142
  4949                           
  4950                           ; BSR set to: 0
  4951                           ;sort.c: 274: count_can_w_lab++;
  4952  002F08  0101               	movlb	1	; () banked
  4953  002F0A  4B2D               	infsnz	_count_can_w_lab& (0+255),f,b
  4954  002F0C  2B2E               	incf	(_count_can_w_lab+1)& (0+255),f,b
  4955                           
  4956                           ; BSR set to: 1
  4957                           ;sort.c: 275: cur_can = 2;
  4958  002F0E  0E00               	movlw	0
  4959  002F10  0100               	movlb	0	; () banked
  4960  002F12  6FE5               	movwf	(_cur_can+1)& (0+255),b
  4961  002F14  0E02               	movlw	2
  4962  002F16  D007               	goto	L5
  4963  002F18                     l7142:
  4964                           
  4965                           ; BSR set to: 0
  4966                           ;sort.c: 277: else{
  4967                           ;sort.c: 278: count_can_no_lab++;
  4968  002F18  0101               	movlb	1	; () banked
  4969  002F1A  4B2B               	infsnz	_count_can_no_lab& (0+255),f,b
  4970  002F1C  2B2C               	incf	(_count_can_no_lab+1)& (0+255),f,b
  4971                           
  4972                           ; BSR set to: 1
  4973                           ;sort.c: 279: cur_can = 3;
  4974  002F1E  0E00               	movlw	0
  4975  002F20  0100               	movlb	0	; () banked
  4976  002F22  6FE5               	movwf	(_cur_can+1)& (0+255),b
  4977  002F24  0E03               	movlw	3
  4978  002F26                     L5:
  4979  002F26  6FE4               	movwf	_cur_can& (0+255),b
  4980  002F28                     l7146:
  4981                           
  4982                           ; BSR set to: 0
  4983                           ;sort.c: 280: }
  4984                           ;sort.c: 281: }
  4985                           ;sort.c: 282: LATAbits.LATA3 = 0;
  4986  002F28  9689               	bcf	3977,3,c	;volatile
  4987                           
  4988                           ; BSR set to: 0
  4989                           ;sort.c: 283: _delay((unsigned long)((200)*(32000000/4000.0)));
  4990  002F2A  0E09               	movlw	9
  4991  002F2C  0100               	movlb	0	; () banked
  4992  002F2E  6F83               	movwf	(??_ID+1)& (0+255),b
  4993  002F30  0E1E               	movlw	30
  4994  002F32  0100               	movlb	0	; () banked
  4995  002F34  6F82               	movwf	??_ID& (0+255),b
  4996  002F36  0EE4               	movlw	228
  4997  002F38                     u8567:
  4998  002F38  2EE8               	decfsz	wreg,f,c
  4999  002F3A  D7FE               	bra	u8567
  5000  002F3C  2F82               	decfsz	??_ID& (0+255),f,b
  5001  002F3E  D7FC               	bra	u8567
  5002  002F40  2F83               	decfsz	(??_ID+1)& (0+255),f,b
  5003  002F42  D7FA               	bra	u8567
  5004  002F44  F000               	nop	
  5005                           
  5006                           ;sort.c: 284: LATAbits.LATA3 = 1;
  5007  002F46  8689               	bsf	3977,3,c	;volatile
  5008                           
  5009                           ;sort.c: 287: for(int i=0;i<10000;i++)
  5010  002F48  0E00               	movlw	0
  5011  002F4A  0100               	movlb	0	; () banked
  5012  002F4C  6F85               	movwf	(ID@i+1)& (0+255),b
  5013  002F4E  0E00               	movlw	0
  5014  002F50  6F84               	movwf	ID@i& (0+255),b
  5015  002F52  0100               	movlb	0	; () banked
  5016  002F54  BF85               	btfsc	(ID@i+1)& (0+255),7,b
  5017  002F56  D008               	goto	l791
  5018  002F58  0E10               	movlw	16
  5019  002F5A  0100               	movlb	0	; () banked
  5020  002F5C  5D84               	subwf	ID@i& (0+255),w,b
  5021  002F5E  0E27               	movlw	39
  5022  002F60  0100               	movlb	0	; () banked
  5023  002F62  5985               	subwfb	(ID@i+1)& (0+255),w,b
  5024  002F64  B0D8               	btfsc	status,0,c
  5025  002F66  D00D               	goto	l792
  5026  002F68                     l791:
  5027                           
  5028                           ; BSR set to: 0
  5029                           ;sort.c: 288: {
  5030                           ;sort.c: 289: LATCbits.LATC0 = 1;
  5031  002F68  808B               	bsf	3979,0,c	;volatile
  5032                           
  5033                           ; BSR set to: 0
  5034                           ;sort.c: 290: _delay((unsigned long)((10)*(32000000/4000000.0)));
  5035  002F6A  0E1A               	movlw	26
  5036  002F6C                     u8577:
  5037  002F6C  2EE8               	decfsz	wreg,f,c
  5038  002F6E  D7FE               	bra	u8577
  5039  002F70  D000               	nop2	
  5040                           
  5041                           ;sort.c: 291: LATCbits.LATC0 = 0;
  5042  002F72  908B               	bcf	3979,0,c	;volatile
  5043                           
  5044                           ;sort.c: 292: _delay((unsigned long)((90)*(32000000/4000000.0)));
  5045  002F74  0EF0               	movlw	240
  5046  002F76                     u8587:
  5047  002F76  2EE8               	decfsz	wreg,f,c
  5048  002F78  D7FE               	bra	u8587
  5049  002F7A  0100               	movlb	0	; () banked
  5050  002F7C  4B84               	infsnz	ID@i& (0+255),f,b
  5051  002F7E  2B85               	incf	(ID@i+1)& (0+255),f,b
  5052  002F80  D7E8               	goto	L6
  5053  002F82                     l792:
  5054                           
  5055                           ; BSR set to: 0
  5056                           ;sort.c: 293: }
  5057                           ;sort.c: 294: LATCbits.LATC0 = 0;
  5058  002F82  908B               	bcf	3979,0,c	;volatile
  5059                           
  5060                           ;sort.c: 296: LATAbits.LATA3 = 0;
  5061  002F84  9689               	bcf	3977,3,c	;volatile
  5062                           
  5063                           ; BSR set to: 0
  5064                           ;sort.c: 300: f_can_coming_to_distribution = 1;
  5065  002F86  0E00               	movlw	0
  5066  002F88  6E6A               	movwf	_f_can_coming_to_distribution+1,c
  5067  002F8A  0E01               	movlw	1
  5068  002F8C  6E69               	movwf	_f_can_coming_to_distribution,c
  5069                           
  5070                           ; BSR set to: 0
  5071                           ;sort.c: 301: _delay((unsigned long)((1500)*(32000000/4000.0)));
  5072  002F8E  0E3D               	movlw	61
  5073  002F90  0100               	movlb	0	; () banked
  5074  002F92  6F83               	movwf	(??_ID+1)& (0+255),b
  5075  002F94  0EE1               	movlw	225
  5076  002F96  0100               	movlb	0	; () banked
  5077  002F98  6F82               	movwf	??_ID& (0+255),b
  5078  002F9A  0E3F               	movlw	63
  5079  002F9C                     u8597:
  5080  002F9C  2EE8               	decfsz	wreg,f,c
  5081  002F9E  D7FE               	bra	u8597
  5082  002FA0  2F82               	decfsz	??_ID& (0+255),f,b
  5083  002FA2  D7FC               	bra	u8597
  5084  002FA4  2F83               	decfsz	(??_ID+1)& (0+255),f,b
  5085  002FA6  D7FA               	bra	u8597
  5086  002FA8  D000               	nop2	
  5087                           
  5088                           ;sort.c: 302: LATCbits.LATC0 = 1;
  5089  002FAA  808B               	bsf	3979,0,c	;volatile
  5090                           
  5091                           ;sort.c: 305: if(!f_lastCan){
  5092  002FAC  0100               	movlb	0	; () banked
  5093  002FAE  51E8               	movf	_f_lastCan& (0+255),w,b
  5094  002FB0  0100               	movlb	0	; () banked
  5095  002FB2  11E9               	iorwf	(_f_lastCan+1)& (0+255),w,b
  5096  002FB4  A4D8               	btfss	status,2,c
  5097  002FB6  D032               	goto	l7184
  5098                           
  5099                           ; BSR set to: 0
  5100                           ;sort.c: 306: for(int i=0; i<46; i++){
  5101  002FB8  0E00               	movlw	0
  5102  002FBA  0100               	movlb	0	; () banked
  5103  002FBC  6F87               	movwf	(ID@i_1120+1)& (0+255),b
  5104  002FBE  0E00               	movlw	0
  5105  002FC0  6F86               	movwf	ID@i_1120& (0+255),b
  5106                           
  5107                           ; BSR set to: 0
  5108  002FC2  0100               	movlb	0	; () banked
  5109  002FC4  BF87               	btfsc	(ID@i_1120+1)& (0+255),7,b
  5110  002FC6  D008               	goto	l7176
  5111  002FC8  0100               	movlb	0	; () banked
  5112  002FCA  5187               	movf	(ID@i_1120+1)& (0+255),w,b
  5113  002FCC  E126               	bnz	l795
  5114  002FCE  0E2E               	movlw	46
  5115  002FD0  0100               	movlb	0	; () banked
  5116  002FD2  5D86               	subwf	ID@i_1120& (0+255),w,b
  5117  002FD4  B0D8               	btfsc	status,0,c
  5118  002FD6  D021               	goto	l795
  5119  002FD8                     l7176:
  5120                           
  5121                           ; BSR set to: 0
  5122                           ;sort.c: 307: LATAbits.LATA5 = !LATAbits.LATA5;
  5123  002FD8  BA89               	btfsc	3977,5,c	;volatile
  5124  002FDA  D004               	goto	u5810
  5125  002FDC  0100               	movlb	0	; () banked
  5126  002FDE  6B82               	clrf	??_ID& (0+255),b
  5127  002FE0  2B82               	incf	??_ID& (0+255),f,b
  5128  002FE2  D002               	goto	u5828
  5129  002FE4                     u5810:
  5130  002FE4  0100               	movlb	0	; () banked
  5131  002FE6  6B82               	clrf	??_ID& (0+255),b
  5132  002FE8                     u5828:
  5133  002FE8  0100               	movlb	0	; () banked
  5134  002FEA  3B82               	swapf	??_ID& (0+255),f,b
  5135  002FEC  4782               	rlncf	??_ID& (0+255),f,b
  5136  002FEE  5089               	movf	3977,w,c	;volatile
  5137  002FF0  0100               	movlb	0	; () banked
  5138  002FF2  1982               	xorwf	??_ID& (0+255),w,b
  5139  002FF4  0BDF               	andlw	-33
  5140  002FF6  1982               	xorwf	??_ID& (0+255),w,b
  5141  002FF8  6E89               	movwf	3977,c	;volatile
  5142                           
  5143                           ; BSR set to: 0
  5144                           ;sort.c: 308: delay_ms(45-i);
  5145  002FFA  0100               	movlb	0	; () banked
  5146  002FFC  5186               	movf	ID@i_1120& (0+255),w,b
  5147  002FFE  0800               	sublw	0
  5148  003000  0F2D               	addlw	45
  5149  003002  EC58  F027         	call	_delay_ms
  5150  003006  0100               	movlb	0	; () banked
  5151  003008  4B86               	infsnz	ID@i_1120& (0+255),f,b
  5152  00300A  2B87               	incf	(ID@i_1120+1)& (0+255),f,b
  5153                           
  5154                           ; BSR set to: 0
  5155  00300C  0100               	movlb	0	; () banked
  5156  00300E  BF87               	btfsc	(ID@i_1120+1)& (0+255),7,b
  5157  003010  D7E3               	goto	l7176
  5158  003012  0100               	movlb	0	; () banked
  5159  003014  5187               	movf	(ID@i_1120+1)& (0+255),w,b
  5160  003016  E101               	bnz	u5830
  5161  003018  D7DA               	goto	L7
  5162  00301A                     u5830:
  5163  00301A                     l795:
  5164                           
  5165                           ; BSR set to: 0
  5166                           ;sort.c: 309: }
  5167                           ;sort.c: 310: LATAbits.LATA5 = 1;
  5168  00301A  8A89               	bsf	3977,5,c	;volatile
  5169  00301C                     l7184:
  5170                           
  5171                           ; BSR set to: 0
  5172                           ;sort.c: 311: }
  5173                           ;sort.c: 313: f_can_coming_to_ID = 0;
  5174  00301C  0E00               	movlw	0
  5175  00301E  6E68               	movwf	_f_can_coming_to_ID+1,c
  5176  003020  0E00               	movlw	0
  5177  003022  6E67               	movwf	_f_can_coming_to_ID,c
  5178  003024  0012               	return	
  5179  003026                     __end_of_ID:
  5180                           	opt stack 0
  5181                           tblptru	equ	0xFF8
  5182                           tblptrh	equ	0xFF7
  5183                           tblptrl	equ	0xFF6
  5184                           tablat	equ	0xFF5
  5185                           prodh	equ	0xFF4
  5186                           prodl	equ	0xFF3
  5187                           postinc0	equ	0xFEE
  5188                           wreg	equ	0xFE8
  5189                           postdec1	equ	0xFE5
  5190                           fsr1l	equ	0xFE1
  5191                           indf2	equ	0xFDF
  5192                           postinc2	equ	0xFDE
  5193                           postdec2	equ	0xFDD
  5194                           fsr2h	equ	0xFDA
  5195                           fsr2l	equ	0xFD9
  5196                           status	equ	0xFD8
  5197                           
  5198 ;; *************** function _delay_ms *****************
  5199 ;; Defined at:
  5200 ;;		line 510 in file "sort.c"
  5201 ;; Parameters:    Size  Location     Type
  5202 ;;  milliseconds    1    wreg     unsigned char 
  5203 ;; Auto vars:     Size  Location     Type
  5204 ;;  milliseconds    1    1[BANK0 ] unsigned char 
  5205 ;; Return value:  Size  Location     Type
  5206 ;;                  1    wreg      void 
  5207 ;; Registers used:
  5208 ;;		wreg, status,2, status,0, cstack
  5209 ;; Tracked objects:
  5210 ;;		On entry : 0/0
  5211 ;;		On exit  : 0/0
  5212 ;;		Unchanged: 0/0
  5213 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5214 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5215 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5216 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5217 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5218 ;;Total ram usage:        2 bytes
  5219 ;; Hardware stack levels used:    1
  5220 ;; Hardware stack levels required when called:    7
  5221 ;; This function calls:
  5222 ;;		Nothing
  5223 ;; This function is called by:
  5224 ;;		_Loading
  5225 ;;		_ID
  5226 ;; This function uses a non-reentrant model
  5227 ;;
  5228                           
  5229                           	psect	text10
  5230  004EB0                     __ptext10:
  5231                           	opt stack 0
  5232  004EB0                     _delay_ms:
  5233                           	opt stack 21
  5234                           
  5235                           ;incstack = 0
  5236                           ;delay_ms@milliseconds stored from wreg
  5237  004EB0  0100               	movlb	0	; () banked
  5238  004EB2  6F81               	movwf	delay_ms@milliseconds& (0+255),b
  5239                           
  5240                           ;sort.c: 511: while(milliseconds > 0)
  5241  004EB4  D00B               	goto	l6576
  5242  004EB6                     l6572:
  5243                           
  5244                           ;sort.c: 512: {
  5245                           ;sort.c: 513: milliseconds--;
  5246  004EB6  0100               	movlb	0	; () banked
  5247  004EB8  0781               	decf	delay_ms@milliseconds& (0+255),f,b
  5248                           
  5249                           ; BSR set to: 0
  5250                           ;sort.c: 514: _delay((unsigned long)((990)*(32000000/4000000.0)));
  5251  004EBA  0E0B               	movlw	11
  5252  004EBC  0100               	movlb	0	; () banked
  5253  004EBE  6F80               	movwf	??_delay_ms& (0+255),b
  5254  004EC0  0E47               	movlw	71
  5255  004EC2                     u8607:
  5256  004EC2  2EE8               	decfsz	wreg,f,c
  5257  004EC4  D7FE               	bra	u8607
  5258  004EC6  2F80               	decfsz	??_delay_ms& (0+255),f,b
  5259  004EC8  D7FC               	bra	u8607
  5260  004ECA  D000               	nop2	
  5261  004ECC                     l6576:
  5262  004ECC  0100               	movlb	0	; () banked
  5263  004ECE  5181               	movf	delay_ms@milliseconds& (0+255),w,b
  5264  004ED0  0100               	movlb	0	; () banked
  5265  004ED2  B4D8               	btfsc	status,2,c
  5266  004ED4  0012               	return	
  5267  004ED6  D7EF               	goto	l6572
  5268  004ED8                     __end_of_delay_ms:
  5269                           	opt stack 0
  5270                           tblptru	equ	0xFF8
  5271                           tblptrh	equ	0xFF7
  5272                           tblptrl	equ	0xFF6
  5273                           tablat	equ	0xFF5
  5274                           prodh	equ	0xFF4
  5275                           prodl	equ	0xFF3
  5276                           postinc0	equ	0xFEE
  5277                           wreg	equ	0xFE8
  5278                           postdec1	equ	0xFE5
  5279                           fsr1l	equ	0xFE1
  5280                           indf2	equ	0xFDF
  5281                           postinc2	equ	0xFDE
  5282                           postdec2	equ	0xFDD
  5283                           fsr2h	equ	0xFDA
  5284                           fsr2l	equ	0xFD9
  5285                           status	equ	0xFD8
  5286                           
  5287 ;; *************** function _Distribution *****************
  5288 ;; Defined at:
  5289 ;;		line 316 in file "sort.c"
  5290 ;; Parameters:    Size  Location     Type
  5291 ;;		None
  5292 ;; Auto vars:     Size  Location     Type
  5293 ;;		None
  5294 ;; Return value:  Size  Location     Type
  5295 ;;                  1    wreg      void 
  5296 ;; Registers used:
  5297 ;;		wreg, status,2, status,0, cstack
  5298 ;; Tracked objects:
  5299 ;;		On entry : 0/0
  5300 ;;		On exit  : 0/0
  5301 ;;		Unchanged: 0/0
  5302 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5303 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5304 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5305 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5306 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5307 ;;Total ram usage:        2 bytes
  5308 ;; Hardware stack levels used:    1
  5309 ;; Hardware stack levels required when called:    8
  5310 ;; This function calls:
  5311 ;;		_updateServoPosition
  5312 ;; This function is called by:
  5313 ;;		_sort
  5314 ;; This function uses a non-reentrant model
  5315 ;;
  5316                           
  5317                           	psect	text11
  5318  003026                     __ptext11:
  5319                           	opt stack 0
  5320  003026                     _Distribution:
  5321                           	opt stack 21
  5322                           
  5323                           ;sort.c: 317: if(f_can_coming_to_distribution){
  5324                           
  5325                           ; BSR set to: 0
  5326                           ;incstack = 0
  5327  003026  5069               	movf	_f_can_coming_to_distribution,w,c
  5328  003028  106A               	iorwf	_f_can_coming_to_distribution+1,w,c
  5329  00302A  B4D8               	btfsc	status,2,c
  5330  00302C  0012               	return	
  5331  00302E  D034               	goto	l7200
  5332  003030                     l7190:
  5333                           
  5334                           ;sort.c: 327: updateServoPosition(500, 1);
  5335  003030  0E01               	movlw	1
  5336  003032  0100               	movlb	0	; () banked
  5337  003034  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  5338  003036  0EF4               	movlw	244
  5339  003038  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  5340  00303A  0E00               	movlw	0
  5341  00303C  0100               	movlb	0	; () banked
  5342  00303E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  5343  003040  0E01               	movlw	1
  5344  003042  6F82               	movwf	updateServoPosition@timer& (0+255),b
  5345  003044  EC84  F022         	call	_updateServoPosition	;wreg free
  5346                           
  5347                           ;sort.c: 328: break;
  5348  003048  D03E               	goto	l7202
  5349  00304A                     l7192:
  5350                           
  5351                           ;sort.c: 330: updateServoPosition(850, 1);
  5352  00304A  0E03               	movlw	3
  5353  00304C  0100               	movlb	0	; () banked
  5354  00304E  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  5355  003050  0E52               	movlw	82
  5356  003052  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  5357  003054  0E00               	movlw	0
  5358  003056  0100               	movlb	0	; () banked
  5359  003058  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  5360  00305A  0E01               	movlw	1
  5361  00305C  6F82               	movwf	updateServoPosition@timer& (0+255),b
  5362  00305E  EC84  F022         	call	_updateServoPosition	;wreg free
  5363                           
  5364                           ;sort.c: 331: break;
  5365  003062  D031               	goto	l7202
  5366  003064                     l7194:
  5367                           
  5368                           ;sort.c: 333: updateServoPosition(1670, 1);
  5369  003064  0E06               	movlw	6
  5370  003066  0100               	movlb	0	; () banked
  5371  003068  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  5372  00306A  0E86               	movlw	134
  5373  00306C  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  5374  00306E  0E00               	movlw	0
  5375  003070  0100               	movlb	0	; () banked
  5376  003072  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  5377  003074  0E01               	movlw	1
  5378  003076  6F82               	movwf	updateServoPosition@timer& (0+255),b
  5379  003078  EC84  F022         	call	_updateServoPosition	;wreg free
  5380                           
  5381                           ;sort.c: 334: break;
  5382  00307C  D024               	goto	l7202
  5383  00307E                     l7196:
  5384                           
  5385                           ;sort.c: 336: updateServoPosition(2400, 1);
  5386  00307E  0E09               	movlw	9
  5387  003080  0100               	movlb	0	; () banked
  5388  003082  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  5389  003084  0E60               	movlw	96
  5390  003086  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  5391  003088  0E00               	movlw	0
  5392  00308A  0100               	movlb	0	; () banked
  5393  00308C  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  5394  00308E  0E01               	movlw	1
  5395  003090  6F82               	movwf	updateServoPosition@timer& (0+255),b
  5396  003092  EC84  F022         	call	_updateServoPosition	;wreg free
  5397                           
  5398                           ;sort.c: 340: }
  5399                           
  5400                           ;sort.c: 339: break;
  5401                           
  5402                           ;sort.c: 338: default:
  5403                           
  5404                           ;sort.c: 337: break;
  5405  003096  D017               	goto	l7202
  5406  003098                     l7200:
  5407  003098  C0E4  F088         	movff	_cur_can,??_Distribution
  5408  00309C  C0E5  F089         	movff	_cur_can+1,??_Distribution+1
  5409                           
  5410                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5411                           ; Switch size 1, requested type "space"
  5412                           ; Number of cases is 1, Range of values is 0 to 0
  5413                           ; switch strategies available:
  5414                           ; Name         Instructions Cycles
  5415                           ; simple_byte            4     3 (average)
  5416                           ;	Chosen strategy is simple_byte
  5417  0030A0  0100               	movlb	0	; () banked
  5418  0030A2  5189               	movf	(??_Distribution+1)& (0+255),w,b
  5419  0030A4  0A00               	xorlw	0	; case 0
  5420  0030A6  A4D8               	btfss	status,2,c
  5421  0030A8  D00E               	goto	l7202
  5422                           
  5423                           ; BSR set to: 0
  5424                           ; Switch size 1, requested type "space"
  5425                           ; Number of cases is 4, Range of values is 0 to 3
  5426                           ; switch strategies available:
  5427                           ; Name         Instructions Cycles
  5428                           ; simple_byte           13     7 (average)
  5429                           ;	Chosen strategy is simple_byte
  5430  0030AA  0100               	movlb	0	; () banked
  5431  0030AC  5188               	movf	??_Distribution& (0+255),w,b
  5432  0030AE  0A00               	xorlw	0	; case 0
  5433  0030B0  B4D8               	btfsc	status,2,c
  5434  0030B2  D7BE               	goto	l7190
  5435  0030B4  0A01               	xorlw	1	; case 1
  5436  0030B6  B4D8               	btfsc	status,2,c
  5437  0030B8  D7C8               	goto	l7192
  5438  0030BA  0A03               	xorlw	3	; case 2
  5439  0030BC  B4D8               	btfsc	status,2,c
  5440  0030BE  D7D2               	goto	l7194
  5441  0030C0  0A01               	xorlw	1	; case 3
  5442  0030C2  B4D8               	btfsc	status,2,c
  5443  0030C4  D7DC               	goto	l7196
  5444  0030C6                     l7202:
  5445                           
  5446                           ;sort.c: 341: updateServoPosition(1050, 3);
  5447  0030C6  0E04               	movlw	4
  5448  0030C8  0100               	movlb	0	; () banked
  5449  0030CA  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  5450  0030CC  0E1A               	movlw	26
  5451  0030CE  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  5452  0030D0  0E00               	movlw	0
  5453  0030D2  0100               	movlb	0	; () banked
  5454  0030D4  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  5455  0030D6  0E03               	movlw	3
  5456  0030D8  6F82               	movwf	updateServoPosition@timer& (0+255),b
  5457  0030DA  EC84  F022         	call	_updateServoPosition	;wreg free
  5458                           
  5459                           ;sort.c: 342: _delay((unsigned long)((750)*(32000000/4000.0)));
  5460  0030DE  0E1F               	movlw	31
  5461  0030E0  0100               	movlb	0	; () banked
  5462  0030E2  6F89               	movwf	(??_Distribution+1)& (0+255),b
  5463  0030E4  0E71               	movlw	113
  5464  0030E6  0100               	movlb	0	; () banked
  5465  0030E8  6F88               	movwf	??_Distribution& (0+255),b
  5466  0030EA  0E1E               	movlw	30
  5467  0030EC                     u8617:
  5468  0030EC  2EE8               	decfsz	wreg,f,c
  5469  0030EE  D7FE               	bra	u8617
  5470  0030F0  2F88               	decfsz	??_Distribution& (0+255),f,b
  5471  0030F2  D7FC               	bra	u8617
  5472  0030F4  2F89               	decfsz	(??_Distribution+1)& (0+255),f,b
  5473  0030F6  D7FA               	bra	u8617
  5474  0030F8  F000               	nop	
  5475                           
  5476                           ;sort.c: 350: switch(cur_can){
  5477  0030FA  D034               	goto	l7216
  5478  0030FC                     l7206:
  5479                           
  5480                           ;sort.c: 352: updateServoPosition(1260, 3);
  5481  0030FC  0E04               	movlw	4
  5482  0030FE  0100               	movlb	0	; () banked
  5483  003100  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  5484  003102  0EEC               	movlw	236
  5485  003104  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  5486  003106  0E00               	movlw	0
  5487  003108  0100               	movlb	0	; () banked
  5488  00310A  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  5489  00310C  0E03               	movlw	3
  5490  00310E  6F82               	movwf	updateServoPosition@timer& (0+255),b
  5491  003110  EC84  F022         	call	_updateServoPosition	;wreg free
  5492                           
  5493                           ;sort.c: 353: break;
  5494  003114  D03E               	goto	l7218
  5495  003116                     l7208:
  5496                           
  5497                           ;sort.c: 355: updateServoPosition(1260, 3);
  5498  003116  0E04               	movlw	4
  5499  003118  0100               	movlb	0	; () banked
  5500  00311A  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  5501  00311C  0EEC               	movlw	236
  5502  00311E  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  5503  003120  0E00               	movlw	0
  5504  003122  0100               	movlb	0	; () banked
  5505  003124  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  5506  003126  0E03               	movlw	3
  5507  003128  6F82               	movwf	updateServoPosition@timer& (0+255),b
  5508  00312A  EC84  F022         	call	_updateServoPosition	;wreg free
  5509                           
  5510                           ;sort.c: 356: break;
  5511  00312E  D031               	goto	l7218
  5512  003130                     l7210:
  5513                           
  5514                           ;sort.c: 358: updateServoPosition(1390, 3);
  5515  003130  0E05               	movlw	5
  5516  003132  0100               	movlb	0	; () banked
  5517  003134  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  5518  003136  0E6E               	movlw	110
  5519  003138  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  5520  00313A  0E00               	movlw	0
  5521  00313C  0100               	movlb	0	; () banked
  5522  00313E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  5523  003140  0E03               	movlw	3
  5524  003142  6F82               	movwf	updateServoPosition@timer& (0+255),b
  5525  003144  EC84  F022         	call	_updateServoPosition	;wreg free
  5526                           
  5527                           ;sort.c: 359: break;
  5528  003148  D024               	goto	l7218
  5529  00314A                     l7212:
  5530                           
  5531                           ;sort.c: 361: updateServoPosition(1390, 3);
  5532  00314A  0E05               	movlw	5
  5533  00314C  0100               	movlb	0	; () banked
  5534  00314E  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  5535  003150  0E6E               	movlw	110
  5536  003152  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  5537  003154  0E00               	movlw	0
  5538  003156  0100               	movlb	0	; () banked
  5539  003158  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  5540  00315A  0E03               	movlw	3
  5541  00315C  6F82               	movwf	updateServoPosition@timer& (0+255),b
  5542  00315E  EC84  F022         	call	_updateServoPosition	;wreg free
  5543                           
  5544                           ;sort.c: 365: }
  5545                           
  5546                           ;sort.c: 364: break;
  5547                           
  5548                           ;sort.c: 363: default:
  5549                           
  5550                           ;sort.c: 362: break;
  5551  003162  D017               	goto	l7218
  5552  003164                     l7216:
  5553  003164  C0E4  F088         	movff	_cur_can,??_Distribution
  5554  003168  C0E5  F089         	movff	_cur_can+1,??_Distribution+1
  5555                           
  5556                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5557                           ; Switch size 1, requested type "space"
  5558                           ; Number of cases is 1, Range of values is 0 to 0
  5559                           ; switch strategies available:
  5560                           ; Name         Instructions Cycles
  5561                           ; simple_byte            4     3 (average)
  5562                           ;	Chosen strategy is simple_byte
  5563  00316C  0100               	movlb	0	; () banked
  5564  00316E  5189               	movf	(??_Distribution+1)& (0+255),w,b
  5565  003170  0A00               	xorlw	0	; case 0
  5566  003172  A4D8               	btfss	status,2,c
  5567  003174  D00E               	goto	l7218
  5568                           
  5569                           ; BSR set to: 0
  5570                           ; Switch size 1, requested type "space"
  5571                           ; Number of cases is 4, Range of values is 0 to 3
  5572                           ; switch strategies available:
  5573                           ; Name         Instructions Cycles
  5574                           ; simple_byte           13     7 (average)
  5575                           ;	Chosen strategy is simple_byte
  5576  003176  0100               	movlb	0	; () banked
  5577  003178  5188               	movf	??_Distribution& (0+255),w,b
  5578  00317A  0A00               	xorlw	0	; case 0
  5579  00317C  B4D8               	btfsc	status,2,c
  5580  00317E  D7BE               	goto	l7206
  5581  003180  0A01               	xorlw	1	; case 1
  5582  003182  B4D8               	btfsc	status,2,c
  5583  003184  D7C8               	goto	l7208
  5584  003186  0A03               	xorlw	3	; case 2
  5585  003188  B4D8               	btfsc	status,2,c
  5586  00318A  D7D2               	goto	l7210
  5587  00318C  0A01               	xorlw	1	; case 3
  5588  00318E  B4D8               	btfsc	status,2,c
  5589  003190  D7DC               	goto	l7212
  5590  003192                     l7218:
  5591                           
  5592                           ;sort.c: 366: _delay((unsigned long)((2500)*(32000000/4000.0)));
  5593  003192  0E66               	movlw	102
  5594  003194  0100               	movlb	0	; () banked
  5595  003196  6F89               	movwf	(??_Distribution+1)& (0+255),b
  5596  003198  0E76               	movlw	118
  5597  00319A  0100               	movlb	0	; () banked
  5598  00319C  6F88               	movwf	??_Distribution& (0+255),b
  5599  00319E  0EC1               	movlw	193
  5600  0031A0                     u8627:
  5601  0031A0  2EE8               	decfsz	wreg,f,c
  5602  0031A2  D7FE               	bra	u8627
  5603  0031A4  2F88               	decfsz	??_Distribution& (0+255),f,b
  5604  0031A6  D7FC               	bra	u8627
  5605  0031A8  2F89               	decfsz	(??_Distribution+1)& (0+255),f,b
  5606  0031AA  D7FA               	bra	u8627
  5607                           
  5608                           ;sort.c: 369: updateServoPosition(1050, 3);
  5609  0031AC  0E04               	movlw	4
  5610  0031AE  0100               	movlb	0	; () banked
  5611  0031B0  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  5612  0031B2  0E1A               	movlw	26
  5613  0031B4  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  5614  0031B6  0E00               	movlw	0
  5615  0031B8  0100               	movlb	0	; () banked
  5616  0031BA  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  5617  0031BC  0E03               	movlw	3
  5618  0031BE  6F82               	movwf	updateServoPosition@timer& (0+255),b
  5619  0031C0  EC84  F022         	call	_updateServoPosition	;wreg free
  5620                           
  5621                           ;sort.c: 370: _delay((unsigned long)((750)*(32000000/4000.0)));
  5622  0031C4  0E1F               	movlw	31
  5623  0031C6  0100               	movlb	0	; () banked
  5624  0031C8  6F89               	movwf	(??_Distribution+1)& (0+255),b
  5625  0031CA  0E71               	movlw	113
  5626  0031CC  0100               	movlb	0	; () banked
  5627  0031CE  6F88               	movwf	??_Distribution& (0+255),b
  5628  0031D0  0E1E               	movlw	30
  5629  0031D2                     u8637:
  5630  0031D2  2EE8               	decfsz	wreg,f,c
  5631  0031D4  D7FE               	bra	u8637
  5632  0031D6  2F88               	decfsz	??_Distribution& (0+255),f,b
  5633  0031D8  D7FC               	bra	u8637
  5634  0031DA  2F89               	decfsz	(??_Distribution+1)& (0+255),f,b
  5635  0031DC  D7FA               	bra	u8637
  5636  0031DE  F000               	nop	
  5637                           
  5638                           ;sort.c: 371: updateServoPosition(1200, 1);
  5639  0031E0  0E04               	movlw	4
  5640  0031E2  0100               	movlb	0	; () banked
  5641  0031E4  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  5642  0031E6  0EB0               	movlw	176
  5643  0031E8  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  5644  0031EA  0E00               	movlw	0
  5645  0031EC  0100               	movlb	0	; () banked
  5646  0031EE  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  5647  0031F0  0E01               	movlw	1
  5648  0031F2  6F82               	movwf	updateServoPosition@timer& (0+255),b
  5649  0031F4  EC84  F022         	call	_updateServoPosition	;wreg free
  5650                           
  5651                           ;sort.c: 372: updateServoPosition(1050, 3);
  5652  0031F8  0E04               	movlw	4
  5653  0031FA  0100               	movlb	0	; () banked
  5654  0031FC  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  5655  0031FE  0E1A               	movlw	26
  5656  003200  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  5657  003202  0E00               	movlw	0
  5658  003204  0100               	movlb	0	; () banked
  5659  003206  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  5660  003208  0E03               	movlw	3
  5661  00320A  6F82               	movwf	updateServoPosition@timer& (0+255),b
  5662  00320C  EC84  F022         	call	_updateServoPosition	;wreg free
  5663                           
  5664                           ;sort.c: 374: f_can_coming_to_distribution = 0;
  5665  003210  0E00               	movlw	0
  5666  003212  6E6A               	movwf	_f_can_coming_to_distribution+1,c
  5667  003214  0E00               	movlw	0
  5668  003216  6E69               	movwf	_f_can_coming_to_distribution,c
  5669                           
  5670                           ;sort.c: 375: f_can_distributed = 1;
  5671  003218  0E00               	movlw	0
  5672  00321A  0101               	movlb	1	; () banked
  5673  00321C  6F30               	movwf	(_f_can_distributed+1)& (0+255),b
  5674  00321E  0E01               	movlw	1
  5675  003220  6F2F               	movwf	_f_can_distributed& (0+255),b
  5676                           
  5677                           ; BSR set to: 1
  5678                           ;sort.c: 376: f_most_recent_sort_time = 1;
  5679  003222  0E00               	movlw	0
  5680  003224  6E6C               	movwf	_f_most_recent_sort_time+1,c
  5681  003226  0E01               	movlw	1
  5682  003228  6E6B               	movwf	_f_most_recent_sort_time,c
  5683                           
  5684                           ; BSR set to: 1
  5685                           ;sort.c: 377: if(f_lastCan == 1){
  5686  00322A  0100               	movlb	0	; () banked
  5687  00322C  05E8               	decf	_f_lastCan& (0+255),w,b
  5688  00322E  0100               	movlb	0	; () banked
  5689  003230  11E9               	iorwf	(_f_lastCan+1)& (0+255),w,b
  5690  003232  A4D8               	btfss	status,2,c
  5691  003234  0012               	return	
  5692                           
  5693                           ; BSR set to: 0
  5694                           ;sort.c: 378: machine_state = DoneSorting_state;
  5695  003236  0E02               	movlw	2
  5696  003238  0100               	movlb	0	; () banked
  5697  00323A  6FFC               	movwf	_machine_state& (0+255),b
  5698                           
  5699                           ; BSR set to: 0
  5700  00323C  0012               	return	
  5701  00323E                     __end_of_Distribution:
  5702                           	opt stack 0
  5703                           tblptru	equ	0xFF8
  5704                           tblptrh	equ	0xFF7
  5705                           tblptrl	equ	0xFF6
  5706                           tablat	equ	0xFF5
  5707                           prodh	equ	0xFF4
  5708                           prodl	equ	0xFF3
  5709                           postinc0	equ	0xFEE
  5710                           wreg	equ	0xFE8
  5711                           postdec1	equ	0xFE5
  5712                           fsr1l	equ	0xFE1
  5713                           indf2	equ	0xFDF
  5714                           postinc2	equ	0xFDE
  5715                           postdec2	equ	0xFDD
  5716                           fsr2h	equ	0xFDA
  5717                           fsr2l	equ	0xFD9
  5718                           status	equ	0xFD8
  5719                           
  5720 ;; *************** function _machineConfig *****************
  5721 ;; Defined at:
  5722 ;;		line 15 in file "MachineConfig.c"
  5723 ;; Parameters:    Size  Location     Type
  5724 ;;		None
  5725 ;; Auto vars:     Size  Location     Type
  5726 ;;		None
  5727 ;; Return value:  Size  Location     Type
  5728 ;;                  1    wreg      void 
  5729 ;; Registers used:
  5730 ;;		wreg, status,2
  5731 ;; Tracked objects:
  5732 ;;		On entry : 0/0
  5733 ;;		On exit  : 0/0
  5734 ;;		Unchanged: 0/0
  5735 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5736 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5737 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5738 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5739 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5740 ;;Total ram usage:        0 bytes
  5741 ;; Hardware stack levels used:    1
  5742 ;; Hardware stack levels required when called:    7
  5743 ;; This function calls:
  5744 ;;		Nothing
  5745 ;; This function is called by:
  5746 ;;		_main
  5747 ;; This function uses a non-reentrant model
  5748 ;;
  5749                           
  5750                           	psect	text12
  5751  00478C                     __ptext12:
  5752                           	opt stack 0
  5753  00478C                     _machineConfig:
  5754                           	opt stack 23
  5755                           
  5756                           ;MachineConfig.c: 17: OSCCON = 0xF0;
  5757                           
  5758                           ;incstack = 0
  5759  00478C  0EF0               	movlw	240
  5760  00478E  6ED3               	movwf	4051,c	;volatile
  5761                           
  5762                           ;MachineConfig.c: 18: OSCTUNEbits.PLLEN = 1;
  5763  004790  8C9B               	bsf	3995,6,c	;volatile
  5764                           
  5765                           ;MachineConfig.c: 22: TRISA = 0b00000111;
  5766  004792  0E07               	movlw	7
  5767  004794  6E92               	movwf	3986,c	;volatile
  5768                           
  5769                           ;MachineConfig.c: 24: TRISB = 0b11110010;
  5770  004796  0EF2               	movlw	242
  5771  004798  6E93               	movwf	3987,c	;volatile
  5772                           
  5773                           ;MachineConfig.c: 27: TRISC = 0x00;
  5774  00479A  0E00               	movlw	0
  5775  00479C  6E94               	movwf	3988,c	;volatile
  5776                           
  5777                           ;MachineConfig.c: 31: TRISD = 0x00;
  5778  00479E  0E00               	movlw	0
  5779  0047A0  6E95               	movwf	3989,c	;volatile
  5780                           
  5781                           ;MachineConfig.c: 34: TRISE = 0x00;
  5782  0047A2  0E00               	movlw	0
  5783  0047A4  6E96               	movwf	3990,c	;volatile
  5784                           
  5785                           ;MachineConfig.c: 37: LATA = 0x00;
  5786  0047A6  0E00               	movlw	0
  5787  0047A8  6E89               	movwf	3977,c	;volatile
  5788                           
  5789                           ;MachineConfig.c: 38: LATB = 0x00;
  5790  0047AA  0E00               	movlw	0
  5791  0047AC  6E8A               	movwf	3978,c	;volatile
  5792                           
  5793                           ;MachineConfig.c: 39: LATC = 0x00;
  5794  0047AE  0E00               	movlw	0
  5795  0047B0  6E8B               	movwf	3979,c	;volatile
  5796                           
  5797                           ;MachineConfig.c: 40: LATD = 0x00;
  5798  0047B2  0E00               	movlw	0
  5799  0047B4  6E8C               	movwf	3980,c	;volatile
  5800                           
  5801                           ;MachineConfig.c: 41: LATE = 0x00;
  5802  0047B6  0E00               	movlw	0
  5803  0047B8  6E8D               	movwf	3981,c	;volatile
  5804                           
  5805                           ;MachineConfig.c: 43: nRBPU = 0;
  5806  0047BA  9EF1               	bcf	intcon2,7,c	;volatile
  5807                           
  5808                           ;MachineConfig.c: 46: ADCON0 = 0x00;
  5809  0047BC  0E00               	movlw	0
  5810  0047BE  6EC2               	movwf	4034,c	;volatile
  5811                           
  5812                           ;MachineConfig.c: 47: ADCON1 = 0b00001101;
  5813  0047C0  0E0D               	movlw	13
  5814  0047C2  6EC1               	movwf	4033,c	;volatile
  5815                           
  5816                           ;MachineConfig.c: 50: CVRCON = 0x00;
  5817  0047C4  0E00               	movlw	0
  5818  0047C6  6EB5               	movwf	4021,c	;volatile
  5819                           
  5820                           ;MachineConfig.c: 51: CMCONbits.CIS = 0;
  5821  0047C8  96B4               	bcf	4020,3,c	;volatile
  5822                           
  5823                           ;MachineConfig.c: 52: ADCON2 = 0b10110001;
  5824  0047CA  0EB1               	movlw	177
  5825  0047CC  6EC0               	movwf	4032,c	;volatile
  5826                           
  5827                           ;MachineConfig.c: 55: INT1IE = 1;
  5828  0047CE  86F0               	bsf	intcon3,3,c	;volatile
  5829                           
  5830                           ;MachineConfig.c: 57: TMR0IE = 1;
  5831  0047D0  8AF2               	bsf	intcon,5,c	;volatile
  5832                           
  5833                           ;MachineConfig.c: 58: TMR1IE = 1;
  5834  0047D2  809D               	bsf	3997,0,c	;volatile
  5835                           
  5836                           ;MachineConfig.c: 59: T1CON = 0b10110000;
  5837  0047D4  0EB0               	movlw	176
  5838  0047D6  6ECD               	movwf	4045,c	;volatile
  5839                           
  5840                           ;MachineConfig.c: 60: T3CON = 0b10110000;
  5841  0047D8  0EB0               	movlw	176
  5842  0047DA  6EB1               	movwf	4017,c	;volatile
  5843                           
  5844                           ;MachineConfig.c: 61: TMR2IE = 1;
  5845  0047DC  829D               	bsf	3997,1,c	;volatile
  5846                           
  5847                           ;MachineConfig.c: 62: TMR3IE = 1;
  5848  0047DE  82A0               	bsf	4000,1,c	;volatile
  5849                           
  5850                           ;MachineConfig.c: 63: PEIE = 1;
  5851  0047E0  8CF2               	bsf	intcon,6,c	;volatile
  5852                           
  5853                           ;MachineConfig.c: 64: ADIE = 0;
  5854  0047E2  9C9D               	bcf	3997,6,c	;volatile
  5855                           
  5856                           ;MachineConfig.c: 65: (INTCONbits.GIE = 0);
  5857  0047E4  9EF2               	bcf	intcon,7,c	;volatile
  5858  0047E6  0012               	return		;funcret
  5859  0047E8                     __end_of_machineConfig:
  5860                           	opt stack 0
  5861                           tblptru	equ	0xFF8
  5862                           tblptrh	equ	0xFF7
  5863                           tblptrl	equ	0xFF6
  5864                           tablat	equ	0xFF5
  5865                           prodh	equ	0xFF4
  5866                           prodl	equ	0xFF3
  5867                           intcon	equ	0xFF2
  5868                           intcon2	equ	0xFF1
  5869                           intcon3	equ	0xFF0
  5870                           postinc0	equ	0xFEE
  5871                           wreg	equ	0xFE8
  5872                           postdec1	equ	0xFE5
  5873                           fsr1l	equ	0xFE1
  5874                           indf2	equ	0xFDF
  5875                           postinc2	equ	0xFDE
  5876                           postdec2	equ	0xFDD
  5877                           fsr2h	equ	0xFDA
  5878                           fsr2l	equ	0xFD9
  5879                           status	equ	0xFD8
  5880                           
  5881 ;; *************** function _logRun *****************
  5882 ;; Defined at:
  5883 ;;		line 84 in file "EEPROM.c"
  5884 ;; Parameters:    Size  Location     Type
  5885 ;;		None
  5886 ;; Auto vars:     Size  Location     Type
  5887 ;;  byte_i          1   53[BANK0 ] unsigned char 
  5888 ;;  i               2   55[BANK0 ] int 
  5889 ;;  num             1   49[BANK0 ] unsigned char 
  5890 ;;  addr            2   57[BANK0 ] unsigned short 
  5891 ;;  byte11          1   54[BANK0 ] unsigned char 
  5892 ;;  byte3           1   52[BANK0 ] unsigned char 
  5893 ;;  byte2           1   51[BANK0 ] unsigned char 
  5894 ;;  byte1           1   50[BANK0 ] unsigned char 
  5895 ;; Return value:  Size  Location     Type
  5896 ;;                  1    wreg      void 
  5897 ;; Registers used:
  5898 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5899 ;; Tracked objects:
  5900 ;;		On entry : 0/0
  5901 ;;		On exit  : 0/0
  5902 ;;		Unchanged: 0/0
  5903 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5904 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5905 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5906 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5907 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5908 ;;Total ram usage:       10 bytes
  5909 ;; Hardware stack levels used:    1
  5910 ;; Hardware stack levels required when called:   11
  5911 ;; This function calls:
  5912 ;;		_EEPROM_read
  5913 ;;		_EEPROM_write
  5914 ;; This function is called by:
  5915 ;;		_main
  5916 ;; This function uses a non-reentrant model
  5917 ;;
  5918                           
  5919                           	psect	text13
  5920  003942                     __ptext13:
  5921                           	opt stack 0
  5922  003942                     _logRun:
  5923                           	opt stack 19
  5924                           
  5925                           ;EEPROM.c: 97: sel = EEPROM_read(0);
  5926                           
  5927                           ;incstack = 0
  5928  003942  0E00               	movlw	0
  5929  003944  0100               	movlb	0	; () banked
  5930  003946  6F81               	movwf	(EEPROM_read@address+1)& (0+255),b
  5931  003948  0E00               	movlw	0
  5932  00394A  6F80               	movwf	EEPROM_read@address& (0+255),b
  5933  00394C  ECF6  F027         	call	_EEPROM_read	;wreg free
  5934  003950  0100               	movlb	0	; () banked
  5935  003952  6FFD               	movwf	_sel& (0+255),b
  5936                           
  5937                           ; BSR set to: 0
  5938                           ;EEPROM.c: 98: unsigned short addr = 1 + 11 * sel;
  5939  003954  0100               	movlb	0	; () banked
  5940  003956  51FD               	movf	_sel& (0+255),w,b
  5941  003958  0D0B               	mullw	11
  5942  00395A  0E01               	movlw	1
  5943  00395C  24F3               	addwf	prodl,w,c
  5944  00395E  0100               	movlb	0	; () banked
  5945  003960  6FB9               	movwf	logRun@addr& (0+255),b
  5946  003962  0E00               	movlw	0
  5947  003964  20F4               	addwfc	prodh,w,c
  5948  003966  0100               	movlb	0	; () banked
  5949  003968  6FBA               	movwf	(logRun@addr+1)& (0+255),b
  5950                           
  5951                           ; BSR set to: 0
  5952                           ;EEPROM.c: 101: if (sel < 3){
  5953  00396A  0E03               	movlw	3
  5954  00396C  0100               	movlb	0	; () banked
  5955  00396E  61FD               	cpfslt	_sel& (0+255),b
  5956  003970  D00E               	goto	l8792
  5957                           
  5958                           ; BSR set to: 0
  5959                           ;EEPROM.c: 102: unsigned char num = sel+1;
  5960  003972  0100               	movlb	0	; () banked
  5961  003974  29FD               	incf	_sel& (0+255),w,b
  5962  003976  0100               	movlb	0	; () banked
  5963  003978  6FB1               	movwf	logRun@num& (0+255),b
  5964                           
  5965                           ; BSR set to: 0
  5966                           ;EEPROM.c: 103: EEPROM_write(0, num);
  5967  00397A  0E00               	movlw	0
  5968  00397C  0100               	movlb	0	; () banked
  5969  00397E  6FAC               	movwf	(EEPROM_write@address+1)& (0+255),b
  5970  003980  0E00               	movlw	0
  5971  003982  6FAB               	movwf	EEPROM_write@address& (0+255),b
  5972  003984  C0B1  F0AD         	movff	logRun@num,EEPROM_write@data
  5973  003988  EC5B  F01E         	call	_EEPROM_write	;wreg free
  5974                           
  5975                           ;EEPROM.c: 104: }
  5976  00398C  D00A               	goto	l8794
  5977  00398E                     l8792:
  5978                           
  5979                           ;EEPROM.c: 105: else{
  5980                           ;EEPROM.c: 106: EEPROM_write(0, 0);
  5981  00398E  0E00               	movlw	0
  5982  003990  0100               	movlb	0	; () banked
  5983  003992  6FAC               	movwf	(EEPROM_write@address+1)& (0+255),b
  5984  003994  0E00               	movlw	0
  5985  003996  6FAB               	movwf	EEPROM_write@address& (0+255),b
  5986  003998  0E00               	movlw	0
  5987  00399A  0100               	movlb	0	; () banked
  5988  00399C  6FAD               	movwf	EEPROM_write@data& (0+255),b
  5989  00399E  EC5B  F01E         	call	_EEPROM_write	;wreg free
  5990  0039A2                     l8794:
  5991                           
  5992                           ;EEPROM.c: 107: }
  5993                           ;EEPROM.c: 110: unsigned char byte1 = 0b10000000 | count_total;
  5994  0039A2  0100               	movlb	0	; () banked
  5995  0039A4  51FE               	movf	_count_total& (0+255),w,b
  5996  0039A6  0980               	iorlw	128
  5997  0039A8  0100               	movlb	0	; () banked
  5998  0039AA  6FB2               	movwf	logRun@byte1& (0+255),b
  5999                           
  6000                           ; BSR set to: 0
  6001                           ;EEPROM.c: 111: EEPROM_write(addr, byte1);
  6002  0039AC  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  6003  0039B0  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  6004  0039B4  C0B2  F0AD         	movff	logRun@byte1,EEPROM_write@data
  6005  0039B8  EC5B  F01E         	call	_EEPROM_write	;wreg free
  6006                           
  6007                           ;EEPROM.c: 112: addr++;
  6008  0039BC  0100               	movlb	0	; () banked
  6009  0039BE  4BB9               	infsnz	logRun@addr& (0+255),f,b
  6010  0039C0  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  6011                           
  6012                           ; BSR set to: 0
  6013                           ;EEPROM.c: 115: unsigned char byte2 = (count_pop_no_tab << 4) | count_pop_w_tab;
  6014  0039C2  385B               	swapf	_count_pop_no_tab,w,c
  6015  0039C4  0BF0               	andlw	240
  6016  0039C6  105D               	iorwf	_count_pop_w_tab,w,c
  6017  0039C8  0100               	movlb	0	; () banked
  6018  0039CA  6FB3               	movwf	logRun@byte2& (0+255),b
  6019                           
  6020                           ; BSR set to: 0
  6021                           ;EEPROM.c: 116: EEPROM_write(addr, byte2);
  6022  0039CC  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  6023  0039D0  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  6024  0039D4  C0B3  F0AD         	movff	logRun@byte2,EEPROM_write@data
  6025  0039D8  EC5B  F01E         	call	_EEPROM_write	;wreg free
  6026                           
  6027                           ;EEPROM.c: 117: addr++;
  6028  0039DC  0100               	movlb	0	; () banked
  6029  0039DE  4BB9               	infsnz	logRun@addr& (0+255),f,b
  6030  0039E0  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  6031                           
  6032                           ; BSR set to: 0
  6033                           ;EEPROM.c: 118: unsigned char byte3 = (count_can_w_lab << 4) | count_can_no_lab;
  6034  0039E2  0101               	movlb	1	; () banked
  6035  0039E4  392D               	swapf	_count_can_w_lab& (0+255),w,b
  6036  0039E6  0BF0               	andlw	240
  6037  0039E8  0101               	movlb	1	; () banked
  6038  0039EA  112B               	iorwf	_count_can_no_lab& (0+255),w,b
  6039  0039EC  0100               	movlb	0	; () banked
  6040  0039EE  6FB4               	movwf	logRun@byte3& (0+255),b
  6041                           
  6042                           ; BSR set to: 0
  6043                           ;EEPROM.c: 119: EEPROM_write(addr, byte3);
  6044  0039F0  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  6045  0039F4  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  6046  0039F8  C0B4  F0AD         	movff	logRun@byte3,EEPROM_write@data
  6047  0039FC  EC5B  F01E         	call	_EEPROM_write	;wreg free
  6048                           
  6049                           ;EEPROM.c: 120: addr++;
  6050  003A00  0100               	movlb	0	; () banked
  6051  003A02  4BB9               	infsnz	logRun@addr& (0+255),f,b
  6052  003A04  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  6053                           
  6054                           ; BSR set to: 0
  6055                           ;EEPROM.c: 123: for(int i = 0; i < 7; i++){
  6056  003A06  0E00               	movlw	0
  6057  003A08  0100               	movlb	0	; () banked
  6058  003A0A  6FB8               	movwf	(logRun@i+1)& (0+255),b
  6059  003A0C  0E00               	movlw	0
  6060  003A0E  6FB7               	movwf	logRun@i& (0+255),b
  6061                           
  6062                           ; BSR set to: 0
  6063  003A10  0100               	movlb	0	; () banked
  6064  003A12  BFB8               	btfsc	(logRun@i+1)& (0+255),7,b
  6065  003A14  D008               	goto	l8818
  6066  003A16  0100               	movlb	0	; () banked
  6067  003A18  51B8               	movf	(logRun@i+1)& (0+255),w,b
  6068  003A1A  E128               	bnz	l1010
  6069  003A1C  0E07               	movlw	7
  6070  003A1E  0100               	movlb	0	; () banked
  6071  003A20  5DB7               	subwf	logRun@i& (0+255),w,b
  6072  003A22  B0D8               	btfsc	status,0,c
  6073  003A24  D023               	goto	l1010
  6074  003A26                     l8818:
  6075                           
  6076                           ; BSR set to: 0
  6077                           ;EEPROM.c: 124: unsigned char byte_i = startTime[i];
  6078  003A26  90D8               	bcf	status,0,c
  6079  003A28  0100               	movlb	0	; () banked
  6080  003A2A  35B7               	rlcf	logRun@i& (0+255),w,b
  6081  003A2C  6ED9               	movwf	fsr2l,c
  6082  003A2E  0100               	movlb	0	; () banked
  6083  003A30  35B8               	rlcf	(logRun@i+1)& (0+255),w,b
  6084  003A32  6EDA               	movwf	fsr2h,c
  6085  003A34  0E0E               	movlw	low _startTime
  6086  003A36  26D9               	addwf	fsr2l,f,c
  6087  003A38  0E01               	movlw	high _startTime
  6088  003A3A  22DA               	addwfc	fsr2h,f,c
  6089  003A3C  50DF               	movf	indf2,w,c
  6090  003A3E  0100               	movlb	0	; () banked
  6091  003A40  6FB5               	movwf	logRun@byte_i& (0+255),b
  6092                           
  6093                           ; BSR set to: 0
  6094                           ;EEPROM.c: 125: EEPROM_write(addr, byte_i);
  6095  003A42  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  6096  003A46  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  6097  003A4A  C0B5  F0AD         	movff	logRun@byte_i,EEPROM_write@data
  6098  003A4E  EC5B  F01E         	call	_EEPROM_write	;wreg free
  6099                           
  6100                           ;EEPROM.c: 126: addr++;
  6101  003A52  0100               	movlb	0	; () banked
  6102  003A54  4BB9               	infsnz	logRun@addr& (0+255),f,b
  6103  003A56  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  6104                           
  6105                           ; BSR set to: 0
  6106  003A58  0100               	movlb	0	; () banked
  6107  003A5A  4BB7               	infsnz	logRun@i& (0+255),f,b
  6108  003A5C  2BB8               	incf	(logRun@i+1)& (0+255),f,b
  6109                           
  6110                           ; BSR set to: 0
  6111  003A5E  0100               	movlb	0	; () banked
  6112  003A60  BFB8               	btfsc	(logRun@i+1)& (0+255),7,b
  6113  003A62  D7E1               	goto	l8818
  6114  003A64  0100               	movlb	0	; () banked
  6115  003A66  51B8               	movf	(logRun@i+1)& (0+255),w,b
  6116  003A68  E101               	bnz	u7990
  6117  003A6A  D7D8               	goto	L8
  6118  003A6C                     u7990:
  6119  003A6C                     l1010:
  6120                           
  6121                           ; BSR set to: 0
  6122                           ;EEPROM.c: 127: }
  6123                           ;EEPROM.c: 130: unsigned char byte11 = total_time;
  6124  003A6C  C0F8  F0B6         	movff	_total_time,logRun@byte11
  6125                           
  6126                           ; BSR set to: 0
  6127                           ;EEPROM.c: 131: EEPROM_write(addr, byte11);
  6128  003A70  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  6129  003A74  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  6130  003A78  C0B6  F0AD         	movff	logRun@byte11,EEPROM_write@data
  6131  003A7C  EC5B  F01E         	call	_EEPROM_write	;wreg free
  6132  003A80  0012               	return		;funcret
  6133  003A82                     __end_of_logRun:
  6134                           	opt stack 0
  6135                           tblptru	equ	0xFF8
  6136                           tblptrh	equ	0xFF7
  6137                           tblptrl	equ	0xFF6
  6138                           tablat	equ	0xFF5
  6139                           prodh	equ	0xFF4
  6140                           prodl	equ	0xFF3
  6141                           intcon	equ	0xFF2
  6142                           intcon2	equ	0xFF1
  6143                           intcon3	equ	0xFF0
  6144                           postinc0	equ	0xFEE
  6145                           wreg	equ	0xFE8
  6146                           postdec1	equ	0xFE5
  6147                           fsr1l	equ	0xFE1
  6148                           indf2	equ	0xFDF
  6149                           postinc2	equ	0xFDE
  6150                           postdec2	equ	0xFDD
  6151                           fsr2h	equ	0xFDA
  6152                           fsr2l	equ	0xFD9
  6153                           status	equ	0xFD8
  6154                           
  6155 ;; *************** function _EEPROM_write *****************
  6156 ;; Defined at:
  6157 ;;		line 32 in file "EEPROM.c"
  6158 ;; Parameters:    Size  Location     Type
  6159 ;;  address         2   43[BANK0 ] unsigned short 
  6160 ;;  data            1   45[BANK0 ] unsigned char 
  6161 ;; Auto vars:     Size  Location     Type
  6162 ;;  i               1   48[BANK0 ] unsigned char 
  6163 ;;  i               1   47[BANK0 ] unsigned char 
  6164 ;; Return value:  Size  Location     Type
  6165 ;;                  1    wreg      void 
  6166 ;; Registers used:
  6167 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6168 ;; Tracked objects:
  6169 ;;		On entry : 0/0
  6170 ;;		On exit  : 0/0
  6171 ;;		Unchanged: 0/0
  6172 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6173 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6174 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6175 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6176 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6177 ;;Total ram usage:        6 bytes
  6178 ;; Hardware stack levels used:    1
  6179 ;; Hardware stack levels required when called:   10
  6180 ;; This function calls:
  6181 ;;		_EEPROM_read
  6182 ;;		_lcdInst
  6183 ;;		_printf
  6184 ;; This function is called by:
  6185 ;;		_Loading
  6186 ;;		_logRun
  6187 ;; This function uses a non-reentrant model
  6188 ;;
  6189                           
  6190                           	psect	text14
  6191  003CB6                     __ptext14:
  6192                           	opt stack 0
  6193  003CB6                     _EEPROM_write:
  6194                           	opt stack 18
  6195                           
  6196                           ;EEPROM.c: 33: EECON1bits.WREN = 1;
  6197                           
  6198                           ;incstack = 0
  6199  003CB6  84A6               	bsf	4006,2,c	;volatile
  6200                           
  6201                           ;EEPROM.c: 36: EEADRH = (unsigned char)(address >> 8);
  6202  003CB8  0100               	movlb	0	; () banked
  6203  003CBA  51AC               	movf	(EEPROM_write@address+1)& (0+255),w,b
  6204  003CBC  6EAA               	movwf	4010,c	;volatile
  6205                           
  6206                           ; BSR set to: 0
  6207                           ;EEPROM.c: 37: EEADR = (unsigned char)address;
  6208  003CBE  C0AB  FFA9         	movff	EEPROM_write@address,4009	;volatile
  6209                           
  6210                           ; BSR set to: 0
  6211                           ;EEPROM.c: 39: EEDATA = data;
  6212  003CC2  C0AD  FFA8         	movff	EEPROM_write@data,4008	;volatile
  6213                           
  6214                           ; BSR set to: 0
  6215                           ;EEPROM.c: 40: EECON1bits.EEPGD = 0;
  6216  003CC6  9EA6               	bcf	4006,7,c	;volatile
  6217                           
  6218                           ; BSR set to: 0
  6219                           ;EEPROM.c: 41: EECON1bits.CFGS = 0;
  6220  003CC8  9CA6               	bcf	4006,6,c	;volatile
  6221                           
  6222                           ; BSR set to: 0
  6223                           ;EEPROM.c: 43: (INTCONbits.GIE = 0);
  6224  003CCA  9EF2               	bcf	intcon,7,c	;volatile
  6225                           
  6226                           ;EEPROM.c: 45: EECON2 = 0x55;
  6227  003CCC  0E55               	movlw	85
  6228  003CCE  6EA7               	movwf	4007,c	;volatile
  6229                           
  6230                           ;EEPROM.c: 46: EECON2 = 0x0AA;
  6231  003CD0  0EAA               	movlw	170
  6232  003CD2  6EA7               	movwf	4007,c	;volatile
  6233                           
  6234                           ; BSR set to: 0
  6235                           ;EEPROM.c: 47: EECON1bits.WR = 1;
  6236  003CD4  82A6               	bsf	4006,1,c	;volatile
  6237                           
  6238                           ; BSR set to: 0
  6239                           ;EEPROM.c: 48: (INTCONbits.GIE = 1);
  6240  003CD6  8EF2               	bsf	intcon,7,c	;volatile
  6241  003CD8                     l988:
  6242  003CD8  A8A1               	btfss	4001,4,c	;volatile
  6243  003CDA  D7FE               	goto	l988
  6244                           
  6245                           ;EEPROM.c: 53: PIR2bits.EEIF = 0;
  6246  003CDC  98A1               	bcf	4001,4,c	;volatile
  6247                           
  6248                           ;EEPROM.c: 54: EECON1bits.WREN = 0;
  6249  003CDE  94A6               	bcf	4006,2,c	;volatile
  6250                           
  6251                           ;EEPROM.c: 57: if(debug){
  6252  003CE0  505F               	movf	_debug,w,c
  6253  003CE2  1060               	iorwf	_debug+1,w,c
  6254  003CE4  B4D8               	btfsc	status,2,c
  6255  003CE6  0012               	return	
  6256                           
  6257                           ;EEPROM.c: 58: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  6258  003CE8  0E01               	movlw	1
  6259  003CEA  EC28  F028         	call	_lcdInst
  6260  003CEE  0E68               	movlw	104
  6261  003CF0  0100               	movlb	0	; () banked
  6262  003CF2  6FAE               	movwf	??_EEPROM_write& (0+255),b
  6263  003CF4  0EE4               	movlw	228
  6264  003CF6                     u8647:
  6265  003CF6  2EE8               	decfsz	wreg,f,c
  6266  003CF8  D7FE               	bra	u8647
  6267  003CFA  2FAE               	decfsz	??_EEPROM_write& (0+255),f,b
  6268  003CFC  D7FC               	bra	u8647
  6269  003CFE  F000               	nop	
  6270                           
  6271                           ;EEPROM.c: 59: lcdInst(0b10000000);;
  6272  003D00  0E80               	movlw	128
  6273  003D02  EC28  F028         	call	_lcdInst
  6274                           
  6275                           ;EEPROM.c: 60: if(EEPROM_read(address)==data){
  6276  003D06  C0AB  F080         	movff	EEPROM_write@address,EEPROM_read@address
  6277  003D0A  C0AC  F081         	movff	EEPROM_write@address+1,EEPROM_read@address+1
  6278  003D0E  ECF6  F027         	call	_EEPROM_read	;wreg free
  6279  003D12  0100               	movlb	0	; () banked
  6280  003D14  19AD               	xorwf	EEPROM_write@data& (0+255),w,b
  6281  003D16  A4D8               	btfss	status,2,c
  6282  003D18  D024               	goto	l6558
  6283                           
  6284                           ; BSR set to: 0
  6285                           ;EEPROM.c: 61: printf("(data: %u, addr: %u)", data, address);
  6286  003D1A  0E22               	movlw	low STR_66
  6287  003D1C  0100               	movlb	0	; () banked
  6288  003D1E  6F8E               	movwf	printf@f& (0+255),b
  6289  003D20  0EFB               	movlw	high STR_66
  6290  003D22  0100               	movlb	0	; () banked
  6291  003D24  6F8F               	movwf	(printf@f+1)& (0+255),b
  6292  003D26  C0AD  F090         	movff	EEPROM_write@data,?_printf+2
  6293  003D2A  0100               	movlb	0	; () banked
  6294  003D2C  6B91               	clrf	(?_printf+3)& (0+255),b
  6295  003D2E  C0AB  F092         	movff	EEPROM_write@address,?_printf+4
  6296  003D32  C0AC  F093         	movff	EEPROM_write@address+1,?_printf+5
  6297  003D36  ECE8  F00A         	call	_printf	;wreg free
  6298                           
  6299                           ;EEPROM.c: 62: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));}
      +                          ;
  6300  003D3A  0E00               	movlw	0
  6301  003D3C  0100               	movlb	0	; () banked
  6302  003D3E  6FAF               	movwf	EEPROM_write@i& (0+255),b
  6303  003D40                     l6550:
  6304                           
  6305                           ; BSR set to: 0
  6306  003D40  0E63               	movlw	99
  6307  003D42  0100               	movlb	0	; () banked
  6308  003D44  65AF               	cpfsgt	EEPROM_write@i& (0+255),b
  6309  003D46  D001               	goto	l6554
  6310  003D48  0012               	return	
  6311  003D4A                     l6554:
  6312                           
  6313                           ; BSR set to: 0
  6314  003D4A  0E68               	movlw	104
  6315  003D4C  0100               	movlb	0	; () banked
  6316  003D4E  6FAE               	movwf	??_EEPROM_write& (0+255),b
  6317  003D50  0EE4               	movlw	228
  6318  003D52                     u8657:
  6319  003D52  2EE8               	decfsz	wreg,f,c
  6320  003D54  D7FE               	bra	u8657
  6321  003D56  2FAE               	decfsz	??_EEPROM_write& (0+255),f,b
  6322  003D58  D7FC               	bra	u8657
  6323  003D5A  F000               	nop	
  6324  003D5C  0100               	movlb	0	; () banked
  6325  003D5E  2BAF               	incf	EEPROM_write@i& (0+255),f,b
  6326  003D60  D7EF               	goto	l6550
  6327  003D62                     l6558:
  6328                           
  6329                           ; BSR set to: 0
  6330                           ;EEPROM.c: 64: else{ printf("FAILED"); for(char i=0;i<100;i++){_delay((unsigned long)((1
      +                          0)*(32000000/4000.0)));}; }
  6331  003D62  0EBD               	movlw	low STR_67
  6332  003D64  0100               	movlb	0	; () banked
  6333  003D66  6F8E               	movwf	printf@f& (0+255),b
  6334  003D68  0EFF               	movlw	high STR_67
  6335  003D6A  0100               	movlb	0	; () banked
  6336  003D6C  6F8F               	movwf	(printf@f+1)& (0+255),b
  6337  003D6E  ECE8  F00A         	call	_printf	;wreg free
  6338  003D72  0E00               	movlw	0
  6339  003D74  0100               	movlb	0	; () banked
  6340  003D76  6FB0               	movwf	EEPROM_write@i_1339& (0+255),b
  6341  003D78                     l6562:
  6342                           
  6343                           ; BSR set to: 0
  6344  003D78  0E63               	movlw	99
  6345  003D7A  0100               	movlb	0	; () banked
  6346  003D7C  65B0               	cpfsgt	EEPROM_write@i_1339& (0+255),b
  6347  003D7E  D001               	goto	l6566
  6348  003D80  0012               	return	
  6349  003D82                     l6566:
  6350                           
  6351                           ; BSR set to: 0
  6352  003D82  0E68               	movlw	104
  6353  003D84  0100               	movlb	0	; () banked
  6354  003D86  6FAE               	movwf	??_EEPROM_write& (0+255),b
  6355  003D88  0EE4               	movlw	228
  6356  003D8A                     u8667:
  6357  003D8A  2EE8               	decfsz	wreg,f,c
  6358  003D8C  D7FE               	bra	u8667
  6359  003D8E  2FAE               	decfsz	??_EEPROM_write& (0+255),f,b
  6360  003D90  D7FC               	bra	u8667
  6361  003D92  F000               	nop	
  6362  003D94  0100               	movlb	0	; () banked
  6363  003D96  2BB0               	incf	EEPROM_write@i_1339& (0+255),f,b
  6364  003D98  D7EF               	goto	l6562
  6365  003D9A                     __end_of_EEPROM_write:
  6366                           	opt stack 0
  6367                           tblptru	equ	0xFF8
  6368                           tblptrh	equ	0xFF7
  6369                           tblptrl	equ	0xFF6
  6370                           tablat	equ	0xFF5
  6371                           prodh	equ	0xFF4
  6372                           prodl	equ	0xFF3
  6373                           intcon	equ	0xFF2
  6374                           intcon2	equ	0xFF1
  6375                           intcon3	equ	0xFF0
  6376                           postinc0	equ	0xFEE
  6377                           wreg	equ	0xFE8
  6378                           postdec1	equ	0xFE5
  6379                           fsr1l	equ	0xFE1
  6380                           indf2	equ	0xFDF
  6381                           postinc2	equ	0xFDE
  6382                           postdec2	equ	0xFDD
  6383                           fsr2h	equ	0xFDA
  6384                           fsr2l	equ	0xFD9
  6385                           status	equ	0xFD8
  6386                           
  6387 ;; *************** function _EEPROM_read *****************
  6388 ;; Defined at:
  6389 ;;		line 68 in file "EEPROM.c"
  6390 ;; Parameters:    Size  Location     Type
  6391 ;;  address         2    0[BANK0 ] unsigned short 
  6392 ;; Auto vars:     Size  Location     Type
  6393 ;;		None
  6394 ;; Return value:  Size  Location     Type
  6395 ;;                  1    wreg      unsigned char 
  6396 ;; Registers used:
  6397 ;;		wreg, status,2
  6398 ;; Tracked objects:
  6399 ;;		On entry : 0/0
  6400 ;;		On exit  : 0/0
  6401 ;;		Unchanged: 0/0
  6402 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6403 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6404 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6405 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6406 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6407 ;;Total ram usage:        2 bytes
  6408 ;; Hardware stack levels used:    1
  6409 ;; Hardware stack levels required when called:    7
  6410 ;; This function calls:
  6411 ;;		Nothing
  6412 ;; This function is called by:
  6413 ;;		_Loading
  6414 ;;		_EEPROM_write
  6415 ;;		_logRun
  6416 ;; This function uses a non-reentrant model
  6417 ;;
  6418                           
  6419                           	psect	text15
  6420  004FEC                     __ptext15:
  6421                           	opt stack 0
  6422  004FEC                     _EEPROM_read:
  6423                           	opt stack 20
  6424                           
  6425                           ;EEPROM.c: 70: EEADRH = (unsigned char)(address >> 8);
  6426                           
  6427                           ;incstack = 0
  6428  004FEC  0100               	movlb	0	; () banked
  6429  004FEE  5181               	movf	(EEPROM_read@address+1)& (0+255),w,b
  6430  004FF0  6EAA               	movwf	4010,c	;volatile
  6431                           
  6432                           ; BSR set to: 0
  6433                           ;EEPROM.c: 71: EEADR = (unsigned char)address;
  6434  004FF2  C080  FFA9         	movff	EEPROM_read@address,4009	;volatile
  6435                           
  6436                           ; BSR set to: 0
  6437                           ;EEPROM.c: 73: EECON1bits.EEPGD = 0;
  6438  004FF6  9EA6               	bcf	4006,7,c	;volatile
  6439                           
  6440                           ; BSR set to: 0
  6441                           ;EEPROM.c: 74: EECON1bits.CFGS = 0;
  6442  004FF8  9CA6               	bcf	4006,6,c	;volatile
  6443                           
  6444                           ; BSR set to: 0
  6445                           ;EEPROM.c: 75: EECON1bits.RD = 1;
  6446  004FFA  80A6               	bsf	4006,0,c	;volatile
  6447  004FFC                     l1001:
  6448  004FFC  B0A6               	btfsc	4006,0,c	;volatile
  6449  004FFE  D7FE               	goto	l1001
  6450                           
  6451                           ;EEPROM.c: 81: return EEDATA;
  6452  005000  50A8               	movf	4008,w,c	;volatile
  6453  005002  0012               	return	
  6454  005004                     __end_of_EEPROM_read:
  6455                           	opt stack 0
  6456                           tblptru	equ	0xFF8
  6457                           tblptrh	equ	0xFF7
  6458                           tblptrl	equ	0xFF6
  6459                           tablat	equ	0xFF5
  6460                           prodh	equ	0xFF4
  6461                           prodl	equ	0xFF3
  6462                           intcon	equ	0xFF2
  6463                           intcon2	equ	0xFF1
  6464                           intcon3	equ	0xFF0
  6465                           postinc0	equ	0xFEE
  6466                           wreg	equ	0xFE8
  6467                           postdec1	equ	0xFE5
  6468                           fsr1l	equ	0xFE1
  6469                           indf2	equ	0xFDF
  6470                           postinc2	equ	0xFDE
  6471                           postdec2	equ	0xFDD
  6472                           fsr2h	equ	0xFDA
  6473                           fsr2l	equ	0xFD9
  6474                           status	equ	0xFD8
  6475                           
  6476 ;; *************** function _initUI *****************
  6477 ;; Defined at:
  6478 ;;		line 62 in file "UI.c"
  6479 ;; Parameters:    Size  Location     Type
  6480 ;;		None
  6481 ;; Auto vars:     Size  Location     Type
  6482 ;;		None
  6483 ;; Return value:  Size  Location     Type
  6484 ;;                  1    wreg      void 
  6485 ;; Registers used:
  6486 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6487 ;; Tracked objects:
  6488 ;;		On entry : 0/0
  6489 ;;		On exit  : 0/0
  6490 ;;		Unchanged: 0/0
  6491 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6492 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6493 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6494 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6495 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6496 ;;Total ram usage:        0 bytes
  6497 ;; Hardware stack levels used:    1
  6498 ;; Hardware stack levels required when called:   12
  6499 ;; This function calls:
  6500 ;;		_change_state_to_menu_start
  6501 ;;		_loadRTC
  6502 ;; This function is called by:
  6503 ;;		_main
  6504 ;; This function uses a non-reentrant model
  6505 ;;
  6506                           
  6507                           	psect	text16
  6508  004DA4                     __ptext16:
  6509                           	opt stack 0
  6510  004DA4                     _initUI:
  6511                           	opt stack 18
  6512                           
  6513                           ;UI.c: 63: (INTCONbits.GIE = 1);
  6514                           
  6515                           ;incstack = 0
  6516  004DA4  8EF2               	bsf	intcon,7,c	;volatile
  6517                           
  6518                           ;UI.c: 64: machine_state = UI_state;
  6519  004DA6  0E00               	movlw	0
  6520  004DA8  0100               	movlb	0	; () banked
  6521  004DAA  6FFC               	movwf	_machine_state& (0+255),b
  6522                           
  6523                           ;UI.c: 65: logstate = 0;
  6524  004DAC  0E00               	movlw	0
  6525  004DAE  0100               	movlb	0	; () banked
  6526  004DB0  6FF7               	movwf	(_logstate+1)& (0+255),b
  6527  004DB2  0E00               	movlw	0
  6528  004DB4  6FF6               	movwf	_logstate& (0+255),b
  6529                           
  6530                           ; BSR set to: 0
  6531                           ;UI.c: 67: if(RTCflag){
  6532  004DB6  0100               	movlb	0	; () banked
  6533  004DB8  51E2               	movf	_RTCflag& (0+255),w,b
  6534  004DBA  0100               	movlb	0	; () banked
  6535  004DBC  11E3               	iorwf	(_RTCflag+1)& (0+255),w,b
  6536  004DBE  A4D8               	btfss	status,2,c
  6537                           
  6538                           ; BSR set to: 0
  6539                           ;UI.c: 68: loadRTC();
  6540  004DC0  ECFB  F020         	call	_loadRTC	;wreg free
  6541                           
  6542                           ;UI.c: 69: }
  6543                           ;UI.c: 71: change_state_to_menu_start();
  6544  004DC4  EC17  F027         	call	_change_state_to_menu_start	;wreg free
  6545                           
  6546                           ;UI.c: 72: firstboot = 1;
  6547  004DC8  0E00               	movlw	0
  6548  004DCA  6E70               	movwf	_firstboot+1,c
  6549  004DCC  0E01               	movlw	1
  6550  004DCE  6E6F               	movwf	_firstboot,c
  6551  004DD0  0012               	return		;funcret
  6552  004DD2                     __end_of_initUI:
  6553                           	opt stack 0
  6554                           tblptru	equ	0xFF8
  6555                           tblptrh	equ	0xFF7
  6556                           tblptrl	equ	0xFF6
  6557                           tablat	equ	0xFF5
  6558                           prodh	equ	0xFF4
  6559                           prodl	equ	0xFF3
  6560                           intcon	equ	0xFF2
  6561                           intcon2	equ	0xFF1
  6562                           intcon3	equ	0xFF0
  6563                           postinc0	equ	0xFEE
  6564                           wreg	equ	0xFE8
  6565                           postdec1	equ	0xFE5
  6566                           fsr1l	equ	0xFE1
  6567                           indf2	equ	0xFDF
  6568                           postinc2	equ	0xFDE
  6569                           postdec2	equ	0xFDD
  6570                           fsr2h	equ	0xFDA
  6571                           fsr2l	equ	0xFD9
  6572                           status	equ	0xFD8
  6573                           
  6574 ;; *************** function _loadRTC *****************
  6575 ;; Defined at:
  6576 ;;		line 28 in file "RTC.c"
  6577 ;; Parameters:    Size  Location     Type
  6578 ;;		None
  6579 ;; Auto vars:     Size  Location     Type
  6580 ;;  i               2   22[BANK0 ] int 
  6581 ;; Return value:  Size  Location     Type
  6582 ;;                  1    wreg      void 
  6583 ;; Registers used:
  6584 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6585 ;; Tracked objects:
  6586 ;;		On entry : 0/0
  6587 ;;		On exit  : 0/0
  6588 ;;		Unchanged: 0/0
  6589 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6590 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6591 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6592 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6593 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6594 ;;Total ram usage:        3 bytes
  6595 ;; Hardware stack levels used:    1
  6596 ;; Hardware stack levels required when called:    9
  6597 ;; This function calls:
  6598 ;;		_I2C_Master_Init
  6599 ;;		_I2C_Master_Start
  6600 ;;		_I2C_Master_Stop
  6601 ;;		_I2C_Master_Write
  6602 ;; This function is called by:
  6603 ;;		_initUI
  6604 ;; This function uses a non-reentrant model
  6605 ;;
  6606                           
  6607                           	psect	text17
  6608  0041F6                     __ptext17:
  6609                           	opt stack 0
  6610  0041F6                     _loadRTC:
  6611                           	opt stack 20
  6612                           
  6613                           ;RTC.c: 30: I2C_Master_Init(10000);
  6614                           
  6615                           ;incstack = 0
  6616  0041F6  0E10               	movlw	16
  6617  0041F8  0100               	movlb	0	; () banked
  6618  0041FA  6F8D               	movwf	I2C_Master_Init@c& (0+255),b
  6619  0041FC  0E27               	movlw	39
  6620  0041FE  6F8E               	movwf	(I2C_Master_Init@c+1)& (0+255),b
  6621  004200  0E00               	movlw	0
  6622  004202  6F8F               	movwf	(I2C_Master_Init@c+2)& (0+255),b
  6623  004204  0E00               	movlw	0
  6624  004206  6F90               	movwf	(I2C_Master_Init@c+3)& (0+255),b
  6625  004208  EC96  F023         	call	_I2C_Master_Init	;wreg free
  6626                           
  6627                           ;RTC.c: 32: (INTCONbits.GIE = 0);
  6628  00420C  9EF2               	bcf	intcon,7,c	;volatile
  6629                           
  6630                           ;RTC.c: 34: I2C_Master_Start();
  6631  00420E  EC4E  F028         	call	_I2C_Master_Start	;wreg free
  6632                           
  6633                           ;RTC.c: 35: I2C_Master_Write(0b11010000);
  6634  004212  0E00               	movlw	0
  6635  004214  0100               	movlb	0	; () banked
  6636  004216  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  6637  004218  0ED0               	movlw	208
  6638  00421A  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  6639  00421C  EC3C  F028         	call	_I2C_Master_Write	;wreg free
  6640                           
  6641                           ;RTC.c: 36: I2C_Master_Write(0x00);
  6642  004220  0E00               	movlw	0
  6643  004222  0100               	movlb	0	; () banked
  6644  004224  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  6645  004226  0E00               	movlw	0
  6646  004228  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  6647  00422A  EC3C  F028         	call	_I2C_Master_Write	;wreg free
  6648                           
  6649                           ;RTC.c: 37: for(int i = 0; i<7; i++){
  6650  00422E  0E00               	movlw	0
  6651  004230  0100               	movlb	0	; () banked
  6652  004232  6F97               	movwf	(loadRTC@i+1)& (0+255),b
  6653  004234  0E00               	movlw	0
  6654  004236  6F96               	movwf	loadRTC@i& (0+255),b
  6655  004238                     l6704:
  6656                           
  6657                           ; BSR set to: 0
  6658  004238  0100               	movlb	0	; () banked
  6659  00423A  BF97               	btfsc	(loadRTC@i+1)& (0+255),7,b
  6660  00423C  D008               	goto	l6708
  6661  00423E  0100               	movlb	0	; () banked
  6662  004240  5197               	movf	(loadRTC@i+1)& (0+255),w,b
  6663  004242  E11B               	bnz	l6714
  6664  004244  0E07               	movlw	7
  6665  004246  0100               	movlb	0	; () banked
  6666  004248  5D96               	subwf	loadRTC@i& (0+255),w,b
  6667  00424A  B0D8               	btfsc	status,0,c
  6668  00424C  D016               	goto	l6714
  6669  00424E                     l6708:
  6670                           
  6671                           ; BSR set to: 0
  6672                           ;RTC.c: 38: I2C_Master_Write(time[i]);
  6673  00424E  0E24               	movlw	low _time
  6674  004250  0100               	movlb	0	; () banked
  6675  004252  2596               	addwf	loadRTC@i& (0+255),w,b
  6676  004254  6ED9               	movwf	fsr2l,c
  6677  004256  0E01               	movlw	high _time
  6678  004258  0100               	movlb	0	; () banked
  6679  00425A  2197               	addwfc	(loadRTC@i+1)& (0+255),w,b
  6680  00425C  6EDA               	movwf	fsr2h,c
  6681  00425E  50DF               	movf	indf2,w,c
  6682  004260  0100               	movlb	0	; () banked
  6683  004262  6F95               	movwf	??_loadRTC& (0+255),b
  6684  004264  0100               	movlb	0	; () banked
  6685  004266  5195               	movf	??_loadRTC& (0+255),w,b
  6686  004268  0100               	movlb	0	; () banked
  6687  00426A  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  6688  00426C  6B82               	clrf	(I2C_Master_Write@d+1)& (0+255),b
  6689  00426E  EC3C  F028         	call	_I2C_Master_Write	;wreg free
  6690  004272  0100               	movlb	0	; () banked
  6691  004274  4B96               	infsnz	loadRTC@i& (0+255),f,b
  6692  004276  2B97               	incf	(loadRTC@i+1)& (0+255),f,b
  6693  004278  D7DF               	goto	l6704
  6694  00427A                     l6714:
  6695                           
  6696                           ; BSR set to: 0
  6697                           ;RTC.c: 39: }
  6698                           ;RTC.c: 40: I2C_Master_Stop();
  6699  00427A  EC4A  F028         	call	_I2C_Master_Stop	;wreg free
  6700                           
  6701                           ;RTC.c: 41: (INTCONbits.GIE = 1);
  6702  00427E  8EF2               	bsf	intcon,7,c	;volatile
  6703  004280  0012               	return		;funcret
  6704  004282                     __end_of_loadRTC:
  6705                           	opt stack 0
  6706                           tblptru	equ	0xFF8
  6707                           tblptrh	equ	0xFF7
  6708                           tblptrl	equ	0xFF6
  6709                           tablat	equ	0xFF5
  6710                           prodh	equ	0xFF4
  6711                           prodl	equ	0xFF3
  6712                           intcon	equ	0xFF2
  6713                           intcon2	equ	0xFF1
  6714                           intcon3	equ	0xFF0
  6715                           postinc0	equ	0xFEE
  6716                           wreg	equ	0xFE8
  6717                           postdec1	equ	0xFE5
  6718                           fsr1l	equ	0xFE1
  6719                           indf2	equ	0xFDF
  6720                           postinc2	equ	0xFDE
  6721                           postdec2	equ	0xFDD
  6722                           fsr2h	equ	0xFDA
  6723                           fsr2l	equ	0xFD9
  6724                           status	equ	0xFD8
  6725                           
  6726 ;; *************** function _I2C_Master_Init *****************
  6727 ;; Defined at:
  6728 ;;		line 15 in file "I2C.c"
  6729 ;; Parameters:    Size  Location     Type
  6730 ;;  c               4   13[BANK0 ] const unsigned long 
  6731 ;; Auto vars:     Size  Location     Type
  6732 ;;		None
  6733 ;; Return value:  Size  Location     Type
  6734 ;;                  1    wreg      void 
  6735 ;; Registers used:
  6736 ;;		wreg, status,2, status,0, cstack
  6737 ;; Tracked objects:
  6738 ;;		On entry : 0/0
  6739 ;;		On exit  : 0/0
  6740 ;;		Unchanged: 0/0
  6741 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6742 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6743 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6744 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6745 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6746 ;;Total ram usage:        8 bytes
  6747 ;; Hardware stack levels used:    1
  6748 ;; Hardware stack levels required when called:    8
  6749 ;; This function calls:
  6750 ;;		___lldiv
  6751 ;; This function is called by:
  6752 ;;		_main
  6753 ;;		_loadRTC
  6754 ;; This function uses a non-reentrant model
  6755 ;;
  6756                           
  6757                           	psect	text18
  6758  00472C                     __ptext18:
  6759                           	opt stack 0
  6760  00472C                     _I2C_Master_Init:
  6761                           	opt stack 20
  6762                           
  6763                           ;I2C.c: 18: SSPSTAT = 0b00000000;
  6764                           
  6765                           ;incstack = 0
  6766  00472C  0E00               	movlw	0
  6767  00472E  6EC7               	movwf	4039,c	;volatile
  6768                           
  6769                           ;I2C.c: 19: SSPCON1 = 0b00101000;
  6770  004730  0E28               	movlw	40
  6771  004732  6EC6               	movwf	4038,c	;volatile
  6772                           
  6773                           ;I2C.c: 20: SSPCON2 = 0b00000000;
  6774  004734  0E00               	movlw	0
  6775  004736  6EC5               	movwf	4037,c	;volatile
  6776                           
  6777                           ;I2C.c: 21: SSPADD = (32000000/(4*c))-1;
  6778  004738  0E00               	movlw	0
  6779  00473A  0100               	movlb	0	; () banked
  6780  00473C  6F80               	movwf	___lldiv@dividend& (0+255),b
  6781  00473E  0E48               	movlw	72
  6782  004740  6F81               	movwf	(___lldiv@dividend+1)& (0+255),b
  6783  004742  0EE8               	movlw	232
  6784  004744  6F82               	movwf	(___lldiv@dividend+2)& (0+255),b
  6785  004746  0E01               	movlw	1
  6786  004748  6F83               	movwf	(___lldiv@dividend+3)& (0+255),b
  6787  00474A  C08D  F091         	movff	I2C_Master_Init@c,??_I2C_Master_Init
  6788  00474E  C08E  F092         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
  6789  004752  C08F  F093         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
  6790  004756  C090  F094         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
  6791  00475A  0E02               	movlw	2
  6792  00475C                     u5065:
  6793  00475C  90D8               	bcf	status,0,c
  6794  00475E  0100               	movlb	0	; () banked
  6795  004760  3791               	rlcf	??_I2C_Master_Init& (0+255),f,b
  6796  004762  3792               	rlcf	(??_I2C_Master_Init+1)& (0+255),f,b
  6797  004764  3793               	rlcf	(??_I2C_Master_Init+2)& (0+255),f,b
  6798  004766  3794               	rlcf	(??_I2C_Master_Init+3)& (0+255),f,b
  6799  004768  2EE8               	decfsz	wreg,f,c
  6800  00476A  D7F8               	goto	u5065
  6801  00476C  C091  F084         	movff	??_I2C_Master_Init,___lldiv@divisor
  6802  004770  C092  F085         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  6803  004774  C093  F086         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  6804  004778  C094  F087         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  6805  00477C  ECF7  F01F         	call	___lldiv	;wreg free
  6806  004780  0100               	movlb	0	; () banked
  6807  004782  0580               	decf	?___lldiv& (0+255),w,b
  6808  004784  6EC8               	movwf	4040,c	;volatile
  6809                           
  6810                           ; BSR set to: 0
  6811                           ;I2C.c: 22: TRISC3 = 1;
  6812  004786  8694               	bsf	3988,3,c	;volatile
  6813                           
  6814                           ; BSR set to: 0
  6815                           ;I2C.c: 23: TRISC4 = 1;
  6816  004788  8894               	bsf	3988,4,c	;volatile
  6817                           
  6818                           ; BSR set to: 0
  6819  00478A  0012               	return		;funcret
  6820  00478C                     __end_of_I2C_Master_Init:
  6821                           	opt stack 0
  6822                           tblptru	equ	0xFF8
  6823                           tblptrh	equ	0xFF7
  6824                           tblptrl	equ	0xFF6
  6825                           tablat	equ	0xFF5
  6826                           prodh	equ	0xFF4
  6827                           prodl	equ	0xFF3
  6828                           intcon	equ	0xFF2
  6829                           intcon2	equ	0xFF1
  6830                           intcon3	equ	0xFF0
  6831                           postinc0	equ	0xFEE
  6832                           wreg	equ	0xFE8
  6833                           postdec1	equ	0xFE5
  6834                           fsr1l	equ	0xFE1
  6835                           indf2	equ	0xFDF
  6836                           postinc2	equ	0xFDE
  6837                           postdec2	equ	0xFDD
  6838                           fsr2h	equ	0xFDA
  6839                           fsr2l	equ	0xFD9
  6840                           status	equ	0xFD8
  6841                           
  6842 ;; *************** function ___lldiv *****************
  6843 ;; Defined at:
  6844 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lldiv.c"
  6845 ;; Parameters:    Size  Location     Type
  6846 ;;  dividend        4    0[BANK0 ] unsigned long 
  6847 ;;  divisor         4    4[BANK0 ] unsigned long 
  6848 ;; Auto vars:     Size  Location     Type
  6849 ;;  quotient        4    8[BANK0 ] unsigned long 
  6850 ;;  counter         1   12[BANK0 ] unsigned char 
  6851 ;; Return value:  Size  Location     Type
  6852 ;;                  4    0[BANK0 ] unsigned long 
  6853 ;; Registers used:
  6854 ;;		wreg, status,2, status,0
  6855 ;; Tracked objects:
  6856 ;;		On entry : 0/0
  6857 ;;		On exit  : 0/0
  6858 ;;		Unchanged: 0/0
  6859 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6860 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6861 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6862 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6863 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6864 ;;Total ram usage:       13 bytes
  6865 ;; Hardware stack levels used:    1
  6866 ;; Hardware stack levels required when called:    7
  6867 ;; This function calls:
  6868 ;;		Nothing
  6869 ;; This function is called by:
  6870 ;;		_I2C_Master_Init
  6871 ;; This function uses a non-reentrant model
  6872 ;;
  6873                           
  6874                           	psect	text19
  6875  003FEE                     __ptext19:
  6876                           	opt stack 0
  6877  003FEE                     ___lldiv:
  6878                           	opt stack 20
  6879                           
  6880                           ; BSR set to: 0
  6881                           ;incstack = 0
  6882  003FEE  0E00               	movlw	0
  6883  003FF0  0100               	movlb	0	; () banked
  6884  003FF2  6F88               	movwf	___lldiv@quotient& (0+255),b
  6885  003FF4  0E00               	movlw	0
  6886  003FF6  6F89               	movwf	(___lldiv@quotient+1)& (0+255),b
  6887  003FF8  0E00               	movlw	0
  6888  003FFA  6F8A               	movwf	(___lldiv@quotient+2)& (0+255),b
  6889  003FFC  0E00               	movlw	0
  6890  003FFE  6F8B               	movwf	(___lldiv@quotient+3)& (0+255),b
  6891                           
  6892                           ; BSR set to: 0
  6893  004000  0100               	movlb	0	; () banked
  6894  004002  5184               	movf	___lldiv@divisor& (0+255),w,b
  6895  004004  0100               	movlb	0	; () banked
  6896  004006  1185               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
  6897  004008  0100               	movlb	0	; () banked
  6898  00400A  1186               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
  6899  00400C  0100               	movlb	0	; () banked
  6900  00400E  1187               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
  6901  004010  B4D8               	btfsc	status,2,c
  6902  004012  D042               	goto	l1760
  6903                           
  6904                           ; BSR set to: 0
  6905  004014  0E01               	movlw	1
  6906  004016  0100               	movlb	0	; () banked
  6907  004018  6F8C               	movwf	___lldiv@counter& (0+255),b
  6908  00401A  D008               	goto	l6128
  6909  00401C                     l6126:
  6910                           
  6911                           ; BSR set to: 0
  6912  00401C  0100               	movlb	0	; () banked
  6913  00401E  90D8               	bcf	status,0,c
  6914  004020  3784               	rlcf	___lldiv@divisor& (0+255),f,b
  6915  004022  3785               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
  6916  004024  3786               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
  6917  004026  3787               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
  6918  004028  0100               	movlb	0	; () banked
  6919  00402A  2B8C               	incf	___lldiv@counter& (0+255),f,b
  6920  00402C                     l6128:
  6921                           
  6922                           ; BSR set to: 0
  6923  00402C  0100               	movlb	0	; () banked
  6924  00402E  AF87               	btfss	(___lldiv@divisor+3)& (0+255),7,b
  6925  004030  D7F5               	goto	l6126
  6926  004032                     l6130:
  6927                           
  6928                           ; BSR set to: 0
  6929  004032  0100               	movlb	0	; () banked
  6930  004034  90D8               	bcf	status,0,c
  6931  004036  3788               	rlcf	___lldiv@quotient& (0+255),f,b
  6932  004038  3789               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
  6933  00403A  378A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
  6934  00403C  378B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
  6935                           
  6936                           ; BSR set to: 0
  6937  00403E  0100               	movlb	0	; () banked
  6938  004040  5184               	movf	___lldiv@divisor& (0+255),w,b
  6939  004042  0100               	movlb	0	; () banked
  6940  004044  5D80               	subwf	___lldiv@dividend& (0+255),w,b
  6941  004046  0100               	movlb	0	; () banked
  6942  004048  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  6943  00404A  0100               	movlb	0	; () banked
  6944  00404C  5981               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
  6945  00404E  0100               	movlb	0	; () banked
  6946  004050  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  6947  004052  0100               	movlb	0	; () banked
  6948  004054  5982               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
  6949  004056  0100               	movlb	0	; () banked
  6950  004058  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  6951  00405A  0100               	movlb	0	; () banked
  6952  00405C  5983               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
  6953  00405E  A0D8               	btfss	status,0,c
  6954  004060  D012               	goto	l6138
  6955                           
  6956                           ; BSR set to: 0
  6957  004062  0100               	movlb	0	; () banked
  6958  004064  5184               	movf	___lldiv@divisor& (0+255),w,b
  6959  004066  0100               	movlb	0	; () banked
  6960  004068  5F80               	subwf	___lldiv@dividend& (0+255),f,b
  6961  00406A  0100               	movlb	0	; () banked
  6962  00406C  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  6963  00406E  0100               	movlb	0	; () banked
  6964  004070  5B81               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
  6965  004072  0100               	movlb	0	; () banked
  6966  004074  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  6967  004076  0100               	movlb	0	; () banked
  6968  004078  5B82               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
  6969  00407A  0100               	movlb	0	; () banked
  6970  00407C  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  6971  00407E  0100               	movlb	0	; () banked
  6972  004080  5B83               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
  6973                           
  6974                           ; BSR set to: 0
  6975  004082  0100               	movlb	0	; () banked
  6976  004084  8188               	bsf	___lldiv@quotient& (0+255),0,b
  6977  004086                     l6138:
  6978                           
  6979                           ; BSR set to: 0
  6980  004086  0100               	movlb	0	; () banked
  6981  004088  90D8               	bcf	status,0,c
  6982  00408A  3387               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
  6983  00408C  3386               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
  6984  00408E  3385               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
  6985  004090  3384               	rrcf	___lldiv@divisor& (0+255),f,b
  6986                           
  6987                           ; BSR set to: 0
  6988  004092  0100               	movlb	0	; () banked
  6989  004094  2F8C               	decfsz	___lldiv@counter& (0+255),f,b
  6990  004096  D7CD               	goto	l6130
  6991  004098                     l1760:
  6992                           
  6993                           ; BSR set to: 0
  6994  004098  C088  F080         	movff	___lldiv@quotient,?___lldiv
  6995  00409C  C089  F081         	movff	___lldiv@quotient+1,?___lldiv+1
  6996  0040A0  C08A  F082         	movff	___lldiv@quotient+2,?___lldiv+2
  6997  0040A4  C08B  F083         	movff	___lldiv@quotient+3,?___lldiv+3
  6998                           
  6999                           ; BSR set to: 0
  7000  0040A8  0012               	return		;funcret
  7001  0040AA                     __end_of___lldiv:
  7002                           	opt stack 0
  7003                           tblptru	equ	0xFF8
  7004                           tblptrh	equ	0xFF7
  7005                           tblptrl	equ	0xFF6
  7006                           tablat	equ	0xFF5
  7007                           prodh	equ	0xFF4
  7008                           prodl	equ	0xFF3
  7009                           intcon	equ	0xFF2
  7010                           intcon2	equ	0xFF1
  7011                           intcon3	equ	0xFF0
  7012                           postinc0	equ	0xFEE
  7013                           wreg	equ	0xFE8
  7014                           postdec1	equ	0xFE5
  7015                           fsr1l	equ	0xFE1
  7016                           indf2	equ	0xFDF
  7017                           postinc2	equ	0xFDE
  7018                           postdec2	equ	0xFDD
  7019                           fsr2h	equ	0xFDA
  7020                           fsr2l	equ	0xFD9
  7021                           status	equ	0xFD8
  7022                           
  7023 ;; *************** function _change_state_to_menu_start *****************
  7024 ;; Defined at:
  7025 ;;		line 474 in file "UI.c"
  7026 ;; Parameters:    Size  Location     Type
  7027 ;;		None
  7028 ;; Auto vars:     Size  Location     Type
  7029 ;;		None
  7030 ;; Return value:  Size  Location     Type
  7031 ;;                  1    wreg      void 
  7032 ;; Registers used:
  7033 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7034 ;; Tracked objects:
  7035 ;;		On entry : 0/0
  7036 ;;		On exit  : 0/0
  7037 ;;		Unchanged: 0/0
  7038 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7039 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7040 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7041 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7042 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7043 ;;Total ram usage:        0 bytes
  7044 ;; Hardware stack levels used:    1
  7045 ;; Hardware stack levels required when called:   11
  7046 ;; This function calls:
  7047 ;;		_lcdInst
  7048 ;;		_printRTC
  7049 ;;		_printf
  7050 ;; This function is called by:
  7051 ;;		_initUI
  7052 ;; This function uses a non-reentrant model
  7053 ;;
  7054                           
  7055                           	psect	text20
  7056  004E2E                     __ptext20:
  7057                           	opt stack 0
  7058  004E2E                     _change_state_to_menu_start:
  7059                           	opt stack 18
  7060                           
  7061                           ;UI.c: 475: cur_state = 0;
  7062                           
  7063                           ; BSR set to: 0
  7064                           ;incstack = 0
  7065  004E2E  0E00               	movlw	0
  7066  004E30  0100               	movlb	0	; () banked
  7067  004E32  6FE7               	movwf	(_cur_state+1)& (0+255),b
  7068  004E34  0E00               	movlw	0
  7069  004E36  6FE6               	movwf	_cur_state& (0+255),b
  7070                           
  7071                           ; BSR set to: 0
  7072                           ;UI.c: 477: lcdInst(0b10000000);;
  7073  004E38  0E80               	movlw	128
  7074  004E3A  EC28  F028         	call	_lcdInst
  7075                           
  7076                           ;UI.c: 478: printRTC();
  7077  004E3E  ECFC  F011         	call	_printRTC	;wreg free
  7078                           
  7079                           ;UI.c: 479: lcdInst(0b11000000);;
  7080  004E42  0EC0               	movlw	192
  7081  004E44  EC28  F028         	call	_lcdInst
  7082                           
  7083                           ;UI.c: 480: printf("PUSH TO CONTINUE");
  7084  004E48  0EF7               	movlw	low STR_30
  7085  004E4A  0100               	movlb	0	; () banked
  7086  004E4C  6F8E               	movwf	printf@f& (0+255),b
  7087  004E4E  0EFD               	movlw	high STR_30
  7088  004E50  0100               	movlb	0	; () banked
  7089  004E52  6F8F               	movwf	(printf@f+1)& (0+255),b
  7090  004E54  ECE8  F00A         	call	_printf	;wreg free
  7091  004E58  0012               	return		;funcret
  7092  004E5A                     __end_of_change_state_to_menu_start:
  7093                           	opt stack 0
  7094                           tblptru	equ	0xFF8
  7095                           tblptrh	equ	0xFF7
  7096                           tblptrl	equ	0xFF6
  7097                           tablat	equ	0xFF5
  7098                           prodh	equ	0xFF4
  7099                           prodl	equ	0xFF3
  7100                           intcon	equ	0xFF2
  7101                           intcon2	equ	0xFF1
  7102                           intcon3	equ	0xFF0
  7103                           postinc0	equ	0xFEE
  7104                           wreg	equ	0xFE8
  7105                           postdec1	equ	0xFE5
  7106                           fsr1l	equ	0xFE1
  7107                           indf2	equ	0xFDF
  7108                           postinc2	equ	0xFDE
  7109                           postdec2	equ	0xFDD
  7110                           fsr2h	equ	0xFDA
  7111                           fsr2l	equ	0xFD9
  7112                           status	equ	0xFD8
  7113                           
  7114 ;; *************** function _initTime *****************
  7115 ;; Defined at:
  7116 ;;		line 17 in file "RTC.c"
  7117 ;; Parameters:    Size  Location     Type
  7118 ;;  s               1    wreg     unsigned char 
  7119 ;;  m               1    0[BANK0 ] unsigned char 
  7120 ;;  h               1    1[BANK0 ] unsigned char 
  7121 ;;  w               1    2[BANK0 ] unsigned char 
  7122 ;;  DD              1    3[BANK0 ] unsigned char 
  7123 ;;  MM              1    4[BANK0 ] unsigned char 
  7124 ;;  YY              1    5[BANK0 ] unsigned char 
  7125 ;; Auto vars:     Size  Location     Type
  7126 ;;  s               1    6[BANK0 ] unsigned char 
  7127 ;; Return value:  Size  Location     Type
  7128 ;;                  1    wreg      void 
  7129 ;; Registers used:
  7130 ;;		wreg
  7131 ;; Tracked objects:
  7132 ;;		On entry : 0/0
  7133 ;;		On exit  : 0/0
  7134 ;;		Unchanged: 0/0
  7135 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7136 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7137 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7138 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7139 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7140 ;;Total ram usage:        7 bytes
  7141 ;; Hardware stack levels used:    1
  7142 ;; Hardware stack levels required when called:    7
  7143 ;; This function calls:
  7144 ;;		Nothing
  7145 ;; This function is called by:
  7146 ;;		_main
  7147 ;; This function uses a non-reentrant model
  7148 ;;
  7149                           
  7150                           	psect	text21
  7151  004F92                     __ptext21:
  7152                           	opt stack 0
  7153  004F92                     _initTime:
  7154                           	opt stack 23
  7155                           
  7156                           ;incstack = 0
  7157                           ;initTime@s stored from wreg
  7158  004F92  0100               	movlb	0	; () banked
  7159  004F94  6F86               	movwf	initTime@s& (0+255),b
  7160                           
  7161                           ;RTC.c: 19: time[0] = s;
  7162  004F96  C086  F124         	movff	initTime@s,_time
  7163                           
  7164                           ;RTC.c: 20: time[1] = m;
  7165  004F9A  C080  F125         	movff	initTime@m,_time+1
  7166                           
  7167                           ;RTC.c: 21: time[2] = h;
  7168  004F9E  C081  F126         	movff	initTime@h,_time+2
  7169                           
  7170                           ;RTC.c: 22: time[3] = w;
  7171  004FA2  C082  F127         	movff	initTime@w,_time+3
  7172                           
  7173                           ;RTC.c: 23: time[4] = DD;
  7174  004FA6  C083  F128         	movff	initTime@DD,_time+4
  7175                           
  7176                           ;RTC.c: 24: time[5] = MM;
  7177  004FAA  C084  F129         	movff	initTime@MM,_time+5
  7178                           
  7179                           ;RTC.c: 25: time[6] = YY;
  7180  004FAE  C085  F12A         	movff	initTime@YY,_time+6
  7181  004FB2  0012               	return		;funcret
  7182  004FB4                     __end_of_initTime:
  7183                           	opt stack 0
  7184                           tblptru	equ	0xFF8
  7185                           tblptrh	equ	0xFF7
  7186                           tblptrl	equ	0xFF6
  7187                           tablat	equ	0xFF5
  7188                           prodh	equ	0xFF4
  7189                           prodl	equ	0xFF3
  7190                           intcon	equ	0xFF2
  7191                           intcon2	equ	0xFF1
  7192                           intcon3	equ	0xFF0
  7193                           postinc0	equ	0xFEE
  7194                           wreg	equ	0xFE8
  7195                           postdec1	equ	0xFE5
  7196                           fsr1l	equ	0xFE1
  7197                           indf2	equ	0xFDF
  7198                           postinc2	equ	0xFDE
  7199                           postdec2	equ	0xFDD
  7200                           fsr2h	equ	0xFDA
  7201                           fsr2l	equ	0xFD9
  7202                           status	equ	0xFD8
  7203                           
  7204 ;; *************** function _initLCD *****************
  7205 ;; Defined at:
  7206 ;;		line 48 in file "lcd.c"
  7207 ;; Parameters:    Size  Location     Type
  7208 ;;		None
  7209 ;; Auto vars:     Size  Location     Type
  7210 ;;		None
  7211 ;; Return value:  Size  Location     Type
  7212 ;;                  1    wreg      void 
  7213 ;; Registers used:
  7214 ;;		wreg, status,2, status,0, cstack
  7215 ;; Tracked objects:
  7216 ;;		On entry : 0/0
  7217 ;;		On exit  : 0/0
  7218 ;;		Unchanged: 0/0
  7219 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7220 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7221 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7222 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7223 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7224 ;;Total ram usage:        1 bytes
  7225 ;; Hardware stack levels used:    1
  7226 ;; Hardware stack levels required when called:    9
  7227 ;; This function calls:
  7228 ;;		_lcdInst
  7229 ;; This function is called by:
  7230 ;;		_main
  7231 ;; This function uses a non-reentrant model
  7232 ;;
  7233                           
  7234                           	psect	text22
  7235  004A2C                     __ptext22:
  7236                           	opt stack 0
  7237  004A2C                     _initLCD:
  7238                           	opt stack 21
  7239                           
  7240                           ;lcd.c: 49: _delay((unsigned long)((15)*(32000000/4000.0)));
  7241                           
  7242                           ;incstack = 0
  7243  004A2C  0E9C               	movlw	156
  7244  004A2E  0100               	movlb	0	; () banked
  7245  004A30  6F83               	movwf	??_initLCD& (0+255),b
  7246  004A32  0ED7               	movlw	215
  7247  004A34                     u8677:
  7248  004A34  2EE8               	decfsz	wreg,f,c
  7249  004A36  D7FE               	bra	u8677
  7250  004A38  2F83               	decfsz	??_initLCD& (0+255),f,b
  7251  004A3A  D7FC               	bra	u8677
  7252                           
  7253                           ;lcd.c: 50: lcdInst(0b00110011);
  7254  004A3C  0E33               	movlw	51
  7255  004A3E  EC28  F028         	call	_lcdInst
  7256                           
  7257                           ;lcd.c: 51: lcdInst(0b00110010);
  7258  004A42  0E32               	movlw	50
  7259  004A44  EC28  F028         	call	_lcdInst
  7260                           
  7261                           ;lcd.c: 53: lcdInst(0b00101000);
  7262  004A48  0E28               	movlw	40
  7263  004A4A  EC28  F028         	call	_lcdInst
  7264                           
  7265                           ;lcd.c: 54: lcdInst(0b00001100);
  7266  004A4E  0E0C               	movlw	12
  7267  004A50  EC28  F028         	call	_lcdInst
  7268                           
  7269                           ;lcd.c: 55: lcdInst(0b00000110);
  7270  004A54  0E06               	movlw	6
  7271  004A56  EC28  F028         	call	_lcdInst
  7272                           
  7273                           ;lcd.c: 56: lcdInst(0b00000001);
  7274  004A5A  0E01               	movlw	1
  7275  004A5C  EC28  F028         	call	_lcdInst
  7276                           
  7277                           ;lcd.c: 57: _delay((unsigned long)((15)*(32000000/4000.0)));
  7278  004A60  0E9C               	movlw	156
  7279  004A62  0100               	movlb	0	; () banked
  7280  004A64  6F83               	movwf	??_initLCD& (0+255),b
  7281  004A66  0ED7               	movlw	215
  7282  004A68                     u8687:
  7283  004A68  2EE8               	decfsz	wreg,f,c
  7284  004A6A  D7FE               	bra	u8687
  7285  004A6C  2F83               	decfsz	??_initLCD& (0+255),f,b
  7286  004A6E  D7FC               	bra	u8687
  7287  004A70  0012               	return		;funcret
  7288  004A72                     __end_of_initLCD:
  7289                           	opt stack 0
  7290                           tblptru	equ	0xFF8
  7291                           tblptrh	equ	0xFF7
  7292                           tblptrl	equ	0xFF6
  7293                           tablat	equ	0xFF5
  7294                           prodh	equ	0xFF4
  7295                           prodl	equ	0xFF3
  7296                           intcon	equ	0xFF2
  7297                           intcon2	equ	0xFF1
  7298                           intcon3	equ	0xFF0
  7299                           postinc0	equ	0xFEE
  7300                           wreg	equ	0xFE8
  7301                           postdec1	equ	0xFE5
  7302                           fsr1l	equ	0xFE1
  7303                           indf2	equ	0xFDF
  7304                           postinc2	equ	0xFDE
  7305                           postdec2	equ	0xFDD
  7306                           fsr2h	equ	0xFDA
  7307                           fsr2l	equ	0xFD9
  7308                           status	equ	0xFD8
  7309                           
  7310 ;; *************** function _UI *****************
  7311 ;; Defined at:
  7312 ;;		line 76 in file "UI.c"
  7313 ;; Parameters:    Size  Location     Type
  7314 ;;		None
  7315 ;; Auto vars:     Size  Location     Type
  7316 ;;  i               1   73[BANK0 ] unsigned char 
  7317 ;;  i               1   85[BANK0 ] unsigned char 
  7318 ;;  i               1   84[BANK0 ] unsigned char 
  7319 ;;  i               1   83[BANK0 ] unsigned char 
  7320 ;;  i               1   82[BANK0 ] unsigned char 
  7321 ;;  i               1   81[BANK0 ] unsigned char 
  7322 ;;  i               1   80[BANK0 ] unsigned char 
  7323 ;;  i               1   79[BANK0 ] unsigned char 
  7324 ;;  i               1   78[BANK0 ] unsigned char 
  7325 ;;  i               1   77[BANK0 ] unsigned char 
  7326 ;;  i               1   76[BANK0 ] unsigned char 
  7327 ;;  i               1   75[BANK0 ] unsigned char 
  7328 ;;  i               1   74[BANK0 ] unsigned char 
  7329 ;;  month           4   86[BANK0 ] unsigned char [4]
  7330 ;;  i               1   72[BANK0 ] unsigned char 
  7331 ;; Return value:  Size  Location     Type
  7332 ;;                  1    wreg      void 
  7333 ;; Registers used:
  7334 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7335 ;; Tracked objects:
  7336 ;;		On entry : 0/0
  7337 ;;		On exit  : 0/0
  7338 ;;		Unchanged: 0/0
  7339 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7340 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7341 ;;      Locals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7342 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7343 ;;      Totals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7344 ;;Total ram usage:       22 bytes
  7345 ;; Hardware stack levels used:    1
  7346 ;; Hardware stack levels required when called:   11
  7347 ;; This function calls:
  7348 ;;		___awdiv
  7349 ;;		___awmod
  7350 ;;		_change_state_to_menu_12
  7351 ;;		_change_state_to_menu_22
  7352 ;;		_lcdInst
  7353 ;;		_printRTC
  7354 ;;		_printf
  7355 ;;		_strcpy
  7356 ;; This function is called by:
  7357 ;;		_main
  7358 ;; This function uses a non-reentrant model
  7359 ;;
  7360                           
  7361                           	psect	text23
  7362  0008CA                     __ptext23:
  7363                           	opt stack 0
  7364  0008CA                     _UI:
  7365                           	opt stack 19
  7366                           
  7367                           ;UI.c: 77: if(machine_state == DoneSorting_state){
  7368                           
  7369                           ;incstack = 0
  7370  0008CA  0E02               	movlw	2
  7371  0008CC  0100               	movlb	0	; () banked
  7372  0008CE  19FC               	xorwf	_machine_state& (0+255),w,b
  7373  0008D0  A4D8               	btfss	status,2,c
  7374  0008D2  D075               	goto	l8216
  7375                           
  7376                           ; BSR set to: 0
  7377                           ;UI.c: 78: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  7378  0008D4  0E01               	movlw	1
  7379  0008D6  EC28  F028         	call	_lcdInst
  7380  0008DA  0E68               	movlw	104
  7381  0008DC  0100               	movlb	0	; () banked
  7382  0008DE  6FC4               	movwf	??_UI& (0+255),b
  7383  0008E0  0EE4               	movlw	228
  7384  0008E2                     u8697:
  7385  0008E2  2EE8               	decfsz	wreg,f,c
  7386  0008E4  D7FE               	bra	u8697
  7387  0008E6  2FC4               	decfsz	??_UI& (0+255),f,b
  7388  0008E8  D7FC               	bra	u8697
  7389  0008EA  F000               	nop	
  7390                           
  7391                           ;UI.c: 79: lcdInst(0b10000000);;
  7392  0008EC  0E80               	movlw	128
  7393  0008EE  EC28  F028         	call	_lcdInst
  7394                           
  7395                           ;UI.c: 80: printf("RESULTS IN LOG %d", sel+1);
  7396  0008F2  0EA3               	movlw	low STR_1
  7397  0008F4  0100               	movlb	0	; () banked
  7398  0008F6  6F8E               	movwf	printf@f& (0+255),b
  7399  0008F8  0EFB               	movlw	high STR_1
  7400  0008FA  0100               	movlb	0	; () banked
  7401  0008FC  6F8F               	movwf	(printf@f+1)& (0+255),b
  7402  0008FE  0E01               	movlw	1
  7403  000900  0100               	movlb	0	; () banked
  7404  000902  25FD               	addwf	_sel& (0+255),w,b
  7405  000904  0100               	movlb	0	; () banked
  7406  000906  6F90               	movwf	(?_printf+2)& (0+255),b
  7407  000908  0100               	movlb	0	; () banked
  7408  00090A  6B91               	clrf	(?_printf+3)& (0+255),b
  7409  00090C  0E00               	movlw	0
  7410  00090E  2391               	addwfc	(?_printf+3)& (0+255),f,b
  7411  000910  ECE8  F00A         	call	_printf	;wreg free
  7412                           
  7413                           ;UI.c: 81: lcdInst(0b11000000);;
  7414  000914  0EC0               	movlw	192
  7415  000916  EC28  F028         	call	_lcdInst
  7416                           
  7417                           ;UI.c: 82: printf("TIME: %d:%02d", (total_time % 3600) / 60, (total_time % 3600) % 60);
  7418  00091A  0E0E               	movlw	14
  7419  00091C  0100               	movlb	0	; () banked
  7420  00091E  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  7421  000920  0E10               	movlw	16
  7422  000922  6F82               	movwf	___awmod@divisor& (0+255),b
  7423  000924  C0F8  F080         	movff	_total_time,___awmod@dividend
  7424  000928  C0F9  F081         	movff	_total_time+1,___awmod@dividend+1
  7425  00092C  ECAA  F020         	call	___awmod	;wreg free
  7426  000930  C080  F0C6         	movff	?___awmod,_UI$2333
  7427  000934  C081  F0C7         	movff	?___awmod+1,_UI$2333+1
  7428                           
  7429                           ;UI.c: 82: printf("TIME: %d:%02d", (total_time % 3600) / 60, (total_time % 3600) % 60);
  7430  000938  0E27               	movlw	low STR_2
  7431  00093A  0100               	movlb	0	; () banked
  7432  00093C  6F8E               	movwf	printf@f& (0+255),b
  7433  00093E  0EFF               	movlw	high STR_2
  7434  000940  0100               	movlb	0	; () banked
  7435  000942  6F8F               	movwf	(printf@f+1)& (0+255),b
  7436  000944  0E0E               	movlw	14
  7437  000946  0100               	movlb	0	; () banked
  7438  000948  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  7439  00094A  0E10               	movlw	16
  7440  00094C  6F82               	movwf	___awmod@divisor& (0+255),b
  7441  00094E  C0F8  F080         	movff	_total_time,___awmod@dividend
  7442  000952  C0F9  F081         	movff	_total_time+1,___awmod@dividend+1
  7443  000956  ECAA  F020         	call	___awmod	;wreg free
  7444  00095A  C080  F086         	movff	?___awmod,___awdiv@dividend
  7445  00095E  C081  F087         	movff	?___awmod+1,___awdiv@dividend+1
  7446  000962  0E00               	movlw	0
  7447  000964  0100               	movlb	0	; () banked
  7448  000966  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  7449  000968  0E3C               	movlw	60
  7450  00096A  6F88               	movwf	___awdiv@divisor& (0+255),b
  7451  00096C  EC98  F01F         	call	___awdiv	;wreg free
  7452  000970  C086  F090         	movff	?___awdiv,?_printf+2
  7453  000974  C087  F091         	movff	?___awdiv+1,?_printf+3
  7454  000978  C0C6  F080         	movff	_UI$2333,___awmod@dividend
  7455  00097C  C0C7  F081         	movff	_UI$2333+1,___awmod@dividend+1
  7456  000980  0E00               	movlw	0
  7457  000982  0100               	movlb	0	; () banked
  7458  000984  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  7459  000986  0E3C               	movlw	60
  7460  000988  6F82               	movwf	___awmod@divisor& (0+255),b
  7461  00098A  ECAA  F020         	call	___awmod	;wreg free
  7462  00098E  C080  F092         	movff	?___awmod,?_printf+4
  7463  000992  C081  F093         	movff	?___awmod+1,?_printf+5
  7464  000996  ECE8  F00A         	call	_printf	;wreg free
  7465                           
  7466                           ;UI.c: 83: machine_state = UI_state;
  7467  00099A  0E00               	movlw	0
  7468  00099C  0100               	movlb	0	; () banked
  7469  00099E  6FFC               	movwf	_machine_state& (0+255),b
  7470  0009A0                     l180:
  7471  0009A0  A281               	btfss	3969,1,c	;volatile
  7472  0009A2  D7FE               	goto	l180
  7473                           
  7474                           ;UI.c: 86: }
  7475                           ;UI.c: 87: if(cur_state==12){
  7476  0009A4  0E0C               	movlw	12
  7477  0009A6  0100               	movlb	0	; () banked
  7478  0009A8  19E6               	xorwf	_cur_state& (0+255),w,b
  7479  0009AA  0100               	movlb	0	; () banked
  7480  0009AC  11E7               	iorwf	(_cur_state+1)& (0+255),w,b
  7481  0009AE  A4D8               	btfss	status,2,c
  7482  0009B0  D003               	goto	l8214
  7483                           
  7484                           ; BSR set to: 0
  7485                           ;UI.c: 88: change_state_to_menu_12();
  7486  0009B2  EC76  F025         	call	_change_state_to_menu_12	;wreg free
  7487                           
  7488                           ;UI.c: 89: }
  7489  0009B6  D3D5               	goto	l8536
  7490  0009B8                     l8214:
  7491                           
  7492                           ;UI.c: 90: else{
  7493                           ;UI.c: 91: change_state_to_menu_22();
  7494  0009B8  EC5A  F025         	call	_change_state_to_menu_22	;wreg free
  7495                           
  7496                           ;UI.c: 92: }
  7497                           ;UI.c: 93: }
  7498  0009BC  D3D2               	goto	l8536
  7499  0009BE                     l8216:
  7500                           
  7501                           ;UI.c: 94: else if(cur_state == 0){
  7502  0009BE  0100               	movlb	0	; () banked
  7503  0009C0  51E6               	movf	_cur_state& (0+255),w,b
  7504  0009C2  0100               	movlb	0	; () banked
  7505  0009C4  11E7               	iorwf	(_cur_state+1)& (0+255),w,b
  7506  0009C6  A4D8               	btfss	status,2,c
  7507  0009C8  D3CC               	goto	l8536
  7508                           
  7509                           ; BSR set to: 0
  7510                           ;UI.c: 95: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
  7511  0009CA  0E00               	movlw	0
  7512  0009CC  0100               	movlb	0	; () banked
  7513  0009CE  6FC8               	movwf	UI@i& (0+255),b
  7514  0009D0                     l8220:
  7515                           
  7516                           ; BSR set to: 0
  7517  0009D0  0E63               	movlw	99
  7518  0009D2  0100               	movlb	0	; () banked
  7519  0009D4  65C8               	cpfsgt	UI@i& (0+255),b
  7520  0009D6  D001               	goto	l8224
  7521  0009D8  D00C               	goto	l8228
  7522  0009DA                     l8224:
  7523                           
  7524                           ; BSR set to: 0
  7525  0009DA  0E68               	movlw	104
  7526  0009DC  0100               	movlb	0	; () banked
  7527  0009DE  6FC4               	movwf	??_UI& (0+255),b
  7528  0009E0  0EE4               	movlw	228
  7529  0009E2                     u8707:
  7530  0009E2  2EE8               	decfsz	wreg,f,c
  7531  0009E4  D7FE               	bra	u8707
  7532  0009E6  2FC4               	decfsz	??_UI& (0+255),f,b
  7533  0009E8  D7FC               	bra	u8707
  7534  0009EA  F000               	nop	
  7535  0009EC  0100               	movlb	0	; () banked
  7536  0009EE  2BC8               	incf	UI@i& (0+255),f,b
  7537  0009F0  D7EF               	goto	l8220
  7538  0009F2                     l8228:
  7539                           
  7540                           ; BSR set to: 0
  7541                           ;UI.c: 96: if(cur_state == 0){
  7542  0009F2  0100               	movlb	0	; () banked
  7543  0009F4  51E6               	movf	_cur_state& (0+255),w,b
  7544  0009F6  0100               	movlb	0	; () banked
  7545  0009F8  11E7               	iorwf	(_cur_state+1)& (0+255),w,b
  7546  0009FA  A4D8               	btfss	status,2,c
  7547  0009FC  D3B2               	goto	l8536
  7548                           
  7549                           ; BSR set to: 0
  7550                           ;UI.c: 97: printRTC();
  7551  0009FE  ECFC  F011         	call	_printRTC	;wreg free
  7552                           
  7553                           ;UI.c: 98: }
  7554                           ;UI.c: 99: }
  7555                           ;UI.c: 100: while(logstate){
  7556  000A02  D3AF               	goto	l8536
  7557  000A04                     l8232:
  7558                           
  7559                           ;UI.c: 102: if(!log_completion){
  7560  000A04  0100               	movlb	0	; () banked
  7561  000A06  51EE               	movf	_log_completion& (0+255),w,b
  7562  000A08  0100               	movlb	0	; () banked
  7563  000A0A  11EF               	iorwf	(_log_completion+1)& (0+255),w,b
  7564  000A0C  A4D8               	btfss	status,2,c
  7565  000A0E  D041               	goto	l8262
  7566                           
  7567                           ; BSR set to: 0
  7568                           ;UI.c: 103: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  7569  000A10  0E01               	movlw	1
  7570  000A12  EC28  F028         	call	_lcdInst
  7571  000A16  0E68               	movlw	104
  7572  000A18  0100               	movlb	0	; () banked
  7573  000A1A  6FC4               	movwf	??_UI& (0+255),b
  7574  000A1C  0EE4               	movlw	228
  7575  000A1E                     u8717:
  7576  000A1E  2EE8               	decfsz	wreg,f,c
  7577  000A20  D7FE               	bra	u8717
  7578  000A22  2FC4               	decfsz	??_UI& (0+255),f,b
  7579  000A24  D7FC               	bra	u8717
  7580  000A26  F000               	nop	
  7581                           
  7582                           ;UI.c: 104: lcdInst(0b10000000);;
  7583  000A28  0E80               	movlw	128
  7584  000A2A  EC28  F028         	call	_lcdInst
  7585                           
  7586                           ;UI.c: 105: printf("-- LOG %2d HERE--", log);
  7587  000A2E  0E91               	movlw	low STR_3
  7588  000A30  0100               	movlb	0	; () banked
  7589  000A32  6F8E               	movwf	printf@f& (0+255),b
  7590  000A34  0EFB               	movlw	high STR_3
  7591  000A36  0100               	movlb	0	; () banked
  7592  000A38  6F8F               	movwf	(printf@f+1)& (0+255),b
  7593  000A3A  C0EC  F090         	movff	_log,?_printf+2
  7594  000A3E  C0ED  F091         	movff	_log+1,?_printf+3
  7595  000A42  ECE8  F00A         	call	_printf	;wreg free
  7596                           
  7597                           ;UI.c: 106: lcdInst(0b11000000);;
  7598  000A46  0EC0               	movlw	192
  7599  000A48  EC28  F028         	call	_lcdInst
  7600                           
  7601                           ;UI.c: 107: printf("DIDN'T COMPLETE");
  7602  000A4C  0E4A               	movlw	low STR_4
  7603  000A4E  0100               	movlb	0	; () banked
  7604  000A50  6F8E               	movwf	printf@f& (0+255),b
  7605  000A52  0EFE               	movlw	high STR_4
  7606  000A54  0100               	movlb	0	; () banked
  7607  000A56  6F8F               	movwf	(printf@f+1)& (0+255),b
  7608  000A58  ECE8  F00A         	call	_printf	;wreg free
  7609  000A5C                     l8246:
  7610  000A5C  0E00               	movlw	0
  7611  000A5E  0100               	movlb	0	; () banked
  7612  000A60  6FC9               	movwf	UI@i_409& (0+255),b
  7613  000A62                     l8248:
  7614                           
  7615                           ; BSR set to: 0
  7616  000A62  0E63               	movlw	99
  7617  000A64  0100               	movlb	0	; () banked
  7618  000A66  65C9               	cpfsgt	UI@i_409& (0+255),b
  7619  000A68  D001               	goto	l8252
  7620  000A6A  D00C               	goto	l8256
  7621  000A6C                     l8252:
  7622                           
  7623                           ; BSR set to: 0
  7624  000A6C  0E68               	movlw	104
  7625  000A6E  0100               	movlb	0	; () banked
  7626  000A70  6FC4               	movwf	??_UI& (0+255),b
  7627  000A72  0EE4               	movlw	228
  7628  000A74                     u8727:
  7629  000A74  2EE8               	decfsz	wreg,f,c
  7630  000A76  D7FE               	bra	u8727
  7631  000A78  2FC4               	decfsz	??_UI& (0+255),f,b
  7632  000A7A  D7FC               	bra	u8727
  7633  000A7C  F000               	nop	
  7634  000A7E  0100               	movlb	0	; () banked
  7635  000A80  2BC9               	incf	UI@i_409& (0+255),f,b
  7636  000A82  D7EF               	goto	l8248
  7637  000A84                     l8256:
  7638                           
  7639                           ; BSR set to: 0
  7640  000A84  0100               	movlb	0	; () banked
  7641  000A86  51F6               	movf	_logstate& (0+255),w,b
  7642  000A88  0100               	movlb	0	; () banked
  7643  000A8A  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7644  000A8C  B4D8               	btfsc	status,2,c
  7645  000A8E  0012               	return	
  7646  000A90  D7E5               	goto	l8246
  7647  000A92                     l8262:
  7648                           
  7649                           ; BSR set to: 0
  7650                           ;UI.c: 111: else{
  7651                           ;UI.c: 112: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  7652  000A92  0E01               	movlw	1
  7653  000A94  EC28  F028         	call	_lcdInst
  7654  000A98  0E68               	movlw	104
  7655  000A9A  0100               	movlb	0	; () banked
  7656  000A9C  6FC4               	movwf	??_UI& (0+255),b
  7657  000A9E  0EE4               	movlw	228
  7658  000AA0                     u8737:
  7659  000AA0  2EE8               	decfsz	wreg,f,c
  7660  000AA2  D7FE               	bra	u8737
  7661  000AA4  2FC4               	decfsz	??_UI& (0+255),f,b
  7662  000AA6  D7FC               	bra	u8737
  7663  000AA8  F000               	nop	
  7664                           
  7665                           ;UI.c: 113: lcdInst(0b10000000);;
  7666  000AAA  0E80               	movlw	128
  7667  000AAC  EC28  F028         	call	_lcdInst
  7668                           
  7669                           ;UI.c: 114: printf("-- LOG %2d HERE--", log);
  7670  000AB0  0E91               	movlw	low STR_3
  7671  000AB2  0100               	movlb	0	; () banked
  7672  000AB4  6F8E               	movwf	printf@f& (0+255),b
  7673  000AB6  0EFB               	movlw	high STR_3
  7674  000AB8  0100               	movlb	0	; () banked
  7675  000ABA  6F8F               	movwf	(printf@f+1)& (0+255),b
  7676  000ABC  C0EC  F090         	movff	_log,?_printf+2
  7677  000AC0  C0ED  F091         	movff	_log+1,?_printf+3
  7678  000AC4  ECE8  F00A         	call	_printf	;wreg free
  7679                           
  7680                           ;UI.c: 115: lcdInst(0b11000000);;
  7681  000AC8  0EC0               	movlw	192
  7682  000ACA  EC28  F028         	call	_lcdInst
  7683                           
  7684                           ;UI.c: 116: printf("PAUSE < | BACK >");
  7685  000ACE  0EE6               	movlw	low STR_6
  7686  000AD0  0100               	movlb	0	; () banked
  7687  000AD2  6F8E               	movwf	printf@f& (0+255),b
  7688  000AD4  0EFD               	movlw	high STR_6
  7689  000AD6  0100               	movlb	0	; () banked
  7690  000AD8  6F8F               	movwf	(printf@f+1)& (0+255),b
  7691  000ADA  ECE8  F00A         	call	_printf	;wreg free
  7692                           
  7693                           ;UI.c: 118: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7694  000ADE  0E00               	movlw	0
  7695  000AE0  0100               	movlb	0	; () banked
  7696  000AE2  6FCA               	movwf	UI@i_412& (0+255),b
  7697  000AE4                     l8276:
  7698                           
  7699                           ; BSR set to: 0
  7700  000AE4  0E63               	movlw	99
  7701  000AE6  0100               	movlb	0	; () banked
  7702  000AE8  65CA               	cpfsgt	UI@i_412& (0+255),b
  7703  000AEA  D001               	goto	l8280
  7704  000AEC  D00C               	goto	l8284
  7705  000AEE                     l8280:
  7706                           
  7707                           ; BSR set to: 0
  7708  000AEE  0E68               	movlw	104
  7709  000AF0  0100               	movlb	0	; () banked
  7710  000AF2  6FC4               	movwf	??_UI& (0+255),b
  7711  000AF4  0EE4               	movlw	228
  7712  000AF6                     u8747:
  7713  000AF6  2EE8               	decfsz	wreg,f,c
  7714  000AF8  D7FE               	bra	u8747
  7715  000AFA  2FC4               	decfsz	??_UI& (0+255),f,b
  7716  000AFC  D7FC               	bra	u8747
  7717  000AFE  F000               	nop	
  7718  000B00  0100               	movlb	0	; () banked
  7719  000B02  2BCA               	incf	UI@i_412& (0+255),f,b
  7720  000B04  D7EF               	goto	l8276
  7721  000B06                     l8284:
  7722                           
  7723                           ; BSR set to: 0
  7724  000B06  0100               	movlb	0	; () banked
  7725  000B08  51F6               	movf	_logstate& (0+255),w,b
  7726  000B0A  0100               	movlb	0	; () banked
  7727  000B0C  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7728  000B0E  B4D8               	btfsc	status,2,c
  7729  000B10  0012               	return	
  7730                           
  7731                           ; BSR set to: 0
  7732                           ;UI.c: 119: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7733                           
  7734                           ; BSR set to: 0
  7735                           
  7736                           ; BSR set to: 0
  7737  000B12  0E00               	movlw	0
  7738  000B14  0100               	movlb	0	; () banked
  7739  000B16  6FCB               	movwf	UI@i_413& (0+255),b
  7740  000B18                     l8290:
  7741                           
  7742                           ; BSR set to: 0
  7743  000B18  0E63               	movlw	99
  7744  000B1A  0100               	movlb	0	; () banked
  7745  000B1C  65CB               	cpfsgt	UI@i_413& (0+255),b
  7746  000B1E  D001               	goto	l8294
  7747  000B20  D00C               	goto	l8298
  7748  000B22                     l8294:
  7749                           
  7750                           ; BSR set to: 0
  7751  000B22  0E68               	movlw	104
  7752  000B24  0100               	movlb	0	; () banked
  7753  000B26  6FC4               	movwf	??_UI& (0+255),b
  7754  000B28  0EE4               	movlw	228
  7755  000B2A                     u8757:
  7756  000B2A  2EE8               	decfsz	wreg,f,c
  7757  000B2C  D7FE               	bra	u8757
  7758  000B2E  2FC4               	decfsz	??_UI& (0+255),f,b
  7759  000B30  D7FC               	bra	u8757
  7760  000B32  F000               	nop	
  7761  000B34  0100               	movlb	0	; () banked
  7762  000B36  2BCB               	incf	UI@i_413& (0+255),f,b
  7763  000B38  D7EF               	goto	l8290
  7764  000B3A                     l8298:
  7765                           
  7766                           ; BSR set to: 0
  7767  000B3A  0100               	movlb	0	; () banked
  7768  000B3C  51F6               	movf	_logstate& (0+255),w,b
  7769  000B3E  0100               	movlb	0	; () banked
  7770  000B40  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7771  000B42  B4D8               	btfsc	status,2,c
  7772  000B44  0012               	return	
  7773                           
  7774                           ; BSR set to: 0
  7775                           ;UI.c: 121: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  7776                           
  7777                           ; BSR set to: 0
  7778                           
  7779                           ; BSR set to: 0
  7780  000B46  0E01               	movlw	1
  7781  000B48  EC28  F028         	call	_lcdInst
  7782  000B4C  0E68               	movlw	104
  7783  000B4E  0100               	movlb	0	; () banked
  7784  000B50  6FC4               	movwf	??_UI& (0+255),b
  7785  000B52  0EE4               	movlw	228
  7786  000B54                     u8767:
  7787  000B54  2EE8               	decfsz	wreg,f,c
  7788  000B56  D7FE               	bra	u8767
  7789  000B58  2FC4               	decfsz	??_UI& (0+255),f,b
  7790  000B5A  D7FC               	bra	u8767
  7791  000B5C  F000               	nop	
  7792                           
  7793                           ;UI.c: 122: lcdInst(0b10000000);;
  7794  000B5E  0E80               	movlw	128
  7795  000B60  EC28  F028         	call	_lcdInst
  7796                           
  7797                           ;UI.c: 123: printf("START:");
  7798  000B64  0EC4               	movlw	low STR_7
  7799  000B66  0100               	movlb	0	; () banked
  7800  000B68  6F8E               	movwf	printf@f& (0+255),b
  7801  000B6A  0EFF               	movlw	high STR_7
  7802  000B6C  0100               	movlb	0	; () banked
  7803  000B6E  6F8F               	movwf	(printf@f+1)& (0+255),b
  7804  000B70  ECE8  F00A         	call	_printf	;wreg free
  7805                           
  7806                           ;UI.c: 124: lcdInst(0b11000000);;
  7807  000B74  0EC0               	movlw	192
  7808  000B76  EC28  F028         	call	_lcdInst
  7809                           
  7810                           ;UI.c: 125: char month[] = "MMM";
  7811  000B7A  C135  F0D6         	movff	UI@F3228,UI@month
  7812  000B7E  C136  F0D7         	movff	UI@F3228+1,UI@month+1
  7813  000B82  C137  F0D8         	movff	UI@F3228+2,UI@month+2
  7814  000B86  C138  F0D9         	movff	UI@F3228+3,UI@month+3
  7815                           
  7816                           ;UI.c: 126: switch(log_startTime[5]){
  7817  000B8A  D0C3               	goto	l8342
  7818  000B8C                     l8314:
  7819                           
  7820                           ;UI.c: 128: strcpy(month, "JAN");
  7821  000B8C  0ED6               	movlw	low UI@month
  7822  000B8E  0100               	movlb	0	; () banked
  7823  000B90  6F80               	movwf	strcpy@to& (0+255),b
  7824  000B92  0E00               	movlw	high UI@month
  7825  000B94  0100               	movlb	0	; () banked
  7826  000B96  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7827  000B98  0EDB               	movlw	low STR_8
  7828  000B9A  0100               	movlb	0	; () banked
  7829  000B9C  6F82               	movwf	strcpy@from& (0+255),b
  7830  000B9E  0EFF               	movlw	high STR_8
  7831  000BA0  0100               	movlb	0	; () banked
  7832  000BA2  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7833  000BA4  EC92  F025         	call	_strcpy	;wreg free
  7834                           
  7835                           ;UI.c: 129: break;
  7836  000BA8  D0E6               	goto	l8344
  7837  000BAA                     l8316:
  7838                           
  7839                           ;UI.c: 131: strcpy(month, "FEB");
  7840  000BAA  0ED6               	movlw	low UI@month
  7841  000BAC  0100               	movlb	0	; () banked
  7842  000BAE  6F80               	movwf	strcpy@to& (0+255),b
  7843  000BB0  0E00               	movlw	high UI@month
  7844  000BB2  0100               	movlb	0	; () banked
  7845  000BB4  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7846  000BB6  0ECB               	movlw	low STR_9
  7847  000BB8  0100               	movlb	0	; () banked
  7848  000BBA  6F82               	movwf	strcpy@from& (0+255),b
  7849  000BBC  0EFF               	movlw	high STR_9
  7850  000BBE  0100               	movlb	0	; () banked
  7851  000BC0  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7852  000BC2  EC92  F025         	call	_strcpy	;wreg free
  7853                           
  7854                           ;UI.c: 132: break;
  7855  000BC6  D0D7               	goto	l8344
  7856  000BC8                     l8318:
  7857                           
  7858                           ;UI.c: 134: strcpy(month, "MAR");
  7859  000BC8  0ED6               	movlw	low UI@month
  7860  000BCA  0100               	movlb	0	; () banked
  7861  000BCC  6F80               	movwf	strcpy@to& (0+255),b
  7862  000BCE  0E00               	movlw	high UI@month
  7863  000BD0  0100               	movlb	0	; () banked
  7864  000BD2  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7865  000BD4  0EE7               	movlw	low STR_10
  7866  000BD6  0100               	movlb	0	; () banked
  7867  000BD8  6F82               	movwf	strcpy@from& (0+255),b
  7868  000BDA  0EFF               	movlw	high STR_10
  7869  000BDC  0100               	movlb	0	; () banked
  7870  000BDE  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7871  000BE0  EC92  F025         	call	_strcpy	;wreg free
  7872                           
  7873                           ;UI.c: 135: break;
  7874  000BE4  D0C8               	goto	l8344
  7875  000BE6                     l8320:
  7876                           
  7877                           ;UI.c: 137: strcpy(month, "APR");
  7878  000BE6  0ED6               	movlw	low UI@month
  7879  000BE8  0100               	movlb	0	; () banked
  7880  000BEA  6F80               	movwf	strcpy@to& (0+255),b
  7881  000BEC  0E00               	movlw	high UI@month
  7882  000BEE  0100               	movlb	0	; () banked
  7883  000BF0  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7884  000BF2  0EEB               	movlw	low STR_11
  7885  000BF4  0100               	movlb	0	; () banked
  7886  000BF6  6F82               	movwf	strcpy@from& (0+255),b
  7887  000BF8  0EFF               	movlw	high STR_11
  7888  000BFA  0100               	movlb	0	; () banked
  7889  000BFC  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7890  000BFE  EC92  F025         	call	_strcpy	;wreg free
  7891                           
  7892                           ;UI.c: 138: break;
  7893  000C02  D0B9               	goto	l8344
  7894  000C04                     l8322:
  7895                           
  7896                           ;UI.c: 140: strcpy(month, "MAY");
  7897  000C04  0ED6               	movlw	low UI@month
  7898  000C06  0100               	movlb	0	; () banked
  7899  000C08  6F80               	movwf	strcpy@to& (0+255),b
  7900  000C0A  0E00               	movlw	high UI@month
  7901  000C0C  0100               	movlb	0	; () banked
  7902  000C0E  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7903  000C10  0EFB               	movlw	low STR_12
  7904  000C12  0100               	movlb	0	; () banked
  7905  000C14  6F82               	movwf	strcpy@from& (0+255),b
  7906  000C16  0EFF               	movlw	high STR_12
  7907  000C18  0100               	movlb	0	; () banked
  7908  000C1A  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7909  000C1C  EC92  F025         	call	_strcpy	;wreg free
  7910                           
  7911                           ;UI.c: 141: break;
  7912  000C20  D0AA               	goto	l8344
  7913  000C22                     l8324:
  7914                           
  7915                           ;UI.c: 143: strcpy(month, "JUN");
  7916  000C22  0ED6               	movlw	low UI@month
  7917  000C24  0100               	movlb	0	; () banked
  7918  000C26  6F80               	movwf	strcpy@to& (0+255),b
  7919  000C28  0E00               	movlw	high UI@month
  7920  000C2A  0100               	movlb	0	; () banked
  7921  000C2C  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7922  000C2E  0EDF               	movlw	low STR_13
  7923  000C30  0100               	movlb	0	; () banked
  7924  000C32  6F82               	movwf	strcpy@from& (0+255),b
  7925  000C34  0EFF               	movlw	high STR_13
  7926  000C36  0100               	movlb	0	; () banked
  7927  000C38  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7928  000C3A  EC92  F025         	call	_strcpy	;wreg free
  7929                           
  7930                           ;UI.c: 144: break;
  7931  000C3E  D09B               	goto	l8344
  7932  000C40                     l8326:
  7933                           
  7934                           ;UI.c: 146: strcpy(month, "JUL");
  7935  000C40  0ED6               	movlw	low UI@month
  7936  000C42  0100               	movlb	0	; () banked
  7937  000C44  6F80               	movwf	strcpy@to& (0+255),b
  7938  000C46  0E00               	movlw	high UI@month
  7939  000C48  0100               	movlb	0	; () banked
  7940  000C4A  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7941  000C4C  0ED7               	movlw	low STR_14
  7942  000C4E  0100               	movlb	0	; () banked
  7943  000C50  6F82               	movwf	strcpy@from& (0+255),b
  7944  000C52  0EFF               	movlw	high STR_14
  7945  000C54  0100               	movlb	0	; () banked
  7946  000C56  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7947  000C58  EC92  F025         	call	_strcpy	;wreg free
  7948                           
  7949                           ;UI.c: 147: break;
  7950  000C5C  D08C               	goto	l8344
  7951  000C5E                     l8328:
  7952                           
  7953                           ;UI.c: 149: strcpy(month, "AUG");
  7954  000C5E  0ED6               	movlw	low UI@month
  7955  000C60  0100               	movlb	0	; () banked
  7956  000C62  6F80               	movwf	strcpy@to& (0+255),b
  7957  000C64  0E00               	movlw	high UI@month
  7958  000C66  0100               	movlb	0	; () banked
  7959  000C68  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7960  000C6A  0ED3               	movlw	low STR_15
  7961  000C6C  0100               	movlb	0	; () banked
  7962  000C6E  6F82               	movwf	strcpy@from& (0+255),b
  7963  000C70  0EFF               	movlw	high STR_15
  7964  000C72  0100               	movlb	0	; () banked
  7965  000C74  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7966  000C76  EC92  F025         	call	_strcpy	;wreg free
  7967                           
  7968                           ;UI.c: 150: break;
  7969  000C7A  D07D               	goto	l8344
  7970  000C7C                     l8330:
  7971                           
  7972                           ;UI.c: 152: strcpy(month, "SEP");
  7973  000C7C  0ED6               	movlw	low UI@month
  7974  000C7E  0100               	movlb	0	; () banked
  7975  000C80  6F80               	movwf	strcpy@to& (0+255),b
  7976  000C82  0E00               	movlw	high UI@month
  7977  000C84  0100               	movlb	0	; () banked
  7978  000C86  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7979  000C88  0EE3               	movlw	low STR_16
  7980  000C8A  0100               	movlb	0	; () banked
  7981  000C8C  6F82               	movwf	strcpy@from& (0+255),b
  7982  000C8E  0EFF               	movlw	high STR_16
  7983  000C90  0100               	movlb	0	; () banked
  7984  000C92  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7985  000C94  EC92  F025         	call	_strcpy	;wreg free
  7986                           
  7987                           ;UI.c: 153: break;
  7988  000C98  D06E               	goto	l8344
  7989  000C9A                     l8332:
  7990                           
  7991                           ;UI.c: 155: strcpy(month, "OCT");
  7992  000C9A  0ED6               	movlw	low UI@month
  7993  000C9C  0100               	movlb	0	; () banked
  7994  000C9E  6F80               	movwf	strcpy@to& (0+255),b
  7995  000CA0  0E00               	movlw	high UI@month
  7996  000CA2  0100               	movlb	0	; () banked
  7997  000CA4  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7998  000CA6  0EF3               	movlw	low STR_17
  7999  000CA8  0100               	movlb	0	; () banked
  8000  000CAA  6F82               	movwf	strcpy@from& (0+255),b
  8001  000CAC  0EFF               	movlw	high STR_17
  8002  000CAE  0100               	movlb	0	; () banked
  8003  000CB0  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8004  000CB2  EC92  F025         	call	_strcpy	;wreg free
  8005                           
  8006                           ;UI.c: 156: break;
  8007  000CB6  D05F               	goto	l8344
  8008  000CB8                     l8334:
  8009                           
  8010                           ;UI.c: 158: strcpy(month, "NOV");
  8011  000CB8  0ED6               	movlw	low UI@month
  8012  000CBA  0100               	movlb	0	; () banked
  8013  000CBC  6F80               	movwf	strcpy@to& (0+255),b
  8014  000CBE  0E00               	movlw	high UI@month
  8015  000CC0  0100               	movlb	0	; () banked
  8016  000CC2  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8017  000CC4  0EF7               	movlw	low STR_18
  8018  000CC6  0100               	movlb	0	; () banked
  8019  000CC8  6F82               	movwf	strcpy@from& (0+255),b
  8020  000CCA  0EFF               	movlw	high STR_18
  8021  000CCC  0100               	movlb	0	; () banked
  8022  000CCE  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8023  000CD0  EC92  F025         	call	_strcpy	;wreg free
  8024                           
  8025                           ;UI.c: 159: break;
  8026  000CD4  D050               	goto	l8344
  8027  000CD6                     l8336:
  8028                           
  8029                           ;UI.c: 161: strcpy(month, "DEC");
  8030  000CD6  0ED6               	movlw	low UI@month
  8031  000CD8  0100               	movlb	0	; () banked
  8032  000CDA  6F80               	movwf	strcpy@to& (0+255),b
  8033  000CDC  0E00               	movlw	high UI@month
  8034  000CDE  0100               	movlb	0	; () banked
  8035  000CE0  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8036  000CE2  0ECF               	movlw	low STR_19
  8037  000CE4  0100               	movlb	0	; () banked
  8038  000CE6  6F82               	movwf	strcpy@from& (0+255),b
  8039  000CE8  0EFF               	movlw	high STR_19
  8040  000CEA  0100               	movlb	0	; () banked
  8041  000CEC  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8042  000CEE  EC92  F025         	call	_strcpy	;wreg free
  8043                           
  8044                           ;UI.c: 162: break;
  8045  000CF2  D041               	goto	l8344
  8046  000CF4                     l8338:
  8047                           
  8048                           ;UI.c: 164: strcpy(month, "ERR");
  8049  000CF4  0ED6               	movlw	low UI@month
  8050  000CF6  0100               	movlb	0	; () banked
  8051  000CF8  6F80               	movwf	strcpy@to& (0+255),b
  8052  000CFA  0E00               	movlw	high UI@month
  8053  000CFC  0100               	movlb	0	; () banked
  8054  000CFE  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8055  000D00  0EEF               	movlw	low STR_20
  8056  000D02  0100               	movlb	0	; () banked
  8057  000D04  6F82               	movwf	strcpy@from& (0+255),b
  8058  000D06  0EFF               	movlw	high STR_20
  8059  000D08  0100               	movlb	0	; () banked
  8060  000D0A  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8061  000D0C  EC92  F025         	call	_strcpy	;wreg free
  8062                           
  8063                           ;UI.c: 166: }
  8064                           
  8065                           ;UI.c: 165: break;
  8066  000D10  D032               	goto	l8344
  8067  000D12                     l8342:
  8068  000D12  EE21  F00A         	lfsr	2,_log_startTime+10
  8069  000D16  CFDE F0C4          	movff	postinc2,??_UI
  8070  000D1A  CFDD F0C5          	movff	postdec2,??_UI+1
  8071                           
  8072                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8073                           ; Switch size 1, requested type "space"
  8074                           ; Number of cases is 1, Range of values is 0 to 0
  8075                           ; switch strategies available:
  8076                           ; Name         Instructions Cycles
  8077                           ; simple_byte            4     3 (average)
  8078                           ;	Chosen strategy is simple_byte
  8079  000D1E  0100               	movlb	0	; () banked
  8080  000D20  51C5               	movf	(??_UI+1)& (0+255),w,b
  8081  000D22  0A00               	xorlw	0	; case 0
  8082  000D24  A4D8               	btfss	status,2,c
  8083  000D26  D7E6               	goto	l8338
  8084                           
  8085                           ; BSR set to: 0
  8086                           ; Switch size 1, requested type "space"
  8087                           ; Number of cases is 12, Range of values is 1 to 12
  8088                           ; switch strategies available:
  8089                           ; Name         Instructions Cycles
  8090                           ; simple_byte           37    19 (average)
  8091                           ;	Chosen strategy is simple_byte
  8092  000D28  0100               	movlb	0	; () banked
  8093  000D2A  51C4               	movf	??_UI& (0+255),w,b
  8094  000D2C  0A01               	xorlw	1	; case 1
  8095  000D2E  B4D8               	btfsc	status,2,c
  8096  000D30  D72D               	goto	l8314
  8097  000D32  0A03               	xorlw	3	; case 2
  8098  000D34  B4D8               	btfsc	status,2,c
  8099  000D36  D739               	goto	l8316
  8100  000D38  0A01               	xorlw	1	; case 3
  8101  000D3A  B4D8               	btfsc	status,2,c
  8102  000D3C  D745               	goto	l8318
  8103  000D3E  0A07               	xorlw	7	; case 4
  8104  000D40  B4D8               	btfsc	status,2,c
  8105  000D42  D751               	goto	l8320
  8106  000D44  0A01               	xorlw	1	; case 5
  8107  000D46  B4D8               	btfsc	status,2,c
  8108  000D48  D75D               	goto	l8322
  8109  000D4A  0A03               	xorlw	3	; case 6
  8110  000D4C  B4D8               	btfsc	status,2,c
  8111  000D4E  D769               	goto	l8324
  8112  000D50  0A01               	xorlw	1	; case 7
  8113  000D52  B4D8               	btfsc	status,2,c
  8114  000D54  D775               	goto	l8326
  8115  000D56  0A0F               	xorlw	15	; case 8
  8116  000D58  B4D8               	btfsc	status,2,c
  8117  000D5A  D781               	goto	l8328
  8118  000D5C  0A01               	xorlw	1	; case 9
  8119  000D5E  B4D8               	btfsc	status,2,c
  8120  000D60  D78D               	goto	l8330
  8121  000D62  0A03               	xorlw	3	; case 10
  8122  000D64  B4D8               	btfsc	status,2,c
  8123  000D66  D799               	goto	l8332
  8124  000D68  0A01               	xorlw	1	; case 11
  8125  000D6A  B4D8               	btfsc	status,2,c
  8126  000D6C  D7A5               	goto	l8334
  8127  000D6E  0A07               	xorlw	7	; case 12
  8128  000D70  B4D8               	btfsc	status,2,c
  8129  000D72  D7B1               	goto	l8336
  8130  000D74  D7BF               	goto	l8338
  8131  000D76                     l8344:
  8132                           
  8133                           ;UI.c: 167: printf("%02d%s | %02d:%02d:%02d", log_startTime[4],month,log_startTime[2],lo
      +                          g_startTime[1],log_startTime[0]);
  8134  000D76  0E0A               	movlw	low STR_21
  8135  000D78  0100               	movlb	0	; () banked
  8136  000D7A  6F8E               	movwf	printf@f& (0+255),b
  8137  000D7C  0EFB               	movlw	high STR_21
  8138  000D7E  0100               	movlb	0	; () banked
  8139  000D80  6F8F               	movwf	(printf@f+1)& (0+255),b
  8140  000D82  C108  F090         	movff	_log_startTime+8,?_printf+2
  8141  000D86  C109  F091         	movff	_log_startTime+9,?_printf+3
  8142  000D8A  0ED6               	movlw	low UI@month
  8143  000D8C  0100               	movlb	0	; () banked
  8144  000D8E  6F92               	movwf	(?_printf+4)& (0+255),b
  8145  000D90  0E00               	movlw	high UI@month
  8146  000D92  0100               	movlb	0	; () banked
  8147  000D94  6F93               	movwf	(?_printf+5)& (0+255),b
  8148  000D96  C104  F094         	movff	_log_startTime+4,?_printf+6
  8149  000D9A  C105  F095         	movff	_log_startTime+5,?_printf+7
  8150  000D9E  C102  F096         	movff	_log_startTime+2,?_printf+8
  8151  000DA2  C103  F097         	movff	_log_startTime+3,?_printf+9
  8152  000DA6  C100  F098         	movff	_log_startTime,?_printf+10
  8153  000DAA  C101  F099         	movff	_log_startTime+1,?_printf+11
  8154  000DAE  ECE8  F00A         	call	_printf	;wreg free
  8155                           
  8156                           ;UI.c: 169: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  8157  000DB2  0E00               	movlw	0
  8158  000DB4  0100               	movlb	0	; () banked
  8159  000DB6  6FCC               	movwf	UI@i_431& (0+255),b
  8160  000DB8                     l8348:
  8161                           
  8162                           ; BSR set to: 0
  8163  000DB8  0E63               	movlw	99
  8164  000DBA  0100               	movlb	0	; () banked
  8165  000DBC  65CC               	cpfsgt	UI@i_431& (0+255),b
  8166  000DBE  D001               	goto	l8352
  8167  000DC0  D00C               	goto	l8356
  8168  000DC2                     l8352:
  8169                           
  8170                           ; BSR set to: 0
  8171  000DC2  0E68               	movlw	104
  8172  000DC4  0100               	movlb	0	; () banked
  8173  000DC6  6FC4               	movwf	??_UI& (0+255),b
  8174  000DC8  0EE4               	movlw	228
  8175  000DCA                     u8777:
  8176  000DCA  2EE8               	decfsz	wreg,f,c
  8177  000DCC  D7FE               	bra	u8777
  8178  000DCE  2FC4               	decfsz	??_UI& (0+255),f,b
  8179  000DD0  D7FC               	bra	u8777
  8180  000DD2  F000               	nop	
  8181  000DD4  0100               	movlb	0	; () banked
  8182  000DD6  2BCC               	incf	UI@i_431& (0+255),f,b
  8183  000DD8  D7EF               	goto	l8348
  8184  000DDA                     l8356:
  8185                           
  8186                           ; BSR set to: 0
  8187  000DDA  0100               	movlb	0	; () banked
  8188  000DDC  51F6               	movf	_logstate& (0+255),w,b
  8189  000DDE  0100               	movlb	0	; () banked
  8190  000DE0  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  8191  000DE2  B4D8               	btfsc	status,2,c
  8192  000DE4  0012               	return	
  8193                           
  8194                           ; BSR set to: 0
  8195                           ;UI.c: 170: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  8196                           
  8197                           ; BSR set to: 0
  8198                           
  8199                           ; BSR set to: 0
  8200  000DE6  0E00               	movlw	0
  8201  000DE8  0100               	movlb	0	; () banked
  8202  000DEA  6FCD               	movwf	UI@i_432& (0+255),b
  8203  000DEC                     l8362:
  8204                           
  8205                           ; BSR set to: 0
  8206  000DEC  0E63               	movlw	99
  8207  000DEE  0100               	movlb	0	; () banked
  8208  000DF0  65CD               	cpfsgt	UI@i_432& (0+255),b
  8209  000DF2  D001               	goto	l8366
  8210  000DF4  D00C               	goto	l8370
  8211  000DF6                     l8366:
  8212                           
  8213                           ; BSR set to: 0
  8214  000DF6  0E68               	movlw	104
  8215  000DF8  0100               	movlb	0	; () banked
  8216  000DFA  6FC4               	movwf	??_UI& (0+255),b
  8217  000DFC  0EE4               	movlw	228
  8218  000DFE                     u8787:
  8219  000DFE  2EE8               	decfsz	wreg,f,c
  8220  000E00  D7FE               	bra	u8787
  8221  000E02  2FC4               	decfsz	??_UI& (0+255),f,b
  8222  000E04  D7FC               	bra	u8787
  8223  000E06  F000               	nop	
  8224  000E08  0100               	movlb	0	; () banked
  8225  000E0A  2BCD               	incf	UI@i_432& (0+255),f,b
  8226  000E0C  D7EF               	goto	l8362
  8227  000E0E                     l8370:
  8228                           
  8229                           ; BSR set to: 0
  8230  000E0E  0100               	movlb	0	; () banked
  8231  000E10  51F6               	movf	_logstate& (0+255),w,b
  8232  000E12  0100               	movlb	0	; () banked
  8233  000E14  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  8234  000E16  B4D8               	btfsc	status,2,c
  8235  000E18  0012               	return	
  8236                           
  8237                           ; BSR set to: 0
  8238                           ;UI.c: 172: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  8239                           
  8240                           ; BSR set to: 0
  8241                           
  8242                           ; BSR set to: 0
  8243  000E1A  0E01               	movlw	1
  8244  000E1C  EC28  F028         	call	_lcdInst
  8245  000E20  0E68               	movlw	104
  8246  000E22  0100               	movlb	0	; () banked
  8247  000E24  6FC4               	movwf	??_UI& (0+255),b
  8248  000E26  0EE4               	movlw	228
  8249  000E28                     u8797:
  8250  000E28  2EE8               	decfsz	wreg,f,c
  8251  000E2A  D7FE               	bra	u8797
  8252  000E2C  2FC4               	decfsz	??_UI& (0+255),f,b
  8253  000E2E  D7FC               	bra	u8797
  8254  000E30  F000               	nop	
  8255                           
  8256                           ;UI.c: 173: lcdInst(0b10000000);;
  8257  000E32  0E80               	movlw	128
  8258  000E34  EC28  F028         	call	_lcdInst
  8259                           
  8260                           ;UI.c: 174: printf("DURATION:");
  8261  000E38  0E9B               	movlw	low STR_22
  8262  000E3A  0100               	movlb	0	; () banked
  8263  000E3C  6F8E               	movwf	printf@f& (0+255),b
  8264  000E3E  0EFF               	movlw	high STR_22
  8265  000E40  0100               	movlb	0	; () banked
  8266  000E42  6F8F               	movwf	(printf@f+1)& (0+255),b
  8267  000E44  ECE8  F00A         	call	_printf	;wreg free
  8268                           
  8269                           ;UI.c: 175: lcdInst(0b11000000);;
  8270  000E48  0EC0               	movlw	192
  8271  000E4A  EC28  F028         	call	_lcdInst
  8272                           
  8273                           ;UI.c: 176: printf("%d MIN %d SEC", (log_total_time % 3600) / 60, (log_total_time % 3600
      +                          ) % 60);
  8274  000E4E  0E0E               	movlw	14
  8275  000E50  0100               	movlb	0	; () banked
  8276  000E52  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  8277  000E54  0E10               	movlw	16
  8278  000E56  6F82               	movwf	___awmod@divisor& (0+255),b
  8279  000E58  C0F4  F080         	movff	_log_total_time,___awmod@dividend
  8280  000E5C  C0F5  F081         	movff	_log_total_time+1,___awmod@dividend+1
  8281  000E60  ECAA  F020         	call	___awmod	;wreg free
  8282  000E64  C080  F0C6         	movff	?___awmod,_UI$2333
  8283  000E68  C081  F0C7         	movff	?___awmod+1,_UI$2333+1
  8284                           
  8285                           ;UI.c: 176: printf("%d MIN %d SEC", (log_total_time % 3600) / 60, (log_total_time % 3600
      +                          ) % 60);
  8286  000E6C  0E19               	movlw	low STR_23
  8287  000E6E  0100               	movlb	0	; () banked
  8288  000E70  6F8E               	movwf	printf@f& (0+255),b
  8289  000E72  0EFF               	movlw	high STR_23
  8290  000E74  0100               	movlb	0	; () banked
  8291  000E76  6F8F               	movwf	(printf@f+1)& (0+255),b
  8292  000E78  0E0E               	movlw	14
  8293  000E7A  0100               	movlb	0	; () banked
  8294  000E7C  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  8295  000E7E  0E10               	movlw	16
  8296  000E80  6F82               	movwf	___awmod@divisor& (0+255),b
  8297  000E82  C0F4  F080         	movff	_log_total_time,___awmod@dividend
  8298  000E86  C0F5  F081         	movff	_log_total_time+1,___awmod@dividend+1
  8299  000E8A  ECAA  F020         	call	___awmod	;wreg free
  8300  000E8E  C080  F086         	movff	?___awmod,___awdiv@dividend
  8301  000E92  C081  F087         	movff	?___awmod+1,___awdiv@dividend+1
  8302  000E96  0E00               	movlw	0
  8303  000E98  0100               	movlb	0	; () banked
  8304  000E9A  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  8305  000E9C  0E3C               	movlw	60
  8306  000E9E  6F88               	movwf	___awdiv@divisor& (0+255),b
  8307  000EA0  EC98  F01F         	call	___awdiv	;wreg free
  8308  000EA4  C086  F090         	movff	?___awdiv,?_printf+2
  8309  000EA8  C087  F091         	movff	?___awdiv+1,?_printf+3
  8310  000EAC  C0C6  F080         	movff	_UI$2333,___awmod@dividend
  8311  000EB0  C0C7  F081         	movff	_UI$2333+1,___awmod@dividend+1
  8312  000EB4  0E00               	movlw	0
  8313  000EB6  0100               	movlb	0	; () banked
  8314  000EB8  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  8315  000EBA  0E3C               	movlw	60
  8316  000EBC  6F82               	movwf	___awmod@divisor& (0+255),b
  8317  000EBE  ECAA  F020         	call	___awmod	;wreg free
  8318  000EC2  C080  F092         	movff	?___awmod,?_printf+4
  8319  000EC6  C081  F093         	movff	?___awmod+1,?_printf+5
  8320  000ECA  ECE8  F00A         	call	_printf	;wreg free
  8321                           
  8322                           ;UI.c: 178: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  8323  000ECE  0E00               	movlw	0
  8324  000ED0  0100               	movlb	0	; () banked
  8325  000ED2  6FCE               	movwf	UI@i_435& (0+255),b
  8326  000ED4                     l8390:
  8327                           
  8328                           ; BSR set to: 0
  8329  000ED4  0E63               	movlw	99
  8330  000ED6  0100               	movlb	0	; () banked
  8331  000ED8  65CE               	cpfsgt	UI@i_435& (0+255),b
  8332  000EDA  D001               	goto	l8394
  8333  000EDC  D00C               	goto	l8398
  8334  000EDE                     l8394:
  8335                           
  8336                           ; BSR set to: 0
  8337  000EDE  0E68               	movlw	104
  8338  000EE0  0100               	movlb	0	; () banked
  8339  000EE2  6FC4               	movwf	??_UI& (0+255),b
  8340  000EE4  0EE4               	movlw	228
  8341  000EE6                     u8807:
  8342  000EE6  2EE8               	decfsz	wreg,f,c
  8343  000EE8  D7FE               	bra	u8807
  8344  000EEA  2FC4               	decfsz	??_UI& (0+255),f,b
  8345  000EEC  D7FC               	bra	u8807
  8346  000EEE  F000               	nop	
  8347  000EF0  0100               	movlb	0	; () banked
  8348  000EF2  2BCE               	incf	UI@i_435& (0+255),f,b
  8349  000EF4  D7EF               	goto	l8390
  8350  000EF6                     l8398:
  8351                           
  8352                           ; BSR set to: 0
  8353  000EF6  0100               	movlb	0	; () banked
  8354  000EF8  51F6               	movf	_logstate& (0+255),w,b
  8355  000EFA  0100               	movlb	0	; () banked
  8356  000EFC  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  8357  000EFE  B4D8               	btfsc	status,2,c
  8358  000F00  0012               	return	
  8359                           
  8360                           ; BSR set to: 0
  8361                           ;UI.c: 179: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  8362                           
  8363                           ; BSR set to: 0
  8364                           
  8365                           ; BSR set to: 0
  8366  000F02  0E00               	movlw	0
  8367  000F04  0100               	movlb	0	; () banked
  8368  000F06  6FCF               	movwf	UI@i_436& (0+255),b
  8369  000F08                     l8404:
  8370                           
  8371                           ; BSR set to: 0
  8372  000F08  0E63               	movlw	99
  8373  000F0A  0100               	movlb	0	; () banked
  8374  000F0C  65CF               	cpfsgt	UI@i_436& (0+255),b
  8375  000F0E  D001               	goto	l8408
  8376  000F10  D00C               	goto	l8412
  8377  000F12                     l8408:
  8378                           
  8379                           ; BSR set to: 0
  8380  000F12  0E68               	movlw	104
  8381  000F14  0100               	movlb	0	; () banked
  8382  000F16  6FC4               	movwf	??_UI& (0+255),b
  8383  000F18  0EE4               	movlw	228
  8384  000F1A                     u8817:
  8385  000F1A  2EE8               	decfsz	wreg,f,c
  8386  000F1C  D7FE               	bra	u8817
  8387  000F1E  2FC4               	decfsz	??_UI& (0+255),f,b
  8388  000F20  D7FC               	bra	u8817
  8389  000F22  F000               	nop	
  8390  000F24  0100               	movlb	0	; () banked
  8391  000F26  2BCF               	incf	UI@i_436& (0+255),f,b
  8392  000F28  D7EF               	goto	l8404
  8393  000F2A                     l8412:
  8394                           
  8395                           ; BSR set to: 0
  8396  000F2A  0100               	movlb	0	; () banked
  8397  000F2C  51F6               	movf	_logstate& (0+255),w,b
  8398  000F2E  0100               	movlb	0	; () banked
  8399  000F30  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  8400  000F32  B4D8               	btfsc	status,2,c
  8401  000F34  0012               	return	
  8402                           
  8403                           ; BSR set to: 0
  8404                           ;UI.c: 181: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  8405                           
  8406                           ; BSR set to: 0
  8407                           
  8408                           ; BSR set to: 0
  8409  000F36  0E01               	movlw	1
  8410  000F38  EC28  F028         	call	_lcdInst
  8411  000F3C  0E68               	movlw	104
  8412  000F3E  0100               	movlb	0	; () banked
  8413  000F40  6FC4               	movwf	??_UI& (0+255),b
  8414  000F42  0EE4               	movlw	228
  8415  000F44                     u8827:
  8416  000F44  2EE8               	decfsz	wreg,f,c
  8417  000F46  D7FE               	bra	u8827
  8418  000F48  2FC4               	decfsz	??_UI& (0+255),f,b
  8419  000F4A  D7FC               	bra	u8827
  8420  000F4C  F000               	nop	
  8421                           
  8422                           ;UI.c: 182: lcdInst(0b10000000);;
  8423  000F4E  0E80               	movlw	128
  8424  000F50  EC28  F028         	call	_lcdInst
  8425                           
  8426                           ;UI.c: 183: printf(" -- POP  CAN -- ");
  8427  000F54  0E3C               	movlw	low STR_24
  8428  000F56  0100               	movlb	0	; () banked
  8429  000F58  6F8E               	movwf	printf@f& (0+255),b
  8430  000F5A  0EFD               	movlw	high STR_24
  8431  000F5C  0100               	movlb	0	; () banked
  8432  000F5E  6F8F               	movwf	(printf@f+1)& (0+255),b
  8433  000F60  ECE8  F00A         	call	_printf	;wreg free
  8434                           
  8435                           ;UI.c: 184: lcdInst(0b11000000);;
  8436  000F64  0EC0               	movlw	192
  8437  000F66  EC28  F028         	call	_lcdInst
  8438                           
  8439                           ;UI.c: 185: printf("NTAB: %d|TAB: %d", log_count_pop_no_tab, log_count_pop_w_tab);
  8440  000F6A  0E19               	movlw	low STR_25
  8441  000F6C  0100               	movlb	0	; () banked
  8442  000F6E  6F8E               	movwf	printf@f& (0+255),b
  8443  000F70  0EFE               	movlw	high STR_25
  8444  000F72  0100               	movlb	0	; () banked
  8445  000F74  6F8F               	movwf	(printf@f+1)& (0+255),b
  8446  000F76  C0F0  F090         	movff	_log_count_pop_no_tab,?_printf+2
  8447  000F7A  C0F1  F091         	movff	_log_count_pop_no_tab+1,?_printf+3
  8448  000F7E  C0F2  F092         	movff	_log_count_pop_w_tab,?_printf+4
  8449  000F82  C0F3  F093         	movff	_log_count_pop_w_tab+1,?_printf+5
  8450  000F86  ECE8  F00A         	call	_printf	;wreg free
  8451                           
  8452                           ;UI.c: 187: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  8453  000F8A  0E00               	movlw	0
  8454  000F8C  0100               	movlb	0	; () banked
  8455  000F8E  6FD0               	movwf	UI@i_439& (0+255),b
  8456  000F90                     l8430:
  8457                           
  8458                           ; BSR set to: 0
  8459  000F90  0E63               	movlw	99
  8460  000F92  0100               	movlb	0	; () banked
  8461  000F94  65D0               	cpfsgt	UI@i_439& (0+255),b
  8462  000F96  D001               	goto	l8434
  8463  000F98  D00C               	goto	l8438
  8464  000F9A                     l8434:
  8465                           
  8466                           ; BSR set to: 0
  8467  000F9A  0E68               	movlw	104
  8468  000F9C  0100               	movlb	0	; () banked
  8469  000F9E  6FC4               	movwf	??_UI& (0+255),b
  8470  000FA0  0EE4               	movlw	228
  8471  000FA2                     u8837:
  8472  000FA2  2EE8               	decfsz	wreg,f,c
  8473  000FA4  D7FE               	bra	u8837
  8474  000FA6  2FC4               	decfsz	??_UI& (0+255),f,b
  8475  000FA8  D7FC               	bra	u8837
  8476  000FAA  F000               	nop	
  8477  000FAC  0100               	movlb	0	; () banked
  8478  000FAE  2BD0               	incf	UI@i_439& (0+255),f,b
  8479  000FB0  D7EF               	goto	l8430
  8480  000FB2                     l8438:
  8481                           
  8482                           ; BSR set to: 0
  8483  000FB2  0100               	movlb	0	; () banked
  8484  000FB4  51F6               	movf	_logstate& (0+255),w,b
  8485  000FB6  0100               	movlb	0	; () banked
  8486  000FB8  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  8487  000FBA  B4D8               	btfsc	status,2,c
  8488  000FBC  0012               	return	
  8489                           
  8490                           ; BSR set to: 0
  8491                           ;UI.c: 188: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  8492                           
  8493                           ; BSR set to: 0
  8494                           
  8495                           ; BSR set to: 0
  8496  000FBE  0E00               	movlw	0
  8497  000FC0  0100               	movlb	0	; () banked
  8498  000FC2  6FD1               	movwf	UI@i_440& (0+255),b
  8499  000FC4                     l8444:
  8500                           
  8501                           ; BSR set to: 0
  8502  000FC4  0E63               	movlw	99
  8503  000FC6  0100               	movlb	0	; () banked
  8504  000FC8  65D1               	cpfsgt	UI@i_440& (0+255),b
  8505  000FCA  D001               	goto	l8448
  8506  000FCC  D00C               	goto	l8452
  8507  000FCE                     l8448:
  8508                           
  8509                           ; BSR set to: 0
  8510  000FCE  0E68               	movlw	104
  8511  000FD0  0100               	movlb	0	; () banked
  8512  000FD2  6FC4               	movwf	??_UI& (0+255),b
  8513  000FD4  0EE4               	movlw	228
  8514  000FD6                     u8847:
  8515  000FD6  2EE8               	decfsz	wreg,f,c
  8516  000FD8  D7FE               	bra	u8847
  8517  000FDA  2FC4               	decfsz	??_UI& (0+255),f,b
  8518  000FDC  D7FC               	bra	u8847
  8519  000FDE  F000               	nop	
  8520  000FE0  0100               	movlb	0	; () banked
  8521  000FE2  2BD1               	incf	UI@i_440& (0+255),f,b
  8522  000FE4  D7EF               	goto	l8444
  8523  000FE6                     l8452:
  8524                           
  8525                           ; BSR set to: 0
  8526  000FE6  0100               	movlb	0	; () banked
  8527  000FE8  51F6               	movf	_logstate& (0+255),w,b
  8528  000FEA  0100               	movlb	0	; () banked
  8529  000FEC  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  8530  000FEE  B4D8               	btfsc	status,2,c
  8531  000FF0  0012               	return	
  8532                           
  8533                           ; BSR set to: 0
  8534                           ;UI.c: 190: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  8535                           
  8536                           ; BSR set to: 0
  8537                           
  8538                           ; BSR set to: 0
  8539  000FF2  0E01               	movlw	1
  8540  000FF4  EC28  F028         	call	_lcdInst
  8541  000FF8  0E68               	movlw	104
  8542  000FFA  0100               	movlb	0	; () banked
  8543  000FFC  6FC4               	movwf	??_UI& (0+255),b
  8544  000FFE  0EE4               	movlw	228
  8545  001000                     u8857:
  8546  001000  2EE8               	decfsz	wreg,f,c
  8547  001002  D7FE               	bra	u8857
  8548  001004  2FC4               	decfsz	??_UI& (0+255),f,b
  8549  001006  D7FC               	bra	u8857
  8550  001008  F000               	nop	
  8551                           
  8552                           ;UI.c: 191: lcdInst(0b10000000);;
  8553  00100A  0E80               	movlw	128
  8554  00100C  EC28  F028         	call	_lcdInst
  8555                           
  8556                           ;UI.c: 192: printf(" -- SOUP CAN -- ");
  8557  001010  0E4D               	movlw	low STR_26
  8558  001012  0100               	movlb	0	; () banked
  8559  001014  6F8E               	movwf	printf@f& (0+255),b
  8560  001016  0EFD               	movlw	high STR_26
  8561  001018  0100               	movlb	0	; () banked
  8562  00101A  6F8F               	movwf	(printf@f+1)& (0+255),b
  8563  00101C  ECE8  F00A         	call	_printf	;wreg free
  8564                           
  8565                           ;UI.c: 193: lcdInst(0b11000000);;
  8566  001020  0EC0               	movlw	192
  8567  001022  EC28  F028         	call	_lcdInst
  8568                           
  8569                           ;UI.c: 194: printf("NLAB: %d|LAB: %d", log_count_can_no_lab, log_count_can_w_lab);
  8570  001026  0E08               	movlw	low STR_27
  8571  001028  0100               	movlb	0	; () banked
  8572  00102A  6F8E               	movwf	printf@f& (0+255),b
  8573  00102C  0EFE               	movlw	high STR_27
  8574  00102E  0100               	movlb	0	; () banked
  8575  001030  6F8F               	movwf	(printf@f+1)& (0+255),b
  8576  001032  C071  F090         	movff	_log_count_can_no_lab,?_printf+2
  8577  001036  C072  F091         	movff	_log_count_can_no_lab+1,?_printf+3
  8578  00103A  C073  F092         	movff	_log_count_can_w_lab,?_printf+4
  8579  00103E  C074  F093         	movff	_log_count_can_w_lab+1,?_printf+5
  8580  001042  ECE8  F00A         	call	_printf	;wreg free
  8581                           
  8582                           ;UI.c: 196: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  8583  001046  0E00               	movlw	0
  8584  001048  0100               	movlb	0	; () banked
  8585  00104A  6FD2               	movwf	UI@i_443& (0+255),b
  8586  00104C                     l8470:
  8587                           
  8588                           ; BSR set to: 0
  8589  00104C  0E63               	movlw	99
  8590  00104E  0100               	movlb	0	; () banked
  8591  001050  65D2               	cpfsgt	UI@i_443& (0+255),b
  8592  001052  D001               	goto	l8474
  8593  001054  D00C               	goto	l8478
  8594  001056                     l8474:
  8595                           
  8596                           ; BSR set to: 0
  8597  001056  0E68               	movlw	104
  8598  001058  0100               	movlb	0	; () banked
  8599  00105A  6FC4               	movwf	??_UI& (0+255),b
  8600  00105C  0EE4               	movlw	228
  8601  00105E                     u8867:
  8602  00105E  2EE8               	decfsz	wreg,f,c
  8603  001060  D7FE               	bra	u8867
  8604  001062  2FC4               	decfsz	??_UI& (0+255),f,b
  8605  001064  D7FC               	bra	u8867
  8606  001066  F000               	nop	
  8607  001068  0100               	movlb	0	; () banked
  8608  00106A  2BD2               	incf	UI@i_443& (0+255),f,b
  8609  00106C  D7EF               	goto	l8470
  8610  00106E                     l8478:
  8611                           
  8612                           ; BSR set to: 0
  8613  00106E  0100               	movlb	0	; () banked
  8614  001070  51F6               	movf	_logstate& (0+255),w,b
  8615  001072  0100               	movlb	0	; () banked
  8616  001074  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  8617  001076  B4D8               	btfsc	status,2,c
  8618  001078  0012               	return	
  8619                           
  8620                           ; BSR set to: 0
  8621                           ;UI.c: 197: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  8622                           
  8623                           ; BSR set to: 0
  8624                           
  8625                           ; BSR set to: 0
  8626  00107A  0E00               	movlw	0
  8627  00107C  0100               	movlb	0	; () banked
  8628  00107E  6FD3               	movwf	UI@i_444& (0+255),b
  8629  001080                     l8484:
  8630                           
  8631                           ; BSR set to: 0
  8632  001080  0E63               	movlw	99
  8633  001082  0100               	movlb	0	; () banked
  8634  001084  65D3               	cpfsgt	UI@i_444& (0+255),b
  8635  001086  D001               	goto	l8488
  8636  001088  D00C               	goto	l8492
  8637  00108A                     l8488:
  8638                           
  8639                           ; BSR set to: 0
  8640  00108A  0E68               	movlw	104
  8641  00108C  0100               	movlb	0	; () banked
  8642  00108E  6FC4               	movwf	??_UI& (0+255),b
  8643  001090  0EE4               	movlw	228
  8644  001092                     u8877:
  8645  001092  2EE8               	decfsz	wreg,f,c
  8646  001094  D7FE               	bra	u8877
  8647  001096  2FC4               	decfsz	??_UI& (0+255),f,b
  8648  001098  D7FC               	bra	u8877
  8649  00109A  F000               	nop	
  8650  00109C  0100               	movlb	0	; () banked
  8651  00109E  2BD3               	incf	UI@i_444& (0+255),f,b
  8652  0010A0  D7EF               	goto	l8484
  8653  0010A2                     l8492:
  8654                           
  8655                           ; BSR set to: 0
  8656  0010A2  0100               	movlb	0	; () banked
  8657  0010A4  51F6               	movf	_logstate& (0+255),w,b
  8658  0010A6  0100               	movlb	0	; () banked
  8659  0010A8  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  8660  0010AA  B4D8               	btfsc	status,2,c
  8661  0010AC  0012               	return	
  8662                           
  8663                           ; BSR set to: 0
  8664                           ;UI.c: 199: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  8665                           
  8666                           ; BSR set to: 0
  8667                           
  8668                           ; BSR set to: 0
  8669  0010AE  0E01               	movlw	1
  8670  0010B0  EC28  F028         	call	_lcdInst
  8671  0010B4  0E68               	movlw	104
  8672  0010B6  0100               	movlb	0	; () banked
  8673  0010B8  6FC4               	movwf	??_UI& (0+255),b
  8674  0010BA  0EE4               	movlw	228
  8675  0010BC                     u8887:
  8676  0010BC  2EE8               	decfsz	wreg,f,c
  8677  0010BE  D7FE               	bra	u8887
  8678  0010C0  2FC4               	decfsz	??_UI& (0+255),f,b
  8679  0010C2  D7FC               	bra	u8887
  8680  0010C4  F000               	nop	
  8681                           
  8682                           ;UI.c: 200: lcdInst(0b10000000);;
  8683  0010C6  0E80               	movlw	128
  8684  0010C8  EC28  F028         	call	_lcdInst
  8685                           
  8686                           ;UI.c: 201: printf("-- TOTAL CANS --");
  8687  0010CC  0E5E               	movlw	low STR_28
  8688  0010CE  0100               	movlb	0	; () banked
  8689  0010D0  6F8E               	movwf	printf@f& (0+255),b
  8690  0010D2  0EFD               	movlw	high STR_28
  8691  0010D4  0100               	movlb	0	; () banked
  8692  0010D6  6F8F               	movwf	(printf@f+1)& (0+255),b
  8693  0010D8  ECE8  F00A         	call	_printf	;wreg free
  8694                           
  8695                           ;UI.c: 202: lcdInst(0b11000000);;
  8696  0010DC  0EC0               	movlw	192
  8697  0010DE  EC28  F028         	call	_lcdInst
  8698                           
  8699                           ;UI.c: 203: printf("%d", log_count_total);
  8700  0010E2  0E16               	movlw	low (STR_27+14)
  8701  0010E4  0100               	movlb	0	; () banked
  8702  0010E6  6F8E               	movwf	printf@f& (0+255),b
  8703  0010E8  0EFE               	movlw	high (STR_27+14)
  8704  0010EA  0100               	movlb	0	; () banked
  8705  0010EC  6F8F               	movwf	(printf@f+1)& (0+255),b
  8706  0010EE  C075  F090         	movff	_log_count_total,?_printf+2
  8707  0010F2  C076  F091         	movff	_log_count_total+1,?_printf+3
  8708  0010F6  ECE8  F00A         	call	_printf	;wreg free
  8709                           
  8710                           ;UI.c: 205: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  8711  0010FA  0E00               	movlw	0
  8712  0010FC  0100               	movlb	0	; () banked
  8713  0010FE  6FD4               	movwf	UI@i_447& (0+255),b
  8714  001100                     l8510:
  8715                           
  8716                           ; BSR set to: 0
  8717  001100  0E63               	movlw	99
  8718  001102  0100               	movlb	0	; () banked
  8719  001104  65D4               	cpfsgt	UI@i_447& (0+255),b
  8720  001106  D001               	goto	l8514
  8721  001108  D00C               	goto	l8518
  8722  00110A                     l8514:
  8723                           
  8724                           ; BSR set to: 0
  8725  00110A  0E68               	movlw	104
  8726  00110C  0100               	movlb	0	; () banked
  8727  00110E  6FC4               	movwf	??_UI& (0+255),b
  8728  001110  0EE4               	movlw	228
  8729  001112                     u8897:
  8730  001112  2EE8               	decfsz	wreg,f,c
  8731  001114  D7FE               	bra	u8897
  8732  001116  2FC4               	decfsz	??_UI& (0+255),f,b
  8733  001118  D7FC               	bra	u8897
  8734  00111A  F000               	nop	
  8735  00111C  0100               	movlb	0	; () banked
  8736  00111E  2BD4               	incf	UI@i_447& (0+255),f,b
  8737  001120  D7EF               	goto	l8510
  8738  001122                     l8518:
  8739                           
  8740                           ; BSR set to: 0
  8741  001122  0100               	movlb	0	; () banked
  8742  001124  51F6               	movf	_logstate& (0+255),w,b
  8743  001126  0100               	movlb	0	; () banked
  8744  001128  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  8745  00112A  B4D8               	btfsc	status,2,c
  8746  00112C  0012               	return	
  8747                           
  8748                           ; BSR set to: 0
  8749                           ;UI.c: 206: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  8750                           
  8751                           ; BSR set to: 0
  8752                           
  8753                           ; BSR set to: 0
  8754  00112E  0E00               	movlw	0
  8755  001130  0100               	movlb	0	; () banked
  8756  001132  6FD5               	movwf	UI@i_448& (0+255),b
  8757  001134                     l8524:
  8758                           
  8759                           ; BSR set to: 0
  8760  001134  0E63               	movlw	99
  8761  001136  0100               	movlb	0	; () banked
  8762  001138  65D5               	cpfsgt	UI@i_448& (0+255),b
  8763  00113A  D001               	goto	l8528
  8764  00113C  D00C               	goto	l8532
  8765  00113E                     l8528:
  8766                           
  8767                           ; BSR set to: 0
  8768  00113E  0E68               	movlw	104
  8769  001140  0100               	movlb	0	; () banked
  8770  001142  6FC4               	movwf	??_UI& (0+255),b
  8771  001144  0EE4               	movlw	228
  8772  001146                     u8907:
  8773  001146  2EE8               	decfsz	wreg,f,c
  8774  001148  D7FE               	bra	u8907
  8775  00114A  2FC4               	decfsz	??_UI& (0+255),f,b
  8776  00114C  D7FC               	bra	u8907
  8777  00114E  F000               	nop	
  8778  001150  0100               	movlb	0	; () banked
  8779  001152  2BD5               	incf	UI@i_448& (0+255),f,b
  8780  001154  D7EF               	goto	l8524
  8781  001156                     l8532:
  8782                           
  8783                           ; BSR set to: 0
  8784  001156  0100               	movlb	0	; () banked
  8785  001158  51F6               	movf	_logstate& (0+255),w,b
  8786  00115A  0100               	movlb	0	; () banked
  8787  00115C  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  8788  00115E  B4D8               	btfsc	status,2,c
  8789  001160  0012               	return	
  8790  001162                     l8536:
  8791  001162  0100               	movlb	0	; () banked
  8792  001164  51F6               	movf	_logstate& (0+255),w,b
  8793  001166  0100               	movlb	0	; () banked
  8794  001168  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  8795  00116A  B4D8               	btfsc	status,2,c
  8796  00116C  0012               	return	
  8797  00116E  D44A               	goto	l8232
  8798  001170                     __end_of_UI:
  8799                           	opt stack 0
  8800                           tblptru	equ	0xFF8
  8801                           tblptrh	equ	0xFF7
  8802                           tblptrl	equ	0xFF6
  8803                           tablat	equ	0xFF5
  8804                           prodh	equ	0xFF4
  8805                           prodl	equ	0xFF3
  8806                           intcon	equ	0xFF2
  8807                           intcon2	equ	0xFF1
  8808                           intcon3	equ	0xFF0
  8809                           postinc0	equ	0xFEE
  8810                           wreg	equ	0xFE8
  8811                           postdec1	equ	0xFE5
  8812                           fsr1l	equ	0xFE1
  8813                           indf2	equ	0xFDF
  8814                           postinc2	equ	0xFDE
  8815                           postdec2	equ	0xFDD
  8816                           fsr2h	equ	0xFDA
  8817                           fsr2l	equ	0xFD9
  8818                           status	equ	0xFD8
  8819                           
  8820 ;; *************** function _printRTC *****************
  8821 ;; Defined at:
  8822 ;;		line 63 in file "RTC.c"
  8823 ;; Parameters:    Size  Location     Type
  8824 ;;		None
  8825 ;; Auto vars:     Size  Location     Type
  8826 ;;  i               2   66[BANK0 ] int 
  8827 ;;  INT_time       14   46[BANK0 ] int [7]
  8828 ;;  month           4   62[BANK0 ] unsigned char [4]
  8829 ;;  RTC_month       2   60[BANK0 ] int 
  8830 ;; Return value:  Size  Location     Type
  8831 ;;                  1    wreg      void 
  8832 ;; Registers used:
  8833 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8834 ;; Tracked objects:
  8835 ;;		On entry : 0/0
  8836 ;;		On exit  : 0/0
  8837 ;;		Unchanged: 0/0
  8838 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8839 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8840 ;;      Locals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8841 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8842 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8843 ;;Total ram usage:       25 bytes
  8844 ;; Hardware stack levels used:    1
  8845 ;; Hardware stack levels required when called:   10
  8846 ;; This function calls:
  8847 ;;		_getRTC
  8848 ;;		_lcdInst
  8849 ;;		_printf
  8850 ;;		_strcpy
  8851 ;; This function is called by:
  8852 ;;		_UI
  8853 ;;		_change_state_to_menu_start
  8854 ;; This function uses a non-reentrant model
  8855 ;;
  8856                           
  8857                           	psect	text24
  8858  0023F8                     __ptext24:
  8859                           	opt stack 0
  8860  0023F8                     _printRTC:
  8861                           	opt stack 18
  8862                           
  8863                           ;RTC.c: 64: getRTC();
  8864                           
  8865                           ; BSR set to: 0
  8866                           ;incstack = 0
  8867  0023F8  EC41  F021         	call	_getRTC	;wreg free
  8868                           
  8869                           ;RTC.c: 65: char month[] = "MMM";
  8870  0023FC  C139  F0BE         	movff	printRTC@F3219,printRTC@month
  8871  002400  C13A  F0BF         	movff	printRTC@F3219+1,printRTC@month+1
  8872  002404  C13B  F0C0         	movff	printRTC@F3219+2,printRTC@month+2
  8873  002408  C13C  F0C1         	movff	printRTC@F3219+3,printRTC@month+3
  8874                           
  8875                           ;RTC.c: 66: int INT_time[7];
  8876                           ;RTC.c: 67: for(int i = 0; i < 7; i++){
  8877  00240C  0E00               	movlw	0
  8878  00240E  0100               	movlb	0	; () banked
  8879  002410  6FC3               	movwf	(printRTC@i+1)& (0+255),b
  8880  002412  0E00               	movlw	0
  8881  002414  6FC2               	movwf	printRTC@i& (0+255),b
  8882                           
  8883                           ; BSR set to: 0
  8884  002416  0100               	movlb	0	; () banked
  8885  002418  BFC3               	btfsc	(printRTC@i+1)& (0+255),7,b
  8886  00241A  D008               	goto	l6334
  8887  00241C  0100               	movlb	0	; () banked
  8888  00241E  51C3               	movf	(printRTC@i+1)& (0+255),w,b
  8889  002420  E146               	bnz	l606
  8890  002422  0E07               	movlw	7
  8891  002424  0100               	movlb	0	; () banked
  8892  002426  5DC2               	subwf	printRTC@i& (0+255),w,b
  8893  002428  B0D8               	btfsc	status,0,c
  8894  00242A  D041               	goto	l606
  8895  00242C                     l6334:
  8896                           
  8897                           ; BSR set to: 0
  8898                           ;RTC.c: 68: INT_time[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
  8899  00242C  0E24               	movlw	low _time
  8900  00242E  0100               	movlb	0	; () banked
  8901  002430  25C2               	addwf	printRTC@i& (0+255),w,b
  8902  002432  6ED9               	movwf	fsr2l,c
  8903  002434  0E01               	movlw	high _time
  8904  002436  0100               	movlb	0	; () banked
  8905  002438  21C3               	addwfc	(printRTC@i+1)& (0+255),w,b
  8906  00243A  6EDA               	movwf	fsr2h,c
  8907  00243C  50DF               	movf	indf2,w,c
  8908  00243E  0100               	movlb	0	; () banked
  8909  002440  6FAB               	movwf	??_printRTC& (0+255),b
  8910  002442  0100               	movlb	0	; () banked
  8911  002444  3BAB               	swapf	??_printRTC& (0+255),f,b
  8912  002446  0E0F               	movlw	15
  8913  002448  17AB               	andwf	??_printRTC& (0+255),f,b
  8914  00244A  0E0F               	movlw	15
  8915  00244C  0100               	movlb	0	; () banked
  8916  00244E  17AB               	andwf	??_printRTC& (0+255),f,b
  8917  002450  0100               	movlb	0	; () banked
  8918  002452  51AB               	movf	??_printRTC& (0+255),w,b
  8919  002454  0D0A               	mullw	10
  8920  002456  0E24               	movlw	low _time
  8921  002458  0100               	movlb	0	; () banked
  8922  00245A  25C2               	addwf	printRTC@i& (0+255),w,b
  8923  00245C  6ED9               	movwf	fsr2l,c
  8924  00245E  0E01               	movlw	high _time
  8925  002460  0100               	movlb	0	; () banked
  8926  002462  21C3               	addwfc	(printRTC@i+1)& (0+255),w,b
  8927  002464  6EDA               	movwf	fsr2h,c
  8928  002466  50DF               	movf	indf2,w,c
  8929  002468  0B0F               	andlw	15
  8930  00246A  0100               	movlb	0	; () banked
  8931  00246C  6FAC               	movwf	(??_printRTC+1)& (0+255),b
  8932  00246E  6BAD               	clrf	(??_printRTC+2)& (0+255),b
  8933  002470  50F3               	movf	prodl,w,c
  8934  002472  0100               	movlb	0	; () banked
  8935  002474  27AC               	addwf	(??_printRTC+1)& (0+255),f,b
  8936  002476  50F4               	movf	prodh,w,c
  8937  002478  0100               	movlb	0	; () banked
  8938  00247A  23AD               	addwfc	(??_printRTC+2)& (0+255),f,b
  8939  00247C  90D8               	bcf	status,0,c
  8940  00247E  0100               	movlb	0	; () banked
  8941  002480  35C2               	rlcf	printRTC@i& (0+255),w,b
  8942  002482  6ED9               	movwf	fsr2l,c
  8943  002484  0100               	movlb	0	; () banked
  8944  002486  35C3               	rlcf	(printRTC@i+1)& (0+255),w,b
  8945  002488  6EDA               	movwf	fsr2h,c
  8946  00248A  0EAE               	movlw	low printRTC@INT_time
  8947  00248C  26D9               	addwf	fsr2l,f,c
  8948  00248E  0E00               	movlw	high printRTC@INT_time
  8949  002490  22DA               	addwfc	fsr2h,f,c
  8950  002492  C0AC  FFDE         	movff	??_printRTC+1,postinc2
  8951  002496  C0AD  FFDD         	movff	??_printRTC+2,postdec2
  8952                           
  8953                           ; BSR set to: 0
  8954  00249A  0100               	movlb	0	; () banked
  8955  00249C  4BC2               	infsnz	printRTC@i& (0+255),f,b
  8956  00249E  2BC3               	incf	(printRTC@i+1)& (0+255),f,b
  8957                           
  8958                           ; BSR set to: 0
  8959  0024A0  0100               	movlb	0	; () banked
  8960  0024A2  BFC3               	btfsc	(printRTC@i+1)& (0+255),7,b
  8961  0024A4  D7C3               	goto	l6334
  8962  0024A6  0100               	movlb	0	; () banked
  8963  0024A8  51C3               	movf	(printRTC@i+1)& (0+255),w,b
  8964  0024AA  E101               	bnz	u5080
  8965  0024AC  D7BA               	goto	L9
  8966  0024AE                     u5080:
  8967  0024AE                     l606:
  8968                           
  8969                           ; BSR set to: 0
  8970                           ;RTC.c: 69: }
  8971                           ;RTC.c: 70: int RTC_month = INT_time[5];
  8972  0024AE  C0B8  F0BC         	movff	printRTC@INT_time+10,printRTC@RTC_month
  8973  0024B2  C0B9  F0BD         	movff	printRTC@INT_time+11,printRTC@RTC_month+1
  8974                           
  8975                           ;RTC.c: 71: switch(RTC_month){
  8976  0024B6  D0B4               	goto	l6366
  8977  0024B8                     l6340:
  8978                           
  8979                           ; BSR set to: 0
  8980                           ;RTC.c: 73: strcpy(month, "JAN");
  8981  0024B8  0EBE               	movlw	low printRTC@month
  8982  0024BA  0100               	movlb	0	; () banked
  8983  0024BC  6F80               	movwf	strcpy@to& (0+255),b
  8984  0024BE  0E00               	movlw	high printRTC@month
  8985  0024C0  0100               	movlb	0	; () banked
  8986  0024C2  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8987  0024C4  0EDB               	movlw	low STR_8
  8988  0024C6  0100               	movlb	0	; () banked
  8989  0024C8  6F82               	movwf	strcpy@from& (0+255),b
  8990  0024CA  0EFF               	movlw	high STR_8
  8991  0024CC  0100               	movlb	0	; () banked
  8992  0024CE  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8993  0024D0  EC92  F025         	call	_strcpy	;wreg free
  8994                           
  8995                           ;RTC.c: 74: break;
  8996  0024D4  D0D4               	goto	l6368
  8997  0024D6                     l6342:
  8998                           
  8999                           ;RTC.c: 76: strcpy(month, "FEB");
  9000  0024D6  0EBE               	movlw	low printRTC@month
  9001  0024D8  0100               	movlb	0	; () banked
  9002  0024DA  6F80               	movwf	strcpy@to& (0+255),b
  9003  0024DC  0E00               	movlw	high printRTC@month
  9004  0024DE  0100               	movlb	0	; () banked
  9005  0024E0  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9006  0024E2  0ECB               	movlw	low STR_9
  9007  0024E4  0100               	movlb	0	; () banked
  9008  0024E6  6F82               	movwf	strcpy@from& (0+255),b
  9009  0024E8  0EFF               	movlw	high STR_9
  9010  0024EA  0100               	movlb	0	; () banked
  9011  0024EC  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9012  0024EE  EC92  F025         	call	_strcpy	;wreg free
  9013                           
  9014                           ;RTC.c: 77: break;
  9015  0024F2  D0C5               	goto	l6368
  9016  0024F4                     l6344:
  9017                           
  9018                           ;RTC.c: 79: strcpy(month, "MAR");
  9019  0024F4  0EBE               	movlw	low printRTC@month
  9020  0024F6  0100               	movlb	0	; () banked
  9021  0024F8  6F80               	movwf	strcpy@to& (0+255),b
  9022  0024FA  0E00               	movlw	high printRTC@month
  9023  0024FC  0100               	movlb	0	; () banked
  9024  0024FE  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9025  002500  0EE7               	movlw	low STR_10
  9026  002502  0100               	movlb	0	; () banked
  9027  002504  6F82               	movwf	strcpy@from& (0+255),b
  9028  002506  0EFF               	movlw	high STR_10
  9029  002508  0100               	movlb	0	; () banked
  9030  00250A  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9031  00250C  EC92  F025         	call	_strcpy	;wreg free
  9032                           
  9033                           ;RTC.c: 80: break;
  9034  002510  D0B6               	goto	l6368
  9035  002512                     l6346:
  9036                           
  9037                           ;RTC.c: 82: strcpy(month, "APR");
  9038  002512  0EBE               	movlw	low printRTC@month
  9039  002514  0100               	movlb	0	; () banked
  9040  002516  6F80               	movwf	strcpy@to& (0+255),b
  9041  002518  0E00               	movlw	high printRTC@month
  9042  00251A  0100               	movlb	0	; () banked
  9043  00251C  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9044  00251E  0EEB               	movlw	low STR_11
  9045  002520  0100               	movlb	0	; () banked
  9046  002522  6F82               	movwf	strcpy@from& (0+255),b
  9047  002524  0EFF               	movlw	high STR_11
  9048  002526  0100               	movlb	0	; () banked
  9049  002528  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9050  00252A  EC92  F025         	call	_strcpy	;wreg free
  9051                           
  9052                           ;RTC.c: 83: break;
  9053  00252E  D0A7               	goto	l6368
  9054  002530                     l6348:
  9055                           
  9056                           ;RTC.c: 85: strcpy(month, "MAY");
  9057  002530  0EBE               	movlw	low printRTC@month
  9058  002532  0100               	movlb	0	; () banked
  9059  002534  6F80               	movwf	strcpy@to& (0+255),b
  9060  002536  0E00               	movlw	high printRTC@month
  9061  002538  0100               	movlb	0	; () banked
  9062  00253A  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9063  00253C  0EFB               	movlw	low STR_12
  9064  00253E  0100               	movlb	0	; () banked
  9065  002540  6F82               	movwf	strcpy@from& (0+255),b
  9066  002542  0EFF               	movlw	high STR_12
  9067  002544  0100               	movlb	0	; () banked
  9068  002546  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9069  002548  EC92  F025         	call	_strcpy	;wreg free
  9070                           
  9071                           ;RTC.c: 86: break;
  9072  00254C  D098               	goto	l6368
  9073  00254E                     l6350:
  9074                           
  9075                           ;RTC.c: 88: strcpy(month, "JUN");
  9076  00254E  0EBE               	movlw	low printRTC@month
  9077  002550  0100               	movlb	0	; () banked
  9078  002552  6F80               	movwf	strcpy@to& (0+255),b
  9079  002554  0E00               	movlw	high printRTC@month
  9080  002556  0100               	movlb	0	; () banked
  9081  002558  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9082  00255A  0EDF               	movlw	low STR_13
  9083  00255C  0100               	movlb	0	; () banked
  9084  00255E  6F82               	movwf	strcpy@from& (0+255),b
  9085  002560  0EFF               	movlw	high STR_13
  9086  002562  0100               	movlb	0	; () banked
  9087  002564  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9088  002566  EC92  F025         	call	_strcpy	;wreg free
  9089                           
  9090                           ;RTC.c: 89: break;
  9091  00256A  D089               	goto	l6368
  9092  00256C                     l6352:
  9093                           
  9094                           ;RTC.c: 91: strcpy(month, "JUL");
  9095  00256C  0EBE               	movlw	low printRTC@month
  9096  00256E  0100               	movlb	0	; () banked
  9097  002570  6F80               	movwf	strcpy@to& (0+255),b
  9098  002572  0E00               	movlw	high printRTC@month
  9099  002574  0100               	movlb	0	; () banked
  9100  002576  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9101  002578  0ED7               	movlw	low STR_14
  9102  00257A  0100               	movlb	0	; () banked
  9103  00257C  6F82               	movwf	strcpy@from& (0+255),b
  9104  00257E  0EFF               	movlw	high STR_14
  9105  002580  0100               	movlb	0	; () banked
  9106  002582  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9107  002584  EC92  F025         	call	_strcpy	;wreg free
  9108                           
  9109                           ;RTC.c: 92: break;
  9110  002588  D07A               	goto	l6368
  9111  00258A                     l6354:
  9112                           
  9113                           ;RTC.c: 94: strcpy(month, "AUG");
  9114  00258A  0EBE               	movlw	low printRTC@month
  9115  00258C  0100               	movlb	0	; () banked
  9116  00258E  6F80               	movwf	strcpy@to& (0+255),b
  9117  002590  0E00               	movlw	high printRTC@month
  9118  002592  0100               	movlb	0	; () banked
  9119  002594  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9120  002596  0ED3               	movlw	low STR_15
  9121  002598  0100               	movlb	0	; () banked
  9122  00259A  6F82               	movwf	strcpy@from& (0+255),b
  9123  00259C  0EFF               	movlw	high STR_15
  9124  00259E  0100               	movlb	0	; () banked
  9125  0025A0  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9126  0025A2  EC92  F025         	call	_strcpy	;wreg free
  9127                           
  9128                           ;RTC.c: 95: break;
  9129  0025A6  D06B               	goto	l6368
  9130  0025A8                     l6356:
  9131                           
  9132                           ;RTC.c: 97: strcpy(month, "SEP");
  9133  0025A8  0EBE               	movlw	low printRTC@month
  9134  0025AA  0100               	movlb	0	; () banked
  9135  0025AC  6F80               	movwf	strcpy@to& (0+255),b
  9136  0025AE  0E00               	movlw	high printRTC@month
  9137  0025B0  0100               	movlb	0	; () banked
  9138  0025B2  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9139  0025B4  0EE3               	movlw	low STR_16
  9140  0025B6  0100               	movlb	0	; () banked
  9141  0025B8  6F82               	movwf	strcpy@from& (0+255),b
  9142  0025BA  0EFF               	movlw	high STR_16
  9143  0025BC  0100               	movlb	0	; () banked
  9144  0025BE  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9145  0025C0  EC92  F025         	call	_strcpy	;wreg free
  9146                           
  9147                           ;RTC.c: 98: break;
  9148  0025C4  D05C               	goto	l6368
  9149  0025C6                     l6358:
  9150                           
  9151                           ;RTC.c: 100: strcpy(month, "OCT");
  9152  0025C6  0EBE               	movlw	low printRTC@month
  9153  0025C8  0100               	movlb	0	; () banked
  9154  0025CA  6F80               	movwf	strcpy@to& (0+255),b
  9155  0025CC  0E00               	movlw	high printRTC@month
  9156  0025CE  0100               	movlb	0	; () banked
  9157  0025D0  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9158  0025D2  0EF3               	movlw	low STR_17
  9159  0025D4  0100               	movlb	0	; () banked
  9160  0025D6  6F82               	movwf	strcpy@from& (0+255),b
  9161  0025D8  0EFF               	movlw	high STR_17
  9162  0025DA  0100               	movlb	0	; () banked
  9163  0025DC  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9164  0025DE  EC92  F025         	call	_strcpy	;wreg free
  9165                           
  9166                           ;RTC.c: 101: break;
  9167  0025E2  D04D               	goto	l6368
  9168  0025E4                     l6360:
  9169                           
  9170                           ;RTC.c: 103: strcpy(month, "NOV");
  9171  0025E4  0EBE               	movlw	low printRTC@month
  9172  0025E6  0100               	movlb	0	; () banked
  9173  0025E8  6F80               	movwf	strcpy@to& (0+255),b
  9174  0025EA  0E00               	movlw	high printRTC@month
  9175  0025EC  0100               	movlb	0	; () banked
  9176  0025EE  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9177  0025F0  0EF7               	movlw	low STR_18
  9178  0025F2  0100               	movlb	0	; () banked
  9179  0025F4  6F82               	movwf	strcpy@from& (0+255),b
  9180  0025F6  0EFF               	movlw	high STR_18
  9181  0025F8  0100               	movlb	0	; () banked
  9182  0025FA  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9183  0025FC  EC92  F025         	call	_strcpy	;wreg free
  9184                           
  9185                           ;RTC.c: 104: break;
  9186  002600  D03E               	goto	l6368
  9187  002602                     l6362:
  9188                           
  9189                           ;RTC.c: 106: strcpy(month, "DEC");
  9190  002602  0EBE               	movlw	low printRTC@month
  9191  002604  0100               	movlb	0	; () banked
  9192  002606  6F80               	movwf	strcpy@to& (0+255),b
  9193  002608  0E00               	movlw	high printRTC@month
  9194  00260A  0100               	movlb	0	; () banked
  9195  00260C  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9196  00260E  0ECF               	movlw	low STR_19
  9197  002610  0100               	movlb	0	; () banked
  9198  002612  6F82               	movwf	strcpy@from& (0+255),b
  9199  002614  0EFF               	movlw	high STR_19
  9200  002616  0100               	movlb	0	; () banked
  9201  002618  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9202  00261A  EC92  F025         	call	_strcpy	;wreg free
  9203                           
  9204                           ;RTC.c: 108: }
  9205                           
  9206                           ;RTC.c: 107: break;
  9207  00261E  D02F               	goto	l6368
  9208  002620                     l6366:
  9209  002620  C0BC  F0AB         	movff	printRTC@RTC_month,??_printRTC
  9210  002624  C0BD  F0AC         	movff	printRTC@RTC_month+1,??_printRTC+1
  9211                           
  9212                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9213                           ; Switch size 1, requested type "space"
  9214                           ; Number of cases is 1, Range of values is 0 to 0
  9215                           ; switch strategies available:
  9216                           ; Name         Instructions Cycles
  9217                           ; simple_byte            4     3 (average)
  9218                           ;	Chosen strategy is simple_byte
  9219  002628  0100               	movlb	0	; () banked
  9220  00262A  51AC               	movf	(??_printRTC+1)& (0+255),w,b
  9221  00262C  0A00               	xorlw	0	; case 0
  9222  00262E  A4D8               	btfss	status,2,c
  9223  002630  D026               	goto	l6368
  9224                           
  9225                           ; BSR set to: 0
  9226                           ; Switch size 1, requested type "space"
  9227                           ; Number of cases is 12, Range of values is 1 to 12
  9228                           ; switch strategies available:
  9229                           ; Name         Instructions Cycles
  9230                           ; simple_byte           37    19 (average)
  9231                           ;	Chosen strategy is simple_byte
  9232  002632  0100               	movlb	0	; () banked
  9233  002634  51AB               	movf	??_printRTC& (0+255),w,b
  9234  002636  0A01               	xorlw	1	; case 1
  9235  002638  B4D8               	btfsc	status,2,c
  9236  00263A  D73E               	goto	l6340
  9237  00263C  0A03               	xorlw	3	; case 2
  9238  00263E  B4D8               	btfsc	status,2,c
  9239  002640  D74A               	goto	l6342
  9240  002642  0A01               	xorlw	1	; case 3
  9241  002644  B4D8               	btfsc	status,2,c
  9242  002646  D756               	goto	l6344
  9243  002648  0A07               	xorlw	7	; case 4
  9244  00264A  B4D8               	btfsc	status,2,c
  9245  00264C  D762               	goto	l6346
  9246  00264E  0A01               	xorlw	1	; case 5
  9247  002650  B4D8               	btfsc	status,2,c
  9248  002652  D76E               	goto	l6348
  9249  002654  0A03               	xorlw	3	; case 6
  9250  002656  B4D8               	btfsc	status,2,c
  9251  002658  D77A               	goto	l6350
  9252  00265A  0A01               	xorlw	1	; case 7
  9253  00265C  B4D8               	btfsc	status,2,c
  9254  00265E  D786               	goto	l6352
  9255  002660  0A0F               	xorlw	15	; case 8
  9256  002662  B4D8               	btfsc	status,2,c
  9257  002664  D792               	goto	l6354
  9258  002666  0A01               	xorlw	1	; case 9
  9259  002668  B4D8               	btfsc	status,2,c
  9260  00266A  D79E               	goto	l6356
  9261  00266C  0A03               	xorlw	3	; case 10
  9262  00266E  B4D8               	btfsc	status,2,c
  9263  002670  D7AA               	goto	l6358
  9264  002672  0A01               	xorlw	1	; case 11
  9265  002674  B4D8               	btfsc	status,2,c
  9266  002676  D7B6               	goto	l6360
  9267  002678  0A07               	xorlw	7	; case 12
  9268  00267A  B4D8               	btfsc	status,2,c
  9269  00267C  D7C2               	goto	l6362
  9270  00267E                     l6368:
  9271                           
  9272                           ;RTC.c: 109: lcdInst(0b10000000);;
  9273  00267E  0E80               	movlw	128
  9274  002680  EC28  F028         	call	_lcdInst
  9275                           
  9276                           ;RTC.c: 110: printf("%02d%s | %02d:%02d:%02d", INT_time[4],month,INT_time[2],INT_time[1]
      +                          ,INT_time[0]);
  9277  002684  0E0A               	movlw	low STR_21
  9278  002686  0100               	movlb	0	; () banked
  9279  002688  6F8E               	movwf	printf@f& (0+255),b
  9280  00268A  0EFB               	movlw	high STR_21
  9281  00268C  0100               	movlb	0	; () banked
  9282  00268E  6F8F               	movwf	(printf@f+1)& (0+255),b
  9283  002690  C0B6  F090         	movff	printRTC@INT_time+8,?_printf+2
  9284  002694  C0B7  F091         	movff	printRTC@INT_time+9,?_printf+3
  9285  002698  0EBE               	movlw	low printRTC@month
  9286  00269A  0100               	movlb	0	; () banked
  9287  00269C  6F92               	movwf	(?_printf+4)& (0+255),b
  9288  00269E  0E00               	movlw	high printRTC@month
  9289  0026A0  0100               	movlb	0	; () banked
  9290  0026A2  6F93               	movwf	(?_printf+5)& (0+255),b
  9291  0026A4  C0B2  F094         	movff	printRTC@INT_time+4,?_printf+6
  9292  0026A8  C0B3  F095         	movff	printRTC@INT_time+5,?_printf+7
  9293  0026AC  C0B0  F096         	movff	printRTC@INT_time+2,?_printf+8
  9294  0026B0  C0B1  F097         	movff	printRTC@INT_time+3,?_printf+9
  9295  0026B4  C0AE  F098         	movff	printRTC@INT_time,?_printf+10
  9296  0026B8  C0AF  F099         	movff	printRTC@INT_time+1,?_printf+11
  9297  0026BC  ECE8  F00A         	call	_printf	;wreg free
  9298  0026C0  0012               	return		;funcret
  9299  0026C2                     __end_of_printRTC:
  9300                           	opt stack 0
  9301                           tblptru	equ	0xFF8
  9302                           tblptrh	equ	0xFF7
  9303                           tblptrl	equ	0xFF6
  9304                           tablat	equ	0xFF5
  9305                           prodh	equ	0xFF4
  9306                           prodl	equ	0xFF3
  9307                           intcon	equ	0xFF2
  9308                           intcon2	equ	0xFF1
  9309                           intcon3	equ	0xFF0
  9310                           postinc0	equ	0xFEE
  9311                           wreg	equ	0xFE8
  9312                           postdec1	equ	0xFE5
  9313                           fsr1l	equ	0xFE1
  9314                           indf2	equ	0xFDF
  9315                           postinc2	equ	0xFDE
  9316                           postdec2	equ	0xFDD
  9317                           fsr2h	equ	0xFDA
  9318                           fsr2l	equ	0xFD9
  9319                           status	equ	0xFD8
  9320                           
  9321 ;; *************** function _strcpy *****************
  9322 ;; Defined at:
  9323 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strcpy.c"
  9324 ;; Parameters:    Size  Location     Type
  9325 ;;  to              2    0[BANK0 ] PTR unsigned char 
  9326 ;;		 -> printRTC@month(4), UI@month(4), 
  9327 ;;  from            2    2[BANK0 ] PTR const unsigned char 
  9328 ;;		 -> STR_62(4), STR_61(4), STR_60(4), STR_59(4), 
  9329 ;;		 -> STR_58(4), STR_57(4), STR_56(4), STR_55(4), 
  9330 ;;		 -> STR_54(4), STR_53(4), STR_52(4), STR_51(4), 
  9331 ;;		 -> STR_20(4), STR_19(4), STR_18(4), STR_17(4), 
  9332 ;;		 -> STR_16(4), STR_15(4), STR_14(4), STR_13(4), 
  9333 ;;		 -> STR_12(4), STR_11(4), STR_10(4), STR_9(4), 
  9334 ;;		 -> STR_8(4), 
  9335 ;; Auto vars:     Size  Location     Type
  9336 ;;  cp              2    4[BANK0 ] PTR unsigned char 
  9337 ;;		 -> printRTC@month(4), UI@month(4), 
  9338 ;; Return value:  Size  Location     Type
  9339 ;;                  2    0[BANK0 ] PTR unsigned char 
  9340 ;; Registers used:
  9341 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  9342 ;; Tracked objects:
  9343 ;;		On entry : 0/0
  9344 ;;		On exit  : 0/0
  9345 ;;		Unchanged: 0/0
  9346 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9347 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9348 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9349 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9350 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9351 ;;Total ram usage:        6 bytes
  9352 ;; Hardware stack levels used:    1
  9353 ;; Hardware stack levels required when called:    7
  9354 ;; This function calls:
  9355 ;;		Nothing
  9356 ;; This function is called by:
  9357 ;;		_UI
  9358 ;;		_printRTC
  9359 ;; This function uses a non-reentrant model
  9360 ;;
  9361                           
  9362                           	psect	text25
  9363  004B24                     __ptext25:
  9364                           	opt stack 0
  9365  004B24                     _strcpy:
  9366                           	opt stack 20
  9367                           
  9368                           ;incstack = 0
  9369  004B24  C080  F084         	movff	strcpy@to,strcpy@cp
  9370  004B28  C081  F085         	movff	strcpy@to+1,strcpy@cp+1
  9371  004B2C  D006               	goto	l6078
  9372  004B2E                     l6076:
  9373  004B2E  0100               	movlb	0	; () banked
  9374  004B30  4B84               	infsnz	strcpy@cp& (0+255),f,b
  9375  004B32  2B85               	incf	(strcpy@cp+1)& (0+255),f,b
  9376  004B34  0100               	movlb	0	; () banked
  9377  004B36  4B82               	infsnz	strcpy@from& (0+255),f,b
  9378  004B38  2B83               	incf	(strcpy@from+1)& (0+255),f,b
  9379  004B3A                     l6078:
  9380  004B3A  C082  FFF6         	movff	strcpy@from,tblptrl
  9381  004B3E  C083  FFF7         	movff	strcpy@from+1,tblptrh
  9382  004B42                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  9383  004B42  6AF8               	clrf	tblptru,c
  9384  004B44                     	endif
  9385  004B44                     	if	0	;tblptru may be non-zero
  9386  004B44                     	endif
  9387  004B44  C084  FFD9         	movff	strcpy@cp,fsr2l
  9388  004B48  C085  FFDA         	movff	strcpy@cp+1,fsr2h
  9389  004B4C  0008               	tblrd		*
  9390  004B4E  CFF5 FFDF          	movff	tablat,indf2
  9391  004B52  50DF               	movf	indf2,w,c
  9392  004B54  B4D8               	btfsc	status,2,c
  9393  004B56  0012               	return	
  9394  004B58  D7EA               	goto	l6076
  9395  004B5A                     __end_of_strcpy:
  9396                           	opt stack 0
  9397                           tblptru	equ	0xFF8
  9398                           tblptrh	equ	0xFF7
  9399                           tblptrl	equ	0xFF6
  9400                           tablat	equ	0xFF5
  9401                           prodh	equ	0xFF4
  9402                           prodl	equ	0xFF3
  9403                           intcon	equ	0xFF2
  9404                           intcon2	equ	0xFF1
  9405                           intcon3	equ	0xFF0
  9406                           postinc0	equ	0xFEE
  9407                           wreg	equ	0xFE8
  9408                           postdec1	equ	0xFE5
  9409                           fsr1l	equ	0xFE1
  9410                           indf2	equ	0xFDF
  9411                           postinc2	equ	0xFDE
  9412                           postdec2	equ	0xFDD
  9413                           fsr2h	equ	0xFDA
  9414                           fsr2l	equ	0xFD9
  9415                           status	equ	0xFD8
  9416                           
  9417 ;; *************** function _getRTC *****************
  9418 ;; Defined at:
  9419 ;;		line 44 in file "RTC.c"
  9420 ;; Parameters:    Size  Location     Type
  9421 ;;		None
  9422 ;; Auto vars:     Size  Location     Type
  9423 ;;  i               2    3[BANK0 ] int 
  9424 ;; Return value:  Size  Location     Type
  9425 ;;                  1    wreg      void 
  9426 ;; Registers used:
  9427 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9428 ;; Tracked objects:
  9429 ;;		On entry : 0/0
  9430 ;;		On exit  : 0/0
  9431 ;;		Unchanged: 0/0
  9432 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9433 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9434 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9435 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9436 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9437 ;;Total ram usage:        2 bytes
  9438 ;; Hardware stack levels used:    1
  9439 ;; Hardware stack levels required when called:    9
  9440 ;; This function calls:
  9441 ;;		_I2C_Master_Read
  9442 ;;		_I2C_Master_Start
  9443 ;;		_I2C_Master_Stop
  9444 ;;		_I2C_Master_Write
  9445 ;; This function is called by:
  9446 ;;		_printRTC
  9447 ;;		_initSortTimer
  9448 ;; This function uses a non-reentrant model
  9449 ;;
  9450                           
  9451                           	psect	text26
  9452  004282                     __ptext26:
  9453                           	opt stack 0
  9454  004282                     _getRTC:
  9455                           	opt stack 18
  9456                           
  9457                           ;RTC.c: 48: I2C_Master_Start();
  9458                           
  9459                           ;incstack = 0
  9460  004282  EC4E  F028         	call	_I2C_Master_Start	;wreg free
  9461                           
  9462                           ;RTC.c: 49: I2C_Master_Write(0b11010000);
  9463  004286  0E00               	movlw	0
  9464  004288  0100               	movlb	0	; () banked
  9465  00428A  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  9466  00428C  0ED0               	movlw	208
  9467  00428E  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  9468  004290  EC3C  F028         	call	_I2C_Master_Write	;wreg free
  9469                           
  9470                           ;RTC.c: 50: I2C_Master_Write(0x00);
  9471  004294  0E00               	movlw	0
  9472  004296  0100               	movlb	0	; () banked
  9473  004298  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  9474  00429A  0E00               	movlw	0
  9475  00429C  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  9476  00429E  EC3C  F028         	call	_I2C_Master_Write	;wreg free
  9477                           
  9478                           ;RTC.c: 51: I2C_Master_Stop();
  9479  0042A2  EC4A  F028         	call	_I2C_Master_Stop	;wreg free
  9480                           
  9481                           ;RTC.c: 54: I2C_Master_Start();
  9482  0042A6  EC4E  F028         	call	_I2C_Master_Start	;wreg free
  9483                           
  9484                           ;RTC.c: 55: I2C_Master_Write(0b11010001);
  9485  0042AA  0E00               	movlw	0
  9486  0042AC  0100               	movlb	0	; () banked
  9487  0042AE  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  9488  0042B0  0ED1               	movlw	209
  9489  0042B2  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  9490  0042B4  EC3C  F028         	call	_I2C_Master_Write	;wreg free
  9491                           
  9492                           ;RTC.c: 56: for(int i = 0; i < 6; i++){
  9493  0042B8  0E00               	movlw	0
  9494  0042BA  0100               	movlb	0	; () banked
  9495  0042BC  6F84               	movwf	(getRTC@i+1)& (0+255),b
  9496  0042BE  0E00               	movlw	0
  9497  0042C0  6F83               	movwf	getRTC@i& (0+255),b
  9498  0042C2                     l6084:
  9499                           
  9500                           ; BSR set to: 0
  9501  0042C2  0100               	movlb	0	; () banked
  9502  0042C4  BF84               	btfsc	(getRTC@i+1)& (0+255),7,b
  9503  0042C6  D008               	goto	l6088
  9504  0042C8  0100               	movlb	0	; () banked
  9505  0042CA  5184               	movf	(getRTC@i+1)& (0+255),w,b
  9506  0042CC  E115               	bnz	l6094
  9507  0042CE  0E06               	movlw	6
  9508  0042D0  0100               	movlb	0	; () banked
  9509  0042D2  5D83               	subwf	getRTC@i& (0+255),w,b
  9510  0042D4  B0D8               	btfsc	status,0,c
  9511  0042D6  D010               	goto	l6094
  9512  0042D8                     l6088:
  9513                           
  9514                           ; BSR set to: 0
  9515                           ;RTC.c: 57: time[i] = I2C_Master_Read(1);
  9516  0042D8  0E24               	movlw	low _time
  9517  0042DA  0100               	movlb	0	; () banked
  9518  0042DC  2583               	addwf	getRTC@i& (0+255),w,b
  9519  0042DE  6ED9               	movwf	fsr2l,c
  9520  0042E0  0E01               	movlw	high _time
  9521  0042E2  0100               	movlb	0	; () banked
  9522  0042E4  2184               	addwfc	(getRTC@i+1)& (0+255),w,b
  9523  0042E6  6EDA               	movwf	fsr2h,c
  9524  0042E8  0E01               	movlw	1
  9525  0042EA  ECE9  F026         	call	_I2C_Master_Read
  9526  0042EE  6EDF               	movwf	indf2,c
  9527  0042F0  0100               	movlb	0	; () banked
  9528  0042F2  4B83               	infsnz	getRTC@i& (0+255),f,b
  9529  0042F4  2B84               	incf	(getRTC@i+1)& (0+255),f,b
  9530  0042F6  D7E5               	goto	l6084
  9531  0042F8                     l6094:
  9532                           
  9533                           ; BSR set to: 0
  9534                           ;RTC.c: 58: }
  9535                           ;RTC.c: 59: time[6] = I2C_Master_Read(0);
  9536  0042F8  0E00               	movlw	0
  9537  0042FA  ECE9  F026         	call	_I2C_Master_Read
  9538  0042FE  0101               	movlb	1	; () banked
  9539  004300  6F2A               	movwf	(_time+6)& (0+255),b
  9540                           
  9541                           ;RTC.c: 60: I2C_Master_Stop();
  9542  004302  EC4A  F028         	call	_I2C_Master_Stop	;wreg free
  9543  004306  0012               	return		;funcret
  9544  004308                     __end_of_getRTC:
  9545                           	opt stack 0
  9546                           tblptru	equ	0xFF8
  9547                           tblptrh	equ	0xFF7
  9548                           tblptrl	equ	0xFF6
  9549                           tablat	equ	0xFF5
  9550                           prodh	equ	0xFF4
  9551                           prodl	equ	0xFF3
  9552                           intcon	equ	0xFF2
  9553                           intcon2	equ	0xFF1
  9554                           intcon3	equ	0xFF0
  9555                           postinc0	equ	0xFEE
  9556                           wreg	equ	0xFE8
  9557                           postdec1	equ	0xFE5
  9558                           fsr1l	equ	0xFE1
  9559                           indf2	equ	0xFDF
  9560                           postinc2	equ	0xFDE
  9561                           postdec2	equ	0xFDD
  9562                           fsr2h	equ	0xFDA
  9563                           fsr2l	equ	0xFD9
  9564                           status	equ	0xFD8
  9565                           
  9566 ;; *************** function _I2C_Master_Write *****************
  9567 ;; Defined at:
  9568 ;;		line 49 in file "I2C.c"
  9569 ;; Parameters:    Size  Location     Type
  9570 ;;  d               2    1[BANK0 ] unsigned int 
  9571 ;; Auto vars:     Size  Location     Type
  9572 ;;		None
  9573 ;; Return value:  Size  Location     Type
  9574 ;;                  1    wreg      void 
  9575 ;; Registers used:
  9576 ;;		wreg, status,2, status,0, cstack
  9577 ;; Tracked objects:
  9578 ;;		On entry : 0/0
  9579 ;;		On exit  : 0/0
  9580 ;;		Unchanged: 0/0
  9581 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9582 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9583 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9584 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9585 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9586 ;;Total ram usage:        2 bytes
  9587 ;; Hardware stack levels used:    1
  9588 ;; Hardware stack levels required when called:    8
  9589 ;; This function calls:
  9590 ;;		_I2C_Master_Wait
  9591 ;; This function is called by:
  9592 ;;		_loadRTC
  9593 ;;		_getRTC
  9594 ;; This function uses a non-reentrant model
  9595 ;;
  9596                           
  9597                           	psect	text27
  9598  005078                     __ptext27:
  9599                           	opt stack 0
  9600  005078                     _I2C_Master_Write:
  9601                           	opt stack 18
  9602                           
  9603                           ;I2C.c: 51: I2C_Master_Wait();
  9604                           
  9605                           ;incstack = 0
  9606  005078  EC0D  F028         	call	_I2C_Master_Wait	;wreg free
  9607                           
  9608                           ;I2C.c: 52: SSPBUF = d;
  9609  00507C  C081  FFC9         	movff	I2C_Master_Write@d,4041	;volatile
  9610  005080  0012               	return		;funcret
  9611  005082                     __end_of_I2C_Master_Write:
  9612                           	opt stack 0
  9613                           tblptru	equ	0xFF8
  9614                           tblptrh	equ	0xFF7
  9615                           tblptrl	equ	0xFF6
  9616                           tablat	equ	0xFF5
  9617                           prodh	equ	0xFF4
  9618                           prodl	equ	0xFF3
  9619                           intcon	equ	0xFF2
  9620                           intcon2	equ	0xFF1
  9621                           intcon3	equ	0xFF0
  9622                           postinc0	equ	0xFEE
  9623                           wreg	equ	0xFE8
  9624                           postdec1	equ	0xFE5
  9625                           fsr1l	equ	0xFE1
  9626                           indf2	equ	0xFDF
  9627                           postinc2	equ	0xFDE
  9628                           postdec2	equ	0xFDD
  9629                           fsr2h	equ	0xFDA
  9630                           fsr2l	equ	0xFD9
  9631                           status	equ	0xFD8
  9632                           
  9633 ;; *************** function _I2C_Master_Stop *****************
  9634 ;; Defined at:
  9635 ;;		line 43 in file "I2C.c"
  9636 ;; Parameters:    Size  Location     Type
  9637 ;;		None
  9638 ;; Auto vars:     Size  Location     Type
  9639 ;;		None
  9640 ;; Return value:  Size  Location     Type
  9641 ;;                  1    wreg      void 
  9642 ;; Registers used:
  9643 ;;		wreg, status,2, status,0, cstack
  9644 ;; Tracked objects:
  9645 ;;		On entry : 0/0
  9646 ;;		On exit  : 0/0
  9647 ;;		Unchanged: 0/0
  9648 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9649 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9650 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9651 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9652 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9653 ;;Total ram usage:        0 bytes
  9654 ;; Hardware stack levels used:    1
  9655 ;; Hardware stack levels required when called:    8
  9656 ;; This function calls:
  9657 ;;		_I2C_Master_Wait
  9658 ;; This function is called by:
  9659 ;;		_loadRTC
  9660 ;;		_getRTC
  9661 ;; This function uses a non-reentrant model
  9662 ;;
  9663                           
  9664                           	psect	text28
  9665  005094                     __ptext28:
  9666                           	opt stack 0
  9667  005094                     _I2C_Master_Stop:
  9668                           	opt stack 18
  9669                           
  9670                           ;I2C.c: 45: I2C_Master_Wait();
  9671                           
  9672                           ;incstack = 0
  9673  005094  EC0D  F028         	call	_I2C_Master_Wait	;wreg free
  9674                           
  9675                           ;I2C.c: 46: PEN = 1;
  9676  005098  84C5               	bsf	4037,2,c	;volatile
  9677  00509A  0012               	return		;funcret
  9678  00509C                     __end_of_I2C_Master_Stop:
  9679                           	opt stack 0
  9680                           tblptru	equ	0xFF8
  9681                           tblptrh	equ	0xFF7
  9682                           tblptrl	equ	0xFF6
  9683                           tablat	equ	0xFF5
  9684                           prodh	equ	0xFF4
  9685                           prodl	equ	0xFF3
  9686                           intcon	equ	0xFF2
  9687                           intcon2	equ	0xFF1
  9688                           intcon3	equ	0xFF0
  9689                           postinc0	equ	0xFEE
  9690                           wreg	equ	0xFE8
  9691                           postdec1	equ	0xFE5
  9692                           fsr1l	equ	0xFE1
  9693                           indf2	equ	0xFDF
  9694                           postinc2	equ	0xFDE
  9695                           postdec2	equ	0xFDD
  9696                           fsr2h	equ	0xFDA
  9697                           fsr2l	equ	0xFD9
  9698                           status	equ	0xFD8
  9699                           
  9700 ;; *************** function _I2C_Master_Start *****************
  9701 ;; Defined at:
  9702 ;;		line 31 in file "I2C.c"
  9703 ;; Parameters:    Size  Location     Type
  9704 ;;		None
  9705 ;; Auto vars:     Size  Location     Type
  9706 ;;		None
  9707 ;; Return value:  Size  Location     Type
  9708 ;;                  1    wreg      void 
  9709 ;; Registers used:
  9710 ;;		wreg, status,2, status,0, cstack
  9711 ;; Tracked objects:
  9712 ;;		On entry : 0/0
  9713 ;;		On exit  : 0/0
  9714 ;;		Unchanged: 0/0
  9715 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9716 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9717 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9718 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9719 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9720 ;;Total ram usage:        0 bytes
  9721 ;; Hardware stack levels used:    1
  9722 ;; Hardware stack levels required when called:    8
  9723 ;; This function calls:
  9724 ;;		_I2C_Master_Wait
  9725 ;; This function is called by:
  9726 ;;		_loadRTC
  9727 ;;		_getRTC
  9728 ;; This function uses a non-reentrant model
  9729 ;;
  9730                           
  9731                           	psect	text29
  9732  00509C                     __ptext29:
  9733                           	opt stack 0
  9734  00509C                     _I2C_Master_Start:
  9735                           	opt stack 18
  9736                           
  9737                           ;I2C.c: 33: I2C_Master_Wait();
  9738                           
  9739                           ;incstack = 0
  9740  00509C  EC0D  F028         	call	_I2C_Master_Wait	;wreg free
  9741                           
  9742                           ;I2C.c: 34: SEN = 1;
  9743  0050A0  80C5               	bsf	4037,0,c	;volatile
  9744  0050A2  0012               	return		;funcret
  9745  0050A4                     __end_of_I2C_Master_Start:
  9746                           	opt stack 0
  9747                           tblptru	equ	0xFF8
  9748                           tblptrh	equ	0xFF7
  9749                           tblptrl	equ	0xFF6
  9750                           tablat	equ	0xFF5
  9751                           prodh	equ	0xFF4
  9752                           prodl	equ	0xFF3
  9753                           intcon	equ	0xFF2
  9754                           intcon2	equ	0xFF1
  9755                           intcon3	equ	0xFF0
  9756                           postinc0	equ	0xFEE
  9757                           wreg	equ	0xFE8
  9758                           postdec1	equ	0xFE5
  9759                           fsr1l	equ	0xFE1
  9760                           indf2	equ	0xFDF
  9761                           postinc2	equ	0xFDE
  9762                           postdec2	equ	0xFDD
  9763                           fsr2h	equ	0xFDA
  9764                           fsr2l	equ	0xFD9
  9765                           status	equ	0xFD8
  9766                           
  9767 ;; *************** function _I2C_Master_Read *****************
  9768 ;; Defined at:
  9769 ;;		line 55 in file "I2C.c"
  9770 ;; Parameters:    Size  Location     Type
  9771 ;;  a               1    wreg     unsigned char 
  9772 ;; Auto vars:     Size  Location     Type
  9773 ;;  a               1    1[BANK0 ] unsigned char 
  9774 ;;  temp            1    2[BANK0 ] unsigned char 
  9775 ;; Return value:  Size  Location     Type
  9776 ;;                  1    wreg      unsigned char 
  9777 ;; Registers used:
  9778 ;;		wreg, status,2, status,0, cstack
  9779 ;; Tracked objects:
  9780 ;;		On entry : 0/0
  9781 ;;		On exit  : 0/0
  9782 ;;		Unchanged: 0/0
  9783 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9784 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9785 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9786 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9787 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9788 ;;Total ram usage:        2 bytes
  9789 ;; Hardware stack levels used:    1
  9790 ;; Hardware stack levels required when called:    8
  9791 ;; This function calls:
  9792 ;;		_I2C_Master_Wait
  9793 ;; This function is called by:
  9794 ;;		_getRTC
  9795 ;; This function uses a non-reentrant model
  9796 ;;
  9797                           
  9798                           	psect	text30
  9799  004DD2                     __ptext30:
  9800                           	opt stack 0
  9801  004DD2                     _I2C_Master_Read:
  9802                           	opt stack 18
  9803                           
  9804                           ;incstack = 0
  9805                           ;I2C_Master_Read@a stored from wreg
  9806  004DD2  0100               	movlb	0	; () banked
  9807  004DD4  6F81               	movwf	I2C_Master_Read@a& (0+255),b
  9808                           
  9809                           ;I2C.c: 57: unsigned char temp;
  9810                           ;I2C.c: 58: I2C_Master_Wait();
  9811  004DD6  EC0D  F028         	call	_I2C_Master_Wait	;wreg free
  9812                           
  9813                           ;I2C.c: 59: RCEN = 1;
  9814  004DDA  86C5               	bsf	4037,3,c	;volatile
  9815                           
  9816                           ;I2C.c: 60: I2C_Master_Wait();
  9817  004DDC  EC0D  F028         	call	_I2C_Master_Wait	;wreg free
  9818                           
  9819                           ;I2C.c: 61: temp = SSPBUF;
  9820  004DE0  CFC9 F082          	movff	4041,I2C_Master_Read@temp	;volatile
  9821                           
  9822                           ;I2C.c: 62: I2C_Master_Wait();
  9823  004DE4  EC0D  F028         	call	_I2C_Master_Wait	;wreg free
  9824                           
  9825                           ;I2C.c: 63: ACKDT = (a)?0:1;
  9826  004DE8  0100               	movlb	0	; () banked
  9827  004DEA  5181               	movf	I2C_Master_Read@a& (0+255),w,b
  9828  004DEC  0100               	movlb	0	; () banked
  9829  004DEE  A4D8               	btfss	status,2,c
  9830  004DF0  D002               	goto	u4170
  9831  004DF2  8AC5               	bsf	4037,5,c	;volatile
  9832  004DF4  D001               	goto	l5772
  9833  004DF6                     u4170:
  9834  004DF6  9AC5               	bcf	4037,5,c	;volatile
  9835  004DF8                     l5772:
  9836                           
  9837                           ;I2C.c: 64: ACKEN = 1;
  9838  004DF8  88C5               	bsf	4037,4,c	;volatile
  9839                           
  9840                           ;I2C.c: 65: return temp;
  9841  004DFA  0100               	movlb	0	; () banked
  9842  004DFC  5182               	movf	I2C_Master_Read@temp& (0+255),w,b
  9843  004DFE  0012               	return	
  9844  004E00                     __end_of_I2C_Master_Read:
  9845                           	opt stack 0
  9846                           tblptru	equ	0xFF8
  9847                           tblptrh	equ	0xFF7
  9848                           tblptrl	equ	0xFF6
  9849                           tablat	equ	0xFF5
  9850                           prodh	equ	0xFF4
  9851                           prodl	equ	0xFF3
  9852                           intcon	equ	0xFF2
  9853                           intcon2	equ	0xFF1
  9854                           intcon3	equ	0xFF0
  9855                           postinc0	equ	0xFEE
  9856                           wreg	equ	0xFE8
  9857                           postdec1	equ	0xFE5
  9858                           fsr1l	equ	0xFE1
  9859                           indf2	equ	0xFDF
  9860                           postinc2	equ	0xFDE
  9861                           postdec2	equ	0xFDD
  9862                           fsr2h	equ	0xFDA
  9863                           fsr2l	equ	0xFD9
  9864                           status	equ	0xFD8
  9865                           
  9866 ;; *************** function _I2C_Master_Wait *****************
  9867 ;; Defined at:
  9868 ;;		line 26 in file "I2C.c"
  9869 ;; Parameters:    Size  Location     Type
  9870 ;;		None
  9871 ;; Auto vars:     Size  Location     Type
  9872 ;;		None
  9873 ;; Return value:  Size  Location     Type
  9874 ;;                  1    wreg      void 
  9875 ;; Registers used:
  9876 ;;		wreg, status,2, status,0
  9877 ;; Tracked objects:
  9878 ;;		On entry : 0/0
  9879 ;;		On exit  : 0/0
  9880 ;;		Unchanged: 0/0
  9881 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9882 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9883 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9884 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9885 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9886 ;;Total ram usage:        1 bytes
  9887 ;; Hardware stack levels used:    1
  9888 ;; Hardware stack levels required when called:    7
  9889 ;; This function calls:
  9890 ;;		Nothing
  9891 ;; This function is called by:
  9892 ;;		_I2C_Master_Start
  9893 ;;		_I2C_Master_Stop
  9894 ;;		_I2C_Master_Write
  9895 ;;		_I2C_Master_Read
  9896 ;;		_I2C_Master_RepeatedStart
  9897 ;; This function uses a non-reentrant model
  9898 ;;
  9899                           
  9900                           	psect	text31
  9901  00501A                     __ptext31:
  9902                           	opt stack 0
  9903  00501A                     _I2C_Master_Wait:
  9904                           	opt stack 18
  9905  00501A                     l66:
  9906  00501A  B4C7               	btfsc	4039,2,c	;volatile
  9907  00501C  D7FE               	goto	l66
  9908  00501E  CFC5 F080          	movff	4037,??_I2C_Master_Wait	;volatile
  9909  005022  0E1F               	movlw	31
  9910  005024  0100               	movlb	0	; () banked
  9911  005026  1780               	andwf	??_I2C_Master_Wait& (0+255),f,b
  9912  005028  B4D8               	btfsc	status,2,c
  9913  00502A  0012               	return	
  9914  00502C  D7F6               	goto	l66
  9915  00502E                     __end_of_I2C_Master_Wait:
  9916                           	opt stack 0
  9917                           tblptru	equ	0xFF8
  9918                           tblptrh	equ	0xFF7
  9919                           tblptrl	equ	0xFF6
  9920                           tablat	equ	0xFF5
  9921                           prodh	equ	0xFF4
  9922                           prodl	equ	0xFF3
  9923                           intcon	equ	0xFF2
  9924                           intcon2	equ	0xFF1
  9925                           intcon3	equ	0xFF0
  9926                           postinc0	equ	0xFEE
  9927                           wreg	equ	0xFE8
  9928                           postdec1	equ	0xFE5
  9929                           fsr1l	equ	0xFE1
  9930                           indf2	equ	0xFDF
  9931                           postinc2	equ	0xFDE
  9932                           postdec2	equ	0xFDD
  9933                           fsr2h	equ	0xFDA
  9934                           fsr2l	equ	0xFD9
  9935                           status	equ	0xFD8
  9936                           
  9937 ;; *************** function _change_state_to_menu_22 *****************
  9938 ;; Defined at:
  9939 ;;		line 498 in file "UI.c"
  9940 ;; Parameters:    Size  Location     Type
  9941 ;;		None
  9942 ;; Auto vars:     Size  Location     Type
  9943 ;;		None
  9944 ;; Return value:  Size  Location     Type
  9945 ;;                  1    wreg      void 
  9946 ;; Registers used:
  9947 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9948 ;; Tracked objects:
  9949 ;;		On entry : 0/0
  9950 ;;		On exit  : 0/0
  9951 ;;		Unchanged: 0/0
  9952 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9953 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9954 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9955 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9956 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9957 ;;Total ram usage:        0 bytes
  9958 ;; Hardware stack levels used:    1
  9959 ;; Hardware stack levels required when called:   10
  9960 ;; This function calls:
  9961 ;;		_lcdInst
  9962 ;;		_printf
  9963 ;; This function is called by:
  9964 ;;		_UI
  9965 ;; This function uses a non-reentrant model
  9966 ;;
  9967                           
  9968                           	psect	text32
  9969  004AB4                     __ptext32:
  9970                           	opt stack 0
  9971  004AB4                     _change_state_to_menu_22:
  9972                           	opt stack 19
  9973                           
  9974                           ;UI.c: 499: cur_state = 22;
  9975                           
  9976                           ; BSR set to: 0
  9977                           ;incstack = 0
  9978  004AB4  0E00               	movlw	0
  9979  004AB6  0100               	movlb	0	; () banked
  9980  004AB8  6FE7               	movwf	(_cur_state+1)& (0+255),b
  9981  004ABA  0E16               	movlw	22
  9982  004ABC  6FE6               	movwf	_cur_state& (0+255),b
  9983                           
  9984                           ; BSR set to: 0
  9985                           ;UI.c: 501: lcdInst(0b10000000);;
  9986  004ABE  0E80               	movlw	128
  9987  004AC0  EC28  F028         	call	_lcdInst
  9988                           
  9989                           ;UI.c: 502: printf("2. SORT        <");
  9990  004AC4  0EC4               	movlw	low STR_34
  9991  004AC6  0100               	movlb	0	; () banked
  9992  004AC8  6F8E               	movwf	printf@f& (0+255),b
  9993  004ACA  0EFD               	movlw	high STR_34
  9994  004ACC  0100               	movlb	0	; () banked
  9995  004ACE  6F8F               	movwf	(printf@f+1)& (0+255),b
  9996  004AD0  ECE8  F00A         	call	_printf	;wreg free
  9997                           
  9998                           ;UI.c: 503: lcdInst(0b11000000);;
  9999  004AD4  0EC0               	movlw	192
 10000  004AD6  EC28  F028         	call	_lcdInst
 10001                           
 10002                           ;UI.c: 504: printf("3. LOGS         ");
 10003  004ADA  0E09               	movlw	low STR_36
 10004  004ADC  0100               	movlb	0	; () banked
 10005  004ADE  6F8E               	movwf	printf@f& (0+255),b
 10006  004AE0  0EFD               	movlw	high STR_36
 10007  004AE2  0100               	movlb	0	; () banked
 10008  004AE4  6F8F               	movwf	(printf@f+1)& (0+255),b
 10009  004AE6  ECE8  F00A         	call	_printf	;wreg free
 10010  004AEA  0012               	return		;funcret
 10011  004AEC                     __end_of_change_state_to_menu_22:
 10012                           	opt stack 0
 10013                           tblptru	equ	0xFF8
 10014                           tblptrh	equ	0xFF7
 10015                           tblptrl	equ	0xFF6
 10016                           tablat	equ	0xFF5
 10017                           prodh	equ	0xFF4
 10018                           prodl	equ	0xFF3
 10019                           intcon	equ	0xFF2
 10020                           intcon2	equ	0xFF1
 10021                           intcon3	equ	0xFF0
 10022                           postinc0	equ	0xFEE
 10023                           wreg	equ	0xFE8
 10024                           postdec1	equ	0xFE5
 10025                           fsr1l	equ	0xFE1
 10026                           indf2	equ	0xFDF
 10027                           postinc2	equ	0xFDE
 10028                           postdec2	equ	0xFDD
 10029                           fsr2h	equ	0xFDA
 10030                           fsr2l	equ	0xFD9
 10031                           status	equ	0xFD8
 10032                           
 10033 ;; *************** function _change_state_to_menu_12 *****************
 10034 ;; Defined at:
 10035 ;;		line 490 in file "UI.c"
 10036 ;; Parameters:    Size  Location     Type
 10037 ;;		None
 10038 ;; Auto vars:     Size  Location     Type
 10039 ;;		None
 10040 ;; Return value:  Size  Location     Type
 10041 ;;                  1    wreg      void 
 10042 ;; Registers used:
 10043 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10044 ;; Tracked objects:
 10045 ;;		On entry : 0/0
 10046 ;;		On exit  : 0/0
 10047 ;;		Unchanged: 0/0
 10048 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10049 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10050 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10051 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10052 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10053 ;;Total ram usage:        0 bytes
 10054 ;; Hardware stack levels used:    1
 10055 ;; Hardware stack levels required when called:   10
 10056 ;; This function calls:
 10057 ;;		_lcdInst
 10058 ;;		_printf
 10059 ;; This function is called by:
 10060 ;;		_UI
 10061 ;; This function uses a non-reentrant model
 10062 ;;
 10063                           
 10064                           	psect	text33
 10065  004AEC                     __ptext33:
 10066                           	opt stack 0
 10067  004AEC                     _change_state_to_menu_12:
 10068                           	opt stack 19
 10069                           
 10070                           ;UI.c: 491: cur_state = 12;
 10071                           
 10072                           ;incstack = 0
 10073  004AEC  0E00               	movlw	0
 10074  004AEE  0100               	movlb	0	; () banked
 10075  004AF0  6FE7               	movwf	(_cur_state+1)& (0+255),b
 10076  004AF2  0E0C               	movlw	12
 10077  004AF4  6FE6               	movwf	_cur_state& (0+255),b
 10078                           
 10079                           ; BSR set to: 0
 10080                           ;UI.c: 493: lcdInst(0b10000000);;
 10081  004AF6  0E80               	movlw	128
 10082  004AF8  EC28  F028         	call	_lcdInst
 10083                           
 10084                           ;UI.c: 494: printf("1. DATE/TIME    ");
 10085  004AFC  0E2B               	movlw	low STR_33
 10086  004AFE  0100               	movlb	0	; () banked
 10087  004B00  6F8E               	movwf	printf@f& (0+255),b
 10088  004B02  0EFD               	movlw	high STR_33
 10089  004B04  0100               	movlb	0	; () banked
 10090  004B06  6F8F               	movwf	(printf@f+1)& (0+255),b
 10091  004B08  ECE8  F00A         	call	_printf	;wreg free
 10092                           
 10093                           ;UI.c: 495: lcdInst(0b11000000);;
 10094  004B0C  0EC0               	movlw	192
 10095  004B0E  EC28  F028         	call	_lcdInst
 10096                           
 10097                           ;UI.c: 496: printf("2. SORT        <");
 10098  004B12  0EC4               	movlw	low STR_34
 10099  004B14  0100               	movlb	0	; () banked
 10100  004B16  6F8E               	movwf	printf@f& (0+255),b
 10101  004B18  0EFD               	movlw	high STR_34
 10102  004B1A  0100               	movlb	0	; () banked
 10103  004B1C  6F8F               	movwf	(printf@f+1)& (0+255),b
 10104  004B1E  ECE8  F00A         	call	_printf	;wreg free
 10105  004B22  0012               	return		;funcret
 10106  004B24                     __end_of_change_state_to_menu_12:
 10107                           	opt stack 0
 10108                           tblptru	equ	0xFF8
 10109                           tblptrh	equ	0xFF7
 10110                           tblptrl	equ	0xFF6
 10111                           tablat	equ	0xFF5
 10112                           prodh	equ	0xFF4
 10113                           prodl	equ	0xFF3
 10114                           intcon	equ	0xFF2
 10115                           intcon2	equ	0xFF1
 10116                           intcon3	equ	0xFF0
 10117                           postinc0	equ	0xFEE
 10118                           wreg	equ	0xFE8
 10119                           postdec1	equ	0xFE5
 10120                           fsr1l	equ	0xFE1
 10121                           indf2	equ	0xFDF
 10122                           postinc2	equ	0xFDE
 10123                           postdec2	equ	0xFDD
 10124                           fsr2h	equ	0xFDA
 10125                           fsr2l	equ	0xFD9
 10126                           status	equ	0xFD8
 10127                           
 10128 ;; *************** function ___awmod *****************
 10129 ;; Defined at:
 10130 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
 10131 ;; Parameters:    Size  Location     Type
 10132 ;;  dividend        2    0[BANK0 ] int 
 10133 ;;  divisor         2    2[BANK0 ] int 
 10134 ;; Auto vars:     Size  Location     Type
 10135 ;;  sign            1    5[BANK0 ] unsigned char 
 10136 ;;  counter         1    4[BANK0 ] unsigned char 
 10137 ;; Return value:  Size  Location     Type
 10138 ;;                  2    0[BANK0 ] int 
 10139 ;; Registers used:
 10140 ;;		wreg, status,2, status,0
 10141 ;; Tracked objects:
 10142 ;;		On entry : 0/0
 10143 ;;		On exit  : 0/0
 10144 ;;		Unchanged: 0/0
 10145 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10146 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10147 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10148 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10149 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10150 ;;Total ram usage:        6 bytes
 10151 ;; Hardware stack levels used:    1
 10152 ;; Hardware stack levels required when called:    7
 10153 ;; This function calls:
 10154 ;;		Nothing
 10155 ;; This function is called by:
 10156 ;;		_UI
 10157 ;; This function uses a non-reentrant model
 10158 ;;
 10159                           
 10160                           	psect	text34
 10161  004154                     __ptext34:
 10162                           	opt stack 0
 10163  004154                     ___awmod:
 10164                           	opt stack 22
 10165                           
 10166                           ;incstack = 0
 10167  004154  0E00               	movlw	0
 10168  004156  0100               	movlb	0	; () banked
 10169  004158  6F85               	movwf	___awmod@sign& (0+255),b
 10170                           
 10171                           ; BSR set to: 0
 10172  00415A  0100               	movlb	0	; () banked
 10173  00415C  AF81               	btfss	(___awmod@dividend+1)& (0+255),7,b
 10174  00415E  D008               	goto	l8142
 10175                           
 10176                           ; BSR set to: 0
 10177  004160  0100               	movlb	0	; () banked
 10178  004162  6D80               	negf	___awmod@dividend& (0+255),b
 10179  004164  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
 10180  004166  B0D8               	btfsc	status,0,c
 10181  004168  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
 10182                           
 10183                           ; BSR set to: 0
 10184  00416A  0E01               	movlw	1
 10185  00416C  0100               	movlb	0	; () banked
 10186  00416E  6F85               	movwf	___awmod@sign& (0+255),b
 10187  004170                     l8142:
 10188                           
 10189                           ; BSR set to: 0
 10190  004170  0100               	movlb	0	; () banked
 10191  004172  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
 10192  004174  D005               	goto	l8146
 10193                           
 10194                           ; BSR set to: 0
 10195  004176  0100               	movlb	0	; () banked
 10196  004178  6D82               	negf	___awmod@divisor& (0+255),b
 10197  00417A  1F83               	comf	(___awmod@divisor+1)& (0+255),f,b
 10198  00417C  B0D8               	btfsc	status,0,c
 10199  00417E  2B83               	incf	(___awmod@divisor+1)& (0+255),f,b
 10200  004180                     l8146:
 10201                           
 10202                           ; BSR set to: 0
 10203  004180  0100               	movlb	0	; () banked
 10204  004182  5182               	movf	___awmod@divisor& (0+255),w,b
 10205  004184  0100               	movlb	0	; () banked
 10206  004186  1183               	iorwf	(___awmod@divisor+1)& (0+255),w,b
 10207  004188  B4D8               	btfsc	status,2,c
 10208  00418A  D026               	goto	l8162
 10209                           
 10210                           ; BSR set to: 0
 10211  00418C  0E01               	movlw	1
 10212  00418E  0100               	movlb	0	; () banked
 10213  004190  6F84               	movwf	___awmod@counter& (0+255),b
 10214  004192  D006               	goto	l8152
 10215  004194                     l8150:
 10216                           
 10217                           ; BSR set to: 0
 10218  004194  0100               	movlb	0	; () banked
 10219  004196  90D8               	bcf	status,0,c
 10220  004198  3782               	rlcf	___awmod@divisor& (0+255),f,b
 10221  00419A  3783               	rlcf	(___awmod@divisor+1)& (0+255),f,b
 10222  00419C  0100               	movlb	0	; () banked
 10223  00419E  2B84               	incf	___awmod@counter& (0+255),f,b
 10224  0041A0                     l8152:
 10225                           
 10226                           ; BSR set to: 0
 10227  0041A0  0100               	movlb	0	; () banked
 10228  0041A2  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
 10229  0041A4  D7F7               	goto	l8150
 10230  0041A6                     l8154:
 10231                           
 10232                           ; BSR set to: 0
 10233  0041A6  0100               	movlb	0	; () banked
 10234  0041A8  5182               	movf	___awmod@divisor& (0+255),w,b
 10235  0041AA  0100               	movlb	0	; () banked
 10236  0041AC  5D80               	subwf	___awmod@dividend& (0+255),w,b
 10237  0041AE  0100               	movlb	0	; () banked
 10238  0041B0  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
 10239  0041B2  0100               	movlb	0	; () banked
 10240  0041B4  5981               	subwfb	(___awmod@dividend+1)& (0+255),w,b
 10241  0041B6  A0D8               	btfss	status,0,c
 10242  0041B8  D008               	goto	l8158
 10243                           
 10244                           ; BSR set to: 0
 10245  0041BA  0100               	movlb	0	; () banked
 10246  0041BC  5182               	movf	___awmod@divisor& (0+255),w,b
 10247  0041BE  0100               	movlb	0	; () banked
 10248  0041C0  5F80               	subwf	___awmod@dividend& (0+255),f,b
 10249  0041C2  0100               	movlb	0	; () banked
 10250  0041C4  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
 10251  0041C6  0100               	movlb	0	; () banked
 10252  0041C8  5B81               	subwfb	(___awmod@dividend+1)& (0+255),f,b
 10253  0041CA                     l8158:
 10254                           
 10255                           ; BSR set to: 0
 10256  0041CA  0100               	movlb	0	; () banked
 10257  0041CC  90D8               	bcf	status,0,c
 10258  0041CE  3383               	rrcf	(___awmod@divisor+1)& (0+255),f,b
 10259  0041D0  3382               	rrcf	___awmod@divisor& (0+255),f,b
 10260                           
 10261                           ; BSR set to: 0
 10262  0041D2  0100               	movlb	0	; () banked
 10263  0041D4  2F84               	decfsz	___awmod@counter& (0+255),f,b
 10264  0041D6  D7E7               	goto	l8154
 10265  0041D8                     l8162:
 10266                           
 10267                           ; BSR set to: 0
 10268  0041D8  0100               	movlb	0	; () banked
 10269  0041DA  5185               	movf	___awmod@sign& (0+255),w,b
 10270  0041DC  0100               	movlb	0	; () banked
 10271  0041DE  B4D8               	btfsc	status,2,c
 10272  0041E0  D005               	goto	l8166
 10273                           
 10274                           ; BSR set to: 0
 10275  0041E2  0100               	movlb	0	; () banked
 10276  0041E4  6D80               	negf	___awmod@dividend& (0+255),b
 10277  0041E6  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
 10278  0041E8  B0D8               	btfsc	status,0,c
 10279  0041EA  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
 10280  0041EC                     l8166:
 10281                           
 10282                           ; BSR set to: 0
 10283  0041EC  C080  F080         	movff	___awmod@dividend,?___awmod
 10284  0041F0  C081  F081         	movff	___awmod@dividend+1,?___awmod+1
 10285  0041F4  0012               	return	
 10286  0041F6                     __end_of___awmod:
 10287                           	opt stack 0
 10288                           tblptru	equ	0xFF8
 10289                           tblptrh	equ	0xFF7
 10290                           tblptrl	equ	0xFF6
 10291                           tablat	equ	0xFF5
 10292                           prodh	equ	0xFF4
 10293                           prodl	equ	0xFF3
 10294                           intcon	equ	0xFF2
 10295                           intcon2	equ	0xFF1
 10296                           intcon3	equ	0xFF0
 10297                           postinc0	equ	0xFEE
 10298                           wreg	equ	0xFE8
 10299                           postdec1	equ	0xFE5
 10300                           fsr1l	equ	0xFE1
 10301                           indf2	equ	0xFDF
 10302                           postinc2	equ	0xFDE
 10303                           postdec2	equ	0xFDD
 10304                           fsr2h	equ	0xFDA
 10305                           fsr2l	equ	0xFD9
 10306                           status	equ	0xFD8
 10307                           
 10308 ;; *************** function ___awdiv *****************
 10309 ;; Defined at:
 10310 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awdiv.c"
 10311 ;; Parameters:    Size  Location     Type
 10312 ;;  dividend        2    6[BANK0 ] int 
 10313 ;;  divisor         2    8[BANK0 ] int 
 10314 ;; Auto vars:     Size  Location     Type
 10315 ;;  quotient        2   12[BANK0 ] int 
 10316 ;;  sign            1   11[BANK0 ] unsigned char 
 10317 ;;  counter         1   10[BANK0 ] unsigned char 
 10318 ;; Return value:  Size  Location     Type
 10319 ;;                  2    6[BANK0 ] int 
 10320 ;; Registers used:
 10321 ;;		wreg, status,2, status,0
 10322 ;; Tracked objects:
 10323 ;;		On entry : 0/0
 10324 ;;		On exit  : 0/0
 10325 ;;		Unchanged: 0/0
 10326 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10327 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10328 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10329 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10330 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10331 ;;Total ram usage:        8 bytes
 10332 ;; Hardware stack levels used:    1
 10333 ;; Hardware stack levels required when called:    7
 10334 ;; This function calls:
 10335 ;;		Nothing
 10336 ;; This function is called by:
 10337 ;;		_UI
 10338 ;; This function uses a non-reentrant model
 10339 ;;
 10340                           
 10341                           	psect	text35
 10342  003F30                     __ptext35:
 10343                           	opt stack 0
 10344  003F30                     ___awdiv:
 10345                           	opt stack 22
 10346                           
 10347                           ; BSR set to: 0
 10348                           ;incstack = 0
 10349  003F30  0E00               	movlw	0
 10350  003F32  0100               	movlb	0	; () banked
 10351  003F34  6F8B               	movwf	___awdiv@sign& (0+255),b
 10352                           
 10353                           ; BSR set to: 0
 10354  003F36  0100               	movlb	0	; () banked
 10355  003F38  AF89               	btfss	(___awdiv@divisor+1)& (0+255),7,b
 10356  003F3A  D008               	goto	l8098
 10357                           
 10358                           ; BSR set to: 0
 10359  003F3C  0100               	movlb	0	; () banked
 10360  003F3E  6D88               	negf	___awdiv@divisor& (0+255),b
 10361  003F40  1F89               	comf	(___awdiv@divisor+1)& (0+255),f,b
 10362  003F42  B0D8               	btfsc	status,0,c
 10363  003F44  2B89               	incf	(___awdiv@divisor+1)& (0+255),f,b
 10364                           
 10365                           ; BSR set to: 0
 10366  003F46  0E01               	movlw	1
 10367  003F48  0100               	movlb	0	; () banked
 10368  003F4A  6F8B               	movwf	___awdiv@sign& (0+255),b
 10369  003F4C                     l8098:
 10370                           
 10371                           ; BSR set to: 0
 10372  003F4C  0100               	movlb	0	; () banked
 10373  003F4E  AF87               	btfss	(___awdiv@dividend+1)& (0+255),7,b
 10374  003F50  D008               	goto	l8104
 10375                           
 10376                           ; BSR set to: 0
 10377  003F52  0100               	movlb	0	; () banked
 10378  003F54  6D86               	negf	___awdiv@dividend& (0+255),b
 10379  003F56  1F87               	comf	(___awdiv@dividend+1)& (0+255),f,b
 10380  003F58  B0D8               	btfsc	status,0,c
 10381  003F5A  2B87               	incf	(___awdiv@dividend+1)& (0+255),f,b
 10382                           
 10383                           ; BSR set to: 0
 10384  003F5C  0E01               	movlw	1
 10385  003F5E  0100               	movlb	0	; () banked
 10386  003F60  1B8B               	xorwf	___awdiv@sign& (0+255),f,b
 10387  003F62                     l8104:
 10388                           
 10389                           ; BSR set to: 0
 10390  003F62  0E00               	movlw	0
 10391  003F64  0100               	movlb	0	; () banked
 10392  003F66  6F8D               	movwf	(___awdiv@quotient+1)& (0+255),b
 10393  003F68  0E00               	movlw	0
 10394  003F6A  6F8C               	movwf	___awdiv@quotient& (0+255),b
 10395                           
 10396                           ; BSR set to: 0
 10397  003F6C  0100               	movlb	0	; () banked
 10398  003F6E  5188               	movf	___awdiv@divisor& (0+255),w,b
 10399  003F70  0100               	movlb	0	; () banked
 10400  003F72  1189               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
 10401  003F74  B4D8               	btfsc	status,2,c
 10402  003F76  D02C               	goto	l8126
 10403                           
 10404                           ; BSR set to: 0
 10405  003F78  0E01               	movlw	1
 10406  003F7A  0100               	movlb	0	; () banked
 10407  003F7C  6F8A               	movwf	___awdiv@counter& (0+255),b
 10408  003F7E  D006               	goto	l8112
 10409  003F80                     l8110:
 10410                           
 10411                           ; BSR set to: 0
 10412  003F80  0100               	movlb	0	; () banked
 10413  003F82  90D8               	bcf	status,0,c
 10414  003F84  3788               	rlcf	___awdiv@divisor& (0+255),f,b
 10415  003F86  3789               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
 10416  003F88  0100               	movlb	0	; () banked
 10417  003F8A  2B8A               	incf	___awdiv@counter& (0+255),f,b
 10418  003F8C                     l8112:
 10419                           
 10420                           ; BSR set to: 0
 10421  003F8C  0100               	movlb	0	; () banked
 10422  003F8E  AF89               	btfss	(___awdiv@divisor+1)& (0+255),7,b
 10423  003F90  D7F7               	goto	l8110
 10424  003F92                     l8114:
 10425                           
 10426                           ; BSR set to: 0
 10427  003F92  0100               	movlb	0	; () banked
 10428  003F94  90D8               	bcf	status,0,c
 10429  003F96  378C               	rlcf	___awdiv@quotient& (0+255),f,b
 10430  003F98  378D               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
 10431                           
 10432                           ; BSR set to: 0
 10433  003F9A  0100               	movlb	0	; () banked
 10434  003F9C  5188               	movf	___awdiv@divisor& (0+255),w,b
 10435  003F9E  0100               	movlb	0	; () banked
 10436  003FA0  5D86               	subwf	___awdiv@dividend& (0+255),w,b
 10437  003FA2  0100               	movlb	0	; () banked
 10438  003FA4  5189               	movf	(___awdiv@divisor+1)& (0+255),w,b
 10439  003FA6  0100               	movlb	0	; () banked
 10440  003FA8  5987               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
 10441  003FAA  A0D8               	btfss	status,0,c
 10442  003FAC  D00A               	goto	l8122
 10443                           
 10444                           ; BSR set to: 0
 10445  003FAE  0100               	movlb	0	; () banked
 10446  003FB0  5188               	movf	___awdiv@divisor& (0+255),w,b
 10447  003FB2  0100               	movlb	0	; () banked
 10448  003FB4  5F86               	subwf	___awdiv@dividend& (0+255),f,b
 10449  003FB6  0100               	movlb	0	; () banked
 10450  003FB8  5189               	movf	(___awdiv@divisor+1)& (0+255),w,b
 10451  003FBA  0100               	movlb	0	; () banked
 10452  003FBC  5B87               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
 10453                           
 10454                           ; BSR set to: 0
 10455  003FBE  0100               	movlb	0	; () banked
 10456  003FC0  818C               	bsf	___awdiv@quotient& (0+255),0,b
 10457  003FC2                     l8122:
 10458                           
 10459                           ; BSR set to: 0
 10460  003FC2  0100               	movlb	0	; () banked
 10461  003FC4  90D8               	bcf	status,0,c
 10462  003FC6  3389               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
 10463  003FC8  3388               	rrcf	___awdiv@divisor& (0+255),f,b
 10464                           
 10465                           ; BSR set to: 0
 10466  003FCA  0100               	movlb	0	; () banked
 10467  003FCC  2F8A               	decfsz	___awdiv@counter& (0+255),f,b
 10468  003FCE  D7E1               	goto	l8114
 10469  003FD0                     l8126:
 10470                           
 10471                           ; BSR set to: 0
 10472  003FD0  0100               	movlb	0	; () banked
 10473  003FD2  518B               	movf	___awdiv@sign& (0+255),w,b
 10474  003FD4  0100               	movlb	0	; () banked
 10475  003FD6  B4D8               	btfsc	status,2,c
 10476  003FD8  D005               	goto	l8130
 10477                           
 10478                           ; BSR set to: 0
 10479  003FDA  0100               	movlb	0	; () banked
 10480  003FDC  6D8C               	negf	___awdiv@quotient& (0+255),b
 10481  003FDE  1F8D               	comf	(___awdiv@quotient+1)& (0+255),f,b
 10482  003FE0  B0D8               	btfsc	status,0,c
 10483  003FE2  2B8D               	incf	(___awdiv@quotient+1)& (0+255),f,b
 10484  003FE4                     l8130:
 10485                           
 10486                           ; BSR set to: 0
 10487  003FE4  C08C  F086         	movff	___awdiv@quotient,?___awdiv
 10488  003FE8  C08D  F087         	movff	___awdiv@quotient+1,?___awdiv+1
 10489  003FEC  0012               	return	
 10490  003FEE                     __end_of___awdiv:
 10491                           	opt stack 0
 10492                           tblptru	equ	0xFF8
 10493                           tblptrh	equ	0xFF7
 10494                           tblptrl	equ	0xFF6
 10495                           tablat	equ	0xFF5
 10496                           prodh	equ	0xFF4
 10497                           prodl	equ	0xFF3
 10498                           intcon	equ	0xFF2
 10499                           intcon2	equ	0xFF1
 10500                           intcon3	equ	0xFF0
 10501                           postinc0	equ	0xFEE
 10502                           wreg	equ	0xFE8
 10503                           postdec1	equ	0xFE5
 10504                           fsr1l	equ	0xFE1
 10505                           indf2	equ	0xFDF
 10506                           postinc2	equ	0xFDE
 10507                           postdec2	equ	0xFDD
 10508                           fsr2h	equ	0xFDA
 10509                           fsr2l	equ	0xFD9
 10510                           status	equ	0xFD8
 10511                           
 10512 ;; *************** function _Test *****************
 10513 ;; Defined at:
 10514 ;;		line 30 in file "Test.c"
 10515 ;; Parameters:    Size  Location     Type
 10516 ;;		None
 10517 ;; Auto vars:     Size  Location     Type
 10518 ;;		None
 10519 ;; Return value:  Size  Location     Type
 10520 ;;                  1    wreg      void 
 10521 ;; Registers used:
 10522 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10523 ;; Tracked objects:
 10524 ;;		On entry : 0/0
 10525 ;;		On exit  : 0/0
 10526 ;;		Unchanged: 0/0
 10527 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10528 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10529 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10530 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10531 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10532 ;;Total ram usage:        2 bytes
 10533 ;; Hardware stack levels used:    1
 10534 ;; Hardware stack levels required when called:   11
 10535 ;; This function calls:
 10536 ;;		_BlockerTest
 10537 ;;		_BothServos
 10538 ;;		_EEPROMTest
 10539 ;;		_PortTestA5
 10540 ;;		_PortTests
 10541 ;;		_PusherTest
 10542 ;;		_SpeedTest
 10543 ;;		_actuatorTest
 10544 ;;		_algorithmTest
 10545 ;;		_lcdInst
 10546 ;;		_printf
 10547 ;;		_sensorTest
 10548 ;; This function is called by:
 10549 ;;		_main
 10550 ;; This function uses a non-reentrant model
 10551 ;;
 10552                           
 10553                           	psect	text36
 10554  003BA2                     __ptext36:
 10555                           	opt stack 0
 10556  003BA2                     _Test:
 10557                           	opt stack 19
 10558  003BA2                     
 10559                           ;Test.c: 33: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b10
      +                          000000);;
 10560  003BA2  0E01               	movlw	1
 10561  003BA4  EC28  F028         	call	_lcdInst
 10562  003BA8  0E68               	movlw	104
 10563  003BAA  0100               	movlb	0	; () banked
 10564  003BAC  6FC6               	movwf	??_Test& (0+255),b
 10565  003BAE  0EE4               	movlw	228
 10566  003BB0                     u8917:
 10567  003BB0  2EE8               	decfsz	wreg,f,c
 10568  003BB2  D7FE               	bra	u8917
 10569  003BB4  2FC6               	decfsz	??_Test& (0+255),f,b
 10570  003BB6  D7FC               	bra	u8917
 10571  003BB8  F000               	nop	
 10572  003BBA  0E80               	movlw	128
 10573  003BBC  EC28  F028         	call	_lcdInst
 10574                           
 10575                           ;Test.c: 34: printf("2.SNR|4.HI|5.MED");
 10576  003BC0  0E92               	movlw	low STR_68
 10577  003BC2  0100               	movlb	0	; () banked
 10578  003BC4  6F8E               	movwf	printf@f& (0+255),b
 10579  003BC6  0EFC               	movlw	high STR_68
 10580  003BC8  0100               	movlb	0	; () banked
 10581  003BCA  6F8F               	movwf	(printf@f+1)& (0+255),b
 10582  003BCC  ECE8  F00A         	call	_printf	;wreg free
 10583                           
 10584                           ;Test.c: 35: lcdInst(0b11000000);;
 10585  003BD0  0EC0               	movlw	192
 10586  003BD2  EC28  F028         	call	_lcdInst
 10587                           
 10588                           ;Test.c: 36: printf("B.PSH|8.SV|9.BLK");
 10589  003BD6  0EA3               	movlw	low STR_69
 10590  003BD8  0100               	movlb	0	; () banked
 10591  003BDA  6F8E               	movwf	printf@f& (0+255),b
 10592  003BDC  0EFC               	movlw	high STR_69
 10593  003BDE  0100               	movlb	0	; () banked
 10594  003BE0  6F8F               	movwf	(printf@f+1)& (0+255),b
 10595  003BE2  ECE8  F00A         	call	_printf	;wreg free
 10596                           
 10597                           ;Test.c: 37: _delay((unsigned long)((100)*(32000000/4000.0)));
 10598  003BE6  0E05               	movlw	5
 10599  003BE8  0100               	movlb	0	; () banked
 10600  003BEA  6FC7               	movwf	(??_Test+1)& (0+255),b
 10601  003BEC  0E0F               	movlw	15
 10602  003BEE  0100               	movlb	0	; () banked
 10603  003BF0  6FC6               	movwf	??_Test& (0+255),b
 10604  003BF2  0EF1               	movlw	241
 10605  003BF4                     u8927:
 10606  003BF4  2EE8               	decfsz	wreg,f,c
 10607  003BF6  D7FE               	bra	u8927
 10608  003BF8  2FC6               	decfsz	??_Test& (0+255),f,b
 10609  003BFA  D7FC               	bra	u8927
 10610  003BFC  2FC7               	decfsz	(??_Test+1)& (0+255),f,b
 10611  003BFE  D7FA               	bra	u8927
 10612  003C00                     l1102:
 10613  003C00  A281               	btfss	3969,1,c	;volatile
 10614  003C02  D7FE               	goto	l1102
 10615                           
 10616                           ;Test.c: 39: var = PORTB >> 4;
 10617  003C04  CF81 F0C6          	movff	3969,??_Test	;volatile
 10618  003C08  0100               	movlb	0	; () banked
 10619  003C0A  3BC6               	swapf	??_Test& (0+255),f,b
 10620  003C0C  0E0F               	movlw	15
 10621  003C0E  17C6               	andwf	??_Test& (0+255),f,b
 10622  003C10  0100               	movlb	0	; () banked
 10623  003C12  51C6               	movf	??_Test& (0+255),w,b
 10624  003C14  0100               	movlb	0	; () banked
 10625  003C16  6FFA               	movwf	_var& (0+255),b
 10626  003C18  6BFB               	clrf	(_var+1)& (0+255),b
 10627                           
 10628                           ; BSR set to: 0
 10629                           ;Test.c: 40: var++;
 10630  003C1A  0100               	movlb	0	; () banked
 10631  003C1C  4BFA               	infsnz	_var& (0+255),f,b
 10632  003C1E  2BFB               	incf	(_var+1)& (0+255),f,b
 10633  003C20                     l1105:
 10634  003C20  A281               	btfss	3969,1,c	;volatile
 10635  003C22  D01F               	goto	l8870
 10636  003C24  D7FD               	goto	l1105
 10637  003C26                     l8848:
 10638                           
 10639                           ;Test.c: 44: algorithmTest();
 10640  003C26  ECCD  F01E         	call	_algorithmTest	;wreg free
 10641                           
 10642                           ;Test.c: 45: break;
 10643  003C2A  D7BB               	goto	l8830
 10644  003C2C                     l8850:
 10645                           
 10646                           ;Test.c: 47: sensorTest();
 10647  003C2C  EC7D  F010         	call	_sensorTest	;wreg free
 10648                           
 10649                           ;Test.c: 48: break;
 10650  003C30  D7B8               	goto	l8830
 10651  003C32                     l8852:
 10652                           
 10653                           ;Test.c: 50: actuatorTest();
 10654  003C32  EC09  F000         	call	_actuatorTest	;wreg free
 10655                           
 10656                           ;Test.c: 51: break;
 10657  003C36  D7B5               	goto	l8830
 10658  003C38                     l8854:
 10659                           
 10660                           ;Test.c: 53: PortTestA5();
 10661  003C38  ECF4  F023         	call	_PortTestA5	;wreg free
 10662                           
 10663                           ;Test.c: 54: break;
 10664  003C3C  D7B2               	goto	l8830
 10665  003C3E                     l8856:
 10666                           
 10667                           ;Test.c: 57: SpeedTest();
 10668  003C3E  EC84  F021         	call	_SpeedTest	;wreg free
 10669                           
 10670                           ;Test.c: 58: break;
 10671  003C42  D7AF               	goto	l8830
 10672  003C44                     l8858:
 10673                           
 10674                           ;Test.c: 60: EEPROMTest();
 10675  003C44  EC5A  F028         	call	_EEPROMTest	;wreg free
 10676                           
 10677                           ;Test.c: 61: break;
 10678  003C48  D7AC               	goto	l8830
 10679  003C4A                     l8860:
 10680                           
 10681                           ;Test.c: 63: PusherTest();
 10682  003C4A  ECC1  F014         	call	_PusherTest	;wreg free
 10683                           
 10684                           ;Test.c: 64: break;
 10685  003C4E  D7A9               	goto	l8830
 10686  003C50                     l8862:
 10687                           
 10688                           ;Test.c: 66: PortTests();
 10689  003C50  ECC6  F021         	call	_PortTests	;wreg free
 10690                           
 10691                           ;Test.c: 67: break;
 10692  003C54  D7A6               	goto	l8830
 10693  003C56                     l8864:
 10694                           
 10695                           ;Test.c: 69: BothServos();
 10696  003C56  EC04  F00D         	call	_BothServos	;wreg free
 10697                           
 10698                           ;Test.c: 70: break;
 10699  003C5A  D7A3               	goto	l8830
 10700  003C5C                     l8866:
 10701                           
 10702                           ;Test.c: 72: BlockerTest();
 10703  003C5C  EC1D  F01B         	call	_BlockerTest	;wreg free
 10704                           
 10705                           ;Test.c: 76: }
 10706                           
 10707                           ;Test.c: 75: break;
 10708                           
 10709                           ;Test.c: 74: default:
 10710                           
 10711                           ;Test.c: 73: break;
 10712  003C60  D7A0               	goto	l8830
 10713  003C62                     l8870:
 10714  003C62  C0FA  F0C6         	movff	_var,??_Test
 10715  003C66  C0FB  F0C7         	movff	_var+1,??_Test+1
 10716                           
 10717                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 10718                           ; Switch size 1, requested type "space"
 10719                           ; Number of cases is 1, Range of values is 0 to 0
 10720                           ; switch strategies available:
 10721                           ; Name         Instructions Cycles
 10722                           ; simple_byte            4     3 (average)
 10723                           ;	Chosen strategy is simple_byte
 10724  003C6A  0100               	movlb	0	; () banked
 10725  003C6C  51C7               	movf	(??_Test+1)& (0+255),w,b
 10726  003C6E  0A00               	xorlw	0	; case 0
 10727  003C70  A4D8               	btfss	status,2,c
 10728  003C72  D797               	goto	l8830
 10729                           
 10730                           ; BSR set to: 0
 10731                           ; Switch size 1, requested type "space"
 10732                           ; Number of cases is 10, Range of values is 1 to 11
 10733                           ; switch strategies available:
 10734                           ; Name         Instructions Cycles
 10735                           ; simple_byte           31    16 (average)
 10736                           ;	Chosen strategy is simple_byte
 10737  003C74  0100               	movlb	0	; () banked
 10738  003C76  51C6               	movf	??_Test& (0+255),w,b
 10739  003C78  0A01               	xorlw	1	; case 1
 10740  003C7A  B4D8               	btfsc	status,2,c
 10741  003C7C  D7D4               	goto	l8848
 10742  003C7E  0A03               	xorlw	3	; case 2
 10743  003C80  B4D8               	btfsc	status,2,c
 10744  003C82  D7D4               	goto	l8850
 10745  003C84  0A01               	xorlw	1	; case 3
 10746  003C86  B4D8               	btfsc	status,2,c
 10747  003C88  D7D4               	goto	l8852
 10748  003C8A  0A06               	xorlw	6	; case 5
 10749  003C8C  B4D8               	btfsc	status,2,c
 10750  003C8E  D7D4               	goto	l8854
 10751  003C90  0A03               	xorlw	3	; case 6
 10752  003C92  B4D8               	btfsc	status,2,c
 10753  003C94  D7D4               	goto	l8856
 10754  003C96  0A01               	xorlw	1	; case 7
 10755  003C98  B4D8               	btfsc	status,2,c
 10756  003C9A  D7D4               	goto	l8858
 10757  003C9C  0A0F               	xorlw	15	; case 8
 10758  003C9E  B4D8               	btfsc	status,2,c
 10759  003CA0  D7D4               	goto	l8860
 10760  003CA2  0A01               	xorlw	1	; case 9
 10761  003CA4  B4D8               	btfsc	status,2,c
 10762  003CA6  D7D4               	goto	l8862
 10763  003CA8  0A03               	xorlw	3	; case 10
 10764  003CAA  B4D8               	btfsc	status,2,c
 10765  003CAC  D7D4               	goto	l8864
 10766  003CAE  0A01               	xorlw	1	; case 11
 10767  003CB0  B4D8               	btfsc	status,2,c
 10768  003CB2  D7D4               	goto	l8866
 10769                           
 10770                           ; BSR set to: 0
 10771                           
 10772                           ; BSR set to: 0
 10773  003CB4  D776               	goto	l8830
 10774  003CB6                     __end_of_Test:
 10775                           	opt stack 0
 10776                           tblptru	equ	0xFF8
 10777                           tblptrh	equ	0xFF7
 10778                           tblptrl	equ	0xFF6
 10779                           tablat	equ	0xFF5
 10780                           prodh	equ	0xFF4
 10781                           prodl	equ	0xFF3
 10782                           intcon	equ	0xFF2
 10783                           intcon2	equ	0xFF1
 10784                           intcon3	equ	0xFF0
 10785                           postinc0	equ	0xFEE
 10786                           wreg	equ	0xFE8
 10787                           postdec1	equ	0xFE5
 10788                           fsr1l	equ	0xFE1
 10789                           indf2	equ	0xFDF
 10790                           postinc2	equ	0xFDE
 10791                           postdec2	equ	0xFDD
 10792                           fsr2h	equ	0xFDA
 10793                           fsr2l	equ	0xFD9
 10794                           status	equ	0xFD8
 10795                           
 10796 ;; *************** function _sensorTest *****************
 10797 ;; Defined at:
 10798 ;;		line 124 in file "Test.c"
 10799 ;; Parameters:    Size  Location     Type
 10800 ;;		None
 10801 ;; Auto vars:     Size  Location     Type
 10802 ;;  res             2   45[BANK0 ] int 
 10803 ;; Return value:  Size  Location     Type
 10804 ;;                  1    wreg      void 
 10805 ;; Registers used:
 10806 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10807 ;; Tracked objects:
 10808 ;;		On entry : 0/0
 10809 ;;		On exit  : 0/0
 10810 ;;		Unchanged: 0/0
 10811 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10812 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10813 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10814 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10815 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10816 ;;Total ram usage:        4 bytes
 10817 ;; Hardware stack levels used:    1
 10818 ;; Hardware stack levels required when called:   10
 10819 ;; This function calls:
 10820 ;;		_lcdInst
 10821 ;;		_printf
 10822 ;;		_readADC
 10823 ;;		_readMAG
 10824 ;; This function is called by:
 10825 ;;		_Test
 10826 ;; This function uses a non-reentrant model
 10827 ;;
 10828                           
 10829                           	psect	text37
 10830  0020FA                     __ptext37:
 10831                           	opt stack 0
 10832  0020FA                     _sensorTest:
 10833                           	opt stack 19
 10834                           
 10835                           ;Test.c: 126: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 10836                           
 10837                           ; BSR set to: 0
 10838                           ;incstack = 0
 10839  0020FA  0E01               	movlw	1
 10840  0020FC  EC28  F028         	call	_lcdInst
 10841  002100  0E68               	movlw	104
 10842  002102  0100               	movlb	0	; () banked
 10843  002104  6FAB               	movwf	??_sensorTest& (0+255),b
 10844  002106  0EE4               	movlw	228
 10845  002108                     u8937:
 10846  002108  2EE8               	decfsz	wreg,f,c
 10847  00210A  D7FE               	bra	u8937
 10848  00210C  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 10849  00210E  D7FC               	bra	u8937
 10850  002110  F000               	nop	
 10851  002112  0E80               	movlw	128
 10852  002114  EC28  F028         	call	_lcdInst
 10853                           
 10854                           ;Test.c: 127: printf("SENSORS");
 10855  002118  0EAE               	movlw	low STR_77
 10856  00211A  0100               	movlb	0	; () banked
 10857  00211C  6F8E               	movwf	printf@f& (0+255),b
 10858  00211E  0EFF               	movlw	high STR_77
 10859  002120  0100               	movlb	0	; () banked
 10860  002122  6F8F               	movwf	(printf@f+1)& (0+255),b
 10861  002124  ECE8  F00A         	call	_printf	;wreg free
 10862                           
 10863                           ;Test.c: 128: lcdInst(0b11000000);;
 10864  002128  0EC0               	movlw	192
 10865  00212A  EC28  F028         	call	_lcdInst
 10866                           
 10867                           ;Test.c: 129: printf("PUSH TO START");
 10868  00212E  0E0B               	movlw	low STR_71
 10869  002130  0100               	movlb	0	; () banked
 10870  002132  6F8E               	movwf	printf@f& (0+255),b
 10871  002134  0EFF               	movlw	high STR_71
 10872  002136  0100               	movlb	0	; () banked
 10873  002138  6F8F               	movwf	(printf@f+1)& (0+255),b
 10874  00213A  ECE8  F00A         	call	_printf	;wreg free
 10875                           
 10876                           ;Test.c: 130: _delay((unsigned long)((100)*(32000000/4000.0)));
 10877  00213E  0E05               	movlw	5
 10878  002140  0100               	movlb	0	; () banked
 10879  002142  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 10880  002144  0E0F               	movlw	15
 10881  002146  0100               	movlb	0	; () banked
 10882  002148  6FAB               	movwf	??_sensorTest& (0+255),b
 10883  00214A  0EF1               	movlw	241
 10884  00214C                     u8947:
 10885  00214C  2EE8               	decfsz	wreg,f,c
 10886  00214E  D7FE               	bra	u8947
 10887  002150  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 10888  002152  D7FC               	bra	u8947
 10889  002154  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 10890  002156  D7FA               	bra	u8947
 10891  002158                     l1135:
 10892  002158  A281               	btfss	3969,1,c	;volatile
 10893  00215A  D7FE               	goto	l1135
 10894  00215C                     l1138:
 10895  00215C  B281               	btfsc	3969,1,c	;volatile
 10896  00215E  D7FE               	goto	l1138
 10897                           
 10898                           ;Test.c: 133: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 10899  002160  0E01               	movlw	1
 10900  002162  EC28  F028         	call	_lcdInst
 10901  002166  0E68               	movlw	104
 10902  002168  0100               	movlb	0	; () banked
 10903  00216A  6FAB               	movwf	??_sensorTest& (0+255),b
 10904  00216C  0EE4               	movlw	228
 10905  00216E                     u8957:
 10906  00216E  2EE8               	decfsz	wreg,f,c
 10907  002170  D7FE               	bra	u8957
 10908  002172  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 10909  002174  D7FC               	bra	u8957
 10910  002176  F000               	nop	
 10911  002178  0E80               	movlw	128
 10912  00217A  EC28  F028         	call	_lcdInst
 10913                           
 10914                           ;Test.c: 138: printf("TST: IR SNSR");
 10915  00217E  0E35               	movlw	low STR_79
 10916  002180  0100               	movlb	0	; () banked
 10917  002182  6F8E               	movwf	printf@f& (0+255),b
 10918  002184  0EFF               	movlw	high STR_79
 10919  002186  0100               	movlb	0	; () banked
 10920  002188  6F8F               	movwf	(printf@f+1)& (0+255),b
 10921  00218A  ECE8  F00A         	call	_printf	;wreg free
 10922                           
 10923                           ;Test.c: 139: _delay((unsigned long)((100)*(32000000/4000.0)));
 10924  00218E  0E05               	movlw	5
 10925  002190  0100               	movlb	0	; () banked
 10926  002192  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 10927  002194  0E0F               	movlw	15
 10928  002196  0100               	movlb	0	; () banked
 10929  002198  6FAB               	movwf	??_sensorTest& (0+255),b
 10930  00219A  0EF1               	movlw	241
 10931  00219C                     u8967:
 10932  00219C  2EE8               	decfsz	wreg,f,c
 10933  00219E  D7FE               	bra	u8967
 10934  0021A0  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 10935  0021A2  D7FC               	bra	u8967
 10936  0021A4  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 10937  0021A6  D7FA               	bra	u8967
 10938                           
 10939                           ;Test.c: 140: LATCbits.LATC5 = 1;
 10940  0021A8  8A8B               	bsf	3979,5,c	;volatile
 10941                           
 10942                           ;Test.c: 142: while(PORTBbits.RB1 == 0){
 10943  0021AA  D05C               	goto	l7316
 10944  0021AC                     l7298:
 10945                           
 10946                           ;Test.c: 143: readADC(0);
 10947  0021AC  0E00               	movlw	0
 10948  0021AE  EC2D  F027         	call	_readADC
 10949                           
 10950                           ;Test.c: 144: int res = ADRESH<<8 | ADRESL;
 10951  0021B2  50C3               	movf	4035,w,c	;volatile
 10952  0021B4  CFC4 F0AB          	movff	4036,??_sensorTest	;volatile
 10953  0021B8  0100               	movlb	0	; () banked
 10954  0021BA  6BAC               	clrf	(??_sensorTest+1)& (0+255),b
 10955  0021BC  C0AB  F0AC         	movff	??_sensorTest,??_sensorTest+1
 10956  0021C0  0100               	movlb	0	; () banked
 10957  0021C2  6BAB               	clrf	??_sensorTest& (0+255),b
 10958  0021C4  0100               	movlb	0	; () banked
 10959  0021C6  11AB               	iorwf	??_sensorTest& (0+255),w,b
 10960  0021C8  0100               	movlb	0	; () banked
 10961  0021CA  6FAD               	movwf	sensorTest@res& (0+255),b
 10962  0021CC  0100               	movlb	0	; () banked
 10963  0021CE  51AC               	movf	(??_sensorTest+1)& (0+255),w,b
 10964  0021D0  0100               	movlb	0	; () banked
 10965  0021D2  6FAE               	movwf	(sensorTest@res+1)& (0+255),b
 10966                           
 10967                           ; BSR set to: 0
 10968                           ;Test.c: 145: IR_signal = (res > 800) ? 1 : 0;
 10969  0021D4  0100               	movlb	0	; () banked
 10970  0021D6  BFAE               	btfsc	(sensorTest@res+1)& (0+255),7,b
 10971  0021D8  D00A               	goto	u5900
 10972  0021DA  0E21               	movlw	33
 10973  0021DC  0100               	movlb	0	; () banked
 10974  0021DE  5DAD               	subwf	sensorTest@res& (0+255),w,b
 10975  0021E0  0E03               	movlw	3
 10976  0021E2  0100               	movlb	0	; () banked
 10977  0021E4  59AE               	subwfb	(sensorTest@res+1)& (0+255),w,b
 10978  0021E6  A0D8               	btfss	status,0,c
 10979  0021E8  D002               	goto	u5900
 10980  0021EA  0E01               	movlw	1
 10981  0021EC  D001               	goto	u5910
 10982  0021EE                     u5900:
 10983  0021EE  0E00               	movlw	0
 10984  0021F0                     u5910:
 10985  0021F0  0100               	movlb	0	; () banked
 10986  0021F2  6FDE               	movwf	_IR_signal& (0+255),b
 10987  0021F4  6BDF               	clrf	(_IR_signal+1)& (0+255),b
 10988                           
 10989                           ;Test.c: 147: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 10990  0021F6  0E01               	movlw	1
 10991  0021F8  EC28  F028         	call	_lcdInst
 10992  0021FC  0E68               	movlw	104
 10993  0021FE  0100               	movlb	0	; () banked
 10994  002200  6FAB               	movwf	??_sensorTest& (0+255),b
 10995  002202  0EE4               	movlw	228
 10996  002204                     u8977:
 10997  002204  2EE8               	decfsz	wreg,f,c
 10998  002206  D7FE               	bra	u8977
 10999  002208  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 11000  00220A  D7FC               	bra	u8977
 11001  00220C  F000               	nop	
 11002  00220E  0E80               	movlw	128
 11003  002210  EC28  F028         	call	_lcdInst
 11004                           
 11005                           ;Test.c: 148: printf("IR_signal: %d ", IR_signal);
 11006  002214  0E5A               	movlw	low STR_80
 11007  002216  0100               	movlb	0	; () banked
 11008  002218  6F8E               	movwf	printf@f& (0+255),b
 11009  00221A  0EFE               	movlw	high STR_80
 11010  00221C  0100               	movlb	0	; () banked
 11011  00221E  6F8F               	movwf	(printf@f+1)& (0+255),b
 11012  002220  C0DE  F090         	movff	_IR_signal,?_printf+2
 11013  002224  C0DF  F091         	movff	_IR_signal+1,?_printf+3
 11014  002228  ECE8  F00A         	call	_printf	;wreg free
 11015                           
 11016                           ;Test.c: 149: lcdInst(0b11000000);;
 11017  00222C  0EC0               	movlw	192
 11018  00222E  EC28  F028         	call	_lcdInst
 11019                           
 11020                           ;Test.c: 150: printf("%d", res);
 11021  002232  0E16               	movlw	low (STR_27+14)
 11022  002234  0100               	movlb	0	; () banked
 11023  002236  6F8E               	movwf	printf@f& (0+255),b
 11024  002238  0EFE               	movlw	high (STR_27+14)
 11025  00223A  0100               	movlb	0	; () banked
 11026  00223C  6F8F               	movwf	(printf@f+1)& (0+255),b
 11027  00223E  C0AD  F090         	movff	sensorTest@res,?_printf+2
 11028  002242  C0AE  F091         	movff	sensorTest@res+1,?_printf+3
 11029  002246  ECE8  F00A         	call	_printf	;wreg free
 11030                           
 11031                           ;Test.c: 151: _delay((unsigned long)((100)*(32000000/4000.0)));
 11032  00224A  0E05               	movlw	5
 11033  00224C  0100               	movlb	0	; () banked
 11034  00224E  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 11035  002250  0E0F               	movlw	15
 11036  002252  0100               	movlb	0	; () banked
 11037  002254  6FAB               	movwf	??_sensorTest& (0+255),b
 11038  002256  0EF1               	movlw	241
 11039  002258                     u8987:
 11040  002258  2EE8               	decfsz	wreg,f,c
 11041  00225A  D7FE               	bra	u8987
 11042  00225C  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 11043  00225E  D7FC               	bra	u8987
 11044  002260  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 11045  002262  D7FA               	bra	u8987
 11046  002264                     l7316:
 11047  002264  A281               	btfss	3969,1,c	;volatile
 11048  002266  D7A2               	goto	l7298
 11049                           
 11050                           ;Test.c: 152: }
 11051                           ;Test.c: 153: LATCbits.LATC5 = 0;
 11052  002268  9A8B               	bcf	3979,5,c	;volatile
 11053                           
 11054                           ;Test.c: 161: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 11055  00226A  0E01               	movlw	1
 11056  00226C  EC28  F028         	call	_lcdInst
 11057  002270  0E68               	movlw	104
 11058  002272  0100               	movlb	0	; () banked
 11059  002274  6FAB               	movwf	??_sensorTest& (0+255),b
 11060  002276  0EE4               	movlw	228
 11061  002278                     u8997:
 11062  002278  2EE8               	decfsz	wreg,f,c
 11063  00227A  D7FE               	bra	u8997
 11064  00227C  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 11065  00227E  D7FC               	bra	u8997
 11066  002280  F000               	nop	
 11067  002282  0E80               	movlw	128
 11068  002284  EC28  F028         	call	_lcdInst
 11069                           
 11070                           ;Test.c: 162: printf("TST: MAGNETISM");
 11071  002288  0E87               	movlw	low STR_82
 11072  00228A  0100               	movlb	0	; () banked
 11073  00228C  6F8E               	movwf	printf@f& (0+255),b
 11074  00228E  0EFE               	movlw	high STR_82
 11075  002290  0100               	movlb	0	; () banked
 11076  002292  6F8F               	movwf	(printf@f+1)& (0+255),b
 11077  002294  ECE8  F00A         	call	_printf	;wreg free
 11078                           
 11079                           ;Test.c: 163: _delay((unsigned long)((100)*(32000000/4000.0)));
 11080  002298  0E05               	movlw	5
 11081  00229A  0100               	movlb	0	; () banked
 11082  00229C  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 11083  00229E  0E0F               	movlw	15
 11084  0022A0  0100               	movlb	0	; () banked
 11085  0022A2  6FAB               	movwf	??_sensorTest& (0+255),b
 11086  0022A4  0EF1               	movlw	241
 11087  0022A6                     u9007:
 11088  0022A6  2EE8               	decfsz	wreg,f,c
 11089  0022A8  D7FE               	bra	u9007
 11090  0022AA  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 11091  0022AC  D7FC               	bra	u9007
 11092  0022AE  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 11093  0022B0  D7FA               	bra	u9007
 11094                           
 11095                           ;Test.c: 164: while(PORTBbits.RB1 == 0){
 11096  0022B2  D021               	goto	l7334
 11097  0022B4                     l7328:
 11098                           
 11099                           ;Test.c: 165: readMAG();
 11100  0022B4  ECF0  F024         	call	_readMAG	;wreg free
 11101                           
 11102                           ;Test.c: 166: lcdInst(0b10000000);;
 11103  0022B8  0E80               	movlw	128
 11104  0022BA  EC28  F028         	call	_lcdInst
 11105                           
 11106                           ;Test.c: 167: lcdInst(0b11000000);;
 11107  0022BE  0EC0               	movlw	192
 11108  0022C0  EC28  F028         	call	_lcdInst
 11109                           
 11110                           ;Test.c: 168: printf("MAG_signal: %d ", MAG_signal);
 11111  0022C4  0E2A               	movlw	low STR_83
 11112  0022C6  0100               	movlb	0	; () banked
 11113  0022C8  6F8E               	movwf	printf@f& (0+255),b
 11114  0022CA  0EFE               	movlw	high STR_83
 11115  0022CC  0100               	movlb	0	; () banked
 11116  0022CE  6F8F               	movwf	(printf@f+1)& (0+255),b
 11117  0022D0  C0E0  F090         	movff	_MAG_signal,?_printf+2
 11118  0022D4  C0E1  F091         	movff	_MAG_signal+1,?_printf+3
 11119  0022D8  ECE8  F00A         	call	_printf	;wreg free
 11120                           
 11121                           ;Test.c: 169: _delay((unsigned long)((100)*(32000000/4000.0)));
 11122  0022DC  0E05               	movlw	5
 11123  0022DE  0100               	movlb	0	; () banked
 11124  0022E0  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 11125  0022E2  0E0F               	movlw	15
 11126  0022E4  0100               	movlb	0	; () banked
 11127  0022E6  6FAB               	movwf	??_sensorTest& (0+255),b
 11128  0022E8  0EF1               	movlw	241
 11129  0022EA                     u9017:
 11130  0022EA  2EE8               	decfsz	wreg,f,c
 11131  0022EC  D7FE               	bra	u9017
 11132  0022EE  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 11133  0022F0  D7FC               	bra	u9017
 11134  0022F2  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 11135  0022F4  D7FA               	bra	u9017
 11136  0022F6                     l7334:
 11137  0022F6  A281               	btfss	3969,1,c	;volatile
 11138  0022F8  D7DD               	goto	l7328
 11139                           
 11140                           ;Test.c: 170: }
 11141                           ;Test.c: 175: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 11142  0022FA  0E01               	movlw	1
 11143  0022FC  EC28  F028         	call	_lcdInst
 11144  002300  0E68               	movlw	104
 11145  002302  0100               	movlb	0	; () banked
 11146  002304  6FAB               	movwf	??_sensorTest& (0+255),b
 11147  002306  0EE4               	movlw	228
 11148  002308                     u9027:
 11149  002308  2EE8               	decfsz	wreg,f,c
 11150  00230A  D7FE               	bra	u9027
 11151  00230C  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 11152  00230E  D7FC               	bra	u9027
 11153  002310  F000               	nop	
 11154  002312  0E80               	movlw	128
 11155  002314  EC28  F028         	call	_lcdInst
 11156                           
 11157                           ;Test.c: 176: printf("TST: COND");
 11158  002318  0E87               	movlw	low STR_84
 11159  00231A  0100               	movlb	0	; () banked
 11160  00231C  6F8E               	movwf	printf@f& (0+255),b
 11161  00231E  0EFF               	movlw	high STR_84
 11162  002320  0100               	movlb	0	; () banked
 11163  002322  6F8F               	movwf	(printf@f+1)& (0+255),b
 11164  002324  ECE8  F00A         	call	_printf	;wreg free
 11165                           
 11166                           ;Test.c: 177: _delay((unsigned long)((100)*(32000000/4000.0)));
 11167  002328  0E05               	movlw	5
 11168  00232A  0100               	movlb	0	; () banked
 11169  00232C  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 11170  00232E  0E0F               	movlw	15
 11171  002330  0100               	movlb	0	; () banked
 11172  002332  6FAB               	movwf	??_sensorTest& (0+255),b
 11173  002334  0EF1               	movlw	241
 11174  002336                     u9037:
 11175  002336  2EE8               	decfsz	wreg,f,c
 11176  002338  D7FE               	bra	u9037
 11177  00233A  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 11178  00233C  D7FC               	bra	u9037
 11179  00233E  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 11180  002340  D7FA               	bra	u9037
 11181  002342                     l7346:
 11182                           
 11183                           ;Test.c: 179: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 11184  002342  0E01               	movlw	1
 11185  002344  EC28  F028         	call	_lcdInst
 11186  002348  0E68               	movlw	104
 11187  00234A  0100               	movlb	0	; () banked
 11188  00234C  6FAB               	movwf	??_sensorTest& (0+255),b
 11189  00234E  0EE4               	movlw	228
 11190  002350                     u9047:
 11191  002350  2EE8               	decfsz	wreg,f,c
 11192  002352  D7FE               	bra	u9047
 11193  002354  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 11194  002356  D7FC               	bra	u9047
 11195  002358  F000               	nop	
 11196  00235A  0E80               	movlw	128
 11197  00235C  EC28  F028         	call	_lcdInst
 11198                           
 11199                           ;Test.c: 180: printf("TST: COND");
 11200  002360  0E87               	movlw	low STR_84
 11201  002362  0100               	movlb	0	; () banked
 11202  002364  6F8E               	movwf	printf@f& (0+255),b
 11203  002366  0EFF               	movlw	high STR_84
 11204  002368  0100               	movlb	0	; () banked
 11205  00236A  6F8F               	movwf	(printf@f+1)& (0+255),b
 11206  00236C  ECE8  F00A         	call	_printf	;wreg free
 11207                           
 11208                           ;Test.c: 181: while(PORTBbits.RB1 == 0){
 11209  002370  D01B               	goto	l7358
 11210  002372                     l7354:
 11211                           
 11212                           ;Test.c: 185: lcdInst(0b10000000);;lcdInst(0b11000000);;
 11213  002372  0E80               	movlw	128
 11214  002374  EC28  F028         	call	_lcdInst
 11215  002378  0EC0               	movlw	192
 11216  00237A  EC28  F028         	call	_lcdInst
 11217                           
 11218                           ;Test.c: 186: printf("COND: %d", PORTAbits.RA2);
 11219  00237E  0EA5               	movlw	low STR_86
 11220  002380  0100               	movlb	0	; () banked
 11221  002382  6F8E               	movwf	printf@f& (0+255),b
 11222  002384  0EFF               	movlw	high STR_86
 11223  002386  0100               	movlb	0	; () banked
 11224  002388  6F8F               	movwf	(printf@f+1)& (0+255),b
 11225  00238A  A480               	btfss	3968,2,c	;volatile
 11226  00238C  D004               	goto	u5940
 11227  00238E  0100               	movlb	0	; () banked
 11228  002390  6BAB               	clrf	??_sensorTest& (0+255),b
 11229  002392  2BAB               	incf	??_sensorTest& (0+255),f,b
 11230  002394  D002               	goto	u5948
 11231  002396                     u5940:
 11232  002396  0100               	movlb	0	; () banked
 11233  002398  6BAB               	clrf	??_sensorTest& (0+255),b
 11234  00239A                     u5948:
 11235  00239A  0100               	movlb	0	; () banked
 11236  00239C  51AB               	movf	??_sensorTest& (0+255),w,b
 11237  00239E  0100               	movlb	0	; () banked
 11238  0023A0  6F90               	movwf	(?_printf+2)& (0+255),b
 11239  0023A2  6B91               	clrf	(?_printf+3)& (0+255),b
 11240  0023A4  ECE8  F00A         	call	_printf	;wreg free
 11241  0023A8                     l7358:
 11242  0023A8  A281               	btfss	3969,1,c	;volatile
 11243  0023AA  D7E3               	goto	l7354
 11244                           
 11245                           ;Test.c: 187: }
 11246                           ;Test.c: 188: if(PORTB >> 4 == 0b1111){
 11247  0023AC  3881               	swapf	3969,w,c	;volatile
 11248  0023AE  0B0F               	andlw	15
 11249  0023B0  0A0F               	xorlw	15
 11250  0023B2  B4D8               	btfsc	status,2,c
 11251  0023B4  0012               	return	
 11252                           
 11253                           ;Test.c: 191: else{
 11254                           ;Test.c: 192: LATAbits.LATA3 = 1;
 11255                           
 11256                           ;Test.c: 190: }
 11257                           
 11258                           ;Test.c: 189: break;
 11259  0023B6  8689               	bsf	3977,3,c	;volatile
 11260                           
 11261                           ;Test.c: 193: while(PORTBbits.RB1 == 1){
 11262  0023B8  D01B               	goto	l7370
 11263  0023BA                     l7366:
 11264                           
 11265                           ;Test.c: 195: lcdInst(0b10000000);;lcdInst(0b11000000);;
 11266  0023BA  0E80               	movlw	128
 11267  0023BC  EC28  F028         	call	_lcdInst
 11268  0023C0  0EC0               	movlw	192
 11269  0023C2  EC28  F028         	call	_lcdInst
 11270                           
 11271                           ;Test.c: 196: printf("COND: %d", PORTAbits.RA2);
 11272  0023C6  0EA5               	movlw	low STR_86
 11273  0023C8  0100               	movlb	0	; () banked
 11274  0023CA  6F8E               	movwf	printf@f& (0+255),b
 11275  0023CC  0EFF               	movlw	high STR_86
 11276  0023CE  0100               	movlb	0	; () banked
 11277  0023D0  6F8F               	movwf	(printf@f+1)& (0+255),b
 11278  0023D2  A480               	btfss	3968,2,c	;volatile
 11279  0023D4  D004               	goto	u5970
 11280  0023D6  0100               	movlb	0	; () banked
 11281  0023D8  6BAB               	clrf	??_sensorTest& (0+255),b
 11282  0023DA  2BAB               	incf	??_sensorTest& (0+255),f,b
 11283  0023DC  D002               	goto	u5978
 11284  0023DE                     u5970:
 11285  0023DE  0100               	movlb	0	; () banked
 11286  0023E0  6BAB               	clrf	??_sensorTest& (0+255),b
 11287  0023E2                     u5978:
 11288  0023E2  0100               	movlb	0	; () banked
 11289  0023E4  51AB               	movf	??_sensorTest& (0+255),w,b
 11290  0023E6  0100               	movlb	0	; () banked
 11291  0023E8  6F90               	movwf	(?_printf+2)& (0+255),b
 11292  0023EA  6B91               	clrf	(?_printf+3)& (0+255),b
 11293  0023EC  ECE8  F00A         	call	_printf	;wreg free
 11294  0023F0                     l7370:
 11295  0023F0  B281               	btfsc	3969,1,c	;volatile
 11296  0023F2  D7E3               	goto	l7366
 11297                           
 11298                           ;Test.c: 197: }
 11299                           ;Test.c: 198: LATAbits.LATA3 = !1;
 11300  0023F4  9689               	bcf	3977,3,c	;volatile
 11301  0023F6  D7A5               	goto	l7346
 11302  0023F8                     __end_of_sensorTest:
 11303                           	opt stack 0
 11304                           tblptru	equ	0xFF8
 11305                           tblptrh	equ	0xFF7
 11306                           tblptrl	equ	0xFF6
 11307                           tablat	equ	0xFF5
 11308                           prodh	equ	0xFF4
 11309                           prodl	equ	0xFF3
 11310                           intcon	equ	0xFF2
 11311                           intcon2	equ	0xFF1
 11312                           intcon3	equ	0xFF0
 11313                           postinc0	equ	0xFEE
 11314                           wreg	equ	0xFE8
 11315                           postdec1	equ	0xFE5
 11316                           fsr1l	equ	0xFE1
 11317                           indf2	equ	0xFDF
 11318                           postinc2	equ	0xFDE
 11319                           postdec2	equ	0xFDD
 11320                           fsr2h	equ	0xFDA
 11321                           fsr2l	equ	0xFD9
 11322                           status	equ	0xFD8
 11323                           
 11324 ;; *************** function _readMAG *****************
 11325 ;; Defined at:
 11326 ;;		line 29 in file "ADCFunctionality.c"
 11327 ;; Parameters:    Size  Location     Type
 11328 ;;		None
 11329 ;; Auto vars:     Size  Location     Type
 11330 ;;  res             2    4[BANK0 ] int 
 11331 ;; Return value:  Size  Location     Type
 11332 ;;                  1    wreg      void 
 11333 ;; Registers used:
 11334 ;;		wreg, status,2, status,0, cstack
 11335 ;; Tracked objects:
 11336 ;;		On entry : 0/0
 11337 ;;		On exit  : 0/0
 11338 ;;		Unchanged: 0/0
 11339 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11340 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11341 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11342 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11343 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11344 ;;Total ram usage:        4 bytes
 11345 ;; Hardware stack levels used:    1
 11346 ;; Hardware stack levels required when called:    8
 11347 ;; This function calls:
 11348 ;;		_readADC
 11349 ;; This function is called by:
 11350 ;;		_getMAG
 11351 ;;		_sensorTest
 11352 ;; This function uses a non-reentrant model
 11353 ;;
 11354                           
 11355                           	psect	text38
 11356  0049E0                     __ptext38:
 11357                           	opt stack 0
 11358  0049E0                     _readMAG:
 11359                           	opt stack 19
 11360                           
 11361                           ;ADCFunctionality.c: 30: readADC(1);
 11362                           
 11363                           ;incstack = 0
 11364  0049E0  0E01               	movlw	1
 11365  0049E2  EC2D  F027         	call	_readADC
 11366                           
 11367                           ;ADCFunctionality.c: 31: int res = ADRESH<<8 | ADRESL;
 11368  0049E6  50C3               	movf	4035,w,c	;volatile
 11369  0049E8  CFC4 F082          	movff	4036,??_readMAG	;volatile
 11370  0049EC  0100               	movlb	0	; () banked
 11371  0049EE  6B83               	clrf	(??_readMAG+1)& (0+255),b
 11372  0049F0  C082  F083         	movff	??_readMAG,??_readMAG+1
 11373  0049F4  0100               	movlb	0	; () banked
 11374  0049F6  6B82               	clrf	??_readMAG& (0+255),b
 11375  0049F8  0100               	movlb	0	; () banked
 11376  0049FA  1182               	iorwf	??_readMAG& (0+255),w,b
 11377  0049FC  0100               	movlb	0	; () banked
 11378  0049FE  6F84               	movwf	readMAG@res& (0+255),b
 11379  004A00  0100               	movlb	0	; () banked
 11380  004A02  5183               	movf	(??_readMAG+1)& (0+255),w,b
 11381  004A04  0100               	movlb	0	; () banked
 11382  004A06  6F85               	movwf	(readMAG@res+1)& (0+255),b
 11383                           
 11384                           ; BSR set to: 0
 11385                           ;ADCFunctionality.c: 32: MAG_signal = (res < 150) ? 1 : 0;
 11386  004A08  0100               	movlb	0	; () banked
 11387  004A0A  BF85               	btfsc	(readMAG@res+1)& (0+255),7,b
 11388  004A0C  D008               	goto	u4391
 11389  004A0E  0100               	movlb	0	; () banked
 11390  004A10  5185               	movf	(readMAG@res+1)& (0+255),w,b
 11391  004A12  E107               	bnz	u4390
 11392  004A14  0E96               	movlw	150
 11393  004A16  0100               	movlb	0	; () banked
 11394  004A18  5D84               	subwf	readMAG@res& (0+255),w,b
 11395  004A1A  B0D8               	btfsc	status,0,c
 11396  004A1C  D002               	goto	u4390
 11397  004A1E                     u4391:
 11398  004A1E  0E01               	movlw	1
 11399  004A20  D001               	goto	u4400
 11400  004A22                     u4390:
 11401  004A22  0E00               	movlw	0
 11402  004A24                     u4400:
 11403  004A24  0100               	movlb	0	; () banked
 11404  004A26  6FE0               	movwf	_MAG_signal& (0+255),b
 11405  004A28  6BE1               	clrf	(_MAG_signal+1)& (0+255),b
 11406                           
 11407                           ; BSR set to: 0
 11408  004A2A  0012               	return		;funcret
 11409  004A2C                     __end_of_readMAG:
 11410                           	opt stack 0
 11411                           tblptru	equ	0xFF8
 11412                           tblptrh	equ	0xFF7
 11413                           tblptrl	equ	0xFF6
 11414                           tablat	equ	0xFF5
 11415                           prodh	equ	0xFF4
 11416                           prodl	equ	0xFF3
 11417                           intcon	equ	0xFF2
 11418                           intcon2	equ	0xFF1
 11419                           intcon3	equ	0xFF0
 11420                           postinc0	equ	0xFEE
 11421                           wreg	equ	0xFE8
 11422                           postdec1	equ	0xFE5
 11423                           fsr1l	equ	0xFE1
 11424                           indf2	equ	0xFDF
 11425                           postinc2	equ	0xFDE
 11426                           postdec2	equ	0xFDD
 11427                           fsr2h	equ	0xFDA
 11428                           fsr2l	equ	0xFD9
 11429                           status	equ	0xFD8
 11430                           
 11431 ;; *************** function _algorithmTest *****************
 11432 ;; Defined at:
 11433 ;;		line 80 in file "Test.c"
 11434 ;; Parameters:    Size  Location     Type
 11435 ;;		None
 11436 ;; Auto vars:     Size  Location     Type
 11437 ;;		None
 11438 ;; Return value:  Size  Location     Type
 11439 ;;                  1    wreg      void 
 11440 ;; Registers used:
 11441 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11442 ;; Tracked objects:
 11443 ;;		On entry : 0/0
 11444 ;;		On exit  : 0/0
 11445 ;;		Unchanged: 0/0
 11446 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11447 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11448 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11449 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11450 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11451 ;;Total ram usage:        2 bytes
 11452 ;; Hardware stack levels used:    1
 11453 ;; Hardware stack levels required when called:   10
 11454 ;; This function calls:
 11455 ;;		_lcdInst
 11456 ;;		_printf
 11457 ;; This function is called by:
 11458 ;;		_Test
 11459 ;; This function uses a non-reentrant model
 11460 ;;
 11461                           
 11462                           	psect	text39
 11463  003D9A                     __ptext39:
 11464                           	opt stack 0
 11465  003D9A                     _algorithmTest:
 11466                           	opt stack 19
 11467                           
 11468                           ;Test.c: 82: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b10
      +                          000000);;
 11469                           
 11470                           ; BSR set to: 0
 11471                           ;incstack = 0
 11472  003D9A  0E01               	movlw	1
 11473  003D9C  EC28  F028         	call	_lcdInst
 11474  003DA0  0E68               	movlw	104
 11475  003DA2  0100               	movlb	0	; () banked
 11476  003DA4  6FAB               	movwf	??_algorithmTest& (0+255),b
 11477  003DA6  0EE4               	movlw	228
 11478  003DA8                     u9057:
 11479  003DA8  2EE8               	decfsz	wreg,f,c
 11480  003DAA  D7FE               	bra	u9057
 11481  003DAC  2FAB               	decfsz	??_algorithmTest& (0+255),f,b
 11482  003DAE  D7FC               	bra	u9057
 11483  003DB0  F000               	nop	
 11484  003DB2  0E80               	movlw	128
 11485  003DB4  EC28  F028         	call	_lcdInst
 11486                           
 11487                           ;Test.c: 83: printf("ALGORITHM TEST");
 11488  003DB8  0ED2               	movlw	low STR_70
 11489  003DBA  0100               	movlb	0	; () banked
 11490  003DBC  6F8E               	movwf	printf@f& (0+255),b
 11491  003DBE  0EFE               	movlw	high STR_70
 11492  003DC0  0100               	movlb	0	; () banked
 11493  003DC2  6F8F               	movwf	(printf@f+1)& (0+255),b
 11494  003DC4  ECE8  F00A         	call	_printf	;wreg free
 11495                           
 11496                           ;Test.c: 84: lcdInst(0b11000000);;
 11497  003DC8  0EC0               	movlw	192
 11498  003DCA  EC28  F028         	call	_lcdInst
 11499                           
 11500                           ;Test.c: 85: printf("PUSH TO START");
 11501  003DCE  0E0B               	movlw	low STR_71
 11502  003DD0  0100               	movlb	0	; () banked
 11503  003DD2  6F8E               	movwf	printf@f& (0+255),b
 11504  003DD4  0EFF               	movlw	high STR_71
 11505  003DD6  0100               	movlb	0	; () banked
 11506  003DD8  6F8F               	movwf	(printf@f+1)& (0+255),b
 11507  003DDA  ECE8  F00A         	call	_printf	;wreg free
 11508                           
 11509                           ;Test.c: 86: _delay((unsigned long)((100)*(32000000/4000.0)));
 11510  003DDE  0E05               	movlw	5
 11511  003DE0  0100               	movlb	0	; () banked
 11512  003DE2  6FAC               	movwf	(??_algorithmTest+1)& (0+255),b
 11513  003DE4  0E0F               	movlw	15
 11514  003DE6  0100               	movlb	0	; () banked
 11515  003DE8  6FAB               	movwf	??_algorithmTest& (0+255),b
 11516  003DEA  0EF1               	movlw	241
 11517  003DEC                     u9067:
 11518  003DEC  2EE8               	decfsz	wreg,f,c
 11519  003DEE  D7FE               	bra	u9067
 11520  003DF0  2FAB               	decfsz	??_algorithmTest& (0+255),f,b
 11521  003DF2  D7FC               	bra	u9067
 11522  003DF4  2FAC               	decfsz	(??_algorithmTest+1)& (0+255),f,b
 11523  003DF6  D7FA               	bra	u9067
 11524  003DF8                     l1126:
 11525  003DF8  A281               	btfss	3969,1,c	;volatile
 11526  003DFA  D7FE               	goto	l1126
 11527  003DFC                     l1129:
 11528  003DFC  B281               	btfsc	3969,1,c	;volatile
 11529  003DFE  D7FE               	goto	l1129
 11530                           
 11531                           ;Test.c: 89: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b10
      +                          000000);;
 11532  003E00  0E01               	movlw	1
 11533  003E02  EC28  F028         	call	_lcdInst
 11534  003E06  0E68               	movlw	104
 11535  003E08  0100               	movlb	0	; () banked
 11536  003E0A  6FAB               	movwf	??_algorithmTest& (0+255),b
 11537  003E0C  0EE4               	movlw	228
 11538  003E0E                     u9077:
 11539  003E0E  2EE8               	decfsz	wreg,f,c
 11540  003E10  D7FE               	bra	u9077
 11541  003E12  2FAB               	decfsz	??_algorithmTest& (0+255),f,b
 11542  003E14  D7FC               	bra	u9077
 11543  003E16  F000               	nop	
 11544  003E18  0E80               	movlw	128
 11545  003E1A  EC28  F028         	call	_lcdInst
 11546                           
 11547                           ;Test.c: 94: printf("ALG1: 9 POPNOTAB");
 11548  003E1E  0E5F               	movlw	low STR_72
 11549  003E20  0100               	movlb	0	; () banked
 11550  003E22  6F8E               	movwf	printf@f& (0+255),b
 11551  003E24  0EFC               	movlw	high STR_72
 11552  003E26  0100               	movlb	0	; () banked
 11553  003E28  6F8F               	movwf	(printf@f+1)& (0+255),b
 11554  003E2A  ECE8  F00A         	call	_printf	;wreg free
 11555                           
 11556                           ;Test.c: 101: printf("ALG2: 12 CANS");
 11557  003E2E  0EEF               	movlw	low STR_73
 11558  003E30  0100               	movlb	0	; () banked
 11559  003E32  6F8E               	movwf	printf@f& (0+255),b
 11560  003E34  0EFE               	movlw	high STR_73
 11561  003E36  0100               	movlb	0	; () banked
 11562  003E38  6F8F               	movwf	(printf@f+1)& (0+255),b
 11563  003E3A  ECE8  F00A         	call	_printf	;wreg free
 11564                           
 11565                           ;Test.c: 110: printf("ALG3: 1 CAN");
 11566  003E3E  0E4F               	movlw	low STR_74
 11567  003E40  0100               	movlb	0	; () banked
 11568  003E42  6F8E               	movwf	printf@f& (0+255),b
 11569  003E44  0EFF               	movlw	high STR_74
 11570  003E46  0100               	movlb	0	; () banked
 11571  003E48  6F8F               	movwf	(printf@f+1)& (0+255),b
 11572  003E4A  ECE8  F00A         	call	_printf	;wreg free
 11573                           
 11574                           ;Test.c: 116: printf("ALG4: ALL CANS");
 11575  003E4E  0EB4               	movlw	low STR_75
 11576  003E50  0100               	movlb	0	; () banked
 11577  003E52  6F8E               	movwf	printf@f& (0+255),b
 11578  003E54  0EFE               	movlw	high STR_75
 11579  003E56  0100               	movlb	0	; () banked
 11580  003E58  6F8F               	movwf	(printf@f+1)& (0+255),b
 11581  003E5A  ECE8  F00A         	call	_printf	;wreg free
 11582                           
 11583                           ;Test.c: 121: printf("ALG5: NO CANS");
 11584  003E5E  0EFD               	movlw	low STR_76
 11585  003E60  0100               	movlb	0	; () banked
 11586  003E62  6F8E               	movwf	printf@f& (0+255),b
 11587  003E64  0EFE               	movlw	high STR_76
 11588  003E66  0100               	movlb	0	; () banked
 11589  003E68  6F8F               	movwf	(printf@f+1)& (0+255),b
 11590  003E6A  ECE8  F00A         	call	_printf	;wreg free
 11591  003E6E  0012               	return		;funcret
 11592  003E70                     __end_of_algorithmTest:
 11593                           	opt stack 0
 11594                           tblptru	equ	0xFF8
 11595                           tblptrh	equ	0xFF7
 11596                           tblptrl	equ	0xFF6
 11597                           tablat	equ	0xFF5
 11598                           prodh	equ	0xFF4
 11599                           prodl	equ	0xFF3
 11600                           intcon	equ	0xFF2
 11601                           intcon2	equ	0xFF1
 11602                           intcon3	equ	0xFF0
 11603                           postinc0	equ	0xFEE
 11604                           wreg	equ	0xFE8
 11605                           postdec1	equ	0xFE5
 11606                           fsr1l	equ	0xFE1
 11607                           indf2	equ	0xFDF
 11608                           postinc2	equ	0xFDE
 11609                           postdec2	equ	0xFDD
 11610                           fsr2h	equ	0xFDA
 11611                           fsr2l	equ	0xFD9
 11612                           status	equ	0xFD8
 11613                           
 11614 ;; *************** function _actuatorTest *****************
 11615 ;; Defined at:
 11616 ;;		line 203 in file "Test.c"
 11617 ;; Parameters:    Size  Location     Type
 11618 ;;		None
 11619 ;; Auto vars:     Size  Location     Type
 11620 ;;  i               1   45[BANK0 ] unsigned char 
 11621 ;;  i               1   67[BANK0 ] unsigned char 
 11622 ;;  i               1   66[BANK0 ] unsigned char 
 11623 ;;  i               1   65[BANK0 ] unsigned char 
 11624 ;;  i               1   64[BANK0 ] unsigned char 
 11625 ;;  i               1   63[BANK0 ] unsigned char 
 11626 ;;  i               1   62[BANK0 ] unsigned char 
 11627 ;;  i               1   61[BANK0 ] unsigned char 
 11628 ;;  i               1   60[BANK0 ] unsigned char 
 11629 ;;  i               1   59[BANK0 ] unsigned char 
 11630 ;;  i               1   58[BANK0 ] unsigned char 
 11631 ;;  i               1   57[BANK0 ] unsigned char 
 11632 ;;  i               1   56[BANK0 ] unsigned char 
 11633 ;;  i               1   55[BANK0 ] unsigned char 
 11634 ;;  i               1   54[BANK0 ] unsigned char 
 11635 ;;  i               1   53[BANK0 ] unsigned char 
 11636 ;;  i               1   52[BANK0 ] unsigned char 
 11637 ;;  i               1   51[BANK0 ] unsigned char 
 11638 ;;  i               1   50[BANK0 ] unsigned char 
 11639 ;;  i               1   49[BANK0 ] unsigned char 
 11640 ;;  i               1   48[BANK0 ] unsigned char 
 11641 ;;  i               1   47[BANK0 ] unsigned char 
 11642 ;;  i               1   46[BANK0 ] unsigned char 
 11643 ;;  i               2   68[BANK0 ] int 
 11644 ;; Return value:  Size  Location     Type
 11645 ;;                  1    wreg      void 
 11646 ;; Registers used:
 11647 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11648 ;; Tracked objects:
 11649 ;;		On entry : 0/0
 11650 ;;		On exit  : 0/0
 11651 ;;		Unchanged: 0/0
 11652 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11653 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11654 ;;      Locals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11655 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11656 ;;      Totals:         0      27       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11657 ;;Total ram usage:       27 bytes
 11658 ;; Hardware stack levels used:    1
 11659 ;; Hardware stack levels required when called:   10
 11660 ;; This function calls:
 11661 ;;		_lcdInst
 11662 ;;		_printf
 11663 ;;		_updateServoPosition
 11664 ;; This function is called by:
 11665 ;;		_Test
 11666 ;; This function uses a non-reentrant model
 11667 ;;
 11668                           
 11669                           	psect	text40
 11670  000012                     __ptext40:
 11671                           	opt stack 0
 11672  000012                     _actuatorTest:
 11673                           	opt stack 19
 11674                           
 11675                           ;Test.c: 205: int i = 0;
 11676                           
 11677                           ;incstack = 0
 11678  000012  0E00               	movlw	0
 11679  000014  0100               	movlb	0	; () banked
 11680  000016  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 11681  000018  0E00               	movlw	0
 11682  00001A  6FC4               	movwf	actuatorTest@i& (0+255),b
 11683                           
 11684                           ; BSR set to: 0
 11685                           ;Test.c: 207: (INTCONbits.GIE = 1);
 11686  00001C  8EF2               	bsf	intcon,7,c	;volatile
 11687                           
 11688                           ; BSR set to: 0
 11689                           ;Test.c: 208: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 11690  00001E  0E01               	movlw	1
 11691  000020  EC28  F028         	call	_lcdInst
 11692  000024  0E68               	movlw	104
 11693  000026  0100               	movlb	0	; () banked
 11694  000028  6FAB               	movwf	??_actuatorTest& (0+255),b
 11695  00002A  0EE4               	movlw	228
 11696  00002C                     u9087:
 11697  00002C  2EE8               	decfsz	wreg,f,c
 11698  00002E  D7FE               	bra	u9087
 11699  000030  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11700  000032  D7FC               	bra	u9087
 11701  000034  F000               	nop	
 11702  000036  0E80               	movlw	128
 11703  000038  EC28  F028         	call	_lcdInst
 11704                           
 11705                           ;Test.c: 209: printf("ACTUATORS");
 11706  00003C  0E91               	movlw	low STR_88
 11707  00003E  0100               	movlb	0	; () banked
 11708  000040  6F8E               	movwf	printf@f& (0+255),b
 11709  000042  0EFF               	movlw	high STR_88
 11710  000044  0100               	movlb	0	; () banked
 11711  000046  6F8F               	movwf	(printf@f+1)& (0+255),b
 11712  000048  ECE8  F00A         	call	_printf	;wreg free
 11713                           
 11714                           ;Test.c: 210: lcdInst(0b11000000);;
 11715  00004C  0EC0               	movlw	192
 11716  00004E  EC28  F028         	call	_lcdInst
 11717                           
 11718                           ;Test.c: 211: printf("PUSH TO START");
 11719  000052  0E0B               	movlw	low STR_71
 11720  000054  0100               	movlb	0	; () banked
 11721  000056  6F8E               	movwf	printf@f& (0+255),b
 11722  000058  0EFF               	movlw	high STR_71
 11723  00005A  0100               	movlb	0	; () banked
 11724  00005C  6F8F               	movwf	(printf@f+1)& (0+255),b
 11725  00005E  ECE8  F00A         	call	_printf	;wreg free
 11726                           
 11727                           ;Test.c: 212: _delay((unsigned long)((100)*(32000000/4000.0)));
 11728  000062  0E05               	movlw	5
 11729  000064  0100               	movlb	0	; () banked
 11730  000066  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 11731  000068  0E0F               	movlw	15
 11732  00006A  0100               	movlb	0	; () banked
 11733  00006C  6FAB               	movwf	??_actuatorTest& (0+255),b
 11734  00006E  0EF1               	movlw	241
 11735  000070                     u9097:
 11736  000070  2EE8               	decfsz	wreg,f,c
 11737  000072  D7FE               	bra	u9097
 11738  000074  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11739  000076  D7FC               	bra	u9097
 11740  000078  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 11741  00007A  D7FA               	bra	u9097
 11742  00007C                     l1161:
 11743  00007C  A281               	btfss	3969,1,c	;volatile
 11744  00007E  D7FE               	goto	l1161
 11745  000080                     l1164:
 11746  000080  B281               	btfsc	3969,1,c	;volatile
 11747  000082  D7FE               	goto	l1164
 11748                           
 11749                           ;Test.c: 215: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 11750  000084  0E01               	movlw	1
 11751  000086  EC28  F028         	call	_lcdInst
 11752  00008A  0E68               	movlw	104
 11753  00008C  0100               	movlb	0	; () banked
 11754  00008E  6FAB               	movwf	??_actuatorTest& (0+255),b
 11755  000090  0EE4               	movlw	228
 11756  000092                     u9107:
 11757  000092  2EE8               	decfsz	wreg,f,c
 11758  000094  D7FE               	bra	u9107
 11759  000096  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11760  000098  D7FC               	bra	u9107
 11761  00009A  F000               	nop	
 11762  00009C  0E80               	movlw	128
 11763  00009E  EC28  F028         	call	_lcdInst
 11764                           
 11765                           ;Test.c: 220: printf("TST: DC MOTORS");
 11766  0000A2  0EC3               	movlw	low STR_90
 11767  0000A4  0100               	movlb	0	; () banked
 11768  0000A6  6F8E               	movwf	printf@f& (0+255),b
 11769  0000A8  0EFE               	movlw	high STR_90
 11770  0000AA  0100               	movlb	0	; () banked
 11771  0000AC  6F8F               	movwf	(printf@f+1)& (0+255),b
 11772  0000AE  ECE8  F00A         	call	_printf	;wreg free
 11773                           
 11774                           ;Test.c: 221: lcdInst(0b11000000);;
 11775  0000B2  0EC0               	movlw	192
 11776  0000B4  EC28  F028         	call	_lcdInst
 11777                           
 11778                           ;Test.c: 222: printf("PIN RA5 HIGH.");
 11779  0000B8  0EE1               	movlw	low STR_91
 11780  0000BA  0100               	movlb	0	; () banked
 11781  0000BC  6F8E               	movwf	printf@f& (0+255),b
 11782  0000BE  0EFE               	movlw	high STR_91
 11783  0000C0  0100               	movlb	0	; () banked
 11784  0000C2  6F8F               	movwf	(printf@f+1)& (0+255),b
 11785  0000C4  ECE8  F00A         	call	_printf	;wreg free
 11786                           
 11787                           ;Test.c: 223: LATAbits.LATA5 = 1;
 11788  0000C8  8A89               	bsf	3977,5,c	;volatile
 11789                           
 11790                           ;Test.c: 224: for(i=0;i<5;i++){for(char i=0;i<100;i++){_delay((unsigned long)((10)*(3200
      +                          0000/4000.0)));};}
 11791  0000CA  0E00               	movlw	0
 11792  0000CC  0100               	movlb	0	; () banked
 11793  0000CE  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 11794  0000D0  0E00               	movlw	0
 11795  0000D2  6FC4               	movwf	actuatorTest@i& (0+255),b
 11796                           
 11797                           ; BSR set to: 0
 11798  0000D4  0100               	movlb	0	; () banked
 11799  0000D6  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 11800  0000D8  D008               	goto	l7410
 11801  0000DA  0100               	movlb	0	; () banked
 11802  0000DC  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 11803  0000DE  E123               	bnz	l1168
 11804  0000E0  0E05               	movlw	5
 11805  0000E2  0100               	movlb	0	; () banked
 11806  0000E4  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 11807  0000E6  B0D8               	btfsc	status,0,c
 11808  0000E8  D01E               	goto	l1168
 11809  0000EA                     l7410:
 11810                           
 11811                           ; BSR set to: 0
 11812  0000EA  0E00               	movlw	0
 11813  0000EC  0100               	movlb	0	; () banked
 11814  0000EE  6FAD               	movwf	actuatorTest@i_1653& (0+255),b
 11815  0000F0                     l7412:
 11816                           
 11817                           ; BSR set to: 0
 11818  0000F0  0E63               	movlw	99
 11819  0000F2  0100               	movlb	0	; () banked
 11820  0000F4  65AD               	cpfsgt	actuatorTest@i_1653& (0+255),b
 11821  0000F6  D001               	goto	l7416
 11822  0000F8  D00C               	goto	l7420
 11823  0000FA                     l7416:
 11824                           
 11825                           ; BSR set to: 0
 11826  0000FA  0E68               	movlw	104
 11827  0000FC  0100               	movlb	0	; () banked
 11828  0000FE  6FAB               	movwf	??_actuatorTest& (0+255),b
 11829  000100  0EE4               	movlw	228
 11830  000102                     u9117:
 11831  000102  2EE8               	decfsz	wreg,f,c
 11832  000104  D7FE               	bra	u9117
 11833  000106  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11834  000108  D7FC               	bra	u9117
 11835  00010A  F000               	nop	
 11836  00010C  0100               	movlb	0	; () banked
 11837  00010E  2BAD               	incf	actuatorTest@i_1653& (0+255),f,b
 11838  000110  D7EF               	goto	l7412
 11839  000112                     l7420:
 11840                           
 11841                           ; BSR set to: 0
 11842  000112  0100               	movlb	0	; () banked
 11843  000114  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 11844  000116  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 11845                           
 11846                           ; BSR set to: 0
 11847  000118  0100               	movlb	0	; () banked
 11848  00011A  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 11849  00011C  D7E6               	goto	l7410
 11850  00011E  0100               	movlb	0	; () banked
 11851  000120  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 11852  000122  E101               	bnz	u6040
 11853  000124  D7DD               	goto	L10
 11854  000126                     u6040:
 11855  000126                     l1168:
 11856                           
 11857                           ; BSR set to: 0
 11858                           ;Test.c: 225: LATAbits.LATA5 = 0;
 11859  000126  9A89               	bcf	3977,5,c	;volatile
 11860                           
 11861                           ; BSR set to: 0
 11862                           ;Test.c: 226: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 11863  000128  0E01               	movlw	1
 11864  00012A  EC28  F028         	call	_lcdInst
 11865  00012E  0E68               	movlw	104
 11866  000130  0100               	movlb	0	; () banked
 11867  000132  6FAB               	movwf	??_actuatorTest& (0+255),b
 11868  000134  0EE4               	movlw	228
 11869  000136                     u9127:
 11870  000136  2EE8               	decfsz	wreg,f,c
 11871  000138  D7FE               	bra	u9127
 11872  00013A  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11873  00013C  D7FC               	bra	u9127
 11874  00013E  F000               	nop	
 11875  000140  0E80               	movlw	128
 11876  000142  EC28  F028         	call	_lcdInst
 11877                           
 11878                           ;Test.c: 232: printf("TST: COND SOLN'D");
 11879  000146  0E70               	movlw	low STR_92
 11880  000148  0100               	movlb	0	; () banked
 11881  00014A  6F8E               	movwf	printf@f& (0+255),b
 11882  00014C  0EFC               	movlw	high STR_92
 11883  00014E  0100               	movlb	0	; () banked
 11884  000150  6F8F               	movwf	(printf@f+1)& (0+255),b
 11885  000152  ECE8  F00A         	call	_printf	;wreg free
 11886                           
 11887                           ;Test.c: 233: lcdInst(0b11000000);;
 11888  000156  0EC0               	movlw	192
 11889  000158  EC28  F028         	call	_lcdInst
 11890                           
 11891                           ;Test.c: 234: printf("PIN RA3...");
 11892  00015C  0E5B               	movlw	low STR_93
 11893  00015E  0100               	movlb	0	; () banked
 11894  000160  6F8E               	movwf	printf@f& (0+255),b
 11895  000162  0EFF               	movlw	high STR_93
 11896  000164  0100               	movlb	0	; () banked
 11897  000166  6F8F               	movwf	(printf@f+1)& (0+255),b
 11898  000168  ECE8  F00A         	call	_printf	;wreg free
 11899                           
 11900                           ;Test.c: 235: for(i=0;i<5;i++){
 11901  00016C  0E00               	movlw	0
 11902  00016E  0100               	movlb	0	; () banked
 11903  000170  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 11904  000172  0E00               	movlw	0
 11905  000174  6FC4               	movwf	actuatorTest@i& (0+255),b
 11906                           
 11907                           ; BSR set to: 0
 11908  000176  0100               	movlb	0	; () banked
 11909  000178  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 11910  00017A  D008               	goto	l1171
 11911  00017C  0100               	movlb	0	; () banked
 11912  00017E  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 11913  000180  E12C               	bnz	l1172
 11914  000182  0E05               	movlw	5
 11915  000184  0100               	movlb	0	; () banked
 11916  000186  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 11917  000188  B0D8               	btfsc	status,0,c
 11918  00018A  D027               	goto	l1172
 11919  00018C                     l1171:
 11920                           
 11921                           ; BSR set to: 0
 11922                           ;Test.c: 236: LATAbits.LATA3 = 1;
 11923  00018C  8689               	bsf	3977,3,c	;volatile
 11924                           
 11925                           ; BSR set to: 0
 11926                           ;Test.c: 237: _delay((unsigned long)((300)*(32000000/4000.0)));
 11927  00018E  0E0D               	movlw	13
 11928  000190  0100               	movlb	0	; () banked
 11929  000192  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 11930  000194  0E2D               	movlw	45
 11931  000196  0100               	movlb	0	; () banked
 11932  000198  6FAB               	movwf	??_actuatorTest& (0+255),b
 11933  00019A  0ED7               	movlw	215
 11934  00019C                     u9137:
 11935  00019C  2EE8               	decfsz	wreg,f,c
 11936  00019E  D7FE               	bra	u9137
 11937  0001A0  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11938  0001A2  D7FC               	bra	u9137
 11939  0001A4  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 11940  0001A6  D7FA               	bra	u9137
 11941  0001A8  D000               	nop2	
 11942                           
 11943                           ;Test.c: 238: LATAbits.LATA3 = !1;
 11944  0001AA  9689               	bcf	3977,3,c	;volatile
 11945                           
 11946                           ;Test.c: 239: _delay((unsigned long)((1000-300)*(32000000/4000.0)));
 11947  0001AC  0E1D               	movlw	29
 11948  0001AE  0100               	movlb	0	; () banked
 11949  0001B0  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 11950  0001B2  0E69               	movlw	105
 11951  0001B4  0100               	movlb	0	; () banked
 11952  0001B6  6FAB               	movwf	??_actuatorTest& (0+255),b
 11953  0001B8  0EA5               	movlw	165
 11954  0001BA                     u9147:
 11955  0001BA  2EE8               	decfsz	wreg,f,c
 11956  0001BC  D7FE               	bra	u9147
 11957  0001BE  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11958  0001C0  D7FC               	bra	u9147
 11959  0001C2  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 11960  0001C4  D7FA               	bra	u9147
 11961  0001C6  0100               	movlb	0	; () banked
 11962  0001C8  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 11963  0001CA  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 11964  0001CC  0100               	movlb	0	; () banked
 11965  0001CE  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 11966  0001D0  D7DD               	goto	l1171
 11967  0001D2  0100               	movlb	0	; () banked
 11968  0001D4  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 11969  0001D6  E101               	bnz	u6060
 11970  0001D8  D7D4               	goto	L11
 11971  0001DA                     u6060:
 11972  0001DA                     l1172:
 11973                           
 11974                           ; BSR set to: 0
 11975                           ;Test.c: 240: }
 11976                           ;Test.c: 241: LATAbits.LATA3 = !1;
 11977  0001DA  9689               	bcf	3977,3,c	;volatile
 11978                           
 11979                           ; BSR set to: 0
 11980                           ;Test.c: 242: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 11981  0001DC  0E01               	movlw	1
 11982  0001DE  EC28  F028         	call	_lcdInst
 11983  0001E2  0E68               	movlw	104
 11984  0001E4  0100               	movlb	0	; () banked
 11985  0001E6  6FAB               	movwf	??_actuatorTest& (0+255),b
 11986  0001E8  0EE4               	movlw	228
 11987  0001EA                     u9157:
 11988  0001EA  2EE8               	decfsz	wreg,f,c
 11989  0001EC  D7FE               	bra	u9157
 11990  0001EE  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11991  0001F0  D7FC               	bra	u9157
 11992  0001F2  F000               	nop	
 11993  0001F4  0E80               	movlw	128
 11994  0001F6  EC28  F028         	call	_lcdInst
 11995                           
 11996                           ;Test.c: 248: printf("TST: PUSH SOLN'D");
 11997  0001FA  0E81               	movlw	low STR_94
 11998  0001FC  0100               	movlb	0	; () banked
 11999  0001FE  6F8E               	movwf	printf@f& (0+255),b
 12000  000200  0EFC               	movlw	high STR_94
 12001  000202  0100               	movlb	0	; () banked
 12002  000204  6F8F               	movwf	(printf@f+1)& (0+255),b
 12003  000206  ECE8  F00A         	call	_printf	;wreg free
 12004                           
 12005                           ;Test.c: 249: lcdInst(0b11000000);;
 12006  00020A  0EC0               	movlw	192
 12007  00020C  EC28  F028         	call	_lcdInst
 12008                           
 12009                           ;Test.c: 250: printf("PIN RA4...");
 12010  000210  0E66               	movlw	low STR_95
 12011  000212  0100               	movlb	0	; () banked
 12012  000214  6F8E               	movwf	printf@f& (0+255),b
 12013  000216  0EFF               	movlw	high STR_95
 12014  000218  0100               	movlb	0	; () banked
 12015  00021A  6F8F               	movwf	(printf@f+1)& (0+255),b
 12016  00021C  ECE8  F00A         	call	_printf	;wreg free
 12017                           
 12018                           ;Test.c: 251: for(i=0;i<5;i++){
 12019  000220  0E00               	movlw	0
 12020  000222  0100               	movlb	0	; () banked
 12021  000224  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 12022  000226  0E00               	movlw	0
 12023  000228  6FC4               	movwf	actuatorTest@i& (0+255),b
 12024                           
 12025                           ; BSR set to: 0
 12026  00022A  0100               	movlb	0	; () banked
 12027  00022C  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 12028  00022E  D008               	goto	l1173
 12029  000230  0100               	movlb	0	; () banked
 12030  000232  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 12031  000234  E12C               	bnz	l1174
 12032  000236  0E05               	movlw	5
 12033  000238  0100               	movlb	0	; () banked
 12034  00023A  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 12035  00023C  B0D8               	btfsc	status,0,c
 12036  00023E  D027               	goto	l1174
 12037  000240                     l1173:
 12038                           
 12039                           ; BSR set to: 0
 12040                           ;Test.c: 252: LATAbits.LATA4 = 1;
 12041  000240  8889               	bsf	3977,4,c	;volatile
 12042                           
 12043                           ; BSR set to: 0
 12044                           ;Test.c: 253: _delay((unsigned long)((300)*(32000000/4000.0)));
 12045  000242  0E0D               	movlw	13
 12046  000244  0100               	movlb	0	; () banked
 12047  000246  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 12048  000248  0E2D               	movlw	45
 12049  00024A  0100               	movlb	0	; () banked
 12050  00024C  6FAB               	movwf	??_actuatorTest& (0+255),b
 12051  00024E  0ED7               	movlw	215
 12052  000250                     u9167:
 12053  000250  2EE8               	decfsz	wreg,f,c
 12054  000252  D7FE               	bra	u9167
 12055  000254  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12056  000256  D7FC               	bra	u9167
 12057  000258  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 12058  00025A  D7FA               	bra	u9167
 12059  00025C  D000               	nop2	
 12060                           
 12061                           ;Test.c: 254: LATAbits.LATA4 = !1;
 12062  00025E  9889               	bcf	3977,4,c	;volatile
 12063                           
 12064                           ;Test.c: 255: _delay((unsigned long)((1000-300)*(32000000/4000.0)));
 12065  000260  0E1D               	movlw	29
 12066  000262  0100               	movlb	0	; () banked
 12067  000264  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 12068  000266  0E69               	movlw	105
 12069  000268  0100               	movlb	0	; () banked
 12070  00026A  6FAB               	movwf	??_actuatorTest& (0+255),b
 12071  00026C  0EA5               	movlw	165
 12072  00026E                     u9177:
 12073  00026E  2EE8               	decfsz	wreg,f,c
 12074  000270  D7FE               	bra	u9177
 12075  000272  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12076  000274  D7FC               	bra	u9177
 12077  000276  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 12078  000278  D7FA               	bra	u9177
 12079  00027A  0100               	movlb	0	; () banked
 12080  00027C  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 12081  00027E  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 12082  000280  0100               	movlb	0	; () banked
 12083  000282  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 12084  000284  D7DD               	goto	l1173
 12085  000286  0100               	movlb	0	; () banked
 12086  000288  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 12087  00028A  E101               	bnz	u6080
 12088  00028C  D7D4               	goto	L12
 12089  00028E                     u6080:
 12090  00028E                     l1174:
 12091                           
 12092                           ; BSR set to: 0
 12093                           ;Test.c: 256: }
 12094                           ;Test.c: 257: LATAbits.LATA4 = !1;
 12095  00028E  9889               	bcf	3977,4,c	;volatile
 12096                           
 12097                           ; BSR set to: 0
 12098                           ;Test.c: 258: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12099  000290  0E01               	movlw	1
 12100  000292  EC28  F028         	call	_lcdInst
 12101  000296  0E68               	movlw	104
 12102  000298  0100               	movlb	0	; () banked
 12103  00029A  6FAB               	movwf	??_actuatorTest& (0+255),b
 12104  00029C  0EE4               	movlw	228
 12105  00029E                     u9187:
 12106  00029E  2EE8               	decfsz	wreg,f,c
 12107  0002A0  D7FE               	bra	u9187
 12108  0002A2  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12109  0002A4  D7FC               	bra	u9187
 12110  0002A6  F000               	nop	
 12111  0002A8  0E80               	movlw	128
 12112  0002AA  EC28  F028         	call	_lcdInst
 12113                           
 12114                           ;Test.c: 261: machine_state = Sorting_state;
 12115  0002AE  0E01               	movlw	1
 12116  0002B0  0100               	movlb	0	; () banked
 12117  0002B2  6FFC               	movwf	_machine_state& (0+255),b
 12118                           
 12119                           ; BSR set to: 0
 12120                           ;Test.c: 262: was_low_1 = 0;
 12121  0002B4  0E00               	movlw	0
 12122  0002B6  6E7A               	movwf	_was_low_1+1,c	;volatile
 12123  0002B8  0E00               	movlw	0
 12124  0002BA  6E79               	movwf	_was_low_1,c	;volatile
 12125                           
 12126                           ; BSR set to: 0
 12127                           ;Test.c: 263: was_low_1 = 0;
 12128  0002BC  0E00               	movlw	0
 12129  0002BE  6E7A               	movwf	_was_low_1+1,c	;volatile
 12130  0002C0  0E00               	movlw	0
 12131  0002C2  6E79               	movwf	_was_low_1,c	;volatile
 12132                           
 12133                           ; BSR set to: 0
 12134                           ;Test.c: 270: printf("TST: PAN SERVO");
 12135  0002C4  0EA5               	movlw	low STR_96
 12136  0002C6  0100               	movlb	0	; () banked
 12137  0002C8  6F8E               	movwf	printf@f& (0+255),b
 12138  0002CA  0EFE               	movlw	high STR_96
 12139  0002CC  0100               	movlb	0	; () banked
 12140  0002CE  6F8F               	movwf	(printf@f+1)& (0+255),b
 12141  0002D0  ECE8  F00A         	call	_printf	;wreg free
 12142                           
 12143                           ;Test.c: 271: lcdInst(0b11000000);;
 12144  0002D4  0EC0               	movlw	192
 12145  0002D6  EC28  F028         	call	_lcdInst
 12146                           
 12147                           ;Test.c: 272: printf("MIDDLE -- 2s    ");
 12148  0002DA  0E0A               	movlw	low STR_97
 12149  0002DC  0100               	movlb	0	; () banked
 12150  0002DE  6F8E               	movwf	printf@f& (0+255),b
 12151  0002E0  0EFC               	movlw	high STR_97
 12152  0002E2  0100               	movlb	0	; () banked
 12153  0002E4  6F8F               	movwf	(printf@f+1)& (0+255),b
 12154  0002E6  ECE8  F00A         	call	_printf	;wreg free
 12155                           
 12156                           ;Test.c: 273: updateServoPosition(1200, 1);
 12157  0002EA  0E04               	movlw	4
 12158  0002EC  0100               	movlb	0	; () banked
 12159  0002EE  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12160  0002F0  0EB0               	movlw	176
 12161  0002F2  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12162  0002F4  0E00               	movlw	0
 12163  0002F6  0100               	movlb	0	; () banked
 12164  0002F8  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12165  0002FA  0E01               	movlw	1
 12166  0002FC  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12167  0002FE  EC84  F022         	call	_updateServoPosition	;wreg free
 12168                           
 12169                           ;Test.c: 274: TMR1ON = 1;
 12170  000302  80CD               	bsf	4045,0,c	;volatile
 12171                           
 12172                           ;Test.c: 275: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12173  000304  0E00               	movlw	0
 12174  000306  0100               	movlb	0	; () banked
 12175  000308  6FAE               	movwf	actuatorTest@i_1660& (0+255),b
 12176  00030A                     l7496:
 12177                           
 12178                           ; BSR set to: 0
 12179  00030A  0E63               	movlw	99
 12180  00030C  0100               	movlb	0	; () banked
 12181  00030E  65AE               	cpfsgt	actuatorTest@i_1660& (0+255),b
 12182  000310  D001               	goto	l7500
 12183  000312  D00C               	goto	l7504
 12184  000314                     l7500:
 12185                           
 12186                           ; BSR set to: 0
 12187  000314  0E68               	movlw	104
 12188  000316  0100               	movlb	0	; () banked
 12189  000318  6FAB               	movwf	??_actuatorTest& (0+255),b
 12190  00031A  0EE4               	movlw	228
 12191  00031C                     u9197:
 12192  00031C  2EE8               	decfsz	wreg,f,c
 12193  00031E  D7FE               	bra	u9197
 12194  000320  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12195  000322  D7FC               	bra	u9197
 12196  000324  F000               	nop	
 12197  000326  0100               	movlb	0	; () banked
 12198  000328  2BAE               	incf	actuatorTest@i_1660& (0+255),f,b
 12199  00032A  D7EF               	goto	l7496
 12200  00032C                     l7504:
 12201                           
 12202                           ; BSR set to: 0
 12203  00032C  0E00               	movlw	0
 12204  00032E  0100               	movlb	0	; () banked
 12205  000330  6FAF               	movwf	actuatorTest@i_1661& (0+255),b
 12206  000332                     l7506:
 12207                           
 12208                           ; BSR set to: 0
 12209  000332  0E63               	movlw	99
 12210  000334  0100               	movlb	0	; () banked
 12211  000336  65AF               	cpfsgt	actuatorTest@i_1661& (0+255),b
 12212  000338  D001               	goto	l7510
 12213  00033A  D00C               	goto	l7514
 12214  00033C                     l7510:
 12215                           
 12216                           ; BSR set to: 0
 12217  00033C  0E68               	movlw	104
 12218  00033E  0100               	movlb	0	; () banked
 12219  000340  6FAB               	movwf	??_actuatorTest& (0+255),b
 12220  000342  0EE4               	movlw	228
 12221  000344                     u9207:
 12222  000344  2EE8               	decfsz	wreg,f,c
 12223  000346  D7FE               	bra	u9207
 12224  000348  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12225  00034A  D7FC               	bra	u9207
 12226  00034C  F000               	nop	
 12227  00034E  0100               	movlb	0	; () banked
 12228  000350  2BAF               	incf	actuatorTest@i_1661& (0+255),f,b
 12229  000352  D7EF               	goto	l7506
 12230  000354                     l7514:
 12231                           
 12232                           ; BSR set to: 0
 12233                           ;Test.c: 277: lcdInst(0b10000000);;lcdInst(0b11000000);;
 12234  000354  0E80               	movlw	128
 12235  000356  EC28  F028         	call	_lcdInst
 12236  00035A  0EC0               	movlw	192
 12237  00035C  EC28  F028         	call	_lcdInst
 12238                           
 12239                           ;Test.c: 278: printf("RIGHT -- 2s     ");
 12240  000360  0EF9               	movlw	low STR_98
 12241  000362  0100               	movlb	0	; () banked
 12242  000364  6F8E               	movwf	printf@f& (0+255),b
 12243  000366  0EFB               	movlw	high STR_98
 12244  000368  0100               	movlb	0	; () banked
 12245  00036A  6F8F               	movwf	(printf@f+1)& (0+255),b
 12246  00036C  ECE8  F00A         	call	_printf	;wreg free
 12247                           
 12248                           ;Test.c: 279: updateServoPosition(500, 1);
 12249  000370  0E01               	movlw	1
 12250  000372  0100               	movlb	0	; () banked
 12251  000374  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12252  000376  0EF4               	movlw	244
 12253  000378  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12254  00037A  0E00               	movlw	0
 12255  00037C  0100               	movlb	0	; () banked
 12256  00037E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12257  000380  0E01               	movlw	1
 12258  000382  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12259  000384  EC84  F022         	call	_updateServoPosition	;wreg free
 12260                           
 12261                           ;Test.c: 280: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12262  000388  0E00               	movlw	0
 12263  00038A  0100               	movlb	0	; () banked
 12264  00038C  6FB0               	movwf	actuatorTest@i_1663& (0+255),b
 12265  00038E                     l7522:
 12266                           
 12267                           ; BSR set to: 0
 12268  00038E  0E63               	movlw	99
 12269  000390  0100               	movlb	0	; () banked
 12270  000392  65B0               	cpfsgt	actuatorTest@i_1663& (0+255),b
 12271  000394  D001               	goto	l7526
 12272  000396  D00C               	goto	l7530
 12273  000398                     l7526:
 12274                           
 12275                           ; BSR set to: 0
 12276  000398  0E68               	movlw	104
 12277  00039A  0100               	movlb	0	; () banked
 12278  00039C  6FAB               	movwf	??_actuatorTest& (0+255),b
 12279  00039E  0EE4               	movlw	228
 12280  0003A0                     u9217:
 12281  0003A0  2EE8               	decfsz	wreg,f,c
 12282  0003A2  D7FE               	bra	u9217
 12283  0003A4  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12284  0003A6  D7FC               	bra	u9217
 12285  0003A8  F000               	nop	
 12286  0003AA  0100               	movlb	0	; () banked
 12287  0003AC  2BB0               	incf	actuatorTest@i_1663& (0+255),f,b
 12288  0003AE  D7EF               	goto	l7522
 12289  0003B0                     l7530:
 12290                           
 12291                           ; BSR set to: 0
 12292  0003B0  0E00               	movlw	0
 12293  0003B2  0100               	movlb	0	; () banked
 12294  0003B4  6FB1               	movwf	actuatorTest@i_1664& (0+255),b
 12295  0003B6                     l7532:
 12296                           
 12297                           ; BSR set to: 0
 12298  0003B6  0E63               	movlw	99
 12299  0003B8  0100               	movlb	0	; () banked
 12300  0003BA  65B1               	cpfsgt	actuatorTest@i_1664& (0+255),b
 12301  0003BC  D001               	goto	l7536
 12302  0003BE  D00C               	goto	l7540
 12303  0003C0                     l7536:
 12304                           
 12305                           ; BSR set to: 0
 12306  0003C0  0E68               	movlw	104
 12307  0003C2  0100               	movlb	0	; () banked
 12308  0003C4  6FAB               	movwf	??_actuatorTest& (0+255),b
 12309  0003C6  0EE4               	movlw	228
 12310  0003C8                     u9227:
 12311  0003C8  2EE8               	decfsz	wreg,f,c
 12312  0003CA  D7FE               	bra	u9227
 12313  0003CC  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12314  0003CE  D7FC               	bra	u9227
 12315  0003D0  F000               	nop	
 12316  0003D2  0100               	movlb	0	; () banked
 12317  0003D4  2BB1               	incf	actuatorTest@i_1664& (0+255),f,b
 12318  0003D6  D7EF               	goto	l7532
 12319  0003D8                     l7540:
 12320                           
 12321                           ; BSR set to: 0
 12322                           ;Test.c: 282: lcdInst(0b10000000);;lcdInst(0b11000000);;
 12323  0003D8  0E80               	movlw	128
 12324  0003DA  EC28  F028         	call	_lcdInst
 12325  0003DE  0EC0               	movlw	192
 12326  0003E0  EC28  F028         	call	_lcdInst
 12327                           
 12328                           ;Test.c: 283: printf("LEFT -- 2s      ");
 12329  0003E4  0ED7               	movlw	low STR_99
 12330  0003E6  0100               	movlb	0	; () banked
 12331  0003E8  6F8E               	movwf	printf@f& (0+255),b
 12332  0003EA  0EFB               	movlw	high STR_99
 12333  0003EC  0100               	movlb	0	; () banked
 12334  0003EE  6F8F               	movwf	(printf@f+1)& (0+255),b
 12335  0003F0  ECE8  F00A         	call	_printf	;wreg free
 12336                           
 12337                           ;Test.c: 284: updateServoPosition(2400, 1);
 12338  0003F4  0E09               	movlw	9
 12339  0003F6  0100               	movlb	0	; () banked
 12340  0003F8  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12341  0003FA  0E60               	movlw	96
 12342  0003FC  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12343  0003FE  0E00               	movlw	0
 12344  000400  0100               	movlb	0	; () banked
 12345  000402  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12346  000404  0E01               	movlw	1
 12347  000406  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12348  000408  EC84  F022         	call	_updateServoPosition	;wreg free
 12349                           
 12350                           ;Test.c: 285: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12351  00040C  0E00               	movlw	0
 12352  00040E  0100               	movlb	0	; () banked
 12353  000410  6FB2               	movwf	actuatorTest@i_1666& (0+255),b
 12354  000412                     l7548:
 12355                           
 12356                           ; BSR set to: 0
 12357  000412  0E63               	movlw	99
 12358  000414  0100               	movlb	0	; () banked
 12359  000416  65B2               	cpfsgt	actuatorTest@i_1666& (0+255),b
 12360  000418  D001               	goto	l7552
 12361  00041A  D00C               	goto	l7556
 12362  00041C                     l7552:
 12363                           
 12364                           ; BSR set to: 0
 12365  00041C  0E68               	movlw	104
 12366  00041E  0100               	movlb	0	; () banked
 12367  000420  6FAB               	movwf	??_actuatorTest& (0+255),b
 12368  000422  0EE4               	movlw	228
 12369  000424                     u9237:
 12370  000424  2EE8               	decfsz	wreg,f,c
 12371  000426  D7FE               	bra	u9237
 12372  000428  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12373  00042A  D7FC               	bra	u9237
 12374  00042C  F000               	nop	
 12375  00042E  0100               	movlb	0	; () banked
 12376  000430  2BB2               	incf	actuatorTest@i_1666& (0+255),f,b
 12377  000432  D7EF               	goto	l7548
 12378  000434                     l7556:
 12379                           
 12380                           ; BSR set to: 0
 12381  000434  0E00               	movlw	0
 12382  000436  0100               	movlb	0	; () banked
 12383  000438  6FB3               	movwf	actuatorTest@i_1667& (0+255),b
 12384  00043A                     l7558:
 12385                           
 12386                           ; BSR set to: 0
 12387  00043A  0E63               	movlw	99
 12388  00043C  0100               	movlb	0	; () banked
 12389  00043E  65B3               	cpfsgt	actuatorTest@i_1667& (0+255),b
 12390  000440  D001               	goto	l7562
 12391  000442  D00C               	goto	l7566
 12392  000444                     l7562:
 12393                           
 12394                           ; BSR set to: 0
 12395  000444  0E68               	movlw	104
 12396  000446  0100               	movlb	0	; () banked
 12397  000448  6FAB               	movwf	??_actuatorTest& (0+255),b
 12398  00044A  0EE4               	movlw	228
 12399  00044C                     u9247:
 12400  00044C  2EE8               	decfsz	wreg,f,c
 12401  00044E  D7FE               	bra	u9247
 12402  000450  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12403  000452  D7FC               	bra	u9247
 12404  000454  F000               	nop	
 12405  000456  0100               	movlb	0	; () banked
 12406  000458  2BB3               	incf	actuatorTest@i_1667& (0+255),f,b
 12407  00045A  D7EF               	goto	l7558
 12408  00045C                     l7566:
 12409                           
 12410                           ; BSR set to: 0
 12411                           ;Test.c: 287: lcdInst(0b10000000);;lcdInst(0b11000000);;
 12412  00045C  0E80               	movlw	128
 12413  00045E  EC28  F028         	call	_lcdInst
 12414  000462  0EC0               	movlw	192
 12415  000464  EC28  F028         	call	_lcdInst
 12416                           
 12417                           ;Test.c: 288: printf("MID-LEFT -- 2s  ");
 12418  000468  0E2C               	movlw	low STR_100
 12419  00046A  0100               	movlb	0	; () banked
 12420  00046C  6F8E               	movwf	printf@f& (0+255),b
 12421  00046E  0EFC               	movlw	high STR_100
 12422  000470  0100               	movlb	0	; () banked
 12423  000472  6F8F               	movwf	(printf@f+1)& (0+255),b
 12424  000474  ECE8  F00A         	call	_printf	;wreg free
 12425                           
 12426                           ;Test.c: 289: updateServoPosition(1670, 1);
 12427  000478  0E06               	movlw	6
 12428  00047A  0100               	movlb	0	; () banked
 12429  00047C  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12430  00047E  0E86               	movlw	134
 12431  000480  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12432  000482  0E00               	movlw	0
 12433  000484  0100               	movlb	0	; () banked
 12434  000486  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12435  000488  0E01               	movlw	1
 12436  00048A  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12437  00048C  EC84  F022         	call	_updateServoPosition	;wreg free
 12438                           
 12439                           ;Test.c: 290: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12440  000490  0E00               	movlw	0
 12441  000492  0100               	movlb	0	; () banked
 12442  000494  6FB4               	movwf	actuatorTest@i_1669& (0+255),b
 12443  000496                     l7574:
 12444                           
 12445                           ; BSR set to: 0
 12446  000496  0E63               	movlw	99
 12447  000498  0100               	movlb	0	; () banked
 12448  00049A  65B4               	cpfsgt	actuatorTest@i_1669& (0+255),b
 12449  00049C  D001               	goto	l7578
 12450  00049E  D00C               	goto	l7582
 12451  0004A0                     l7578:
 12452                           
 12453                           ; BSR set to: 0
 12454  0004A0  0E68               	movlw	104
 12455  0004A2  0100               	movlb	0	; () banked
 12456  0004A4  6FAB               	movwf	??_actuatorTest& (0+255),b
 12457  0004A6  0EE4               	movlw	228
 12458  0004A8                     u9257:
 12459  0004A8  2EE8               	decfsz	wreg,f,c
 12460  0004AA  D7FE               	bra	u9257
 12461  0004AC  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12462  0004AE  D7FC               	bra	u9257
 12463  0004B0  F000               	nop	
 12464  0004B2  0100               	movlb	0	; () banked
 12465  0004B4  2BB4               	incf	actuatorTest@i_1669& (0+255),f,b
 12466  0004B6  D7EF               	goto	l7574
 12467  0004B8                     l7582:
 12468                           
 12469                           ; BSR set to: 0
 12470  0004B8  0E00               	movlw	0
 12471  0004BA  0100               	movlb	0	; () banked
 12472  0004BC  6FB5               	movwf	actuatorTest@i_1670& (0+255),b
 12473  0004BE                     l7584:
 12474                           
 12475                           ; BSR set to: 0
 12476  0004BE  0E63               	movlw	99
 12477  0004C0  0100               	movlb	0	; () banked
 12478  0004C2  65B5               	cpfsgt	actuatorTest@i_1670& (0+255),b
 12479  0004C4  D001               	goto	l7588
 12480  0004C6  D00C               	goto	l7592
 12481  0004C8                     l7588:
 12482                           
 12483                           ; BSR set to: 0
 12484  0004C8  0E68               	movlw	104
 12485  0004CA  0100               	movlb	0	; () banked
 12486  0004CC  6FAB               	movwf	??_actuatorTest& (0+255),b
 12487  0004CE  0EE4               	movlw	228
 12488  0004D0                     u9267:
 12489  0004D0  2EE8               	decfsz	wreg,f,c
 12490  0004D2  D7FE               	bra	u9267
 12491  0004D4  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12492  0004D6  D7FC               	bra	u9267
 12493  0004D8  F000               	nop	
 12494  0004DA  0100               	movlb	0	; () banked
 12495  0004DC  2BB5               	incf	actuatorTest@i_1670& (0+255),f,b
 12496  0004DE  D7EF               	goto	l7584
 12497  0004E0                     l7592:
 12498                           
 12499                           ; BSR set to: 0
 12500                           ;Test.c: 292: lcdInst(0b10000000);;lcdInst(0b11000000);;
 12501  0004E0  0E80               	movlw	128
 12502  0004E2  EC28  F028         	call	_lcdInst
 12503  0004E6  0EC0               	movlw	192
 12504  0004E8  EC28  F028         	call	_lcdInst
 12505                           
 12506                           ;Test.c: 293: printf("MID-RIGHT -- 2s ");
 12507  0004EC  0E3D               	movlw	low STR_101
 12508  0004EE  0100               	movlb	0	; () banked
 12509  0004F0  6F8E               	movwf	printf@f& (0+255),b
 12510  0004F2  0EFC               	movlw	high STR_101
 12511  0004F4  0100               	movlb	0	; () banked
 12512  0004F6  6F8F               	movwf	(printf@f+1)& (0+255),b
 12513  0004F8  ECE8  F00A         	call	_printf	;wreg free
 12514                           
 12515                           ;Test.c: 294: updateServoPosition(850, 1);
 12516  0004FC  0E03               	movlw	3
 12517  0004FE  0100               	movlb	0	; () banked
 12518  000500  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12519  000502  0E52               	movlw	82
 12520  000504  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12521  000506  0E00               	movlw	0
 12522  000508  0100               	movlb	0	; () banked
 12523  00050A  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12524  00050C  0E01               	movlw	1
 12525  00050E  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12526  000510  EC84  F022         	call	_updateServoPosition	;wreg free
 12527                           
 12528                           ;Test.c: 295: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12529  000514  0E00               	movlw	0
 12530  000516  0100               	movlb	0	; () banked
 12531  000518  6FB6               	movwf	actuatorTest@i_1672& (0+255),b
 12532  00051A                     l7600:
 12533                           
 12534                           ; BSR set to: 0
 12535  00051A  0E63               	movlw	99
 12536  00051C  0100               	movlb	0	; () banked
 12537  00051E  65B6               	cpfsgt	actuatorTest@i_1672& (0+255),b
 12538  000520  D001               	goto	l7604
 12539  000522  D00C               	goto	l7608
 12540  000524                     l7604:
 12541                           
 12542                           ; BSR set to: 0
 12543  000524  0E68               	movlw	104
 12544  000526  0100               	movlb	0	; () banked
 12545  000528  6FAB               	movwf	??_actuatorTest& (0+255),b
 12546  00052A  0EE4               	movlw	228
 12547  00052C                     u9277:
 12548  00052C  2EE8               	decfsz	wreg,f,c
 12549  00052E  D7FE               	bra	u9277
 12550  000530  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12551  000532  D7FC               	bra	u9277
 12552  000534  F000               	nop	
 12553  000536  0100               	movlb	0	; () banked
 12554  000538  2BB6               	incf	actuatorTest@i_1672& (0+255),f,b
 12555  00053A  D7EF               	goto	l7600
 12556  00053C                     l7608:
 12557                           
 12558                           ; BSR set to: 0
 12559  00053C  0E00               	movlw	0
 12560  00053E  0100               	movlb	0	; () banked
 12561  000540  6FB7               	movwf	actuatorTest@i_1673& (0+255),b
 12562  000542                     l7610:
 12563                           
 12564                           ; BSR set to: 0
 12565  000542  0E63               	movlw	99
 12566  000544  0100               	movlb	0	; () banked
 12567  000546  65B7               	cpfsgt	actuatorTest@i_1673& (0+255),b
 12568  000548  D001               	goto	l7614
 12569  00054A  D00C               	goto	l7618
 12570  00054C                     l7614:
 12571                           
 12572                           ; BSR set to: 0
 12573  00054C  0E68               	movlw	104
 12574  00054E  0100               	movlb	0	; () banked
 12575  000550  6FAB               	movwf	??_actuatorTest& (0+255),b
 12576  000552  0EE4               	movlw	228
 12577  000554                     u9287:
 12578  000554  2EE8               	decfsz	wreg,f,c
 12579  000556  D7FE               	bra	u9287
 12580  000558  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12581  00055A  D7FC               	bra	u9287
 12582  00055C  F000               	nop	
 12583  00055E  0100               	movlb	0	; () banked
 12584  000560  2BB7               	incf	actuatorTest@i_1673& (0+255),f,b
 12585  000562  D7EF               	goto	l7610
 12586  000564                     l7618:
 12587                           
 12588                           ; BSR set to: 0
 12589                           ;Test.c: 297: lcdInst(0b10000000);;lcdInst(0b11000000);;
 12590  000564  0E80               	movlw	128
 12591  000566  EC28  F028         	call	_lcdInst
 12592  00056A  0EC0               	movlw	192
 12593  00056C  EC28  F028         	call	_lcdInst
 12594                           
 12595                           ;Test.c: 298: printf("MID -- 2s       ");
 12596  000570  0EB5               	movlw	low STR_102
 12597  000572  0100               	movlb	0	; () banked
 12598  000574  6F8E               	movwf	printf@f& (0+255),b
 12599  000576  0EFB               	movlw	high STR_102
 12600  000578  0100               	movlb	0	; () banked
 12601  00057A  6F8F               	movwf	(printf@f+1)& (0+255),b
 12602  00057C  ECE8  F00A         	call	_printf	;wreg free
 12603                           
 12604                           ;Test.c: 299: updateServoPosition(1200, 1);
 12605  000580  0E04               	movlw	4
 12606  000582  0100               	movlb	0	; () banked
 12607  000584  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12608  000586  0EB0               	movlw	176
 12609  000588  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12610  00058A  0E00               	movlw	0
 12611  00058C  0100               	movlb	0	; () banked
 12612  00058E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12613  000590  0E01               	movlw	1
 12614  000592  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12615  000594  EC84  F022         	call	_updateServoPosition	;wreg free
 12616                           
 12617                           ;Test.c: 300: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12618  000598  0E00               	movlw	0
 12619  00059A  0100               	movlb	0	; () banked
 12620  00059C  6FB8               	movwf	actuatorTest@i_1675& (0+255),b
 12621  00059E                     l7626:
 12622                           
 12623                           ; BSR set to: 0
 12624  00059E  0E63               	movlw	99
 12625  0005A0  0100               	movlb	0	; () banked
 12626  0005A2  65B8               	cpfsgt	actuatorTest@i_1675& (0+255),b
 12627  0005A4  D001               	goto	l7630
 12628  0005A6  D00C               	goto	l7634
 12629  0005A8                     l7630:
 12630                           
 12631                           ; BSR set to: 0
 12632  0005A8  0E68               	movlw	104
 12633  0005AA  0100               	movlb	0	; () banked
 12634  0005AC  6FAB               	movwf	??_actuatorTest& (0+255),b
 12635  0005AE  0EE4               	movlw	228
 12636  0005B0                     u9297:
 12637  0005B0  2EE8               	decfsz	wreg,f,c
 12638  0005B2  D7FE               	bra	u9297
 12639  0005B4  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12640  0005B6  D7FC               	bra	u9297
 12641  0005B8  F000               	nop	
 12642  0005BA  0100               	movlb	0	; () banked
 12643  0005BC  2BB8               	incf	actuatorTest@i_1675& (0+255),f,b
 12644  0005BE  D7EF               	goto	l7626
 12645  0005C0                     l7634:
 12646                           
 12647                           ; BSR set to: 0
 12648  0005C0  0E00               	movlw	0
 12649  0005C2  0100               	movlb	0	; () banked
 12650  0005C4  6FB9               	movwf	actuatorTest@i_1676& (0+255),b
 12651  0005C6                     l7636:
 12652                           
 12653                           ; BSR set to: 0
 12654  0005C6  0E63               	movlw	99
 12655  0005C8  0100               	movlb	0	; () banked
 12656  0005CA  65B9               	cpfsgt	actuatorTest@i_1676& (0+255),b
 12657  0005CC  D001               	goto	l7640
 12658  0005CE  D00C               	goto	l1198
 12659  0005D0                     l7640:
 12660                           
 12661                           ; BSR set to: 0
 12662  0005D0  0E68               	movlw	104
 12663  0005D2  0100               	movlb	0	; () banked
 12664  0005D4  6FAB               	movwf	??_actuatorTest& (0+255),b
 12665  0005D6  0EE4               	movlw	228
 12666  0005D8                     u9307:
 12667  0005D8  2EE8               	decfsz	wreg,f,c
 12668  0005DA  D7FE               	bra	u9307
 12669  0005DC  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12670  0005DE  D7FC               	bra	u9307
 12671  0005E0  F000               	nop	
 12672  0005E2  0100               	movlb	0	; () banked
 12673  0005E4  2BB9               	incf	actuatorTest@i_1676& (0+255),f,b
 12674  0005E6  D7EF               	goto	l7636
 12675  0005E8                     l1198:
 12676                           
 12677                           ; BSR set to: 0
 12678                           ;Test.c: 301: TMR1ON = 0;
 12679  0005E8  90CD               	bcf	4045,0,c	;volatile
 12680                           
 12681                           ; BSR set to: 0
 12682                           ;Test.c: 308: printf("TST: TILT SERVO");
 12683  0005EA  0E3A               	movlw	low STR_103
 12684  0005EC  0100               	movlb	0	; () banked
 12685  0005EE  6F8E               	movwf	printf@f& (0+255),b
 12686  0005F0  0EFE               	movlw	high STR_103
 12687  0005F2  0100               	movlb	0	; () banked
 12688  0005F4  6F8F               	movwf	(printf@f+1)& (0+255),b
 12689  0005F6  ECE8  F00A         	call	_printf	;wreg free
 12690                           
 12691                           ;Test.c: 309: lcdInst(0b11000000);;
 12692  0005FA  0EC0               	movlw	192
 12693  0005FC  EC28  F028         	call	_lcdInst
 12694                           
 12695                           ;Test.c: 310: printf("LEVEL -- 2s     ");
 12696  000600  0EE8               	movlw	low STR_104
 12697  000602  0100               	movlb	0	; () banked
 12698  000604  6F8E               	movwf	printf@f& (0+255),b
 12699  000606  0EFB               	movlw	high STR_104
 12700  000608  0100               	movlb	0	; () banked
 12701  00060A  6F8F               	movwf	(printf@f+1)& (0+255),b
 12702  00060C  ECE8  F00A         	call	_printf	;wreg free
 12703                           
 12704                           ;Test.c: 311: updateServoPosition(1050, 3);
 12705  000610  0E04               	movlw	4
 12706  000612  0100               	movlb	0	; () banked
 12707  000614  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12708  000616  0E1A               	movlw	26
 12709  000618  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12710  00061A  0E00               	movlw	0
 12711  00061C  0100               	movlb	0	; () banked
 12712  00061E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12713  000620  0E03               	movlw	3
 12714  000622  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12715  000624  EC84  F022         	call	_updateServoPosition	;wreg free
 12716                           
 12717                           ;Test.c: 312: TMR3ON = 1;
 12718  000628  80B1               	bsf	4017,0,c	;volatile
 12719                           
 12720                           ;Test.c: 313: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12721  00062A  0E00               	movlw	0
 12722  00062C  0100               	movlb	0	; () banked
 12723  00062E  6FBA               	movwf	actuatorTest@i_1679& (0+255),b
 12724  000630                     l7654:
 12725                           
 12726                           ; BSR set to: 0
 12727  000630  0E63               	movlw	99
 12728  000632  0100               	movlb	0	; () banked
 12729  000634  65BA               	cpfsgt	actuatorTest@i_1679& (0+255),b
 12730  000636  D001               	goto	l7658
 12731  000638  D00C               	goto	l7662
 12732  00063A                     l7658:
 12733                           
 12734                           ; BSR set to: 0
 12735  00063A  0E68               	movlw	104
 12736  00063C  0100               	movlb	0	; () banked
 12737  00063E  6FAB               	movwf	??_actuatorTest& (0+255),b
 12738  000640  0EE4               	movlw	228
 12739  000642                     u9317:
 12740  000642  2EE8               	decfsz	wreg,f,c
 12741  000644  D7FE               	bra	u9317
 12742  000646  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12743  000648  D7FC               	bra	u9317
 12744  00064A  F000               	nop	
 12745  00064C  0100               	movlb	0	; () banked
 12746  00064E  2BBA               	incf	actuatorTest@i_1679& (0+255),f,b
 12747  000650  D7EF               	goto	l7654
 12748  000652                     l7662:
 12749                           
 12750                           ; BSR set to: 0
 12751  000652  0E00               	movlw	0
 12752  000654  0100               	movlb	0	; () banked
 12753  000656  6FBB               	movwf	actuatorTest@i_1680& (0+255),b
 12754  000658                     l7664:
 12755                           
 12756                           ; BSR set to: 0
 12757  000658  0E63               	movlw	99
 12758  00065A  0100               	movlb	0	; () banked
 12759  00065C  65BB               	cpfsgt	actuatorTest@i_1680& (0+255),b
 12760  00065E  D001               	goto	l7668
 12761  000660  D00C               	goto	l7672
 12762  000662                     l7668:
 12763                           
 12764                           ; BSR set to: 0
 12765  000662  0E68               	movlw	104
 12766  000664  0100               	movlb	0	; () banked
 12767  000666  6FAB               	movwf	??_actuatorTest& (0+255),b
 12768  000668  0EE4               	movlw	228
 12769  00066A                     u9327:
 12770  00066A  2EE8               	decfsz	wreg,f,c
 12771  00066C  D7FE               	bra	u9327
 12772  00066E  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12773  000670  D7FC               	bra	u9327
 12774  000672  F000               	nop	
 12775  000674  0100               	movlb	0	; () banked
 12776  000676  2BBB               	incf	actuatorTest@i_1680& (0+255),f,b
 12777  000678  D7EF               	goto	l7664
 12778  00067A                     l7672:
 12779                           
 12780                           ; BSR set to: 0
 12781                           ;Test.c: 315: lcdInst(0b10000000);;lcdInst(0b11000000);;
 12782  00067A  0E80               	movlw	128
 12783  00067C  EC28  F028         	call	_lcdInst
 12784  000680  0EC0               	movlw	192
 12785  000682  EC28  F028         	call	_lcdInst
 12786                           
 12787                           ;Test.c: 316: printf("DROP -- 2s      ");
 12788  000686  0EC6               	movlw	low STR_105
 12789  000688  0100               	movlb	0	; () banked
 12790  00068A  6F8E               	movwf	printf@f& (0+255),b
 12791  00068C  0EFB               	movlw	high STR_105
 12792  00068E  0100               	movlb	0	; () banked
 12793  000690  6F8F               	movwf	(printf@f+1)& (0+255),b
 12794  000692  ECE8  F00A         	call	_printf	;wreg free
 12795                           
 12796                           ;Test.c: 317: updateServoPosition(1260, 3);
 12797  000696  0E04               	movlw	4
 12798  000698  0100               	movlb	0	; () banked
 12799  00069A  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12800  00069C  0EEC               	movlw	236
 12801  00069E  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12802  0006A0  0E00               	movlw	0
 12803  0006A2  0100               	movlb	0	; () banked
 12804  0006A4  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12805  0006A6  0E03               	movlw	3
 12806  0006A8  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12807  0006AA  EC84  F022         	call	_updateServoPosition	;wreg free
 12808                           
 12809                           ;Test.c: 318: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12810  0006AE  0E00               	movlw	0
 12811  0006B0  0100               	movlb	0	; () banked
 12812  0006B2  6FBC               	movwf	actuatorTest@i_1682& (0+255),b
 12813  0006B4                     l7680:
 12814                           
 12815                           ; BSR set to: 0
 12816  0006B4  0E63               	movlw	99
 12817  0006B6  0100               	movlb	0	; () banked
 12818  0006B8  65BC               	cpfsgt	actuatorTest@i_1682& (0+255),b
 12819  0006BA  D001               	goto	l7684
 12820  0006BC  D00C               	goto	l7688
 12821  0006BE                     l7684:
 12822                           
 12823                           ; BSR set to: 0
 12824  0006BE  0E68               	movlw	104
 12825  0006C0  0100               	movlb	0	; () banked
 12826  0006C2  6FAB               	movwf	??_actuatorTest& (0+255),b
 12827  0006C4  0EE4               	movlw	228
 12828  0006C6                     u9337:
 12829  0006C6  2EE8               	decfsz	wreg,f,c
 12830  0006C8  D7FE               	bra	u9337
 12831  0006CA  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12832  0006CC  D7FC               	bra	u9337
 12833  0006CE  F000               	nop	
 12834  0006D0  0100               	movlb	0	; () banked
 12835  0006D2  2BBC               	incf	actuatorTest@i_1682& (0+255),f,b
 12836  0006D4  D7EF               	goto	l7680
 12837  0006D6                     l7688:
 12838                           
 12839                           ; BSR set to: 0
 12840  0006D6  0E00               	movlw	0
 12841  0006D8  0100               	movlb	0	; () banked
 12842  0006DA  6FBD               	movwf	actuatorTest@i_1683& (0+255),b
 12843  0006DC                     l7690:
 12844                           
 12845                           ; BSR set to: 0
 12846  0006DC  0E63               	movlw	99
 12847  0006DE  0100               	movlb	0	; () banked
 12848  0006E0  65BD               	cpfsgt	actuatorTest@i_1683& (0+255),b
 12849  0006E2  D001               	goto	l7694
 12850  0006E4  D00C               	goto	l7698
 12851  0006E6                     l7694:
 12852                           
 12853                           ; BSR set to: 0
 12854  0006E6  0E68               	movlw	104
 12855  0006E8  0100               	movlb	0	; () banked
 12856  0006EA  6FAB               	movwf	??_actuatorTest& (0+255),b
 12857  0006EC  0EE4               	movlw	228
 12858  0006EE                     u9347:
 12859  0006EE  2EE8               	decfsz	wreg,f,c
 12860  0006F0  D7FE               	bra	u9347
 12861  0006F2  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12862  0006F4  D7FC               	bra	u9347
 12863  0006F6  F000               	nop	
 12864  0006F8  0100               	movlb	0	; () banked
 12865  0006FA  2BBD               	incf	actuatorTest@i_1683& (0+255),f,b
 12866  0006FC  D7EF               	goto	l7690
 12867  0006FE                     l7698:
 12868                           
 12869                           ; BSR set to: 0
 12870                           ;Test.c: 320: lcdInst(0b10000000);;lcdInst(0b11000000);;
 12871  0006FE  0E80               	movlw	128
 12872  000700  EC28  F028         	call	_lcdInst
 12873  000704  0EC0               	movlw	192
 12874  000706  EC28  F028         	call	_lcdInst
 12875                           
 12876                           ;Test.c: 321: printf("LEVEL -- 2s     ");
 12877  00070A  0EE8               	movlw	low STR_104
 12878  00070C  0100               	movlb	0	; () banked
 12879  00070E  6F8E               	movwf	printf@f& (0+255),b
 12880  000710  0EFB               	movlw	high STR_104
 12881  000712  0100               	movlb	0	; () banked
 12882  000714  6F8F               	movwf	(printf@f+1)& (0+255),b
 12883  000716  ECE8  F00A         	call	_printf	;wreg free
 12884                           
 12885                           ;Test.c: 322: updateServoPosition(1050, 3);
 12886  00071A  0E04               	movlw	4
 12887  00071C  0100               	movlb	0	; () banked
 12888  00071E  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12889  000720  0E1A               	movlw	26
 12890  000722  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12891  000724  0E00               	movlw	0
 12892  000726  0100               	movlb	0	; () banked
 12893  000728  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12894  00072A  0E03               	movlw	3
 12895  00072C  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12896  00072E  EC84  F022         	call	_updateServoPosition	;wreg free
 12897                           
 12898                           ;Test.c: 323: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12899  000732  0E00               	movlw	0
 12900  000734  0100               	movlb	0	; () banked
 12901  000736  6FBE               	movwf	actuatorTest@i_1685& (0+255),b
 12902  000738                     l7706:
 12903                           
 12904                           ; BSR set to: 0
 12905  000738  0E63               	movlw	99
 12906  00073A  0100               	movlb	0	; () banked
 12907  00073C  65BE               	cpfsgt	actuatorTest@i_1685& (0+255),b
 12908  00073E  D001               	goto	l7710
 12909  000740  D00C               	goto	l7714
 12910  000742                     l7710:
 12911                           
 12912                           ; BSR set to: 0
 12913  000742  0E68               	movlw	104
 12914  000744  0100               	movlb	0	; () banked
 12915  000746  6FAB               	movwf	??_actuatorTest& (0+255),b
 12916  000748  0EE4               	movlw	228
 12917  00074A                     u9357:
 12918  00074A  2EE8               	decfsz	wreg,f,c
 12919  00074C  D7FE               	bra	u9357
 12920  00074E  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12921  000750  D7FC               	bra	u9357
 12922  000752  F000               	nop	
 12923  000754  0100               	movlb	0	; () banked
 12924  000756  2BBE               	incf	actuatorTest@i_1685& (0+255),f,b
 12925  000758  D7EF               	goto	l7706
 12926  00075A                     l7714:
 12927                           
 12928                           ; BSR set to: 0
 12929  00075A  0E00               	movlw	0
 12930  00075C  0100               	movlb	0	; () banked
 12931  00075E  6FBF               	movwf	actuatorTest@i_1686& (0+255),b
 12932  000760                     l7716:
 12933                           
 12934                           ; BSR set to: 0
 12935  000760  0E63               	movlw	99
 12936  000762  0100               	movlb	0	; () banked
 12937  000764  65BF               	cpfsgt	actuatorTest@i_1686& (0+255),b
 12938  000766  D001               	goto	l7720
 12939  000768  D00C               	goto	l1210
 12940  00076A                     l7720:
 12941                           
 12942                           ; BSR set to: 0
 12943  00076A  0E68               	movlw	104
 12944  00076C  0100               	movlb	0	; () banked
 12945  00076E  6FAB               	movwf	??_actuatorTest& (0+255),b
 12946  000770  0EE4               	movlw	228
 12947  000772                     u9367:
 12948  000772  2EE8               	decfsz	wreg,f,c
 12949  000774  D7FE               	bra	u9367
 12950  000776  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12951  000778  D7FC               	bra	u9367
 12952  00077A  F000               	nop	
 12953  00077C  0100               	movlb	0	; () banked
 12954  00077E  2BBF               	incf	actuatorTest@i_1686& (0+255),f,b
 12955  000780  D7EF               	goto	l7716
 12956  000782                     l1210:
 12957                           
 12958                           ; BSR set to: 0
 12959                           ;Test.c: 324: TMR3ON = 0;
 12960  000782  90B1               	bcf	4017,0,c	;volatile
 12961                           
 12962                           ;Test.c: 325: (INTCONbits.GIE = 0);
 12963  000784  9EF2               	bcf	intcon,7,c	;volatile
 12964                           
 12965                           ; BSR set to: 0
 12966                           ;Test.c: 330: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12967  000786  0E01               	movlw	1
 12968  000788  EC28  F028         	call	_lcdInst
 12969  00078C  0E68               	movlw	104
 12970  00078E  0100               	movlb	0	; () banked
 12971  000790  6FAB               	movwf	??_actuatorTest& (0+255),b
 12972  000792  0EE4               	movlw	228
 12973  000794                     u9377:
 12974  000794  2EE8               	decfsz	wreg,f,c
 12975  000796  D7FE               	bra	u9377
 12976  000798  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12977  00079A  D7FC               	bra	u9377
 12978  00079C  F000               	nop	
 12979  00079E  0E80               	movlw	128
 12980  0007A0  EC28  F028         	call	_lcdInst
 12981                           
 12982                           ;Test.c: 331: printf("TST: CAM SERVO");
 12983  0007A4  0E96               	movlw	low STR_107
 12984  0007A6  0100               	movlb	0	; () banked
 12985  0007A8  6F8E               	movwf	printf@f& (0+255),b
 12986  0007AA  0EFE               	movlw	high STR_107
 12987  0007AC  0100               	movlb	0	; () banked
 12988  0007AE  6F8F               	movwf	(printf@f+1)& (0+255),b
 12989  0007B0  ECE8  F00A         	call	_printf	;wreg free
 12990                           
 12991                           ;Test.c: 332: lcdInst(0b11000000);;
 12992  0007B4  0EC0               	movlw	192
 12993  0007B6  EC28  F028         	call	_lcdInst
 12994                           
 12995                           ;Test.c: 333: printf("CAM UP  |RC0=1");
 12996  0007BA  0E78               	movlw	low STR_108
 12997  0007BC  0100               	movlb	0	; () banked
 12998  0007BE  6F8E               	movwf	printf@f& (0+255),b
 12999  0007C0  0EFE               	movlw	high STR_108
 13000  0007C2  0100               	movlb	0	; () banked
 13001  0007C4  6F8F               	movwf	(printf@f+1)& (0+255),b
 13002  0007C6  ECE8  F00A         	call	_printf	;wreg free
 13003                           
 13004                           ;Test.c: 334: LATCbits.LATC0 = 1;
 13005  0007CA  808B               	bsf	3979,0,c	;volatile
 13006                           
 13007                           ;Test.c: 335: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 13008  0007CC  0E00               	movlw	0
 13009  0007CE  0100               	movlb	0	; () banked
 13010  0007D0  6FC0               	movwf	actuatorTest@i_1689& (0+255),b
 13011  0007D2                     l7740:
 13012                           
 13013                           ; BSR set to: 0
 13014  0007D2  0E63               	movlw	99
 13015  0007D4  0100               	movlb	0	; () banked
 13016  0007D6  65C0               	cpfsgt	actuatorTest@i_1689& (0+255),b
 13017  0007D8  D001               	goto	l7744
 13018  0007DA  D00C               	goto	l7748
 13019  0007DC                     l7744:
 13020                           
 13021                           ; BSR set to: 0
 13022  0007DC  0E68               	movlw	104
 13023  0007DE  0100               	movlb	0	; () banked
 13024  0007E0  6FAB               	movwf	??_actuatorTest& (0+255),b
 13025  0007E2  0EE4               	movlw	228
 13026  0007E4                     u9387:
 13027  0007E4  2EE8               	decfsz	wreg,f,c
 13028  0007E6  D7FE               	bra	u9387
 13029  0007E8  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13030  0007EA  D7FC               	bra	u9387
 13031  0007EC  F000               	nop	
 13032  0007EE  0100               	movlb	0	; () banked
 13033  0007F0  2BC0               	incf	actuatorTest@i_1689& (0+255),f,b
 13034  0007F2  D7EF               	goto	l7740
 13035  0007F4                     l7748:
 13036                           
 13037                           ; BSR set to: 0
 13038  0007F4  0E00               	movlw	0
 13039  0007F6  0100               	movlb	0	; () banked
 13040  0007F8  6FC1               	movwf	actuatorTest@i_1690& (0+255),b
 13041  0007FA                     l7750:
 13042                           
 13043                           ; BSR set to: 0
 13044  0007FA  0E63               	movlw	99
 13045  0007FC  0100               	movlb	0	; () banked
 13046  0007FE  65C1               	cpfsgt	actuatorTest@i_1690& (0+255),b
 13047  000800  D001               	goto	l7754
 13048  000802  D00C               	goto	l7758
 13049  000804                     l7754:
 13050                           
 13051                           ; BSR set to: 0
 13052  000804  0E68               	movlw	104
 13053  000806  0100               	movlb	0	; () banked
 13054  000808  6FAB               	movwf	??_actuatorTest& (0+255),b
 13055  00080A  0EE4               	movlw	228
 13056  00080C                     u9397:
 13057  00080C  2EE8               	decfsz	wreg,f,c
 13058  00080E  D7FE               	bra	u9397
 13059  000810  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13060  000812  D7FC               	bra	u9397
 13061  000814  F000               	nop	
 13062  000816  0100               	movlb	0	; () banked
 13063  000818  2BC1               	incf	actuatorTest@i_1690& (0+255),f,b
 13064  00081A  D7EF               	goto	l7750
 13065  00081C                     l7758:
 13066                           
 13067                           ; BSR set to: 0
 13068                           ;Test.c: 336: lcdInst(0b10000000);;lcdInst(0b11000000);;
 13069  00081C  0E80               	movlw	128
 13070  00081E  EC28  F028         	call	_lcdInst
 13071  000822  0EC0               	movlw	192
 13072  000824  EC28  F028         	call	_lcdInst
 13073                           
 13074                           ;Test.c: 337: printf("CAM DWN |RC0=0");
 13075  000828  0E69               	movlw	low STR_109
 13076  00082A  0100               	movlb	0	; () banked
 13077  00082C  6F8E               	movwf	printf@f& (0+255),b
 13078  00082E  0EFE               	movlw	high STR_109
 13079  000830  0100               	movlb	0	; () banked
 13080  000832  6F8F               	movwf	(printf@f+1)& (0+255),b
 13081  000834  ECE8  F00A         	call	_printf	;wreg free
 13082                           
 13083                           ;Test.c: 340: for(i=0;i<10000;i++)
 13084  000838  0E00               	movlw	0
 13085  00083A  0100               	movlb	0	; () banked
 13086  00083C  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 13087  00083E  0E00               	movlw	0
 13088  000840  6FC4               	movwf	actuatorTest@i& (0+255),b
 13089  000842                     l7764:
 13090                           
 13091                           ; BSR set to: 0
 13092  000842  0100               	movlb	0	; () banked
 13093  000844  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 13094  000846  D008               	goto	l1215
 13095  000848  0E10               	movlw	16
 13096  00084A  0100               	movlb	0	; () banked
 13097  00084C  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 13098  00084E  0E27               	movlw	39
 13099  000850  0100               	movlb	0	; () banked
 13100  000852  59C5               	subwfb	(actuatorTest@i+1)& (0+255),w,b
 13101  000854  B0D8               	btfsc	status,0,c
 13102  000856  D00D               	goto	l7774
 13103  000858                     l1215:
 13104                           
 13105                           ; BSR set to: 0
 13106                           ;Test.c: 341: {
 13107                           ;Test.c: 342: LATCbits.LATC0 = 1;
 13108  000858  808B               	bsf	3979,0,c	;volatile
 13109                           
 13110                           ; BSR set to: 0
 13111                           ;Test.c: 343: _delay((unsigned long)((10)*(32000000/4000000.0)));
 13112  00085A  0E1A               	movlw	26
 13113  00085C                     u9407:
 13114  00085C  2EE8               	decfsz	wreg,f,c
 13115  00085E  D7FE               	bra	u9407
 13116  000860  D000               	nop2	
 13117                           
 13118                           ;Test.c: 344: LATCbits.LATC0 = 0;
 13119  000862  908B               	bcf	3979,0,c	;volatile
 13120                           
 13121                           ;Test.c: 345: _delay((unsigned long)((90)*(32000000/4000000.0)));
 13122  000864  0EF0               	movlw	240
 13123  000866                     u9417:
 13124  000866  2EE8               	decfsz	wreg,f,c
 13125  000868  D7FE               	bra	u9417
 13126  00086A  0100               	movlb	0	; () banked
 13127  00086C  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 13128  00086E  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 13129  000870  D7E8               	goto	l7764
 13130  000872                     l7774:
 13131                           
 13132                           ; BSR set to: 0
 13133                           ;Test.c: 346: }
 13134                           ;Test.c: 348: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 13135  000872  0E00               	movlw	0
 13136  000874  0100               	movlb	0	; () banked
 13137  000876  6FC2               	movwf	actuatorTest@i_1692& (0+255),b
 13138  000878                     l7776:
 13139                           
 13140                           ; BSR set to: 0
 13141  000878  0E63               	movlw	99
 13142  00087A  0100               	movlb	0	; () banked
 13143  00087C  65C2               	cpfsgt	actuatorTest@i_1692& (0+255),b
 13144  00087E  D001               	goto	l7780
 13145  000880  D00C               	goto	l7784
 13146  000882                     l7780:
 13147                           
 13148                           ; BSR set to: 0
 13149  000882  0E68               	movlw	104
 13150  000884  0100               	movlb	0	; () banked
 13151  000886  6FAB               	movwf	??_actuatorTest& (0+255),b
 13152  000888  0EE4               	movlw	228
 13153  00088A                     u9427:
 13154  00088A  2EE8               	decfsz	wreg,f,c
 13155  00088C  D7FE               	bra	u9427
 13156  00088E  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13157  000890  D7FC               	bra	u9427
 13158  000892  F000               	nop	
 13159  000894  0100               	movlb	0	; () banked
 13160  000896  2BC2               	incf	actuatorTest@i_1692& (0+255),f,b
 13161  000898  D7EF               	goto	l7776
 13162  00089A                     l7784:
 13163                           
 13164                           ; BSR set to: 0
 13165  00089A  0E00               	movlw	0
 13166  00089C  0100               	movlb	0	; () banked
 13167  00089E  6FC3               	movwf	actuatorTest@i_1693& (0+255),b
 13168  0008A0                     l7786:
 13169                           
 13170                           ; BSR set to: 0
 13171  0008A0  0E63               	movlw	99
 13172  0008A2  0100               	movlb	0	; () banked
 13173  0008A4  65C3               	cpfsgt	actuatorTest@i_1693& (0+255),b
 13174  0008A6  D001               	goto	l7790
 13175  0008A8  D00C               	goto	l7794
 13176  0008AA                     l7790:
 13177                           
 13178                           ; BSR set to: 0
 13179  0008AA  0E68               	movlw	104
 13180  0008AC  0100               	movlb	0	; () banked
 13181  0008AE  6FAB               	movwf	??_actuatorTest& (0+255),b
 13182  0008B0  0EE4               	movlw	228
 13183  0008B2                     u9437:
 13184  0008B2  2EE8               	decfsz	wreg,f,c
 13185  0008B4  D7FE               	bra	u9437
 13186  0008B6  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13187  0008B8  D7FC               	bra	u9437
 13188  0008BA  F000               	nop	
 13189  0008BC  0100               	movlb	0	; () banked
 13190  0008BE  2BC3               	incf	actuatorTest@i_1693& (0+255),f,b
 13191  0008C0  D7EF               	goto	l7786
 13192  0008C2                     l7794:
 13193                           
 13194                           ; BSR set to: 0
 13195                           ;Test.c: 349: machine_state = Testing_state;
 13196  0008C2  0E03               	movlw	3
 13197  0008C4  0100               	movlb	0	; () banked
 13198  0008C6  6FFC               	movwf	_machine_state& (0+255),b
 13199                           
 13200                           ; BSR set to: 0
 13201  0008C8  0012               	return		;funcret
 13202  0008CA                     __end_of_actuatorTest:
 13203                           	opt stack 0
 13204                           tblptru	equ	0xFF8
 13205                           tblptrh	equ	0xFF7
 13206                           tblptrl	equ	0xFF6
 13207                           tablat	equ	0xFF5
 13208                           prodh	equ	0xFF4
 13209                           prodl	equ	0xFF3
 13210                           intcon	equ	0xFF2
 13211                           intcon2	equ	0xFF1
 13212                           intcon3	equ	0xFF0
 13213                           postinc0	equ	0xFEE
 13214                           wreg	equ	0xFE8
 13215                           postdec1	equ	0xFE5
 13216                           fsr1l	equ	0xFE1
 13217                           indf2	equ	0xFDF
 13218                           postinc2	equ	0xFDE
 13219                           postdec2	equ	0xFDD
 13220                           fsr2h	equ	0xFDA
 13221                           fsr2l	equ	0xFD9
 13222                           status	equ	0xFD8
 13223                           
 13224 ;; *************** function _SpeedTest *****************
 13225 ;; Defined at:
 13226 ;;		line 549 in file "Test.c"
 13227 ;; Parameters:    Size  Location     Type
 13228 ;;		None
 13229 ;; Auto vars:     Size  Location     Type
 13230 ;;		None
 13231 ;; Return value:  Size  Location     Type
 13232 ;;                  1    wreg      void 
 13233 ;; Registers used:
 13234 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13235 ;; Tracked objects:
 13236 ;;		On entry : 0/0
 13237 ;;		On exit  : 0/0
 13238 ;;		Unchanged: 0/0
 13239 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13240 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13241 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13242 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13243 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13244 ;;Total ram usage:        1 bytes
 13245 ;; Hardware stack levels used:    1
 13246 ;; Hardware stack levels required when called:   10
 13247 ;; This function calls:
 13248 ;;		_lcdInst
 13249 ;;		_printf
 13250 ;; This function is called by:
 13251 ;;		_Test
 13252 ;; This function uses a non-reentrant model
 13253 ;;
 13254                           
 13255                           	psect	text41
 13256  004308                     __ptext41:
 13257                           	opt stack 0
 13258  004308                     _SpeedTest:
 13259                           	opt stack 19
 13260                           
 13261                           ;Test.c: 551: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 13262                           
 13263                           ; BSR set to: 0
 13264                           ;incstack = 0
 13265  004308  0E01               	movlw	1
 13266  00430A  EC28  F028         	call	_lcdInst
 13267  00430E  0E68               	movlw	104
 13268  004310  0100               	movlb	0	; () banked
 13269  004312  6FAB               	movwf	??_SpeedTest& (0+255),b
 13270  004314  0EE4               	movlw	228
 13271  004316                     u9447:
 13272  004316  2EE8               	decfsz	wreg,f,c
 13273  004318  D7FE               	bra	u9447
 13274  00431A  2FAB               	decfsz	??_SpeedTest& (0+255),f,b
 13275  00431C  D7FC               	bra	u9447
 13276  00431E  F000               	nop	
 13277  004320  0E80               	movlw	128
 13278  004322  EC28  F028         	call	_lcdInst
 13279                           
 13280                           ;Test.c: 552: printf("S: D WILL RETURN ");
 13281  004326  0E5B               	movlw	low STR_120
 13282  004328  0100               	movlb	0	; () banked
 13283  00432A  6F8E               	movwf	printf@f& (0+255),b
 13284  00432C  0EFB               	movlw	high STR_120
 13285  00432E  0100               	movlb	0	; () banked
 13286  004330  6F8F               	movwf	(printf@f+1)& (0+255),b
 13287  004332  ECE8  F00A         	call	_printf	;wreg free
 13288                           
 13289                           ;Test.c: 553: lcdInst(0b11000000);;
 13290  004336  0EC0               	movlw	192
 13291  004338  EC28  F028         	call	_lcdInst
 13292                           
 13293                           ;Test.c: 554: printf("OTHER SETS RA5   ");
 13294  00433C  0E49               	movlw	low STR_112
 13295  00433E  0100               	movlb	0	; () banked
 13296  004340  6F8E               	movwf	printf@f& (0+255),b
 13297  004342  0EFB               	movlw	high STR_112
 13298  004344  0100               	movlb	0	; () banked
 13299  004346  6F8F               	movwf	(printf@f+1)& (0+255),b
 13300  004348  ECE8  F00A         	call	_printf	;wreg free
 13301  00434C                     l1301:
 13302  00434C  A281               	btfss	3969,1,c	;volatile
 13303  00434E  D7FE               	goto	l1301
 13304                           
 13305                           ;Test.c: 559: }
 13306                           ;Test.c: 560: if(PORTB >> 4 == 0b1111){
 13307  004350  3881               	swapf	3969,w,c	;volatile
 13308  004352  0B0F               	andlw	15
 13309  004354  0A0F               	xorlw	15
 13310  004356  B4D8               	btfsc	status,2,c
 13311  004358  0012               	return	
 13312  00435A  D014               	goto	l7836
 13313  00435C                     l1308:
 13314                           
 13315                           ;Test.c: 565: LATAbits.LATA5 = 1;
 13316  00435C  8A89               	bsf	3977,5,c	;volatile
 13317                           
 13318                           ;Test.c: 566: _delay((unsigned long)((5)*(32000000/4000.0)));
 13319  00435E  0E34               	movlw	52
 13320  004360  0100               	movlb	0	; () banked
 13321  004362  6FAB               	movwf	??_SpeedTest& (0+255),b
 13322  004364  0EF1               	movlw	241
 13323  004366                     u9457:
 13324  004366  2EE8               	decfsz	wreg,f,c
 13325  004368  D7FE               	bra	u9457
 13326  00436A  2FAB               	decfsz	??_SpeedTest& (0+255),f,b
 13327  00436C  D7FC               	bra	u9457
 13328  00436E  D000               	nop2	
 13329                           
 13330                           ;Test.c: 567: LATAbits.LATA5 = 0;
 13331  004370  9A89               	bcf	3977,5,c	;volatile
 13332                           
 13333                           ;Test.c: 568: _delay((unsigned long)((5)*(32000000/4000.0)));
 13334  004372  0E34               	movlw	52
 13335  004374  0100               	movlb	0	; () banked
 13336  004376  6FAB               	movwf	??_SpeedTest& (0+255),b
 13337  004378  0EF1               	movlw	241
 13338  00437A                     u9467:
 13339  00437A  2EE8               	decfsz	wreg,f,c
 13340  00437C  D7FE               	bra	u9467
 13341  00437E  2FAB               	decfsz	??_SpeedTest& (0+255),f,b
 13342  004380  D7FC               	bra	u9467
 13343  004382  D000               	nop2	
 13344  004384                     l7836:
 13345  004384  B281               	btfsc	3969,1,c	;volatile
 13346  004386  D7EA               	goto	l1308
 13347                           
 13348                           ;Test.c: 571: }
 13349                           ;Test.c: 572: LATAbits.LATA5 = 0;
 13350  004388  9A89               	bcf	3977,5,c	;volatile
 13351  00438A  D7E0               	goto	l1301
 13352  00438C                     __end_of_SpeedTest:
 13353                           	opt stack 0
 13354                           tblptru	equ	0xFF8
 13355                           tblptrh	equ	0xFF7
 13356                           tblptrl	equ	0xFF6
 13357                           tablat	equ	0xFF5
 13358                           prodh	equ	0xFF4
 13359                           prodl	equ	0xFF3
 13360                           intcon	equ	0xFF2
 13361                           intcon2	equ	0xFF1
 13362                           intcon3	equ	0xFF0
 13363                           postinc0	equ	0xFEE
 13364                           wreg	equ	0xFE8
 13365                           postdec1	equ	0xFE5
 13366                           fsr1l	equ	0xFE1
 13367                           indf2	equ	0xFDF
 13368                           postinc2	equ	0xFDE
 13369                           postdec2	equ	0xFDD
 13370                           fsr2h	equ	0xFDA
 13371                           fsr2l	equ	0xFD9
 13372                           status	equ	0xFD8
 13373                           
 13374 ;; *************** function _PusherTest *****************
 13375 ;; Defined at:
 13376 ;;		line 467 in file "Test.c"
 13377 ;; Parameters:    Size  Location     Type
 13378 ;;		None
 13379 ;; Auto vars:     Size  Location     Type
 13380 ;;  i               2   51[BANK0 ] int 
 13381 ;;  i               2   49[BANK0 ] int 
 13382 ;;  res             2   47[BANK0 ] int 
 13383 ;;  res             2   45[BANK0 ] int 
 13384 ;; Return value:  Size  Location     Type
 13385 ;;                  1    wreg      void 
 13386 ;; Registers used:
 13387 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13388 ;; Tracked objects:
 13389 ;;		On entry : 0/0
 13390 ;;		On exit  : 0/0
 13391 ;;		Unchanged: 0/0
 13392 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13393 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13394 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13395 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13396 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13397 ;;Total ram usage:       10 bytes
 13398 ;; Hardware stack levels used:    1
 13399 ;; Hardware stack levels required when called:   10
 13400 ;; This function calls:
 13401 ;;		_lcdInst
 13402 ;;		_printf
 13403 ;;		_readADC
 13404 ;; This function is called by:
 13405 ;;		_Test
 13406 ;; This function uses a non-reentrant model
 13407 ;;
 13408                           
 13409                           	psect	text42
 13410  002982                     __ptext42:
 13411                           	opt stack 0
 13412  002982                     _PusherTest:
 13413                           	opt stack 19
 13414                           
 13415                           ;Test.c: 468: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 13416                           
 13417                           ;incstack = 0
 13418  002982  0E01               	movlw	1
 13419  002984  EC28  F028         	call	_lcdInst
 13420  002988  0E68               	movlw	104
 13421  00298A  0100               	movlb	0	; () banked
 13422  00298C  6FAB               	movwf	??_PusherTest& (0+255),b
 13423  00298E  0EE4               	movlw	228
 13424  002990                     u9477:
 13425  002990  2EE8               	decfsz	wreg,f,c
 13426  002992  D7FE               	bra	u9477
 13427  002994  2FAB               	decfsz	??_PusherTest& (0+255),f,b
 13428  002996  D7FC               	bra	u9477
 13429  002998  F000               	nop	
 13430  00299A  0E80               	movlw	128
 13431  00299C  EC28  F028         	call	_lcdInst
 13432                           
 13433                           ;Test.c: 469: printf("PUSHER TST");
 13434  0029A0  0E71               	movlw	low STR_113
 13435  0029A2  0100               	movlb	0	; () banked
 13436  0029A4  6F8E               	movwf	printf@f& (0+255),b
 13437  0029A6  0EFF               	movlw	high STR_113
 13438  0029A8  0100               	movlb	0	; () banked
 13439  0029AA  6F8F               	movwf	(printf@f+1)& (0+255),b
 13440  0029AC  ECE8  F00A         	call	_printf	;wreg free
 13441                           
 13442                           ;Test.c: 470: LATCbits.LATC5 = 1;
 13443  0029B0  8A8B               	bsf	3979,5,c	;volatile
 13444                           
 13445                           ;Test.c: 472: while(PORTBbits.RB1 == 0){
 13446  0029B2  D05C               	goto	l7866
 13447  0029B4                     l7848:
 13448                           
 13449                           ;Test.c: 473: readADC(0);
 13450  0029B4  0E00               	movlw	0
 13451  0029B6  EC2D  F027         	call	_readADC
 13452                           
 13453                           ;Test.c: 474: int res = ADRESH<<8 | ADRESL;
 13454  0029BA  50C3               	movf	4035,w,c	;volatile
 13455  0029BC  CFC4 F0AB          	movff	4036,??_PusherTest	;volatile
 13456  0029C0  0100               	movlb	0	; () banked
 13457  0029C2  6BAC               	clrf	(??_PusherTest+1)& (0+255),b
 13458  0029C4  C0AB  F0AC         	movff	??_PusherTest,??_PusherTest+1
 13459  0029C8  0100               	movlb	0	; () banked
 13460  0029CA  6BAB               	clrf	??_PusherTest& (0+255),b
 13461  0029CC  0100               	movlb	0	; () banked
 13462  0029CE  11AB               	iorwf	??_PusherTest& (0+255),w,b
 13463  0029D0  0100               	movlb	0	; () banked
 13464  0029D2  6FAD               	movwf	PusherTest@res& (0+255),b
 13465  0029D4  0100               	movlb	0	; () banked
 13466  0029D6  51AC               	movf	(??_PusherTest+1)& (0+255),w,b
 13467  0029D8  0100               	movlb	0	; () banked
 13468  0029DA  6FAE               	movwf	(PusherTest@res+1)& (0+255),b
 13469                           
 13470                           ; BSR set to: 0
 13471                           ;Test.c: 475: IR_signal = (res > 800) ? 1 : 0;
 13472  0029DC  0100               	movlb	0	; () banked
 13473  0029DE  BFAE               	btfsc	(PusherTest@res+1)& (0+255),7,b
 13474  0029E0  D00A               	goto	u6610
 13475  0029E2  0E21               	movlw	33
 13476  0029E4  0100               	movlb	0	; () banked
 13477  0029E6  5DAD               	subwf	PusherTest@res& (0+255),w,b
 13478  0029E8  0E03               	movlw	3
 13479  0029EA  0100               	movlb	0	; () banked
 13480  0029EC  59AE               	subwfb	(PusherTest@res+1)& (0+255),w,b
 13481  0029EE  A0D8               	btfss	status,0,c
 13482  0029F0  D002               	goto	u6610
 13483  0029F2  0E01               	movlw	1
 13484  0029F4  D001               	goto	u6620
 13485  0029F6                     u6610:
 13486  0029F6  0E00               	movlw	0
 13487  0029F8                     u6620:
 13488  0029F8  0100               	movlb	0	; () banked
 13489  0029FA  6FDE               	movwf	_IR_signal& (0+255),b
 13490  0029FC  6BDF               	clrf	(_IR_signal+1)& (0+255),b
 13491                           
 13492                           ;Test.c: 477: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 13493  0029FE  0E01               	movlw	1
 13494  002A00  EC28  F028         	call	_lcdInst
 13495  002A04  0E68               	movlw	104
 13496  002A06  0100               	movlb	0	; () banked
 13497  002A08  6FAB               	movwf	??_PusherTest& (0+255),b
 13498  002A0A  0EE4               	movlw	228
 13499  002A0C                     u9487:
 13500  002A0C  2EE8               	decfsz	wreg,f,c
 13501  002A0E  D7FE               	bra	u9487
 13502  002A10  2FAB               	decfsz	??_PusherTest& (0+255),f,b
 13503  002A12  D7FC               	bra	u9487
 13504  002A14  F000               	nop	
 13505  002A16  0E80               	movlw	128
 13506  002A18  EC28  F028         	call	_lcdInst
 13507                           
 13508                           ;Test.c: 478: printf("IR_signal: %d ", IR_signal);
 13509  002A1C  0E5A               	movlw	low STR_80
 13510  002A1E  0100               	movlb	0	; () banked
 13511  002A20  6F8E               	movwf	printf@f& (0+255),b
 13512  002A22  0EFE               	movlw	high STR_80
 13513  002A24  0100               	movlb	0	; () banked
 13514  002A26  6F8F               	movwf	(printf@f+1)& (0+255),b
 13515  002A28  C0DE  F090         	movff	_IR_signal,?_printf+2
 13516  002A2C  C0DF  F091         	movff	_IR_signal+1,?_printf+3
 13517  002A30  ECE8  F00A         	call	_printf	;wreg free
 13518                           
 13519                           ;Test.c: 479: lcdInst(0b11000000);;
 13520  002A34  0EC0               	movlw	192
 13521  002A36  EC28  F028         	call	_lcdInst
 13522                           
 13523                           ;Test.c: 480: printf("%d", res);
 13524  002A3A  0E16               	movlw	low (STR_27+14)
 13525  002A3C  0100               	movlb	0	; () banked
 13526  002A3E  6F8E               	movwf	printf@f& (0+255),b
 13527  002A40  0EFE               	movlw	high (STR_27+14)
 13528  002A42  0100               	movlb	0	; () banked
 13529  002A44  6F8F               	movwf	(printf@f+1)& (0+255),b
 13530  002A46  C0AD  F090         	movff	PusherTest@res,?_printf+2
 13531  002A4A  C0AE  F091         	movff	PusherTest@res+1,?_printf+3
 13532  002A4E  ECE8  F00A         	call	_printf	;wreg free
 13533                           
 13534                           ;Test.c: 481: _delay((unsigned long)((100)*(32000000/4000.0)));
 13535  002A52  0E05               	movlw	5
 13536  002A54  0100               	movlb	0	; () banked
 13537  002A56  6FAC               	movwf	(??_PusherTest+1)& (0+255),b
 13538  002A58  0E0F               	movlw	15
 13539  002A5A  0100               	movlb	0	; () banked
 13540  002A5C  6FAB               	movwf	??_PusherTest& (0+255),b
 13541  002A5E  0EF1               	movlw	241
 13542  002A60                     u9497:
 13543  002A60  2EE8               	decfsz	wreg,f,c
 13544  002A62  D7FE               	bra	u9497
 13545  002A64  2FAB               	decfsz	??_PusherTest& (0+255),f,b
 13546  002A66  D7FC               	bra	u9497
 13547  002A68  2FAC               	decfsz	(??_PusherTest+1)& (0+255),f,b
 13548  002A6A  D7FA               	bra	u9497
 13549  002A6C                     l7866:
 13550  002A6C  B281               	btfsc	3969,1,c	;volatile
 13551  002A6E  D05D               	goto	l7886
 13552  002A70  D7A1               	goto	l7848
 13553  002A72                     l7868:
 13554                           
 13555                           ;Test.c: 487: readADC(0);
 13556  002A72  0E00               	movlw	0
 13557  002A74  EC2D  F027         	call	_readADC
 13558                           
 13559                           ;Test.c: 488: int res = ADRESH<<8 | ADRESL;
 13560  002A78  50C3               	movf	4035,w,c	;volatile
 13561  002A7A  CFC4 F0AB          	movff	4036,??_PusherTest	;volatile
 13562  002A7E  0100               	movlb	0	; () banked
 13563  002A80  6BAC               	clrf	(??_PusherTest+1)& (0+255),b
 13564  002A82  C0AB  F0AC         	movff	??_PusherTest,??_PusherTest+1
 13565  002A86  0100               	movlb	0	; () banked
 13566  002A88  6BAB               	clrf	??_PusherTest& (0+255),b
 13567  002A8A  0100               	movlb	0	; () banked
 13568  002A8C  11AB               	iorwf	??_PusherTest& (0+255),w,b
 13569  002A8E  0100               	movlb	0	; () banked
 13570  002A90  6FAF               	movwf	PusherTest@res_1708& (0+255),b
 13571  002A92  0100               	movlb	0	; () banked
 13572  002A94  51AC               	movf	(??_PusherTest+1)& (0+255),w,b
 13573  002A96  0100               	movlb	0	; () banked
 13574  002A98  6FB0               	movwf	(PusherTest@res_1708+1)& (0+255),b
 13575                           
 13576                           ; BSR set to: 0
 13577                           ;Test.c: 489: IR_signal = (res > 800) ? 1 : 0;
 13578  002A9A  0100               	movlb	0	; () banked
 13579  002A9C  BFB0               	btfsc	(PusherTest@res_1708+1)& (0+255),7,b
 13580  002A9E  D00A               	goto	u6640
 13581  002AA0  0E21               	movlw	33
 13582  002AA2  0100               	movlb	0	; () banked
 13583  002AA4  5DAF               	subwf	PusherTest@res_1708& (0+255),w,b
 13584  002AA6  0E03               	movlw	3
 13585  002AA8  0100               	movlb	0	; () banked
 13586  002AAA  59B0               	subwfb	(PusherTest@res_1708+1)& (0+255),w,b
 13587  002AAC  A0D8               	btfss	status,0,c
 13588  002AAE  D002               	goto	u6640
 13589  002AB0  0E01               	movlw	1
 13590  002AB2  D001               	goto	u6650
 13591  002AB4                     u6640:
 13592  002AB4  0E00               	movlw	0
 13593  002AB6                     u6650:
 13594  002AB6  0100               	movlb	0	; () banked
 13595  002AB8  6FDE               	movwf	_IR_signal& (0+255),b
 13596  002ABA  6BDF               	clrf	(_IR_signal+1)& (0+255),b
 13597                           
 13598                           ;Test.c: 490: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 13599  002ABC  0E01               	movlw	1
 13600  002ABE  EC28  F028         	call	_lcdInst
 13601  002AC2  0E68               	movlw	104
 13602  002AC4  0100               	movlb	0	; () banked
 13603  002AC6  6FAB               	movwf	??_PusherTest& (0+255),b
 13604  002AC8  0EE4               	movlw	228
 13605  002ACA                     u9507:
 13606  002ACA  2EE8               	decfsz	wreg,f,c
 13607  002ACC  D7FE               	bra	u9507
 13608  002ACE  2FAB               	decfsz	??_PusherTest& (0+255),f,b
 13609  002AD0  D7FC               	bra	u9507
 13610  002AD2  F000               	nop	
 13611  002AD4  0E80               	movlw	128
 13612  002AD6  EC28  F028         	call	_lcdInst
 13613                           
 13614                           ;Test.c: 491: printf("IR_signal: %d ", IR_signal);
 13615  002ADA  0E5A               	movlw	low STR_80
 13616  002ADC  0100               	movlb	0	; () banked
 13617  002ADE  6F8E               	movwf	printf@f& (0+255),b
 13618  002AE0  0EFE               	movlw	high STR_80
 13619  002AE2  0100               	movlb	0	; () banked
 13620  002AE4  6F8F               	movwf	(printf@f+1)& (0+255),b
 13621  002AE6  C0DE  F090         	movff	_IR_signal,?_printf+2
 13622  002AEA  C0DF  F091         	movff	_IR_signal+1,?_printf+3
 13623  002AEE  ECE8  F00A         	call	_printf	;wreg free
 13624                           
 13625                           ;Test.c: 492: lcdInst(0b11000000);;
 13626  002AF2  0EC0               	movlw	192
 13627  002AF4  EC28  F028         	call	_lcdInst
 13628                           
 13629                           ;Test.c: 493: printf("%d", res);
 13630  002AF8  0E16               	movlw	low (STR_27+14)
 13631  002AFA  0100               	movlb	0	; () banked
 13632  002AFC  6F8E               	movwf	printf@f& (0+255),b
 13633  002AFE  0EFE               	movlw	high (STR_27+14)
 13634  002B00  0100               	movlb	0	; () banked
 13635  002B02  6F8F               	movwf	(printf@f+1)& (0+255),b
 13636  002B04  C0AF  F090         	movff	PusherTest@res_1708,?_printf+2
 13637  002B08  C0B0  F091         	movff	PusherTest@res_1708+1,?_printf+3
 13638  002B0C  ECE8  F00A         	call	_printf	;wreg free
 13639                           
 13640                           ;Test.c: 494: _delay((unsigned long)((100)*(32000000/4000.0)));
 13641  002B10  0E05               	movlw	5
 13642  002B12  0100               	movlb	0	; () banked
 13643  002B14  6FAC               	movwf	(??_PusherTest+1)& (0+255),b
 13644  002B16  0E0F               	movlw	15
 13645  002B18  0100               	movlb	0	; () banked
 13646  002B1A  6FAB               	movwf	??_PusherTest& (0+255),b
 13647  002B1C  0EF1               	movlw	241
 13648  002B1E                     u9517:
 13649  002B1E  2EE8               	decfsz	wreg,f,c
 13650  002B20  D7FE               	bra	u9517
 13651  002B22  2FAB               	decfsz	??_PusherTest& (0+255),f,b
 13652  002B24  D7FC               	bra	u9517
 13653  002B26  2FAC               	decfsz	(??_PusherTest+1)& (0+255),f,b
 13654  002B28  D7FA               	bra	u9517
 13655  002B2A                     l7886:
 13656  002B2A  A281               	btfss	3969,1,c	;volatile
 13657  002B2C  D7A2               	goto	l7868
 13658                           
 13659                           ;Test.c: 495: }
 13660                           ;Test.c: 496: if(PORTB >> 4 == 0b1111){
 13661  002B2E  3881               	swapf	3969,w,c	;volatile
 13662  002B30  0B0F               	andlw	15
 13663  002B32  0A0F               	xorlw	15
 13664  002B34  B4D8               	btfsc	status,2,c
 13665  002B36  D047               	goto	l1270
 13666                           
 13667                           ;Test.c: 501: else if(PORTB >> 4 == 0b0101){
 13668                           
 13669                           ;Test.c: 498: }
 13670                           
 13671                           ;Test.c: 497: break;
 13672  002B38  3881               	swapf	3969,w,c	;volatile
 13673  002B3A  0B0F               	andlw	15
 13674  002B3C  0A05               	xorlw	5
 13675  002B3E  A4D8               	btfss	status,2,c
 13676  002B40  D01D               	goto	l7908
 13677                           
 13678                           ;Test.c: 502: for(int i = 0; i<3000; i++){
 13679  002B42  0E00               	movlw	0
 13680  002B44  0100               	movlb	0	; () banked
 13681  002B46  6FB2               	movwf	(PusherTest@i+1)& (0+255),b
 13682  002B48  0E00               	movlw	0
 13683  002B4A  6FB1               	movwf	PusherTest@i& (0+255),b
 13684  002B4C                     l7898:
 13685                           
 13686                           ; BSR set to: 0
 13687  002B4C  0100               	movlb	0	; () banked
 13688  002B4E  BFB2               	btfsc	(PusherTest@i+1)& (0+255),7,b
 13689  002B50  D008               	goto	l1273
 13690  002B52  0EB8               	movlw	184
 13691  002B54  0100               	movlb	0	; () banked
 13692  002B56  5DB1               	subwf	PusherTest@i& (0+255),w,b
 13693  002B58  0E0B               	movlw	11
 13694  002B5A  0100               	movlb	0	; () banked
 13695  002B5C  59B2               	subwfb	(PusherTest@i+1)& (0+255),w,b
 13696  002B5E  B0D8               	btfsc	status,0,c
 13697  002B60  D02F               	goto	l1279
 13698  002B62                     l1273:
 13699                           
 13700                           ; BSR set to: 0
 13701                           ;Test.c: 503: LATAbits.LATA4 = 1;
 13702  002B62  8889               	bsf	3977,4,c	;volatile
 13703                           
 13704                           ; BSR set to: 0
 13705                           ;Test.c: 504: _delay((unsigned long)((75)*(32000000/4000000.0)));
 13706  002B64  0EC8               	movlw	200
 13707  002B66                     u9527:
 13708  002B66  2EE8               	decfsz	wreg,f,c
 13709  002B68  D7FE               	bra	u9527
 13710                           
 13711                           ;Test.c: 505: LATAbits.LATA4 = 0;
 13712  002B6A  9889               	bcf	3977,4,c	;volatile
 13713                           
 13714                           ;Test.c: 506: _delay((unsigned long)((25)*(32000000/4000000.0)));
 13715  002B6C  0E42               	movlw	66
 13716  002B6E                     u9537:
 13717  002B6E  2EE8               	decfsz	wreg,f,c
 13718  002B70  D7FE               	bra	u9537
 13719  002B72  D000               	nop2	
 13720  002B74  0100               	movlb	0	; () banked
 13721  002B76  4BB1               	infsnz	PusherTest@i& (0+255),f,b
 13722  002B78  2BB2               	incf	(PusherTest@i+1)& (0+255),f,b
 13723  002B7A  D7E8               	goto	l7898
 13724  002B7C                     l7908:
 13725                           
 13726                           ;Test.c: 509: else if (PORTB >> 4 == 0b110){
 13727  002B7C  3881               	swapf	3969,w,c	;volatile
 13728  002B7E  0B0F               	andlw	15
 13729  002B80  0A06               	xorlw	6
 13730  002B82  A4D8               	btfss	status,2,c
 13731  002B84  D01D               	goto	l1279
 13732                           
 13733                           ;Test.c: 510: for(int i = 0; i<3000; i++){
 13734  002B86  0E00               	movlw	0
 13735  002B88  0100               	movlb	0	; () banked
 13736  002B8A  6FB4               	movwf	(PusherTest@i_1712+1)& (0+255),b
 13737  002B8C  0E00               	movlw	0
 13738  002B8E  6FB3               	movwf	PusherTest@i_1712& (0+255),b
 13739  002B90                     l7912:
 13740                           
 13741                           ; BSR set to: 0
 13742  002B90  0100               	movlb	0	; () banked
 13743  002B92  BFB4               	btfsc	(PusherTest@i_1712+1)& (0+255),7,b
 13744  002B94  D008               	goto	l1277
 13745  002B96  0EB8               	movlw	184
 13746  002B98  0100               	movlb	0	; () banked
 13747  002B9A  5DB3               	subwf	PusherTest@i_1712& (0+255),w,b
 13748  002B9C  0E0B               	movlw	11
 13749  002B9E  0100               	movlb	0	; () banked
 13750  002BA0  59B4               	subwfb	(PusherTest@i_1712+1)& (0+255),w,b
 13751  002BA2  B0D8               	btfsc	status,0,c
 13752  002BA4  D00D               	goto	l1279
 13753  002BA6                     l1277:
 13754                           
 13755                           ; BSR set to: 0
 13756                           ;Test.c: 511: LATAbits.LATA4 = 1;
 13757  002BA6  8889               	bsf	3977,4,c	;volatile
 13758                           
 13759                           ; BSR set to: 0
 13760                           ;Test.c: 512: _delay((unsigned long)((58)*(32000000/4000000.0)));
 13761  002BA8  0E9A               	movlw	154
 13762  002BAA                     u9547:
 13763  002BAA  2EE8               	decfsz	wreg,f,c
 13764  002BAC  D7FE               	bra	u9547
 13765  002BAE  D000               	nop2	
 13766                           
 13767                           ;Test.c: 513: LATAbits.LATA4 = 0;
 13768  002BB0  9889               	bcf	3977,4,c	;volatile
 13769                           
 13770                           ;Test.c: 514: _delay((unsigned long)((42)*(32000000/4000000.0)));
 13771  002BB2  0E70               	movlw	112
 13772  002BB4                     u9557:
 13773  002BB4  2EE8               	decfsz	wreg,f,c
 13774  002BB6  D7FE               	bra	u9557
 13775  002BB8  0100               	movlb	0	; () banked
 13776  002BBA  4BB3               	infsnz	PusherTest@i_1712& (0+255),f,b
 13777  002BBC  2BB4               	incf	(PusherTest@i_1712+1)& (0+255),f,b
 13778  002BBE  D7E8               	goto	l7912
 13779  002BC0                     l1279:
 13780  002BC0  A281               	btfss	3969,1,c	;volatile
 13781  002BC2  D7B3               	goto	l7886
 13782  002BC4  D7FD               	goto	l1279
 13783  002BC6                     l1270:
 13784                           
 13785                           ;Test.c: 519: }
 13786                           ;Test.c: 520: LATCbits.LATC5 = 0;
 13787  002BC6  9A8B               	bcf	3979,5,c	;volatile
 13788  002BC8  0012               	return		;funcret
 13789  002BCA                     __end_of_PusherTest:
 13790                           	opt stack 0
 13791                           tblptru	equ	0xFF8
 13792                           tblptrh	equ	0xFF7
 13793                           tblptrl	equ	0xFF6
 13794                           tablat	equ	0xFF5
 13795                           prodh	equ	0xFF4
 13796                           prodl	equ	0xFF3
 13797                           intcon	equ	0xFF2
 13798                           intcon2	equ	0xFF1
 13799                           intcon3	equ	0xFF0
 13800                           postinc0	equ	0xFEE
 13801                           wreg	equ	0xFE8
 13802                           postdec1	equ	0xFE5
 13803                           fsr1l	equ	0xFE1
 13804                           indf2	equ	0xFDF
 13805                           postinc2	equ	0xFDE
 13806                           postdec2	equ	0xFDD
 13807                           fsr2h	equ	0xFDA
 13808                           fsr2l	equ	0xFD9
 13809                           status	equ	0xFD8
 13810                           
 13811 ;; *************** function _readADC *****************
 13812 ;; Defined at:
 13813 ;;		line 15 in file "ADCFunctionality.c"
 13814 ;; Parameters:    Size  Location     Type
 13815 ;;  channel         1    wreg     unsigned char 
 13816 ;; Auto vars:     Size  Location     Type
 13817 ;;  channel         1    1[BANK0 ] unsigned char 
 13818 ;; Return value:  Size  Location     Type
 13819 ;;                  1    wreg      void 
 13820 ;; Registers used:
 13821 ;;		wreg, status,2, status,0, cstack
 13822 ;; Tracked objects:
 13823 ;;		On entry : 0/0
 13824 ;;		On exit  : 0/0
 13825 ;;		Unchanged: 0/0
 13826 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13827 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13828 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13829 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13830 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13831 ;;Total ram usage:        2 bytes
 13832 ;; Hardware stack levels used:    1
 13833 ;; Hardware stack levels required when called:    7
 13834 ;; This function calls:
 13835 ;;		Nothing
 13836 ;; This function is called by:
 13837 ;;		_readIR
 13838 ;;		_readMAG
 13839 ;;		_sensorTest
 13840 ;;		_PusherTest
 13841 ;; This function uses a non-reentrant model
 13842 ;;
 13843                           
 13844                           	psect	text43
 13845  004E5A                     __ptext43:
 13846                           	opt stack 0
 13847  004E5A                     _readADC:
 13848                           	opt stack 20
 13849                           
 13850                           ;incstack = 0
 13851                           ;readADC@channel stored from wreg
 13852  004E5A  0100               	movlb	0	; () banked
 13853  004E5C  6F81               	movwf	readADC@channel& (0+255),b
 13854                           
 13855                           ;ADCFunctionality.c: 17: ADCON0 = channel << 2;
 13856  004E5E  0100               	movlb	0	; () banked
 13857  004E60  4581               	rlncf	readADC@channel& (0+255),w,b
 13858  004E62  46E8               	rlncf	wreg,f,c
 13859  004E64  0BFC               	andlw	252
 13860  004E66  6EC2               	movwf	4034,c	;volatile
 13861                           
 13862                           ; BSR set to: 0
 13863                           ;ADCFunctionality.c: 18: ADCON0bits.ADON = 1;
 13864  004E68  80C2               	bsf	4034,0,c	;volatile
 13865                           
 13866                           ; BSR set to: 0
 13867                           ;ADCFunctionality.c: 19: ADCON0bits.GO = 1;
 13868  004E6A  82C2               	bsf	4034,1,c	;volatile
 13869                           
 13870                           ;ADCFunctionality.c: 20: while(ADCON0bits.GO_NOT_DONE){_delay((unsigned long)((5)*(32000
      +                          000/4000.0)));}
 13871  004E6C  D009               	goto	l5750
 13872  004E6E                     l5748:
 13873  004E6E  0E34               	movlw	52
 13874  004E70  0100               	movlb	0	; () banked
 13875  004E72  6F80               	movwf	??_readADC& (0+255),b
 13876  004E74  0EF1               	movlw	241
 13877  004E76                     u9567:
 13878  004E76  2EE8               	decfsz	wreg,f,c
 13879  004E78  D7FE               	bra	u9567
 13880  004E7A  2F80               	decfsz	??_readADC& (0+255),f,b
 13881  004E7C  D7FC               	bra	u9567
 13882  004E7E  D000               	nop2	
 13883  004E80                     l5750:
 13884  004E80  A2C2               	btfss	4034,1,c	;volatile
 13885  004E82  0012               	return	
 13886  004E84  D7F4               	goto	l5748
 13887  004E86                     __end_of_readADC:
 13888                           	opt stack 0
 13889                           tblptru	equ	0xFF8
 13890                           tblptrh	equ	0xFF7
 13891                           tblptrl	equ	0xFF6
 13892                           tablat	equ	0xFF5
 13893                           prodh	equ	0xFF4
 13894                           prodl	equ	0xFF3
 13895                           intcon	equ	0xFF2
 13896                           intcon2	equ	0xFF1
 13897                           intcon3	equ	0xFF0
 13898                           postinc0	equ	0xFEE
 13899                           wreg	equ	0xFE8
 13900                           postdec1	equ	0xFE5
 13901                           fsr1l	equ	0xFE1
 13902                           indf2	equ	0xFDF
 13903                           postinc2	equ	0xFDE
 13904                           postdec2	equ	0xFDD
 13905                           fsr2h	equ	0xFDA
 13906                           fsr2l	equ	0xFD9
 13907                           status	equ	0xFD8
 13908                           
 13909 ;; *************** function _PortTests *****************
 13910 ;; Defined at:
 13911 ;;		line 409 in file "Test.c"
 13912 ;; Parameters:    Size  Location     Type
 13913 ;;		None
 13914 ;; Auto vars:     Size  Location     Type
 13915 ;;		None
 13916 ;; Return value:  Size  Location     Type
 13917 ;;                  1    wreg      void 
 13918 ;; Registers used:
 13919 ;;		wreg, status,2, status,0
 13920 ;; Tracked objects:
 13921 ;;		On entry : 0/0
 13922 ;;		On exit  : 0/0
 13923 ;;		Unchanged: 0/0
 13924 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13925 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13926 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13927 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13928 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13929 ;;Total ram usage:        2 bytes
 13930 ;; Hardware stack levels used:    1
 13931 ;; Hardware stack levels required when called:    7
 13932 ;; This function calls:
 13933 ;;		Nothing
 13934 ;; This function is called by:
 13935 ;;		_Test
 13936 ;; This function uses a non-reentrant model
 13937 ;;
 13938                           
 13939                           	psect	text44
 13940  00438C                     __ptext44:
 13941                           	opt stack 0
 13942  00438C                     _PortTests:
 13943                           	opt stack 22
 13944  00438C                     l1228:
 13945  00438C  A281               	btfss	3969,1,c	;volatile
 13946  00438E  D7FE               	goto	l1228
 13947                           
 13948                           ;Test.c: 413: var = PORTB >> 4;
 13949  004390  CF81 F080          	movff	3969,??_PortTests	;volatile
 13950  004394  0100               	movlb	0	; () banked
 13951  004396  3B80               	swapf	??_PortTests& (0+255),f,b
 13952  004398  0E0F               	movlw	15
 13953  00439A  1780               	andwf	??_PortTests& (0+255),f,b
 13954  00439C  0100               	movlb	0	; () banked
 13955  00439E  5180               	movf	??_PortTests& (0+255),w,b
 13956  0043A0  0100               	movlb	0	; () banked
 13957  0043A2  6FFA               	movwf	_var& (0+255),b
 13958  0043A4  6BFB               	clrf	(_var+1)& (0+255),b
 13959                           
 13960                           ;Test.c: 414: switch(var){
 13961  0043A6  D00C               	goto	l7926
 13962  0043A8                     l1232:
 13963                           
 13964                           ; BSR set to: 0
 13965                           ;Test.c: 416: LATEbits.LATE0 = 1;
 13966  0043A8  808D               	bsf	3981,0,c	;volatile
 13967                           
 13968                           ;Test.c: 417: break;
 13969  0043AA  D027               	goto	l1240
 13970  0043AC                     l1234:
 13971                           
 13972                           ; BSR set to: 0
 13973                           ;Test.c: 419: LATEbits.LATE1 = 1;
 13974  0043AC  828D               	bsf	3981,1,c	;volatile
 13975                           
 13976                           ;Test.c: 420: break;
 13977  0043AE  D025               	goto	l1240
 13978  0043B0                     l1235:
 13979                           
 13980                           ; BSR set to: 0
 13981                           ;Test.c: 422: LATDbits.LATD0 = 1;
 13982  0043B0  808C               	bsf	3980,0,c	;volatile
 13983                           
 13984                           ;Test.c: 423: break;
 13985  0043B2  D023               	goto	l1240
 13986  0043B4                     l1236:
 13987                           
 13988                           ; BSR set to: 0
 13989                           ;Test.c: 425: LATAbits.LATA3 = 1;
 13990  0043B4  8689               	bsf	3977,3,c	;volatile
 13991                           
 13992                           ;Test.c: 426: break;
 13993  0043B6  D021               	goto	l1240
 13994  0043B8                     l1237:
 13995                           
 13996                           ; BSR set to: 0
 13997                           ;Test.c: 428: LATAbits.LATA4 = 1;
 13998  0043B8  8889               	bsf	3977,4,c	;volatile
 13999                           
 14000                           ;Test.c: 429: break;
 14001  0043BA  D01F               	goto	l1240
 14002  0043BC                     l1238:
 14003                           
 14004                           ; BSR set to: 0
 14005                           ;Test.c: 431: LATAbits.LATA5 = 1;
 14006  0043BC  8A89               	bsf	3977,5,c	;volatile
 14007                           
 14008                           ; BSR set to: 0
 14009                           ;Test.c: 435: }
 14010                           
 14011                           ; BSR set to: 0
 14012                           ;Test.c: 434: break;
 14013                           
 14014                           ;Test.c: 433: default:
 14015                           
 14016                           ;Test.c: 432: break;
 14017  0043BE  D01D               	goto	l1240
 14018  0043C0                     l7926:
 14019                           
 14020                           ; BSR set to: 0
 14021  0043C0  C0FA  F080         	movff	_var,??_PortTests
 14022  0043C4  C0FB  F081         	movff	_var+1,??_PortTests+1
 14023                           
 14024                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 14025                           ; Switch size 1, requested type "space"
 14026                           ; Number of cases is 1, Range of values is 0 to 0
 14027                           ; switch strategies available:
 14028                           ; Name         Instructions Cycles
 14029                           ; simple_byte            4     3 (average)
 14030                           ;	Chosen strategy is simple_byte
 14031  0043C8  0100               	movlb	0	; () banked
 14032  0043CA  5181               	movf	(??_PortTests+1)& (0+255),w,b
 14033  0043CC  0A00               	xorlw	0	; case 0
 14034  0043CE  A4D8               	btfss	status,2,c
 14035  0043D0  D014               	goto	l1240
 14036                           
 14037                           ; BSR set to: 0
 14038                           ; Switch size 1, requested type "space"
 14039                           ; Number of cases is 6, Range of values is 0 to 5
 14040                           ; switch strategies available:
 14041                           ; Name         Instructions Cycles
 14042                           ; simple_byte           19    10 (average)
 14043                           ;	Chosen strategy is simple_byte
 14044  0043D2  0100               	movlb	0	; () banked
 14045  0043D4  5180               	movf	??_PortTests& (0+255),w,b
 14046  0043D6  0A00               	xorlw	0	; case 0
 14047  0043D8  B4D8               	btfsc	status,2,c
 14048  0043DA  D7E6               	goto	l1232
 14049  0043DC  0A01               	xorlw	1	; case 1
 14050  0043DE  B4D8               	btfsc	status,2,c
 14051  0043E0  D7E5               	goto	l1234
 14052  0043E2  0A03               	xorlw	3	; case 2
 14053  0043E4  B4D8               	btfsc	status,2,c
 14054  0043E6  D7E4               	goto	l1235
 14055  0043E8  0A01               	xorlw	1	; case 3
 14056  0043EA  B4D8               	btfsc	status,2,c
 14057  0043EC  D7E3               	goto	l1236
 14058  0043EE  0A07               	xorlw	7	; case 4
 14059  0043F0  B4D8               	btfsc	status,2,c
 14060  0043F2  D7E2               	goto	l1237
 14061  0043F4  0A01               	xorlw	1	; case 5
 14062  0043F6  B4D8               	btfsc	status,2,c
 14063  0043F8  D7E1               	goto	l1238
 14064  0043FA                     l1240:
 14065  0043FA  B281               	btfsc	3969,1,c	;volatile
 14066  0043FC  D7FE               	goto	l1240
 14067                           
 14068                           ;Test.c: 437: __nop();
 14069  0043FE  F000               	nop	
 14070                           
 14071                           ;Test.c: 438: __nop();
 14072  004400  F000               	nop	
 14073                           
 14074                           ;Test.c: 439: LATA = 0x00;
 14075  004402  0E00               	movlw	0
 14076  004404  6E89               	movwf	3977,c	;volatile
 14077                           
 14078                           ;Test.c: 440: LATE = 0x00;
 14079  004406  0E00               	movlw	0
 14080  004408  6E8D               	movwf	3981,c	;volatile
 14081                           
 14082                           ;Test.c: 441: LATD = 0x00; }
 14083  00440A  0E00               	movlw	0
 14084  00440C  6E8C               	movwf	3980,c	;volatile
 14085  00440E  D7BE               	goto	l1228
 14086  004410                     __end_of_PortTests:
 14087                           	opt stack 0
 14088                           tblptru	equ	0xFF8
 14089                           tblptrh	equ	0xFF7
 14090                           tblptrl	equ	0xFF6
 14091                           tablat	equ	0xFF5
 14092                           prodh	equ	0xFF4
 14093                           prodl	equ	0xFF3
 14094                           intcon	equ	0xFF2
 14095                           intcon2	equ	0xFF1
 14096                           intcon3	equ	0xFF0
 14097                           postinc0	equ	0xFEE
 14098                           wreg	equ	0xFE8
 14099                           postdec1	equ	0xFE5
 14100                           fsr1l	equ	0xFE1
 14101                           indf2	equ	0xFDF
 14102                           postinc2	equ	0xFDE
 14103                           postdec2	equ	0xFDD
 14104                           fsr2h	equ	0xFDA
 14105                           fsr2l	equ	0xFD9
 14106                           status	equ	0xFD8
 14107                           
 14108 ;; *************** function _PortTestA5 *****************
 14109 ;; Defined at:
 14110 ;;		line 444 in file "Test.c"
 14111 ;; Parameters:    Size  Location     Type
 14112 ;;		None
 14113 ;; Auto vars:     Size  Location     Type
 14114 ;;		None
 14115 ;; Return value:  Size  Location     Type
 14116 ;;                  1    wreg      void 
 14117 ;; Registers used:
 14118 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14119 ;; Tracked objects:
 14120 ;;		On entry : 0/0
 14121 ;;		On exit  : 0/0
 14122 ;;		Unchanged: 0/0
 14123 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14124 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14125 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14126 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14127 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14128 ;;Total ram usage:        1 bytes
 14129 ;; Hardware stack levels used:    1
 14130 ;; Hardware stack levels required when called:   10
 14131 ;; This function calls:
 14132 ;;		_lcdInst
 14133 ;;		_printf
 14134 ;; This function is called by:
 14135 ;;		_Test
 14136 ;; This function uses a non-reentrant model
 14137 ;;
 14138                           
 14139                           	psect	text45
 14140  0047E8                     __ptext45:
 14141                           	opt stack 0
 14142  0047E8                     _PortTestA5:
 14143                           	opt stack 19
 14144                           
 14145                           ;Test.c: 445: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 14146                           
 14147                           ;incstack = 0
 14148  0047E8  0E01               	movlw	1
 14149  0047EA  EC28  F028         	call	_lcdInst
 14150  0047EE  0E68               	movlw	104
 14151  0047F0  0100               	movlb	0	; () banked
 14152  0047F2  6FAB               	movwf	??_PortTestA5& (0+255),b
 14153  0047F4  0EE4               	movlw	228
 14154  0047F6                     u9577:
 14155  0047F6  2EE8               	decfsz	wreg,f,c
 14156  0047F8  D7FE               	bra	u9577
 14157  0047FA  2FAB               	decfsz	??_PortTestA5& (0+255),f,b
 14158  0047FC  D7FC               	bra	u9577
 14159  0047FE  F000               	nop	
 14160  004800  0E80               	movlw	128
 14161  004802  EC28  F028         	call	_lcdInst
 14162                           
 14163                           ;Test.c: 446: printf("D WILL RETURN    ");
 14164  004806  0E37               	movlw	low STR_111
 14165  004808  0100               	movlb	0	; () banked
 14166  00480A  6F8E               	movwf	printf@f& (0+255),b
 14167  00480C  0EFB               	movlw	high STR_111
 14168  00480E  0100               	movlb	0	; () banked
 14169  004810  6F8F               	movwf	(printf@f+1)& (0+255),b
 14170  004812  ECE8  F00A         	call	_printf	;wreg free
 14171                           
 14172                           ;Test.c: 447: lcdInst(0b11000000);;
 14173  004816  0EC0               	movlw	192
 14174  004818  EC28  F028         	call	_lcdInst
 14175                           
 14176                           ;Test.c: 448: printf("OTHER SETS RA5   ");
 14177  00481C  0E49               	movlw	low STR_112
 14178  00481E  0100               	movlb	0	; () banked
 14179  004820  6F8E               	movwf	printf@f& (0+255),b
 14180  004822  0EFB               	movlw	high STR_112
 14181  004824  0100               	movlb	0	; () banked
 14182  004826  6F8F               	movwf	(printf@f+1)& (0+255),b
 14183  004828  ECE8  F00A         	call	_printf	;wreg free
 14184  00482C                     l1249:
 14185  00482C  A281               	btfss	3969,1,c	;volatile
 14186  00482E  D7FE               	goto	l1249
 14187                           
 14188                           ;Test.c: 453: }
 14189                           ;Test.c: 454: if(PORTB >> 4 == 0b1111){
 14190  004830  3881               	swapf	3969,w,c	;volatile
 14191  004832  0B0F               	andlw	15
 14192  004834  0A0F               	xorlw	15
 14193  004836  B4D8               	btfsc	status,2,c
 14194  004838  0012               	return	
 14195                           
 14196                           ;Test.c: 457: else{
 14197                           ;Test.c: 458: LATAbits.LATA5 = 1;
 14198                           
 14199                           ;Test.c: 456: }
 14200                           
 14201                           ;Test.c: 455: break;
 14202  00483A  8A89               	bsf	3977,5,c	;volatile
 14203  00483C                     l1255:
 14204  00483C  B281               	btfsc	3969,1,c	;volatile
 14205  00483E  D7FE               	goto	l1255
 14206                           
 14207                           ;Test.c: 461: }
 14208                           ;Test.c: 462: LATAbits.LATA5 = 0;
 14209  004840  9A89               	bcf	3977,5,c	;volatile
 14210  004842  D7F4               	goto	l1249
 14211  004844                     __end_of_PortTestA5:
 14212                           	opt stack 0
 14213                           tblptru	equ	0xFF8
 14214                           tblptrh	equ	0xFF7
 14215                           tblptrl	equ	0xFF6
 14216                           tablat	equ	0xFF5
 14217                           prodh	equ	0xFF4
 14218                           prodl	equ	0xFF3
 14219                           intcon	equ	0xFF2
 14220                           intcon2	equ	0xFF1
 14221                           intcon3	equ	0xFF0
 14222                           postinc0	equ	0xFEE
 14223                           wreg	equ	0xFE8
 14224                           postdec1	equ	0xFE5
 14225                           fsr1l	equ	0xFE1
 14226                           indf2	equ	0xFDF
 14227                           postinc2	equ	0xFDE
 14228                           postdec2	equ	0xFDD
 14229                           fsr2h	equ	0xFDA
 14230                           fsr2l	equ	0xFD9
 14231                           status	equ	0xFD8
 14232                           
 14233 ;; *************** function _EEPROMTest *****************
 14234 ;; Defined at:
 14235 ;;		line 577 in file "Test.c"
 14236 ;; Parameters:    Size  Location     Type
 14237 ;;		None
 14238 ;; Auto vars:     Size  Location     Type
 14239 ;;		None
 14240 ;; Return value:  Size  Location     Type
 14241 ;;                  1    wreg      void 
 14242 ;; Registers used:
 14243 ;;		None
 14244 ;; Tracked objects:
 14245 ;;		On entry : 0/0
 14246 ;;		On exit  : 0/0
 14247 ;;		Unchanged: 0/0
 14248 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14249 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14250 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14251 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14252 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14253 ;;Total ram usage:        0 bytes
 14254 ;; Hardware stack levels used:    1
 14255 ;; Hardware stack levels required when called:    7
 14256 ;; This function calls:
 14257 ;;		Nothing
 14258 ;; This function is called by:
 14259 ;;		_Test
 14260 ;; This function uses a non-reentrant model
 14261 ;;
 14262                           
 14263                           	psect	text46
 14264  0050B4                     __ptext46:
 14265                           	opt stack 0
 14266  0050B4                     _EEPROMTest:
 14267                           	opt stack 22
 14268                           
 14269                           ;incstack = 0
 14270  0050B4  0012               	return		;funcret
 14271  0050B6                     __end_of_EEPROMTest:
 14272                           	opt stack 0
 14273                           tblptru	equ	0xFF8
 14274                           tblptrh	equ	0xFF7
 14275                           tblptrl	equ	0xFF6
 14276                           tablat	equ	0xFF5
 14277                           prodh	equ	0xFF4
 14278                           prodl	equ	0xFF3
 14279                           intcon	equ	0xFF2
 14280                           intcon2	equ	0xFF1
 14281                           intcon3	equ	0xFF0
 14282                           postinc0	equ	0xFEE
 14283                           wreg	equ	0xFE8
 14284                           postdec1	equ	0xFE5
 14285                           fsr1l	equ	0xFE1
 14286                           indf2	equ	0xFDF
 14287                           postinc2	equ	0xFDE
 14288                           postdec2	equ	0xFDD
 14289                           fsr2h	equ	0xFDA
 14290                           fsr2l	equ	0xFD9
 14291                           status	equ	0xFD8
 14292                           
 14293 ;; *************** function _BothServos *****************
 14294 ;; Defined at:
 14295 ;;		line 352 in file "Test.c"
 14296 ;; Parameters:    Size  Location     Type
 14297 ;;		None
 14298 ;; Auto vars:     Size  Location     Type
 14299 ;;		None
 14300 ;; Return value:  Size  Location     Type
 14301 ;;                  1    wreg      void 
 14302 ;; Registers used:
 14303 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14304 ;; Tracked objects:
 14305 ;;		On entry : 0/0
 14306 ;;		On exit  : 0/0
 14307 ;;		Unchanged: 0/0
 14308 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14309 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14310 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14311 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14312 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14313 ;;Total ram usage:        2 bytes
 14314 ;; Hardware stack levels used:    1
 14315 ;; Hardware stack levels required when called:   10
 14316 ;; This function calls:
 14317 ;;		_initServos
 14318 ;;		_lcdInst
 14319 ;;		_printf
 14320 ;;		_updateServoPosition
 14321 ;; This function is called by:
 14322 ;;		_Test
 14323 ;; This function uses a non-reentrant model
 14324 ;;
 14325                           
 14326                           	psect	text47
 14327  001A08                     __ptext47:
 14328                           	opt stack 0
 14329  001A08                     _BothServos:
 14330                           	opt stack 19
 14331                           
 14332                           ;Test.c: 353: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 14333                           
 14334                           ;incstack = 0
 14335  001A08  0E01               	movlw	1
 14336  001A0A  EC28  F028         	call	_lcdInst
 14337  001A0E  0E68               	movlw	104
 14338  001A10  0100               	movlb	0	; () banked
 14339  001A12  6FAB               	movwf	??_BothServos& (0+255),b
 14340  001A14  0EE4               	movlw	228
 14341  001A16                     u9587:
 14342  001A16  2EE8               	decfsz	wreg,f,c
 14343  001A18  D7FE               	bra	u9587
 14344  001A1A  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14345  001A1C  D7FC               	bra	u9587
 14346  001A1E  F000               	nop	
 14347  001A20  0E80               	movlw	128
 14348  001A22  EC28  F028         	call	_lcdInst
 14349                           
 14350                           ;Test.c: 354: printf("TST: BOTH SERVOS");
 14351  001A26  0EB4               	movlw	low STR_110
 14352  001A28  0100               	movlb	0	; () banked
 14353  001A2A  6F8E               	movwf	printf@f& (0+255),b
 14354  001A2C  0EFC               	movlw	high STR_110
 14355  001A2E  0100               	movlb	0	; () banked
 14356  001A30  6F8F               	movwf	(printf@f+1)& (0+255),b
 14357  001A32  ECE8  F00A         	call	_printf	;wreg free
 14358                           
 14359                           ;Test.c: 355: TMR1ON = 1;
 14360  001A36  80CD               	bsf	4045,0,c	;volatile
 14361                           
 14362                           ;Test.c: 356: TMR3ON = 1;
 14363  001A38  80B1               	bsf	4017,0,c	;volatile
 14364                           
 14365                           ;Test.c: 357: machine_state = Sorting_state;
 14366  001A3A  0E01               	movlw	1
 14367  001A3C  0100               	movlb	0	; () banked
 14368  001A3E  6FFC               	movwf	_machine_state& (0+255),b
 14369                           
 14370                           ; BSR set to: 0
 14371                           ;Test.c: 358: was_low_1 = 0;
 14372  001A40  0E00               	movlw	0
 14373  001A42  6E7A               	movwf	_was_low_1+1,c	;volatile
 14374  001A44  0E00               	movlw	0
 14375  001A46  6E79               	movwf	_was_low_1,c	;volatile
 14376                           
 14377                           ; BSR set to: 0
 14378                           ;Test.c: 359: was_low_3 = 0;
 14379  001A48  0E00               	movlw	0
 14380  001A4A  6E7C               	movwf	_was_low_3+1,c	;volatile
 14381  001A4C  0E00               	movlw	0
 14382  001A4E  6E7B               	movwf	_was_low_3,c	;volatile
 14383                           
 14384                           ; BSR set to: 0
 14385                           ;Test.c: 365: initServos();
 14386  001A50  EC22  F024         	call	_initServos	;wreg free
 14387                           
 14388                           ;Test.c: 366: _delay((unsigned long)((1500)*(32000000/4000.0)));
 14389  001A54  0E3D               	movlw	61
 14390  001A56  0100               	movlb	0	; () banked
 14391  001A58  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14392  001A5A  0EE1               	movlw	225
 14393  001A5C  0100               	movlb	0	; () banked
 14394  001A5E  6FAB               	movwf	??_BothServos& (0+255),b
 14395  001A60  0E3F               	movlw	63
 14396  001A62                     u9597:
 14397  001A62  2EE8               	decfsz	wreg,f,c
 14398  001A64  D7FE               	bra	u9597
 14399  001A66  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14400  001A68  D7FC               	bra	u9597
 14401  001A6A  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14402  001A6C  D7FA               	bra	u9597
 14403  001A6E  D000               	nop2	
 14404                           
 14405                           ;Test.c: 368: updateServoPosition(500, 1);
 14406  001A70  0E01               	movlw	1
 14407  001A72  0100               	movlb	0	; () banked
 14408  001A74  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14409  001A76  0EF4               	movlw	244
 14410  001A78  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14411  001A7A  0E00               	movlw	0
 14412  001A7C  0100               	movlb	0	; () banked
 14413  001A7E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14414  001A80  0E01               	movlw	1
 14415  001A82  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14416  001A84  EC84  F022         	call	_updateServoPosition	;wreg free
 14417                           
 14418                           ;Test.c: 369: updateServoPosition(1050, 3);
 14419  001A88  0E04               	movlw	4
 14420  001A8A  0100               	movlb	0	; () banked
 14421  001A8C  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14422  001A8E  0E1A               	movlw	26
 14423  001A90  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14424  001A92  0E00               	movlw	0
 14425  001A94  0100               	movlb	0	; () banked
 14426  001A96  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14427  001A98  0E03               	movlw	3
 14428  001A9A  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14429  001A9C  EC84  F022         	call	_updateServoPosition	;wreg free
 14430                           
 14431                           ;Test.c: 370: _delay((unsigned long)((750)*(32000000/4000.0)));
 14432  001AA0  0E1F               	movlw	31
 14433  001AA2  0100               	movlb	0	; () banked
 14434  001AA4  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14435  001AA6  0E71               	movlw	113
 14436  001AA8  0100               	movlb	0	; () banked
 14437  001AAA  6FAB               	movwf	??_BothServos& (0+255),b
 14438  001AAC  0E1E               	movlw	30
 14439  001AAE                     u9607:
 14440  001AAE  2EE8               	decfsz	wreg,f,c
 14441  001AB0  D7FE               	bra	u9607
 14442  001AB2  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14443  001AB4  D7FC               	bra	u9607
 14444  001AB6  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14445  001AB8  D7FA               	bra	u9607
 14446  001ABA  F000               	nop	
 14447                           
 14448                           ;Test.c: 371: updateServoPosition(1260, 3);
 14449  001ABC  0E04               	movlw	4
 14450  001ABE  0100               	movlb	0	; () banked
 14451  001AC0  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14452  001AC2  0EEC               	movlw	236
 14453  001AC4  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14454  001AC6  0E00               	movlw	0
 14455  001AC8  0100               	movlb	0	; () banked
 14456  001ACA  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14457  001ACC  0E03               	movlw	3
 14458  001ACE  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14459  001AD0  EC84  F022         	call	_updateServoPosition	;wreg free
 14460                           
 14461                           ;Test.c: 372: _delay((unsigned long)((2500)*(32000000/4000.0)));
 14462  001AD4  0E66               	movlw	102
 14463  001AD6  0100               	movlb	0	; () banked
 14464  001AD8  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14465  001ADA  0E76               	movlw	118
 14466  001ADC  0100               	movlb	0	; () banked
 14467  001ADE  6FAB               	movwf	??_BothServos& (0+255),b
 14468  001AE0  0EC1               	movlw	193
 14469  001AE2                     u9617:
 14470  001AE2  2EE8               	decfsz	wreg,f,c
 14471  001AE4  D7FE               	bra	u9617
 14472  001AE6  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14473  001AE8  D7FC               	bra	u9617
 14474  001AEA  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14475  001AEC  D7FA               	bra	u9617
 14476                           
 14477                           ;Test.c: 373: updateServoPosition(1050, 3);
 14478  001AEE  0E04               	movlw	4
 14479  001AF0  0100               	movlb	0	; () banked
 14480  001AF2  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14481  001AF4  0E1A               	movlw	26
 14482  001AF6  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14483  001AF8  0E00               	movlw	0
 14484  001AFA  0100               	movlb	0	; () banked
 14485  001AFC  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14486  001AFE  0E03               	movlw	3
 14487  001B00  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14488  001B02  EC84  F022         	call	_updateServoPosition	;wreg free
 14489                           
 14490                           ;Test.c: 374: _delay((unsigned long)((750)*(32000000/4000.0)));
 14491  001B06  0E1F               	movlw	31
 14492  001B08  0100               	movlb	0	; () banked
 14493  001B0A  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14494  001B0C  0E71               	movlw	113
 14495  001B0E  0100               	movlb	0	; () banked
 14496  001B10  6FAB               	movwf	??_BothServos& (0+255),b
 14497  001B12  0E1E               	movlw	30
 14498  001B14                     u9627:
 14499  001B14  2EE8               	decfsz	wreg,f,c
 14500  001B16  D7FE               	bra	u9627
 14501  001B18  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14502  001B1A  D7FC               	bra	u9627
 14503  001B1C  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14504  001B1E  D7FA               	bra	u9627
 14505  001B20  F000               	nop	
 14506                           
 14507                           ;Test.c: 376: updateServoPosition(850, 1);
 14508  001B22  0E03               	movlw	3
 14509  001B24  0100               	movlb	0	; () banked
 14510  001B26  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14511  001B28  0E52               	movlw	82
 14512  001B2A  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14513  001B2C  0E00               	movlw	0
 14514  001B2E  0100               	movlb	0	; () banked
 14515  001B30  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14516  001B32  0E01               	movlw	1
 14517  001B34  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14518  001B36  EC84  F022         	call	_updateServoPosition	;wreg free
 14519                           
 14520                           ;Test.c: 377: updateServoPosition(1050, 3);
 14521  001B3A  0E04               	movlw	4
 14522  001B3C  0100               	movlb	0	; () banked
 14523  001B3E  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14524  001B40  0E1A               	movlw	26
 14525  001B42  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14526  001B44  0E00               	movlw	0
 14527  001B46  0100               	movlb	0	; () banked
 14528  001B48  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14529  001B4A  0E03               	movlw	3
 14530  001B4C  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14531  001B4E  EC84  F022         	call	_updateServoPosition	;wreg free
 14532                           
 14533                           ;Test.c: 378: _delay((unsigned long)((750)*(32000000/4000.0)));
 14534  001B52  0E1F               	movlw	31
 14535  001B54  0100               	movlb	0	; () banked
 14536  001B56  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14537  001B58  0E71               	movlw	113
 14538  001B5A  0100               	movlb	0	; () banked
 14539  001B5C  6FAB               	movwf	??_BothServos& (0+255),b
 14540  001B5E  0E1E               	movlw	30
 14541  001B60                     u9637:
 14542  001B60  2EE8               	decfsz	wreg,f,c
 14543  001B62  D7FE               	bra	u9637
 14544  001B64  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14545  001B66  D7FC               	bra	u9637
 14546  001B68  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14547  001B6A  D7FA               	bra	u9637
 14548  001B6C  F000               	nop	
 14549                           
 14550                           ;Test.c: 379: updateServoPosition(1260, 3);
 14551  001B6E  0E04               	movlw	4
 14552  001B70  0100               	movlb	0	; () banked
 14553  001B72  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14554  001B74  0EEC               	movlw	236
 14555  001B76  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14556  001B78  0E00               	movlw	0
 14557  001B7A  0100               	movlb	0	; () banked
 14558  001B7C  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14559  001B7E  0E03               	movlw	3
 14560  001B80  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14561  001B82  EC84  F022         	call	_updateServoPosition	;wreg free
 14562                           
 14563                           ;Test.c: 380: _delay((unsigned long)((2500)*(32000000/4000.0)));
 14564  001B86  0E66               	movlw	102
 14565  001B88  0100               	movlb	0	; () banked
 14566  001B8A  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14567  001B8C  0E76               	movlw	118
 14568  001B8E  0100               	movlb	0	; () banked
 14569  001B90  6FAB               	movwf	??_BothServos& (0+255),b
 14570  001B92  0EC1               	movlw	193
 14571  001B94                     u9647:
 14572  001B94  2EE8               	decfsz	wreg,f,c
 14573  001B96  D7FE               	bra	u9647
 14574  001B98  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14575  001B9A  D7FC               	bra	u9647
 14576  001B9C  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14577  001B9E  D7FA               	bra	u9647
 14578                           
 14579                           ;Test.c: 381: updateServoPosition(1050, 3);
 14580  001BA0  0E04               	movlw	4
 14581  001BA2  0100               	movlb	0	; () banked
 14582  001BA4  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14583  001BA6  0E1A               	movlw	26
 14584  001BA8  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14585  001BAA  0E00               	movlw	0
 14586  001BAC  0100               	movlb	0	; () banked
 14587  001BAE  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14588  001BB0  0E03               	movlw	3
 14589  001BB2  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14590  001BB4  EC84  F022         	call	_updateServoPosition	;wreg free
 14591                           
 14592                           ;Test.c: 382: _delay((unsigned long)((750)*(32000000/4000.0)));
 14593  001BB8  0E1F               	movlw	31
 14594  001BBA  0100               	movlb	0	; () banked
 14595  001BBC  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14596  001BBE  0E71               	movlw	113
 14597  001BC0  0100               	movlb	0	; () banked
 14598  001BC2  6FAB               	movwf	??_BothServos& (0+255),b
 14599  001BC4  0E1E               	movlw	30
 14600  001BC6                     u9657:
 14601  001BC6  2EE8               	decfsz	wreg,f,c
 14602  001BC8  D7FE               	bra	u9657
 14603  001BCA  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14604  001BCC  D7FC               	bra	u9657
 14605  001BCE  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14606  001BD0  D7FA               	bra	u9657
 14607  001BD2  F000               	nop	
 14608                           
 14609                           ;Test.c: 384: updateServoPosition(1200, 1);
 14610  001BD4  0E04               	movlw	4
 14611  001BD6  0100               	movlb	0	; () banked
 14612  001BD8  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14613  001BDA  0EB0               	movlw	176
 14614  001BDC  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14615  001BDE  0E00               	movlw	0
 14616  001BE0  0100               	movlb	0	; () banked
 14617  001BE2  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14618  001BE4  0E01               	movlw	1
 14619  001BE6  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14620  001BE8  EC84  F022         	call	_updateServoPosition	;wreg free
 14621                           
 14622                           ;Test.c: 385: updateServoPosition(1050, 3);
 14623  001BEC  0E04               	movlw	4
 14624  001BEE  0100               	movlb	0	; () banked
 14625  001BF0  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14626  001BF2  0E1A               	movlw	26
 14627  001BF4  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14628  001BF6  0E00               	movlw	0
 14629  001BF8  0100               	movlb	0	; () banked
 14630  001BFA  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14631  001BFC  0E03               	movlw	3
 14632  001BFE  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14633  001C00  EC84  F022         	call	_updateServoPosition	;wreg free
 14634                           
 14635                           ;Test.c: 386: _delay((unsigned long)((1500)*(32000000/4000.0)));
 14636  001C04  0E3D               	movlw	61
 14637  001C06  0100               	movlb	0	; () banked
 14638  001C08  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14639  001C0A  0EE1               	movlw	225
 14640  001C0C  0100               	movlb	0	; () banked
 14641  001C0E  6FAB               	movwf	??_BothServos& (0+255),b
 14642  001C10  0E3F               	movlw	63
 14643  001C12                     u9667:
 14644  001C12  2EE8               	decfsz	wreg,f,c
 14645  001C14  D7FE               	bra	u9667
 14646  001C16  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14647  001C18  D7FC               	bra	u9667
 14648  001C1A  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14649  001C1C  D7FA               	bra	u9667
 14650  001C1E  D000               	nop2	
 14651                           
 14652                           ;Test.c: 388: updateServoPosition(1670, 1);
 14653  001C20  0E06               	movlw	6
 14654  001C22  0100               	movlb	0	; () banked
 14655  001C24  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14656  001C26  0E86               	movlw	134
 14657  001C28  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14658  001C2A  0E00               	movlw	0
 14659  001C2C  0100               	movlb	0	; () banked
 14660  001C2E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14661  001C30  0E01               	movlw	1
 14662  001C32  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14663  001C34  EC84  F022         	call	_updateServoPosition	;wreg free
 14664                           
 14665                           ;Test.c: 389: updateServoPosition(1050, 3);
 14666  001C38  0E04               	movlw	4
 14667  001C3A  0100               	movlb	0	; () banked
 14668  001C3C  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14669  001C3E  0E1A               	movlw	26
 14670  001C40  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14671  001C42  0E00               	movlw	0
 14672  001C44  0100               	movlb	0	; () banked
 14673  001C46  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14674  001C48  0E03               	movlw	3
 14675  001C4A  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14676  001C4C  EC84  F022         	call	_updateServoPosition	;wreg free
 14677                           
 14678                           ;Test.c: 390: _delay((unsigned long)((750)*(32000000/4000.0)));
 14679  001C50  0E1F               	movlw	31
 14680  001C52  0100               	movlb	0	; () banked
 14681  001C54  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14682  001C56  0E71               	movlw	113
 14683  001C58  0100               	movlb	0	; () banked
 14684  001C5A  6FAB               	movwf	??_BothServos& (0+255),b
 14685  001C5C  0E1E               	movlw	30
 14686  001C5E                     u9677:
 14687  001C5E  2EE8               	decfsz	wreg,f,c
 14688  001C60  D7FE               	bra	u9677
 14689  001C62  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14690  001C64  D7FC               	bra	u9677
 14691  001C66  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14692  001C68  D7FA               	bra	u9677
 14693  001C6A  F000               	nop	
 14694                           
 14695                           ;Test.c: 391: updateServoPosition(1390, 3);
 14696  001C6C  0E05               	movlw	5
 14697  001C6E  0100               	movlb	0	; () banked
 14698  001C70  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14699  001C72  0E6E               	movlw	110
 14700  001C74  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14701  001C76  0E00               	movlw	0
 14702  001C78  0100               	movlb	0	; () banked
 14703  001C7A  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14704  001C7C  0E03               	movlw	3
 14705  001C7E  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14706  001C80  EC84  F022         	call	_updateServoPosition	;wreg free
 14707                           
 14708                           ;Test.c: 392: _delay((unsigned long)((2500)*(32000000/4000.0)));
 14709  001C84  0E66               	movlw	102
 14710  001C86  0100               	movlb	0	; () banked
 14711  001C88  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14712  001C8A  0E76               	movlw	118
 14713  001C8C  0100               	movlb	0	; () banked
 14714  001C8E  6FAB               	movwf	??_BothServos& (0+255),b
 14715  001C90  0EC1               	movlw	193
 14716  001C92                     u9687:
 14717  001C92  2EE8               	decfsz	wreg,f,c
 14718  001C94  D7FE               	bra	u9687
 14719  001C96  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14720  001C98  D7FC               	bra	u9687
 14721  001C9A  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14722  001C9C  D7FA               	bra	u9687
 14723                           
 14724                           ;Test.c: 393: updateServoPosition(1050, 3);
 14725  001C9E  0E04               	movlw	4
 14726  001CA0  0100               	movlb	0	; () banked
 14727  001CA2  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14728  001CA4  0E1A               	movlw	26
 14729  001CA6  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14730  001CA8  0E00               	movlw	0
 14731  001CAA  0100               	movlb	0	; () banked
 14732  001CAC  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14733  001CAE  0E03               	movlw	3
 14734  001CB0  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14735  001CB2  EC84  F022         	call	_updateServoPosition	;wreg free
 14736                           
 14737                           ;Test.c: 394: _delay((unsigned long)((750)*(32000000/4000.0)));
 14738  001CB6  0E1F               	movlw	31
 14739  001CB8  0100               	movlb	0	; () banked
 14740  001CBA  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14741  001CBC  0E71               	movlw	113
 14742  001CBE  0100               	movlb	0	; () banked
 14743  001CC0  6FAB               	movwf	??_BothServos& (0+255),b
 14744  001CC2  0E1E               	movlw	30
 14745  001CC4                     u9697:
 14746  001CC4  2EE8               	decfsz	wreg,f,c
 14747  001CC6  D7FE               	bra	u9697
 14748  001CC8  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14749  001CCA  D7FC               	bra	u9697
 14750  001CCC  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14751  001CCE  D7FA               	bra	u9697
 14752  001CD0  F000               	nop	
 14753                           
 14754                           ;Test.c: 396: updateServoPosition(2400, 1);
 14755  001CD2  0E09               	movlw	9
 14756  001CD4  0100               	movlb	0	; () banked
 14757  001CD6  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14758  001CD8  0E60               	movlw	96
 14759  001CDA  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14760  001CDC  0E00               	movlw	0
 14761  001CDE  0100               	movlb	0	; () banked
 14762  001CE0  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14763  001CE2  0E01               	movlw	1
 14764  001CE4  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14765  001CE6  EC84  F022         	call	_updateServoPosition	;wreg free
 14766                           
 14767                           ;Test.c: 397: updateServoPosition(1050, 3);
 14768  001CEA  0E04               	movlw	4
 14769  001CEC  0100               	movlb	0	; () banked
 14770  001CEE  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14771  001CF0  0E1A               	movlw	26
 14772  001CF2  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14773  001CF4  0E00               	movlw	0
 14774  001CF6  0100               	movlb	0	; () banked
 14775  001CF8  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14776  001CFA  0E03               	movlw	3
 14777  001CFC  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14778  001CFE  EC84  F022         	call	_updateServoPosition	;wreg free
 14779                           
 14780                           ;Test.c: 398: _delay((unsigned long)((750)*(32000000/4000.0)));
 14781  001D02  0E1F               	movlw	31
 14782  001D04  0100               	movlb	0	; () banked
 14783  001D06  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14784  001D08  0E71               	movlw	113
 14785  001D0A  0100               	movlb	0	; () banked
 14786  001D0C  6FAB               	movwf	??_BothServos& (0+255),b
 14787  001D0E  0E1E               	movlw	30
 14788  001D10                     u9707:
 14789  001D10  2EE8               	decfsz	wreg,f,c
 14790  001D12  D7FE               	bra	u9707
 14791  001D14  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14792  001D16  D7FC               	bra	u9707
 14793  001D18  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14794  001D1A  D7FA               	bra	u9707
 14795  001D1C  F000               	nop	
 14796                           
 14797                           ;Test.c: 399: updateServoPosition(1390, 3);
 14798  001D1E  0E05               	movlw	5
 14799  001D20  0100               	movlb	0	; () banked
 14800  001D22  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14801  001D24  0E6E               	movlw	110
 14802  001D26  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14803  001D28  0E00               	movlw	0
 14804  001D2A  0100               	movlb	0	; () banked
 14805  001D2C  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14806  001D2E  0E03               	movlw	3
 14807  001D30  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14808  001D32  EC84  F022         	call	_updateServoPosition	;wreg free
 14809                           
 14810                           ;Test.c: 400: _delay((unsigned long)((2500)*(32000000/4000.0)));
 14811  001D36  0E66               	movlw	102
 14812  001D38  0100               	movlb	0	; () banked
 14813  001D3A  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14814  001D3C  0E76               	movlw	118
 14815  001D3E  0100               	movlb	0	; () banked
 14816  001D40  6FAB               	movwf	??_BothServos& (0+255),b
 14817  001D42  0EC1               	movlw	193
 14818  001D44                     u9717:
 14819  001D44  2EE8               	decfsz	wreg,f,c
 14820  001D46  D7FE               	bra	u9717
 14821  001D48  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14822  001D4A  D7FC               	bra	u9717
 14823  001D4C  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14824  001D4E  D7FA               	bra	u9717
 14825                           
 14826                           ;Test.c: 401: updateServoPosition(1050, 3);
 14827  001D50  0E04               	movlw	4
 14828  001D52  0100               	movlb	0	; () banked
 14829  001D54  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14830  001D56  0E1A               	movlw	26
 14831  001D58  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14832  001D5A  0E00               	movlw	0
 14833  001D5C  0100               	movlb	0	; () banked
 14834  001D5E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14835  001D60  0E03               	movlw	3
 14836  001D62  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14837  001D64  EC84  F022         	call	_updateServoPosition	;wreg free
 14838                           
 14839                           ;Test.c: 402: _delay((unsigned long)((750)*(32000000/4000.0)));
 14840  001D68  0E1F               	movlw	31
 14841  001D6A  0100               	movlb	0	; () banked
 14842  001D6C  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14843  001D6E  0E71               	movlw	113
 14844  001D70  0100               	movlb	0	; () banked
 14845  001D72  6FAB               	movwf	??_BothServos& (0+255),b
 14846  001D74  0E1E               	movlw	30
 14847  001D76                     u9727:
 14848  001D76  2EE8               	decfsz	wreg,f,c
 14849  001D78  D7FE               	bra	u9727
 14850  001D7A  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14851  001D7C  D7FC               	bra	u9727
 14852  001D7E  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14853  001D80  D7FA               	bra	u9727
 14854  001D82  F000               	nop	
 14855                           
 14856                           ;Test.c: 404: TMR1ON = 0;
 14857  001D84  90CD               	bcf	4045,0,c	;volatile
 14858                           
 14859                           ;Test.c: 405: TMR3ON = 0;
 14860  001D86  90B1               	bcf	4017,0,c	;volatile
 14861                           
 14862                           ;Test.c: 406: (INTCONbits.GIE = 0);
 14863  001D88  9EF2               	bcf	intcon,7,c	;volatile
 14864  001D8A  0012               	return		;funcret
 14865  001D8C                     __end_of_BothServos:
 14866                           	opt stack 0
 14867                           tblptru	equ	0xFF8
 14868                           tblptrh	equ	0xFF7
 14869                           tblptrl	equ	0xFF6
 14870                           tablat	equ	0xFF5
 14871                           prodh	equ	0xFF4
 14872                           prodl	equ	0xFF3
 14873                           intcon	equ	0xFF2
 14874                           intcon2	equ	0xFF1
 14875                           intcon3	equ	0xFF0
 14876                           postinc0	equ	0xFEE
 14877                           wreg	equ	0xFE8
 14878                           postdec1	equ	0xFE5
 14879                           fsr1l	equ	0xFE1
 14880                           indf2	equ	0xFDF
 14881                           postinc2	equ	0xFDE
 14882                           postdec2	equ	0xFDD
 14883                           fsr2h	equ	0xFDA
 14884                           fsr2l	equ	0xFD9
 14885                           status	equ	0xFD8
 14886                           
 14887 ;; *************** function _initServos *****************
 14888 ;; Defined at:
 14889 ;;		line 426 in file "sort.c"
 14890 ;; Parameters:    Size  Location     Type
 14891 ;;		None
 14892 ;; Auto vars:     Size  Location     Type
 14893 ;;		None
 14894 ;; Return value:  Size  Location     Type
 14895 ;;                  1    wreg      void 
 14896 ;; Registers used:
 14897 ;;		wreg, status,2, status,0, cstack
 14898 ;; Tracked objects:
 14899 ;;		On entry : 0/0
 14900 ;;		On exit  : 0/0
 14901 ;;		Unchanged: 0/0
 14902 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14903 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14904 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14905 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14906 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14907 ;;Total ram usage:        1 bytes
 14908 ;; Hardware stack levels used:    1
 14909 ;; Hardware stack levels required when called:    8
 14910 ;; This function calls:
 14911 ;;		_updateServoPosition
 14912 ;; This function is called by:
 14913 ;;		_Loading
 14914 ;;		_BothServos
 14915 ;; This function uses a non-reentrant model
 14916 ;;
 14917                           
 14918                           	psect	text48
 14919  004844                     __ptext48:
 14920                           	opt stack 0
 14921  004844                     _initServos:
 14922                           	opt stack 20
 14923                           
 14924                           ;sort.c: 427: updateServoPosition(1200, 1);
 14925                           
 14926                           ;incstack = 0
 14927  004844  0E04               	movlw	4
 14928  004846  0100               	movlb	0	; () banked
 14929  004848  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14930  00484A  0EB0               	movlw	176
 14931  00484C  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14932  00484E  0E00               	movlw	0
 14933  004850  0100               	movlb	0	; () banked
 14934  004852  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14935  004854  0E01               	movlw	1
 14936  004856  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14937  004858  EC84  F022         	call	_updateServoPosition	;wreg free
 14938                           
 14939                           ;sort.c: 428: updateServoPosition(1050, 3);
 14940  00485C  0E04               	movlw	4
 14941  00485E  0100               	movlb	0	; () banked
 14942  004860  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14943  004862  0E1A               	movlw	26
 14944  004864  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14945  004866  0E00               	movlw	0
 14946  004868  0100               	movlb	0	; () banked
 14947  00486A  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14948  00486C  0E03               	movlw	3
 14949  00486E  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14950  004870  EC84  F022         	call	_updateServoPosition	;wreg free
 14951                           
 14952                           ;sort.c: 429: TMR1ON = 1;
 14953  004874  80CD               	bsf	4045,0,c	;volatile
 14954                           
 14955                           ;sort.c: 430: was_low_1 = 0;
 14956  004876  0E00               	movlw	0
 14957  004878  6E7A               	movwf	_was_low_1+1,c	;volatile
 14958  00487A  0E00               	movlw	0
 14959  00487C  6E79               	movwf	_was_low_1,c	;volatile
 14960                           
 14961                           ;sort.c: 431: _delay((unsigned long)((5)*(32000000/4000.0)));
 14962  00487E  0E34               	movlw	52
 14963  004880  0100               	movlb	0	; () banked
 14964  004882  6F88               	movwf	??_initServos& (0+255),b
 14965  004884  0EF1               	movlw	241
 14966  004886                     u9737:
 14967  004886  2EE8               	decfsz	wreg,f,c
 14968  004888  D7FE               	bra	u9737
 14969  00488A  2F88               	decfsz	??_initServos& (0+255),f,b
 14970  00488C  D7FC               	bra	u9737
 14971  00488E  D000               	nop2	
 14972                           
 14973                           ;sort.c: 432: TMR3ON = 1;
 14974  004890  80B1               	bsf	4017,0,c	;volatile
 14975                           
 14976                           ;sort.c: 433: was_low_3 = 0;
 14977  004892  0E00               	movlw	0
 14978  004894  6E7C               	movwf	_was_low_3+1,c	;volatile
 14979  004896  0E00               	movlw	0
 14980  004898  6E7B               	movwf	_was_low_3,c	;volatile
 14981                           
 14982                           ;sort.c: 435: LATCbits.LATC0 = 1;
 14983  00489A  808B               	bsf	3979,0,c	;volatile
 14984  00489C  0012               	return		;funcret
 14985  00489E                     __end_of_initServos:
 14986                           	opt stack 0
 14987                           tblptru	equ	0xFF8
 14988                           tblptrh	equ	0xFF7
 14989                           tblptrl	equ	0xFF6
 14990                           tablat	equ	0xFF5
 14991                           prodh	equ	0xFF4
 14992                           prodl	equ	0xFF3
 14993                           intcon	equ	0xFF2
 14994                           intcon2	equ	0xFF1
 14995                           intcon3	equ	0xFF0
 14996                           postinc0	equ	0xFEE
 14997                           wreg	equ	0xFE8
 14998                           postdec1	equ	0xFE5
 14999                           fsr1l	equ	0xFE1
 15000                           indf2	equ	0xFDF
 15001                           postinc2	equ	0xFDE
 15002                           postdec2	equ	0xFDD
 15003                           fsr2h	equ	0xFDA
 15004                           fsr2l	equ	0xFD9
 15005                           status	equ	0xFD8
 15006                           
 15007 ;; *************** function _updateServoPosition *****************
 15008 ;; Defined at:
 15009 ;;		line 498 in file "sort.c"
 15010 ;; Parameters:    Size  Location     Type
 15011 ;;  time_us         2    0[BANK0 ] int 
 15012 ;;  timer           2    2[BANK0 ] int 
 15013 ;; Auto vars:     Size  Location     Type
 15014 ;;  my_time         2    6[BANK0 ] unsigned int 
 15015 ;; Return value:  Size  Location     Type
 15016 ;;                  1    wreg      void 
 15017 ;; Registers used:
 15018 ;;		wreg, status,2, status,0
 15019 ;; Tracked objects:
 15020 ;;		On entry : 0/0
 15021 ;;		On exit  : 0/0
 15022 ;;		Unchanged: 0/0
 15023 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15024 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15025 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15026 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15027 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15028 ;;Total ram usage:        8 bytes
 15029 ;; Hardware stack levels used:    1
 15030 ;; Hardware stack levels required when called:    7
 15031 ;; This function calls:
 15032 ;;		Nothing
 15033 ;; This function is called by:
 15034 ;;		_Distribution
 15035 ;;		_initServos
 15036 ;;		_actuatorTest
 15037 ;;		_BothServos
 15038 ;; This function uses a non-reentrant model
 15039 ;;
 15040                           
 15041                           	psect	text49
 15042  004508                     __ptext49:
 15043                           	opt stack 0
 15044  004508                     _updateServoPosition:
 15045                           	opt stack 20
 15046                           
 15047                           ;sort.c: 499: unsigned int my_time = 65535 - time_us;
 15048                           
 15049                           ;incstack = 0
 15050  004508  C080  F084         	movff	updateServoPosition@time_us,??_updateServoPosition
 15051  00450C  C081  F085         	movff	updateServoPosition@time_us+1,??_updateServoPosition+1
 15052  004510  0100               	movlb	0	; () banked
 15053  004512  1F84               	comf	??_updateServoPosition& (0+255),f,b
 15054  004514  1F85               	comf	(??_updateServoPosition+1)& (0+255),f,b
 15055  004516  4B84               	infsnz	??_updateServoPosition& (0+255),f,b
 15056  004518  2B85               	incf	(??_updateServoPosition+1)& (0+255),f,b
 15057  00451A  0EFF               	movlw	255
 15058  00451C  0100               	movlb	0	; () banked
 15059  00451E  2584               	addwf	??_updateServoPosition& (0+255),w,b
 15060  004520  0100               	movlb	0	; () banked
 15061  004522  6F86               	movwf	updateServoPosition@my_time& (0+255),b
 15062  004524  0EFF               	movlw	255
 15063  004526  0100               	movlb	0	; () banked
 15064  004528  2185               	addwfc	(??_updateServoPosition+1)& (0+255),w,b
 15065  00452A  0100               	movlb	0	; () banked
 15066  00452C  6F87               	movwf	(updateServoPosition@my_time+1)& (0+255),b
 15067                           
 15068                           ;sort.c: 500: switch(timer){
 15069  00452E  D015               	goto	l6114
 15070  004530                     l6112:
 15071                           
 15072                           ; BSR set to: 0
 15073                           ;sort.c: 502: servoTimes[0] = my_time >> 8;
 15074  004530  0100               	movlb	0	; () banked
 15075  004532  5187               	movf	(updateServoPosition@my_time+1)& (0+255),w,b
 15076  004534  0101               	movlb	1	; () banked
 15077  004536  6F1C               	movwf	_servoTimes& (0+255),b
 15078  004538  6B1D               	clrf	(_servoTimes+1)& (0+255),b
 15079                           
 15080                           ;sort.c: 503: servoTimes[1] = my_time & 0xFF;
 15081  00453A  0100               	movlb	0	; () banked
 15082  00453C  5186               	movf	updateServoPosition@my_time& (0+255),w,b
 15083  00453E  0101               	movlb	1	; () banked
 15084  004540  6F1E               	movwf	(_servoTimes+2)& (0+255),b
 15085  004542  6B1F               	clrf	(_servoTimes+3)& (0+255),b
 15086  004544                     l852:
 15087                           
 15088                           ;sort.c: 505: servoTimes[2] = my_time >> 8;
 15089  004544  0100               	movlb	0	; () banked
 15090  004546  5187               	movf	(updateServoPosition@my_time+1)& (0+255),w,b
 15091  004548  0101               	movlb	1	; () banked
 15092  00454A  6F20               	movwf	(_servoTimes+4)& (0+255),b
 15093  00454C  6B21               	clrf	(_servoTimes+5)& (0+255),b
 15094                           
 15095                           ;sort.c: 506: servoTimes[3] = my_time & 0xFF;
 15096  00454E  0100               	movlb	0	; () banked
 15097  004550  5186               	movf	updateServoPosition@my_time& (0+255),w,b
 15098  004552  0101               	movlb	1	; () banked
 15099  004554  6F22               	movwf	(_servoTimes+6)& (0+255),b
 15100  004556  6B23               	clrf	(_servoTimes+7)& (0+255),b
 15101                           
 15102                           ;sort.c: 507: }
 15103  004558  0012               	return	
 15104  00455A                     l6114:
 15105  00455A  C082  F084         	movff	updateServoPosition@timer,??_updateServoPosition
 15106  00455E  C083  F085         	movff	updateServoPosition@timer+1,??_updateServoPosition+1
 15107                           
 15108                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 15109                           ; Switch size 1, requested type "space"
 15110                           ; Number of cases is 1, Range of values is 0 to 0
 15111                           ; switch strategies available:
 15112                           ; Name         Instructions Cycles
 15113                           ; simple_byte            4     3 (average)
 15114                           ;	Chosen strategy is simple_byte
 15115  004562  0100               	movlb	0	; () banked
 15116  004564  5185               	movf	(??_updateServoPosition+1)& (0+255),w,b
 15117  004566  0A00               	xorlw	0	; case 0
 15118  004568  A4D8               	btfss	status,2,c
 15119  00456A  0012               	return	
 15120                           
 15121                           ; BSR set to: 0
 15122                           ; Switch size 1, requested type "space"
 15123                           ; Number of cases is 2, Range of values is 1 to 3
 15124                           ; switch strategies available:
 15125                           ; Name         Instructions Cycles
 15126                           ; simple_byte            7     4 (average)
 15127                           ;	Chosen strategy is simple_byte
 15128  00456C  0100               	movlb	0	; () banked
 15129  00456E  5184               	movf	??_updateServoPosition& (0+255),w,b
 15130  004570  0A01               	xorlw	1	; case 1
 15131  004572  B4D8               	btfsc	status,2,c
 15132  004574  D7DD               	goto	l6112
 15133  004576  0A02               	xorlw	2	; case 3
 15134  004578  A4D8               	btfss	status,2,c
 15135  00457A  0012               	return	
 15136  00457C  D7E3               	goto	l852
 15137  00457E                     __end_of_updateServoPosition:
 15138                           	opt stack 0
 15139                           tblptru	equ	0xFF8
 15140                           tblptrh	equ	0xFF7
 15141                           tblptrl	equ	0xFF6
 15142                           tablat	equ	0xFF5
 15143                           prodh	equ	0xFF4
 15144                           prodl	equ	0xFF3
 15145                           intcon	equ	0xFF2
 15146                           intcon2	equ	0xFF1
 15147                           intcon3	equ	0xFF0
 15148                           postinc0	equ	0xFEE
 15149                           wreg	equ	0xFE8
 15150                           postdec1	equ	0xFE5
 15151                           fsr1l	equ	0xFE1
 15152                           indf2	equ	0xFDF
 15153                           postinc2	equ	0xFDE
 15154                           postdec2	equ	0xFDD
 15155                           fsr2h	equ	0xFDA
 15156                           fsr2l	equ	0xFD9
 15157                           status	equ	0xFD8
 15158                           
 15159 ;; *************** function _BlockerTest *****************
 15160 ;; Defined at:
 15161 ;;		line 589 in file "Test.c"
 15162 ;; Parameters:    Size  Location     Type
 15163 ;;		None
 15164 ;; Auto vars:     Size  Location     Type
 15165 ;;  i               2   44[BANK0 ] int 
 15166 ;;  cond_flag       2   48[BANK0 ] int 
 15167 ;;  cam_flag        2   46[BANK0 ] int 
 15168 ;; Return value:  Size  Location     Type
 15169 ;;                  1    wreg      void 
 15170 ;; Registers used:
 15171 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15172 ;; Tracked objects:
 15173 ;;		On entry : 0/0
 15174 ;;		On exit  : 0/0
 15175 ;;		Unchanged: 0/0
 15176 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15177 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15178 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15179 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15180 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15181 ;;Total ram usage:        7 bytes
 15182 ;; Hardware stack levels used:    1
 15183 ;; Hardware stack levels required when called:   10
 15184 ;; This function calls:
 15185 ;;		_lcdInst
 15186 ;;		_printf
 15187 ;; This function is called by:
 15188 ;;		_Test
 15189 ;; This function uses a non-reentrant model
 15190 ;;
 15191                           
 15192                           	psect	text50
 15193  00363A                     __ptext50:
 15194                           	opt stack 0
 15195  00363A                     _BlockerTest:
 15196                           	opt stack 19
 15197                           
 15198                           ;Test.c: 590: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 15199                           
 15200                           ;incstack = 0
 15201  00363A  0E01               	movlw	1
 15202  00363C  EC28  F028         	call	_lcdInst
 15203  003640  0E68               	movlw	104
 15204  003642  0100               	movlb	0	; () banked
 15205  003644  6FAB               	movwf	??_BlockerTest& (0+255),b
 15206  003646  0EE4               	movlw	228
 15207  003648                     u9747:
 15208  003648  2EE8               	decfsz	wreg,f,c
 15209  00364A  D7FE               	bra	u9747
 15210  00364C  2FAB               	decfsz	??_BlockerTest& (0+255),f,b
 15211  00364E  D7FC               	bra	u9747
 15212  003650  F000               	nop	
 15213  003652  0E80               	movlw	128
 15214  003654  EC28  F028         	call	_lcdInst
 15215                           
 15216                           ;Test.c: 591: printf("D: RET|2: COND %d", PORTAbits.RA2);
 15217  003658  0E7F               	movlw	low STR_122
 15218  00365A  0100               	movlb	0	; () banked
 15219  00365C  6F8E               	movwf	printf@f& (0+255),b
 15220  00365E  0EFB               	movlw	high STR_122
 15221  003660  0100               	movlb	0	; () banked
 15222  003662  6F8F               	movwf	(printf@f+1)& (0+255),b
 15223  003664  A480               	btfss	3968,2,c	;volatile
 15224  003666  D004               	goto	u6770
 15225  003668  0100               	movlb	0	; () banked
 15226  00366A  6BAB               	clrf	??_BlockerTest& (0+255),b
 15227  00366C  2BAB               	incf	??_BlockerTest& (0+255),f,b
 15228  00366E  D002               	goto	u6778
 15229  003670                     u6770:
 15230  003670  0100               	movlb	0	; () banked
 15231  003672  6BAB               	clrf	??_BlockerTest& (0+255),b
 15232  003674                     u6778:
 15233  003674  0100               	movlb	0	; () banked
 15234  003676  51AB               	movf	??_BlockerTest& (0+255),w,b
 15235  003678  0100               	movlb	0	; () banked
 15236  00367A  6F90               	movwf	(?_printf+2)& (0+255),b
 15237  00367C  6B91               	clrf	(?_printf+3)& (0+255),b
 15238  00367E  ECE8  F00A         	call	_printf	;wreg free
 15239                           
 15240                           ;Test.c: 592: lcdInst(0b11000000);;
 15241  003682  0EC0               	movlw	192
 15242  003684  EC28  F028         	call	_lcdInst
 15243                           
 15244                           ;Test.c: 593: printf("OTHER: CAM TOGGLE");
 15245  003688  0E6D               	movlw	low STR_123
 15246  00368A  0100               	movlb	0	; () banked
 15247  00368C  6F8E               	movwf	printf@f& (0+255),b
 15248  00368E  0EFB               	movlw	high STR_123
 15249  003690  0100               	movlb	0	; () banked
 15250  003692  6F8F               	movwf	(printf@f+1)& (0+255),b
 15251  003694  ECE8  F00A         	call	_printf	;wreg free
 15252                           
 15253                           ;Test.c: 594: int cam_flag = 1;
 15254  003698  0E00               	movlw	0
 15255  00369A  0100               	movlb	0	; () banked
 15256  00369C  6FAF               	movwf	(BlockerTest@cam_flag+1)& (0+255),b
 15257  00369E  0E01               	movlw	1
 15258  0036A0  6FAE               	movwf	BlockerTest@cam_flag& (0+255),b
 15259                           
 15260                           ; BSR set to: 0
 15261                           ;Test.c: 595: int cond_flag = 0;
 15262  0036A2  0E00               	movlw	0
 15263  0036A4  0100               	movlb	0	; () banked
 15264  0036A6  6FB1               	movwf	(BlockerTest@cond_flag+1)& (0+255),b
 15265  0036A8  0E00               	movlw	0
 15266  0036AA  6FB0               	movwf	BlockerTest@cond_flag& (0+255),b
 15267                           
 15268                           ; BSR set to: 0
 15269                           ;Test.c: 597: while(PORTBbits.RB1 == 0){
 15270                           
 15271                           ;Test.c: 596: while(1){
 15272  0036AC  D018               	goto	l8046
 15273  0036AE                     l8042:
 15274                           
 15275                           ;Test.c: 598: lcdInst(0b10000000);;
 15276  0036AE  0E80               	movlw	128
 15277  0036B0  EC28  F028         	call	_lcdInst
 15278                           
 15279                           ;Test.c: 599: printf("D: RET|2: COND %d", PORTAbits.RA2);
 15280  0036B4  0E7F               	movlw	low STR_122
 15281  0036B6  0100               	movlb	0	; () banked
 15282  0036B8  6F8E               	movwf	printf@f& (0+255),b
 15283  0036BA  0EFB               	movlw	high STR_122
 15284  0036BC  0100               	movlb	0	; () banked
 15285  0036BE  6F8F               	movwf	(printf@f+1)& (0+255),b
 15286  0036C0  A480               	btfss	3968,2,c	;volatile
 15287  0036C2  D004               	goto	u6780
 15288  0036C4  0100               	movlb	0	; () banked
 15289  0036C6  6BAB               	clrf	??_BlockerTest& (0+255),b
 15290  0036C8  2BAB               	incf	??_BlockerTest& (0+255),f,b
 15291  0036CA  D002               	goto	u6788
 15292  0036CC                     u6780:
 15293  0036CC  0100               	movlb	0	; () banked
 15294  0036CE  6BAB               	clrf	??_BlockerTest& (0+255),b
 15295  0036D0                     u6788:
 15296  0036D0  0100               	movlb	0	; () banked
 15297  0036D2  51AB               	movf	??_BlockerTest& (0+255),w,b
 15298  0036D4  0100               	movlb	0	; () banked
 15299  0036D6  6F90               	movwf	(?_printf+2)& (0+255),b
 15300  0036D8  6B91               	clrf	(?_printf+3)& (0+255),b
 15301  0036DA  ECE8  F00A         	call	_printf	;wreg free
 15302  0036DE                     l8046:
 15303  0036DE  A281               	btfss	3969,1,c	;volatile
 15304  0036E0  D7E6               	goto	l8042
 15305                           
 15306                           ;Test.c: 600: }
 15307                           ;Test.c: 601: if(PORTB >> 4 == 0b1111){
 15308  0036E2  3881               	swapf	3969,w,c	;volatile
 15309  0036E4  0B0F               	andlw	15
 15310  0036E6  0A0F               	xorlw	15
 15311  0036E8  B4D8               	btfsc	status,2,c
 15312  0036EA  0012               	return	
 15313                           
 15314                           ;Test.c: 604: else if(PORTB >> 4 == 0b0001){
 15315                           
 15316                           ;Test.c: 603: }
 15317                           
 15318                           ;Test.c: 602: break;
 15319  0036EC  3881               	swapf	3969,w,c	;volatile
 15320  0036EE  0B0F               	andlw	15
 15321  0036F0  06E8               	decf	wreg,f,c
 15322  0036F2  A4D8               	btfss	status,2,c
 15323  0036F4  D016               	goto	l8064
 15324                           
 15325                           ;Test.c: 605: if(cond_flag){
 15326  0036F6  0100               	movlb	0	; () banked
 15327  0036F8  51B0               	movf	BlockerTest@cond_flag& (0+255),w,b
 15328  0036FA  0100               	movlb	0	; () banked
 15329  0036FC  11B1               	iorwf	(BlockerTest@cond_flag+1)& (0+255),w,b
 15330  0036FE  B4D8               	btfsc	status,2,c
 15331  003700  D007               	goto	l1325
 15332                           
 15333                           ; BSR set to: 0
 15334                           ;Test.c: 606: LATAbits.LATA3 = 1;
 15335  003702  8689               	bsf	3977,3,c	;volatile
 15336  003704  D006               	goto	l8062
 15337  003706                     u6831:
 15338  003706  0E01               	movlw	1
 15339  003708                     u6840:
 15340  003708  0100               	movlb	0	; () banked
 15341  00370A  6FB0               	movwf	BlockerTest@cond_flag& (0+255),b
 15342  00370C  6BB1               	clrf	(BlockerTest@cond_flag+1)& (0+255),b
 15343                           
 15344                           ;Test.c: 608: }
 15345  00370E  D054               	goto	l8088
 15346  003710                     l1325:
 15347                           
 15348                           ; BSR set to: 0
 15349                           ;Test.c: 609: else{
 15350                           ;Test.c: 610: LATAbits.LATA3 = 0;
 15351  003710  9689               	bcf	3977,3,c	;volatile
 15352  003712                     l8062:
 15353                           
 15354                           ; BSR set to: 0
 15355                           ;Test.c: 611: cond_flag = !cond_flag;
 15356  003712  0100               	movlb	0	; () banked
 15357  003714  51B0               	movf	BlockerTest@cond_flag& (0+255),w,b
 15358  003716  0100               	movlb	0	; () banked
 15359  003718  11B1               	iorwf	(BlockerTest@cond_flag+1)& (0+255),w,b
 15360  00371A  B4D8               	btfsc	status,2,c
 15361  00371C  D7F4               	goto	u6831
 15362  00371E  0E00               	movlw	0
 15363  003720  D7F3               	goto	u6840
 15364  003722                     l8064:
 15365                           
 15366                           ;Test.c: 614: else{
 15367                           ;Test.c: 615: if(cam_flag){
 15368  003722  0100               	movlb	0	; () banked
 15369  003724  51AE               	movf	BlockerTest@cam_flag& (0+255),w,b
 15370  003726  0100               	movlb	0	; () banked
 15371  003728  11AF               	iorwf	(BlockerTest@cam_flag+1)& (0+255),w,b
 15372  00372A  B4D8               	btfsc	status,2,c
 15373  00372C  D007               	goto	l8070
 15374                           
 15375                           ; BSR set to: 0
 15376                           ;Test.c: 616: LATCbits.LATC0 = 1;
 15377  00372E  808B               	bsf	3979,0,c	;volatile
 15378  003730  D023               	goto	l8082
 15379  003732                     u6881:
 15380  003732  0E01               	movlw	1
 15381  003734                     u6890:
 15382  003734  0100               	movlb	0	; () banked
 15383  003736  6FAE               	movwf	BlockerTest@cam_flag& (0+255),b
 15384  003738  6BAF               	clrf	(BlockerTest@cam_flag+1)& (0+255),b
 15385                           
 15386                           ;Test.c: 618: }
 15387  00373A  D03E               	goto	l8088
 15388  00373C                     l8070:
 15389                           
 15390                           ; BSR set to: 0
 15391                           ;Test.c: 619: else{
 15392                           ;Test.c: 620: for(int i=0;i<5000;i++)
 15393  00373C  0E00               	movlw	0
 15394  00373E  0100               	movlb	0	; () banked
 15395  003740  6FAD               	movwf	(BlockerTest@i+1)& (0+255),b
 15396  003742  0E00               	movlw	0
 15397  003744  6FAC               	movwf	BlockerTest@i& (0+255),b
 15398  003746                     l8072:
 15399                           
 15400                           ; BSR set to: 0
 15401  003746  0100               	movlb	0	; () banked
 15402  003748  BFAD               	btfsc	(BlockerTest@i+1)& (0+255),7,b
 15403  00374A  D008               	goto	l1330
 15404  00374C  0E88               	movlw	136
 15405  00374E  0100               	movlb	0	; () banked
 15406  003750  5DAC               	subwf	BlockerTest@i& (0+255),w,b
 15407  003752  0E13               	movlw	19
 15408  003754  0100               	movlb	0	; () banked
 15409  003756  59AD               	subwfb	(BlockerTest@i+1)& (0+255),w,b
 15410  003758  B0D8               	btfsc	status,0,c
 15411  00375A  D00D               	goto	l1331
 15412  00375C                     l1330:
 15413                           
 15414                           ; BSR set to: 0
 15415                           ;Test.c: 621: {
 15416                           ;Test.c: 622: LATCbits.LATC0 = 1;
 15417  00375C  808B               	bsf	3979,0,c	;volatile
 15418                           
 15419                           ; BSR set to: 0
 15420                           ;Test.c: 623: _delay((unsigned long)((10)*(32000000/4000000.0)));
 15421  00375E  0E1A               	movlw	26
 15422  003760                     u9757:
 15423  003760  2EE8               	decfsz	wreg,f,c
 15424  003762  D7FE               	bra	u9757
 15425  003764  D000               	nop2	
 15426                           
 15427                           ;Test.c: 624: LATCbits.LATC0 = 0;
 15428  003766  908B               	bcf	3979,0,c	;volatile
 15429                           
 15430                           ;Test.c: 625: _delay((unsigned long)((90)*(32000000/4000000.0)));
 15431  003768  0EF0               	movlw	240
 15432  00376A                     u9767:
 15433  00376A  2EE8               	decfsz	wreg,f,c
 15434  00376C  D7FE               	bra	u9767
 15435  00376E  0100               	movlb	0	; () banked
 15436  003770  4BAC               	infsnz	BlockerTest@i& (0+255),f,b
 15437  003772  2BAD               	incf	(BlockerTest@i+1)& (0+255),f,b
 15438  003774  D7E8               	goto	l8072
 15439  003776                     l1331:
 15440                           
 15441                           ; BSR set to: 0
 15442                           ;Test.c: 626: }
 15443                           ;Test.c: 627: LATCbits.LATC0 = 0;
 15444  003776  908B               	bcf	3979,0,c	;volatile
 15445  003778                     l8082:
 15446                           
 15447                           ; BSR set to: 0
 15448                           ;Test.c: 628: cam_flag = !cam_flag;
 15449  003778  0100               	movlb	0	; () banked
 15450  00377A  51AE               	movf	BlockerTest@cam_flag& (0+255),w,b
 15451  00377C  0100               	movlb	0	; () banked
 15452  00377E  11AF               	iorwf	(BlockerTest@cam_flag+1)& (0+255),w,b
 15453  003780  B4D8               	btfsc	status,2,c
 15454  003782  D7D7               	goto	u6881
 15455  003784  0E00               	movlw	0
 15456  003786  D7D6               	goto	u6890
 15457  003788                     l8084:
 15458                           
 15459                           ;Test.c: 633: lcdInst(0b10000000);;
 15460  003788  0E80               	movlw	128
 15461  00378A  EC28  F028         	call	_lcdInst
 15462                           
 15463                           ;Test.c: 634: printf("D: RET|2: COND %d", PORTAbits.RA2);
 15464  00378E  0E7F               	movlw	low STR_122
 15465  003790  0100               	movlb	0	; () banked
 15466  003792  6F8E               	movwf	printf@f& (0+255),b
 15467  003794  0EFB               	movlw	high STR_122
 15468  003796  0100               	movlb	0	; () banked
 15469  003798  6F8F               	movwf	(printf@f+1)& (0+255),b
 15470  00379A  A480               	btfss	3968,2,c	;volatile
 15471  00379C  D004               	goto	u6940
 15472  00379E  0100               	movlb	0	; () banked
 15473  0037A0  6BAB               	clrf	??_BlockerTest& (0+255),b
 15474  0037A2  2BAB               	incf	??_BlockerTest& (0+255),f,b
 15475  0037A4  D002               	goto	u6948
 15476  0037A6                     u6940:
 15477  0037A6  0100               	movlb	0	; () banked
 15478  0037A8  6BAB               	clrf	??_BlockerTest& (0+255),b
 15479  0037AA                     u6948:
 15480  0037AA  0100               	movlb	0	; () banked
 15481  0037AC  51AB               	movf	??_BlockerTest& (0+255),w,b
 15482  0037AE  0100               	movlb	0	; () banked
 15483  0037B0  6F90               	movwf	(?_printf+2)& (0+255),b
 15484  0037B2  6B91               	clrf	(?_printf+3)& (0+255),b
 15485  0037B4  ECE8  F00A         	call	_printf	;wreg free
 15486  0037B8                     l8088:
 15487  0037B8  A281               	btfss	3969,1,c	;volatile
 15488  0037BA  D791               	goto	l8046
 15489  0037BC  D7E5               	goto	l8084
 15490  0037BE                     __end_of_BlockerTest:
 15491                           	opt stack 0
 15492                           tblptru	equ	0xFF8
 15493                           tblptrh	equ	0xFF7
 15494                           tblptrl	equ	0xFF6
 15495                           tablat	equ	0xFF5
 15496                           prodh	equ	0xFF4
 15497                           prodl	equ	0xFF3
 15498                           intcon	equ	0xFF2
 15499                           intcon2	equ	0xFF1
 15500                           intcon3	equ	0xFF0
 15501                           postinc0	equ	0xFEE
 15502                           wreg	equ	0xFE8
 15503                           postdec1	equ	0xFE5
 15504                           fsr1l	equ	0xFE1
 15505                           indf2	equ	0xFDF
 15506                           postinc2	equ	0xFDE
 15507                           postdec2	equ	0xFDD
 15508                           fsr2h	equ	0xFDA
 15509                           fsr2l	equ	0xFD9
 15510                           status	equ	0xFD8
 15511                           
 15512 ;; *************** function _printf *****************
 15513 ;; Defined at:
 15514 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
 15515 ;; Parameters:    Size  Location     Type
 15516 ;;  f               2   14[BANK0 ] PTR const unsigned char 
 15517 ;;		 -> STR_125(18), STR_124(18), STR_123(18), STR_122(18), 
 15518 ;;		 -> STR_121(18), STR_120(18), STR_119(17), STR_118(17), 
 15519 ;;		 -> STR_117(3), STR_116(15), STR_115(3), STR_114(15), 
 15520 ;;		 -> STR_113(11), STR_112(18), STR_111(18), STR_110(17), 
 15521 ;;		 -> STR_109(15), STR_108(15), STR_107(15), STR_106(17), 
 15522 ;;		 -> STR_105(17), STR_104(17), STR_103(16), STR_102(17), 
 15523 ;;		 -> STR_101(17), STR_100(17), STR_99(17), STR_98(17), 
 15524 ;;		 -> STR_97(17), STR_96(15), STR_95(11), STR_94(17), 
 15525 ;;		 -> STR_93(11), STR_92(17), STR_91(14), STR_90(15), 
 15526 ;;		 -> STR_89(14), STR_88(10), STR_87(9), STR_86(9), 
 15527 ;;		 -> STR_85(10), STR_84(10), STR_83(16), STR_82(15), 
 15528 ;;		 -> STR_81(3), STR_80(15), STR_79(13), STR_78(14), 
 15529 ;;		 -> STR_77(8), STR_76(14), STR_75(15), STR_74(12), 
 15530 ;;		 -> STR_73(14), STR_72(17), STR_71(14), STR_70(15), 
 15531 ;;		 -> STR_69(17), STR_68(17), STR_67(7), STR_66(21), 
 15532 ;;		 -> STR_65(13), STR_64(11), STR_63(24), STR_50(17), 
 15533 ;;		 -> STR_49(17), STR_48(17), STR_47(17), STR_46(17), 
 15534 ;;		 -> STR_45(17), STR_44(17), STR_43(17), STR_42(17), 
 15535 ;;		 -> STR_41(17), STR_40(17), STR_39(17), STR_38(17), 
 15536 ;;		 -> STR_37(17), STR_36(17), STR_35(17), STR_34(17), 
 15537 ;;		 -> STR_33(17), STR_32(17), STR_31(17), STR_30(17), 
 15538 ;;		 -> STR_29(3), STR_28(17), STR_27(17), STR_26(17), 
 15539 ;;		 -> STR_25(17), STR_24(17), STR_23(14), STR_22(10), 
 15540 ;;		 -> STR_21(24), STR_7(7), STR_6(17), STR_5(18), 
 15541 ;;		 -> STR_4(16), STR_3(18), STR_2(14), STR_1(18), 
 15542 ;; Auto vars:     Size  Location     Type
 15543 ;;  tmpval          4    0        struct .
 15544 ;;  width           2   41[BANK0 ] int 
 15545 ;;  val             2   37[BANK0 ] unsigned int 
 15546 ;;  len             2   35[BANK0 ] unsigned int 
 15547 ;;  ap              2   33[BANK0 ] PTR void [1]
 15548 ;;		 -> ?i2_printf(2), ?_printf(2), 
 15549 ;;  cp              2   31[BANK0 ] PTR const unsigned char 
 15550 ;;		 -> STR_126(7), count_total(2), printRTC@month(4), UI@month(4), 
 15551 ;;  c               1   40[BANK0 ] char 
 15552 ;;  flag            1   39[BANK0 ] unsigned char 
 15553 ;;  prec            1   30[BANK0 ] char 
 15554 ;; Return value:  Size  Location     Type
 15555 ;;                  2   14[BANK0 ] int 
 15556 ;; Registers used:
 15557 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15558 ;; Tracked objects:
 15559 ;;		On entry : 0/0
 15560 ;;		On exit  : 0/0
 15561 ;;		Unchanged: 0/0
 15562 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15563 ;;      Params:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15564 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15565 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15566 ;;      Totals:         0      29       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15567 ;;Total ram usage:       29 bytes
 15568 ;; Hardware stack levels used:    1
 15569 ;; Hardware stack levels required when called:    9
 15570 ;; This function calls:
 15571 ;;		___lwdiv
 15572 ;;		___lwmod
 15573 ;;		___wmul
 15574 ;;		_isdigit
 15575 ;;		_putch
 15576 ;; This function is called by:
 15577 ;;		_UI
 15578 ;;		_change_state_to_menu_start
 15579 ;;		_change_state_to_menu_12
 15580 ;;		_change_state_to_menu_22
 15581 ;;		_printRTC
 15582 ;;		_EEPROM_write
 15583 ;;		_Test
 15584 ;;		_algorithmTest
 15585 ;;		_sensorTest
 15586 ;;		_actuatorTest
 15587 ;;		_BothServos
 15588 ;;		_PortTestA5
 15589 ;;		_PusherTest
 15590 ;;		_SpeedTest
 15591 ;;		_BlockerTest
 15592 ;;		_ToggleTestA5
 15593 ;; This function uses a non-reentrant model
 15594 ;;
 15595                           
 15596                           	psect	text51
 15597  0015D0                     __ptext51:
 15598                           	opt stack 0
 15599  0015D0                     _printf:
 15600                           	opt stack 18
 15601                           
 15602                           ;doprnt.c: 466: va_list ap;
 15603                           ;doprnt.c: 499: signed char c;
 15604                           ;doprnt.c: 501: int width;
 15605                           ;doprnt.c: 506: signed char prec;
 15606                           ;doprnt.c: 508: unsigned char flag;
 15607                           ;doprnt.c: 523: union {
 15608                           ;doprnt.c: 524: unsigned long vd;
 15609                           ;doprnt.c: 525: double integ;
 15610                           ;doprnt.c: 526: } tmpval;
 15611                           ;doprnt.c: 528: unsigned int val;
 15612                           ;doprnt.c: 529: unsigned len;
 15613                           ;doprnt.c: 530: const char * cp;
 15614                           ;doprnt.c: 533: *ap = __va_start();
 15615                           
 15616                           ;incstack = 0
 15617  0015D0  0E90               	movlw	low (?_printf+2)
 15618  0015D2  0100               	movlb	0	; () banked
 15619  0015D4  6FA1               	movwf	printf@ap& (0+255),b
 15620  0015D6  0E00               	movlw	high (?_printf+2)
 15621  0015D8  0100               	movlb	0	; () banked
 15622  0015DA  6FA2               	movwf	(printf@ap+1)& (0+255),b
 15623                           
 15624                           ;doprnt.c: 536: while(c = *f++) {
 15625  0015DC  D205               	goto	l6072
 15626  0015DE                     l5942:
 15627                           
 15628                           ; BSR set to: 0
 15629                           ;doprnt.c: 538: if(c != '%')
 15630  0015DE  0E25               	movlw	37
 15631  0015E0  0100               	movlb	0	; () banked
 15632  0015E2  19A8               	xorwf	printf@c& (0+255),w,b
 15633  0015E4  B4D8               	btfsc	status,2,c
 15634  0015E6  D005               	goto	l5946
 15635                           
 15636                           ; BSR set to: 0
 15637                           ;doprnt.c: 540: {
 15638                           ;doprnt.c: 541: (putch(c) );
 15639  0015E8  0100               	movlb	0	; () banked
 15640  0015EA  51A8               	movf	printf@c& (0+255),w,b
 15641  0015EC  EC20  F028         	call	_putch
 15642                           
 15643                           ;doprnt.c: 542: continue;
 15644  0015F0  D1FB               	goto	l6072
 15645  0015F2                     l5946:
 15646                           
 15647                           ;doprnt.c: 543: }
 15648                           ;doprnt.c: 546: width = 0;
 15649  0015F2  0E00               	movlw	0
 15650  0015F4  0100               	movlb	0	; () banked
 15651  0015F6  6FAA               	movwf	(printf@width+1)& (0+255),b
 15652  0015F8  0E00               	movlw	0
 15653  0015FA  6FA9               	movwf	printf@width& (0+255),b
 15654                           
 15655                           ;doprnt.c: 548: flag = 0;
 15656  0015FC  0E00               	movlw	0
 15657  0015FE  0100               	movlb	0	; () banked
 15658  001600  6FA7               	movwf	printf@flag& (0+255),b
 15659                           
 15660                           ; BSR set to: 0
 15661                           ;doprnt.c: 551: switch(*f) {
 15662                           
 15663                           ;doprnt.c: 550: for(;;) {
 15664  001602  D005               	goto	l5952
 15665  001604                     l5948:
 15666                           
 15667                           ;doprnt.c: 580: flag |= 0x04;
 15668  001604  0100               	movlb	0	; () banked
 15669  001606  85A7               	bsf	printf@flag& (0+255),2,b
 15670                           
 15671                           ;doprnt.c: 581: f++;
 15672  001608  0100               	movlb	0	; () banked
 15673  00160A  4B8E               	infsnz	printf@f& (0+255),f,b
 15674  00160C  2B8F               	incf	(printf@f+1)& (0+255),f,b
 15675  00160E                     l5952:
 15676  00160E  C08E  FFF6         	movff	printf@f,tblptrl
 15677  001612  C08F  FFF7         	movff	printf@f+1,tblptrh
 15678  001616                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 15679  001616  6AF8               	clrf	tblptru,c
 15680  001618                     	endif
 15681  001618                     	if	0	;tblptru may be non-zero
 15682  001618                     	endif
 15683  001618  0008               	tblrd		*
 15684  00161A  50F5               	movf	tablat,w,c
 15685                           
 15686                           ; Switch size 1, requested type "space"
 15687                           ; Number of cases is 1, Range of values is 48 to 48
 15688                           ; switch strategies available:
 15689                           ; Name         Instructions Cycles
 15690                           ; simple_byte            4     3 (average)
 15691                           ;	Chosen strategy is simple_byte
 15692  00161C  0A30               	xorlw	48	; case 48
 15693  00161E  B4D8               	btfsc	status,2,c
 15694  001620  D7F1               	goto	l5948
 15695                           
 15696                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 15697                           
 15698                           ;doprnt.c: 586: }
 15699                           
 15700                           ;doprnt.c: 585: break;
 15701  001622  C08E  FFF6         	movff	printf@f,tblptrl
 15702  001626  C08F  FFF7         	movff	printf@f+1,tblptrh
 15703  00162A                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 15704  00162A  6AF8               	clrf	tblptru,c
 15705  00162C                     	endif
 15706  00162C                     	if	0	;tblptru may be non-zero
 15707  00162C                     	endif
 15708  00162C  0008               	tblrd		*
 15709  00162E  50F5               	movf	tablat,w,c
 15710  001630  EC43  F027         	call	_isdigit
 15711  001634  A0D8               	btfss	status,0,c
 15712  001636  D0D2               	goto	l6000
 15713                           
 15714                           ;doprnt.c: 598: width = 0;
 15715  001638  0E00               	movlw	0
 15716  00163A  0100               	movlb	0	; () banked
 15717  00163C  6FAA               	movwf	(printf@width+1)& (0+255),b
 15718  00163E  0E00               	movlw	0
 15719  001640  6FA9               	movwf	printf@width& (0+255),b
 15720  001642                     l5958:
 15721                           
 15722                           ;doprnt.c: 600: width *= 10;
 15723  001642  C0A9  F080         	movff	printf@width,___wmul@multiplier
 15724  001646  C0AA  F081         	movff	printf@width+1,___wmul@multiplier+1
 15725  00164A  0E00               	movlw	0
 15726  00164C  0100               	movlb	0	; () banked
 15727  00164E  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
 15728  001650  0E0A               	movlw	10
 15729  001652  6F82               	movwf	___wmul@multiplicand& (0+255),b
 15730  001654  ECAD  F025         	call	___wmul	;wreg free
 15731  001658  C080  F0A9         	movff	?___wmul,printf@width
 15732  00165C  C081  F0AA         	movff	?___wmul+1,printf@width+1
 15733                           
 15734                           ;doprnt.c: 601: width += *f++ - '0';
 15735  001660  0ED0               	movlw	208
 15736  001662  0100               	movlb	0	; () banked
 15737  001664  6F9A               	movwf	??_printf& (0+255),b
 15738  001666  0EFF               	movlw	255
 15739  001668  0100               	movlb	0	; () banked
 15740  00166A  6F9B               	movwf	(??_printf+1)& (0+255),b
 15741  00166C  C08E  FFF6         	movff	printf@f,tblptrl
 15742  001670  C08F  FFF7         	movff	printf@f+1,tblptrh
 15743  001674                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 15744  001674  6AF8               	clrf	tblptru,c
 15745  001676                     	endif
 15746  001676                     	if	0	;tblptru may be non-zero
 15747  001676                     	endif
 15748  001676  0008               	tblrd		*
 15749  001678  50F5               	movf	tablat,w,c
 15750  00167A  0100               	movlb	0	; () banked
 15751  00167C  6F9C               	movwf	(??_printf+2)& (0+255),b
 15752  00167E  6B9D               	clrf	(??_printf+3)& (0+255),b
 15753  001680  0100               	movlb	0	; () banked
 15754  001682  519A               	movf	??_printf& (0+255),w,b
 15755  001684  0100               	movlb	0	; () banked
 15756  001686  279C               	addwf	(??_printf+2)& (0+255),f,b
 15757  001688  0100               	movlb	0	; () banked
 15758  00168A  519B               	movf	(??_printf+1)& (0+255),w,b
 15759  00168C  0100               	movlb	0	; () banked
 15760  00168E  239D               	addwfc	(??_printf+3)& (0+255),f,b
 15761  001690  0100               	movlb	0	; () banked
 15762  001692  519C               	movf	(??_printf+2)& (0+255),w,b
 15763  001694  0100               	movlb	0	; () banked
 15764  001696  27A9               	addwf	printf@width& (0+255),f,b
 15765  001698  0100               	movlb	0	; () banked
 15766  00169A  519D               	movf	(??_printf+3)& (0+255),w,b
 15767  00169C  0100               	movlb	0	; () banked
 15768  00169E  23AA               	addwfc	(printf@width+1)& (0+255),f,b
 15769                           
 15770                           ; BSR set to: 0
 15771  0016A0  0100               	movlb	0	; () banked
 15772  0016A2  4B8E               	infsnz	printf@f& (0+255),f,b
 15773  0016A4  2B8F               	incf	(printf@f+1)& (0+255),f,b
 15774                           
 15775                           ; BSR set to: 0
 15776                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 15777  0016A6  C08E  FFF6         	movff	printf@f,tblptrl
 15778  0016AA  C08F  FFF7         	movff	printf@f+1,tblptrh
 15779  0016AE                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 15780  0016AE  6AF8               	clrf	tblptru,c
 15781  0016B0                     	endif
 15782  0016B0                     	if	0	;tblptru may be non-zero
 15783  0016B0                     	endif
 15784  0016B0  0008               	tblrd		*
 15785  0016B2  50F5               	movf	tablat,w,c
 15786  0016B4  EC43  F027         	call	_isdigit
 15787  0016B8  A0D8               	btfss	status,0,c
 15788  0016BA  D090               	goto	l6000
 15789  0016BC  D7C2               	goto	l5958
 15790  0016BE                     l5966:
 15791                           
 15792                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
 15793  0016BE  C0A1  FFD9         	movff	printf@ap,fsr2l
 15794  0016C2  C0A2  FFDA         	movff	printf@ap+1,fsr2h
 15795  0016C6  CFDE F09F          	movff	postinc2,printf@cp
 15796  0016CA  CFDD F0A0          	movff	postdec2,printf@cp+1
 15797  0016CE  0E02               	movlw	2
 15798  0016D0  0100               	movlb	0	; () banked
 15799  0016D2  27A1               	addwf	printf@ap& (0+255),f,b
 15800  0016D4  0E00               	movlw	0
 15801  0016D6  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
 15802                           
 15803                           ; BSR set to: 0
 15804                           ;doprnt.c: 740: if(!cp)
 15805  0016D8  0100               	movlb	0	; () banked
 15806  0016DA  519F               	movf	printf@cp& (0+255),w,b
 15807  0016DC  0100               	movlb	0	; () banked
 15808  0016DE  11A0               	iorwf	(printf@cp+1)& (0+255),w,b
 15809  0016E0  A4D8               	btfss	status,2,c
 15810  0016E2  D006               	goto	l5974
 15811                           
 15812                           ; BSR set to: 0
 15813                           ;doprnt.c: 741: cp = "(null)";
 15814  0016E4  0EB6               	movlw	low STR_126
 15815  0016E6  0100               	movlb	0	; () banked
 15816  0016E8  6F9F               	movwf	printf@cp& (0+255),b
 15817  0016EA  0EFF               	movlw	high STR_126
 15818  0016EC  0100               	movlb	0	; () banked
 15819  0016EE  6FA0               	movwf	(printf@cp+1)& (0+255),b
 15820  0016F0                     l5974:
 15821                           
 15822                           ; BSR set to: 0
 15823                           ;doprnt.c: 745: len = 0;
 15824  0016F0  0E00               	movlw	0
 15825  0016F2  0100               	movlb	0	; () banked
 15826  0016F4  6FA4               	movwf	(printf@len+1)& (0+255),b
 15827  0016F6  0E00               	movlw	0
 15828  0016F8  6FA3               	movwf	printf@len& (0+255),b
 15829                           
 15830                           ;doprnt.c: 746: while(cp[len])
 15831  0016FA  D003               	goto	l5978
 15832  0016FC                     l5976:
 15833                           
 15834                           ;doprnt.c: 747: len++;
 15835  0016FC  0100               	movlb	0	; () banked
 15836  0016FE  4BA3               	infsnz	printf@len& (0+255),f,b
 15837  001700  2BA4               	incf	(printf@len+1)& (0+255),f,b
 15838  001702                     l5978:
 15839                           
 15840                           ; BSR set to: 0
 15841  001702  0100               	movlb	0	; () banked
 15842  001704  51A3               	movf	printf@len& (0+255),w,b
 15843  001706  0100               	movlb	0	; () banked
 15844  001708  259F               	addwf	printf@cp& (0+255),w,b
 15845  00170A  0100               	movlb	0	; () banked
 15846  00170C  6F9A               	movwf	??_printf& (0+255),b
 15847  00170E  0100               	movlb	0	; () banked
 15848  001710  51A4               	movf	(printf@len+1)& (0+255),w,b
 15849  001712  0100               	movlb	0	; () banked
 15850  001714  21A0               	addwfc	(printf@cp+1)& (0+255),w,b
 15851  001716  0100               	movlb	0	; () banked
 15852  001718  6F9B               	movwf	(??_printf+1)& (0+255),b
 15853  00171A  C09A  FFF6         	movff	??_printf,tblptrl
 15854  00171E  C09B  FFF7         	movff	??_printf+1,tblptrh
 15855  001722  0E00               	movlw	low (__mediumconst shr (0+16))
 15856  001724  6EF8               	movwf	tblptru,c
 15857  001726  0E0F               	movlw	(high __ramtop+-1)
 15858  001728  64F7               	cpfsgt	tblptrh,c
 15859  00172A  D003               	bra	u4457
 15860  00172C  0008               	tblrd		*
 15861  00172E  50F5               	movf	tablat,w,c
 15862  001730  D005               	bra	u4450
 15863  001732                     u4457:
 15864  001732  CFF6 FFE9          	movff	tblptrl,fsr0l
 15865  001736  CFF7 FFEA          	movff	tblptrh,fsr0h
 15866  00173A  50EF               	movf	indf0,w,c
 15867  00173C                     u4450:
 15868  00173C  0900               	iorlw	0
 15869  00173E  A4D8               	btfss	status,2,c
 15870  001740  D7DD               	goto	l5976
 15871                           
 15872                           ;doprnt.c: 757: if(width > len)
 15873  001742  0100               	movlb	0	; () banked
 15874  001744  51A9               	movf	printf@width& (0+255),w,b
 15875  001746  0100               	movlb	0	; () banked
 15876  001748  5DA3               	subwf	printf@len& (0+255),w,b
 15877  00174A  0100               	movlb	0	; () banked
 15878  00174C  51AA               	movf	(printf@width+1)& (0+255),w,b
 15879  00174E  0100               	movlb	0	; () banked
 15880  001750  59A4               	subwfb	(printf@len+1)& (0+255),w,b
 15881  001752  B0D8               	btfsc	status,0,c
 15882  001754  D009               	goto	l5984
 15883                           
 15884                           ; BSR set to: 0
 15885                           ;doprnt.c: 758: width -= len;
 15886  001756  0100               	movlb	0	; () banked
 15887  001758  51A3               	movf	printf@len& (0+255),w,b
 15888  00175A  0100               	movlb	0	; () banked
 15889  00175C  5FA9               	subwf	printf@width& (0+255),f,b
 15890  00175E  0100               	movlb	0	; () banked
 15891  001760  51A4               	movf	(printf@len+1)& (0+255),w,b
 15892  001762  0100               	movlb	0	; () banked
 15893  001764  5BAA               	subwfb	(printf@width+1)& (0+255),f,b
 15894  001766  D009               	goto	l5988
 15895  001768                     l5984:
 15896                           
 15897                           ; BSR set to: 0
 15898                           ;doprnt.c: 759: else
 15899                           ;doprnt.c: 760: width = 0;
 15900  001768  0E00               	movlw	0
 15901  00176A  0100               	movlb	0	; () banked
 15902  00176C  6FAA               	movwf	(printf@width+1)& (0+255),b
 15903  00176E  0E00               	movlw	0
 15904  001770  6FA9               	movwf	printf@width& (0+255),b
 15905                           
 15906                           ; BSR set to: 0
 15907                           ;doprnt.c: 764: while(width--)
 15908  001772  D003               	goto	l5988
 15909  001774                     l5986:
 15910                           
 15911                           ; BSR set to: 0
 15912                           ;doprnt.c: 765: (putch(' ') );
 15913  001774  0E20               	movlw	32
 15914  001776  EC20  F028         	call	_putch
 15915  00177A                     l5988:
 15916  00177A  0100               	movlb	0	; () banked
 15917  00177C  07A9               	decf	printf@width& (0+255),f,b
 15918  00177E  A0D8               	btfss	status,0,c
 15919  001780  07AA               	decf	(printf@width+1)& (0+255),f,b
 15920  001782  0100               	movlb	0	; () banked
 15921  001784  29A9               	incf	printf@width& (0+255),w,b
 15922  001786  E1F6               	bnz	l5986
 15923  001788  0100               	movlb	0	; () banked
 15924  00178A  29AA               	incf	(printf@width+1)& (0+255),w,b
 15925  00178C  B4D8               	btfsc	status,2,c
 15926  00178E  D017               	goto	l5994
 15927  001790  D7F1               	goto	l5986
 15928  001792                     l5990:
 15929                           
 15930                           ; BSR set to: 0
 15931                           ;doprnt.c: 768: (putch(*cp++) );
 15932  001792  C09F  FFF6         	movff	printf@cp,tblptrl
 15933  001796  C0A0  FFF7         	movff	printf@cp+1,tblptrh
 15934  00179A  0E00               	movlw	low (__mediumconst shr (0+16))
 15935  00179C  6EF8               	movwf	tblptru,c
 15936  00179E  0E0F               	movlw	(high __ramtop+-1)
 15937  0017A0  64F7               	cpfsgt	tblptrh,c
 15938  0017A2  D003               	bra	u4497
 15939  0017A4  0008               	tblrd		*
 15940  0017A6  50F5               	movf	tablat,w,c
 15941  0017A8  D005               	bra	u4490
 15942  0017AA                     u4497:
 15943  0017AA  CFF6 FFE9          	movff	tblptrl,fsr0l
 15944  0017AE  CFF7 FFEA          	movff	tblptrh,fsr0h
 15945  0017B2  50EF               	movf	indf0,w,c
 15946  0017B4                     u4490:
 15947  0017B4  EC20  F028         	call	_putch
 15948  0017B8  0100               	movlb	0	; () banked
 15949  0017BA  4B9F               	infsnz	printf@cp& (0+255),f,b
 15950  0017BC  2BA0               	incf	(printf@cp+1)& (0+255),f,b
 15951  0017BE                     l5994:
 15952                           
 15953                           ; BSR set to: 0
 15954  0017BE  0100               	movlb	0	; () banked
 15955  0017C0  07A3               	decf	printf@len& (0+255),f,b
 15956  0017C2  A0D8               	btfss	status,0,c
 15957  0017C4  07A4               	decf	(printf@len+1)& (0+255),f,b
 15958  0017C6  0100               	movlb	0	; () banked
 15959  0017C8  29A3               	incf	printf@len& (0+255),w,b
 15960  0017CA  E1E3               	bnz	l5990
 15961  0017CC  0100               	movlb	0	; () banked
 15962  0017CE  29A4               	incf	(printf@len+1)& (0+255),w,b
 15963  0017D0  B4D8               	btfsc	status,2,c
 15964  0017D2  D10A               	goto	l6072
 15965  0017D4  D7DE               	goto	l5990
 15966  0017D6                     l5996:
 15967                           
 15968                           ; BSR set to: 0
 15969                           ;doprnt.c: 818: flag |= 0x40;
 15970  0017D6  0100               	movlb	0	; () banked
 15971  0017D8  8DA7               	bsf	printf@flag& (0+255),6,b
 15972                           
 15973                           ; BSR set to: 0
 15974                           ;doprnt.c: 822: }
 15975                           
 15976                           ;doprnt.c: 819: break;
 15977  0017DA  D01D               	goto	l1366
 15978  0017DC                     l6000:
 15979  0017DC  C08E  FFF6         	movff	printf@f,tblptrl
 15980  0017E0  C08F  FFF7         	movff	printf@f+1,tblptrh
 15981  0017E4  0100               	movlb	0	; () banked
 15982  0017E6  4B8E               	infsnz	printf@f& (0+255),f,b
 15983  0017E8  2B8F               	incf	(printf@f+1)& (0+255),f,b
 15984  0017EA                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 15985  0017EA  6AF8               	clrf	tblptru,c
 15986  0017EC                     	endif
 15987  0017EC                     	if	0	;tblptru may be non-zero
 15988  0017EC                     	endif
 15989  0017EC  0008               	tblrd		*
 15990  0017EE  CFF5 F0A8          	movff	tablat,printf@c
 15991  0017F2  0100               	movlb	0	; () banked
 15992  0017F4  51A8               	movf	printf@c& (0+255),w,b
 15993                           
 15994                           ; Switch size 1, requested type "space"
 15995                           ; Number of cases is 5, Range of values is 0 to 117
 15996                           ; switch strategies available:
 15997                           ; Name         Instructions Cycles
 15998                           ; simple_byte           16     9 (average)
 15999                           ;	Chosen strategy is simple_byte
 16000  0017F6  0A00               	xorlw	0	; case 0
 16001  0017F8  B4D8               	btfsc	status,2,c
 16002  0017FA  0012               	return	
 16003  0017FC  0A64               	xorlw	100	; case 100
 16004  0017FE  B4D8               	btfsc	status,2,c
 16005  001800  D00A               	goto	l1366
 16006  001802  0A0D               	xorlw	13	; case 105
 16007  001804  B4D8               	btfsc	status,2,c
 16008  001806  D007               	goto	l1366
 16009  001808  0A1A               	xorlw	26	; case 115
 16010  00180A  B4D8               	btfsc	status,2,c
 16011  00180C  D758               	goto	l5966
 16012  00180E  0A06               	xorlw	6	; case 117
 16013  001810  B4D8               	btfsc	status,2,c
 16014  001812  D7E1               	goto	l5996
 16015  001814  D0E9               	goto	l6072
 16016  001816                     l1366:
 16017                           
 16018                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
 16019  001816  0100               	movlb	0	; () banked
 16020  001818  BDA7               	btfsc	printf@flag& (0+255),6,b
 16021  00181A  D019               	goto	l6012
 16022                           
 16023                           ; BSR set to: 0
 16024                           ;doprnt.c: 1253: {
 16025                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 16026  00181C  C0A1  FFD9         	movff	printf@ap,fsr2l
 16027  001820  C0A2  FFDA         	movff	printf@ap+1,fsr2h
 16028  001824  CFDE F0A5          	movff	postinc2,printf@val
 16029  001828  CFDD F0A6          	movff	postdec2,printf@val+1
 16030                           
 16031                           ; BSR set to: 0
 16032  00182C  0E02               	movlw	2
 16033  00182E  0100               	movlb	0	; () banked
 16034  001830  27A1               	addwf	printf@ap& (0+255),f,b
 16035  001832  0E00               	movlw	0
 16036  001834  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
 16037                           
 16038                           ; BSR set to: 0
 16039                           ;doprnt.c: 1261: if((int)val < 0) {
 16040  001836  0100               	movlb	0	; () banked
 16041  001838  AFA6               	btfss	(printf@val+1)& (0+255),7,b
 16042  00183A  D016               	goto	l6016
 16043                           
 16044                           ; BSR set to: 0
 16045                           ;doprnt.c: 1262: flag |= 0x03;
 16046  00183C  0E03               	movlw	3
 16047  00183E  0100               	movlb	0	; () banked
 16048  001840  13A7               	iorwf	printf@flag& (0+255),f,b
 16049                           
 16050                           ; BSR set to: 0
 16051                           ;doprnt.c: 1263: val = -val;
 16052  001842  0100               	movlb	0	; () banked
 16053  001844  6DA5               	negf	printf@val& (0+255),b
 16054  001846  1FA6               	comf	(printf@val+1)& (0+255),f,b
 16055  001848  B0D8               	btfsc	status,0,c
 16056  00184A  2BA6               	incf	(printf@val+1)& (0+255),f,b
 16057                           
 16058                           ; BSR set to: 0
 16059                           ;doprnt.c: 1264: }
 16060                           ;doprnt.c: 1266: }
 16061  00184C  D00D               	goto	l6016
 16062  00184E                     l6012:
 16063                           
 16064                           ; BSR set to: 0
 16065                           ;doprnt.c: 1268: else
 16066                           ;doprnt.c: 1273: {
 16067                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 16068  00184E  C0A1  FFD9         	movff	printf@ap,fsr2l
 16069  001852  C0A2  FFDA         	movff	printf@ap+1,fsr2h
 16070  001856  CFDE F0A5          	movff	postinc2,printf@val
 16071  00185A  CFDD F0A6          	movff	postdec2,printf@val+1
 16072                           
 16073                           ; BSR set to: 0
 16074  00185E  0E02               	movlw	2
 16075  001860  0100               	movlb	0	; () banked
 16076  001862  27A1               	addwf	printf@ap& (0+255),f,b
 16077  001864  0E00               	movlw	0
 16078  001866  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
 16079  001868                     l6016:
 16080                           
 16081                           ; BSR set to: 0
 16082                           ;doprnt.c: 1287: }
 16083                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 16084  001868  0E01               	movlw	1
 16085  00186A  0100               	movlb	0	; () banked
 16086  00186C  6FA8               	movwf	printf@c& (0+255),b
 16087  00186E                     l6018:
 16088                           
 16089                           ; BSR set to: 0
 16090  00186E  0E05               	movlw	5
 16091  001870  0100               	movlb	0	; () banked
 16092  001872  19A8               	xorwf	printf@c& (0+255),w,b
 16093  001874  B4D8               	btfsc	status,2,c
 16094  001876  D019               	goto	l6030
 16095                           
 16096                           ; BSR set to: 0
 16097                           ;doprnt.c: 1306: if(val < dpowers[c])
 16098                           
 16099                           ; BSR set to: 0
 16100                           
 16101                           ; BSR set to: 0
 16102  001878  0100               	movlb	0	; () banked
 16103  00187A  51A8               	movf	printf@c& (0+255),w,b
 16104  00187C  0D02               	mullw	2
 16105  00187E  0E00               	movlw	low _dpowers
 16106  001880  24F3               	addwf	prodl,w,c
 16107  001882  6EF6               	movwf	tblptrl,c
 16108  001884  0EFB               	movlw	high _dpowers
 16109  001886  20F4               	addwfc	prodh,w,c
 16110  001888  6EF7               	movwf	tblptrh,c
 16111  00188A                     	if	1	;There are 3 active tblptr bytes
 16112  00188A  6AF8               	clrf	tblptru,c
 16113  00188C  0E00               	movlw	low (__mediumconst shr (0+16))
 16114  00188E  22F8               	addwfc	tblptru,f,c
 16115  001890                     	endif
 16116  001890  0009               	tblrd		*+
 16117  001892  50F5               	movf	tablat,w,c
 16118  001894  0100               	movlb	0	; () banked
 16119  001896  5DA5               	subwf	printf@val& (0+255),w,b
 16120  001898  0009               	tblrd		*+
 16121  00189A  50F5               	movf	tablat,w,c
 16122  00189C  0100               	movlb	0	; () banked
 16123  00189E  59A6               	subwfb	(printf@val+1)& (0+255),w,b
 16124  0018A0  A0D8               	btfss	status,0,c
 16125  0018A2  D003               	goto	l6030
 16126                           
 16127                           ; BSR set to: 0
 16128                           
 16129                           ; BSR set to: 0
 16130                           
 16131                           ; BSR set to: 0
 16132                           ;doprnt.c: 1307: break;
 16133  0018A4  0100               	movlb	0	; () banked
 16134  0018A6  2BA8               	incf	printf@c& (0+255),f,b
 16135  0018A8  D7E2               	goto	l6018
 16136  0018AA                     l6030:
 16137                           
 16138                           ; BSR set to: 0
 16139                           ;doprnt.c: 1345: if(width && flag & 0x03)
 16140  0018AA  0100               	movlb	0	; () banked
 16141  0018AC  51A9               	movf	printf@width& (0+255),w,b
 16142  0018AE  0100               	movlb	0	; () banked
 16143  0018B0  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 16144  0018B2  B4D8               	btfsc	status,2,c
 16145  0018B4  D00B               	goto	l6036
 16146                           
 16147                           ; BSR set to: 0
 16148  0018B6  C0A7  F09A         	movff	printf@flag,??_printf
 16149  0018BA  0E03               	movlw	3
 16150  0018BC  0100               	movlb	0	; () banked
 16151  0018BE  179A               	andwf	??_printf& (0+255),f,b
 16152  0018C0  B4D8               	btfsc	status,2,c
 16153  0018C2  D004               	goto	l6036
 16154                           
 16155                           ; BSR set to: 0
 16156                           ;doprnt.c: 1346: width--;
 16157  0018C4  0100               	movlb	0	; () banked
 16158  0018C6  07A9               	decf	printf@width& (0+255),f,b
 16159  0018C8  A0D8               	btfss	status,0,c
 16160  0018CA  07AA               	decf	(printf@width+1)& (0+255),f,b
 16161  0018CC                     l6036:
 16162                           
 16163                           ; BSR set to: 0
 16164                           ;doprnt.c: 1381: if(width > c)
 16165  0018CC  0E80               	movlw	128
 16166  0018CE  0100               	movlb	0	; () banked
 16167  0018D0  BFA8               	btfsc	printf@c& (0+255),7,b
 16168  0018D2  0E7F               	movlw	127
 16169  0018D4  0100               	movlb	0	; () banked
 16170  0018D6  6F9A               	movwf	??_printf& (0+255),b
 16171  0018D8  0100               	movlb	0	; () banked
 16172  0018DA  51A9               	movf	printf@width& (0+255),w,b
 16173  0018DC  0100               	movlb	0	; () banked
 16174  0018DE  5DA8               	subwf	printf@c& (0+255),w,b
 16175  0018E0  0100               	movlb	0	; () banked
 16176  0018E2  51AA               	movf	(printf@width+1)& (0+255),w,b
 16177  0018E4  0A80               	xorlw	128
 16178  0018E6  0100               	movlb	0	; () banked
 16179  0018E8  599A               	subwfb	??_printf& (0+255),w,b
 16180  0018EA  B0D8               	btfsc	status,0,c
 16181  0018EC  D00B               	goto	l6040
 16182                           
 16183                           ; BSR set to: 0
 16184                           ;doprnt.c: 1382: width -= c;
 16185  0018EE  0100               	movlb	0	; () banked
 16186  0018F0  51A8               	movf	printf@c& (0+255),w,b
 16187  0018F2  0100               	movlb	0	; () banked
 16188  0018F4  5FA9               	subwf	printf@width& (0+255),f,b
 16189  0018F6  0E00               	movlw	0
 16190  0018F8  0100               	movlb	0	; () banked
 16191  0018FA  BFA8               	btfsc	printf@c& (0+255),7,b
 16192  0018FC  0EFF               	movlw	255
 16193  0018FE  0100               	movlb	0	; () banked
 16194  001900  5BAA               	subwfb	(printf@width+1)& (0+255),f,b
 16195  001902  D005               	goto	l6042
 16196  001904                     l6040:
 16197                           
 16198                           ; BSR set to: 0
 16199                           ;doprnt.c: 1383: else
 16200                           ;doprnt.c: 1384: width = 0;
 16201  001904  0E00               	movlw	0
 16202  001906  0100               	movlb	0	; () banked
 16203  001908  6FAA               	movwf	(printf@width+1)& (0+255),b
 16204  00190A  0E00               	movlw	0
 16205  00190C  6FA9               	movwf	printf@width& (0+255),b
 16206  00190E                     l6042:
 16207                           
 16208                           ; BSR set to: 0
 16209                           ;doprnt.c: 1387: if(flag & 0x04) {
 16210  00190E  0100               	movlb	0	; () banked
 16211  001910  A5A7               	btfss	printf@flag& (0+255),2,b
 16212  001912  D018               	goto	l6054
 16213                           
 16214                           ; BSR set to: 0
 16215                           ;doprnt.c: 1392: if(flag & 0x03)
 16216  001914  C0A7  F09A         	movff	printf@flag,??_printf
 16217  001918  0E03               	movlw	3
 16218  00191A  0100               	movlb	0	; () banked
 16219  00191C  179A               	andwf	??_printf& (0+255),f,b
 16220  00191E  B4D8               	btfsc	status,2,c
 16221  001920  D003               	goto	l6048
 16222                           
 16223                           ; BSR set to: 0
 16224                           ;doprnt.c: 1393: (putch('-') );
 16225  001922  0E2D               	movlw	45
 16226  001924  EC20  F028         	call	_putch
 16227  001928                     l6048:
 16228                           
 16229                           ;doprnt.c: 1415: if(width)
 16230  001928  0100               	movlb	0	; () banked
 16231  00192A  51A9               	movf	printf@width& (0+255),w,b
 16232  00192C  0100               	movlb	0	; () banked
 16233  00192E  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 16234  001930  B4D8               	btfsc	status,2,c
 16235  001932  D025               	goto	l6064
 16236                           
 16237                           ; BSR set to: 0
 16238                           ;doprnt.c: 1417: (putch('0') );
 16239                           
 16240                           ; BSR set to: 0
 16241                           
 16242                           ;doprnt.c: 1416: do
 16243  001934  0E30               	movlw	48
 16244  001936  EC20  F028         	call	_putch
 16245                           
 16246                           ;doprnt.c: 1418: while(--width);
 16247  00193A  0100               	movlb	0	; () banked
 16248  00193C  07A9               	decf	printf@width& (0+255),f,b
 16249  00193E  A0D8               	btfss	status,0,c
 16250  001940  07AA               	decf	(printf@width+1)& (0+255),f,b
 16251  001942  D7F2               	goto	l6048
 16252  001944                     l6054:
 16253                           
 16254                           ; BSR set to: 0
 16255                           ;doprnt.c: 1422: {
 16256                           ;doprnt.c: 1424: if(width
 16257                           ;doprnt.c: 1428: )
 16258  001944  0100               	movlb	0	; () banked
 16259  001946  51A9               	movf	printf@width& (0+255),w,b
 16260  001948  0100               	movlb	0	; () banked
 16261  00194A  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 16262  00194C  B4D8               	btfsc	status,2,c
 16263  00194E  D00D               	goto	l6060
 16264  001950                     l6056:
 16265                           
 16266                           ; BSR set to: 0
 16267                           ;doprnt.c: 1430: (putch(' ') );
 16268  001950  0E20               	movlw	32
 16269  001952  EC20  F028         	call	_putch
 16270                           
 16271                           ;doprnt.c: 1431: while(--width);
 16272  001956  0100               	movlb	0	; () banked
 16273  001958  07A9               	decf	printf@width& (0+255),f,b
 16274  00195A  A0D8               	btfss	status,0,c
 16275  00195C  07AA               	decf	(printf@width+1)& (0+255),f,b
 16276  00195E  0100               	movlb	0	; () banked
 16277  001960  51A9               	movf	printf@width& (0+255),w,b
 16278  001962  0100               	movlb	0	; () banked
 16279  001964  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 16280  001966  A4D8               	btfss	status,2,c
 16281  001968  D7F3               	goto	l6056
 16282  00196A                     l6060:
 16283                           
 16284                           ; BSR set to: 0
 16285                           ;doprnt.c: 1438: if(flag & 0x03)
 16286  00196A  C0A7  F09A         	movff	printf@flag,??_printf
 16287  00196E  0E03               	movlw	3
 16288  001970  0100               	movlb	0	; () banked
 16289  001972  179A               	andwf	??_printf& (0+255),f,b
 16290  001974  B4D8               	btfsc	status,2,c
 16291  001976  D003               	goto	l6064
 16292                           
 16293                           ; BSR set to: 0
 16294                           ;doprnt.c: 1439: (putch('-') );
 16295  001978  0E2D               	movlw	45
 16296  00197A  EC20  F028         	call	_putch
 16297  00197E                     l6064:
 16298                           
 16299                           ;doprnt.c: 1469: }
 16300                           ;doprnt.c: 1472: prec = c;
 16301  00197E  C0A8  F09E         	movff	printf@c,printf@prec
 16302                           
 16303                           ;doprnt.c: 1474: while(prec--) {
 16304  001982  D02C               	goto	l6070
 16305  001984                     l6066:
 16306                           
 16307                           ;doprnt.c: 1478: {
 16308                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 16309  001984  0100               	movlb	0	; () banked
 16310  001986  519E               	movf	printf@prec& (0+255),w,b
 16311  001988  0D02               	mullw	2
 16312  00198A  0E00               	movlw	low _dpowers
 16313  00198C  24F3               	addwf	prodl,w,c
 16314  00198E  6EF6               	movwf	tblptrl,c
 16315  001990  0EFB               	movlw	high _dpowers
 16316  001992  20F4               	addwfc	prodh,w,c
 16317  001994  6EF7               	movwf	tblptrh,c
 16318  001996                     	if	1	;There are 3 active tblptr bytes
 16319  001996  6AF8               	clrf	tblptru,c
 16320  001998  0E00               	movlw	low (__mediumconst shr (0+16))
 16321  00199A  22F8               	addwfc	tblptru,f,c
 16322  00199C                     	endif
 16323  00199C  0009               	tblrd		*+
 16324  00199E  CFF5 F082          	movff	tablat,___lwdiv@divisor
 16325  0019A2  000A               	tblrd		*-
 16326  0019A4  CFF5 F083          	movff	tablat,___lwdiv@divisor+1
 16327  0019A8  C0A5  F080         	movff	printf@val,___lwdiv@dividend
 16328  0019AC  C0A6  F081         	movff	printf@val+1,___lwdiv@dividend+1
 16329  0019B0  EC48  F022         	call	___lwdiv	;wreg free
 16330  0019B4  C080  F087         	movff	?___lwdiv,___lwmod@dividend
 16331  0019B8  C081  F088         	movff	?___lwdiv+1,___lwmod@dividend+1
 16332  0019BC  0E00               	movlw	0
 16333  0019BE  0100               	movlb	0	; () banked
 16334  0019C0  6F8A               	movwf	(___lwmod@divisor+1)& (0+255),b
 16335  0019C2  0E0A               	movlw	10
 16336  0019C4  6F89               	movwf	___lwmod@divisor& (0+255),b
 16337  0019C6  EC65  F023         	call	___lwmod	;wreg free
 16338  0019CA  0100               	movlb	0	; () banked
 16339  0019CC  5187               	movf	?___lwmod& (0+255),w,b
 16340  0019CE  0F30               	addlw	48
 16341  0019D0  0100               	movlb	0	; () banked
 16342  0019D2  6FA8               	movwf	printf@c& (0+255),b
 16343                           
 16344                           ; BSR set to: 0
 16345                           ;doprnt.c: 1523: }
 16346                           ;doprnt.c: 1524: (putch(c) );
 16347  0019D4  0100               	movlb	0	; () banked
 16348  0019D6  51A8               	movf	printf@c& (0+255),w,b
 16349  0019D8  EC20  F028         	call	_putch
 16350  0019DC                     l6070:
 16351  0019DC  0100               	movlb	0	; () banked
 16352  0019DE  079E               	decf	printf@prec& (0+255),f,b
 16353  0019E0  0100               	movlb	0	; () banked
 16354  0019E2  299E               	incf	printf@prec& (0+255),w,b
 16355  0019E4  A4D8               	btfss	status,2,c
 16356  0019E6  D7CE               	goto	l6066
 16357  0019E8                     l6072:
 16358  0019E8  C08E  FFF6         	movff	printf@f,tblptrl
 16359  0019EC  C08F  FFF7         	movff	printf@f+1,tblptrh
 16360  0019F0  0100               	movlb	0	; () banked
 16361  0019F2  4B8E               	infsnz	printf@f& (0+255),f,b
 16362  0019F4  2B8F               	incf	(printf@f+1)& (0+255),f,b
 16363  0019F6                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 16364  0019F6  6AF8               	clrf	tblptru,c
 16365  0019F8                     	endif
 16366  0019F8                     	if	0	;tblptru may be non-zero
 16367  0019F8                     	endif
 16368  0019F8  0008               	tblrd		*
 16369  0019FA  CFF5 F0A8          	movff	tablat,printf@c
 16370  0019FE  0100               	movlb	0	; () banked
 16371  001A00  51A8               	movf	printf@c& (0+255),w,b
 16372  001A02  B4D8               	btfsc	status,2,c
 16373  001A04  0012               	return	
 16374  001A06  D5EB               	goto	l5942
 16375  001A08                     __end_of_printf:
 16376                           	opt stack 0
 16377                           tblptru	equ	0xFF8
 16378                           tblptrh	equ	0xFF7
 16379                           tblptrl	equ	0xFF6
 16380                           tablat	equ	0xFF5
 16381                           prodh	equ	0xFF4
 16382                           prodl	equ	0xFF3
 16383                           intcon	equ	0xFF2
 16384                           intcon2	equ	0xFF1
 16385                           intcon3	equ	0xFF0
 16386                           indf0	equ	0xFEF
 16387                           postinc0	equ	0xFEE
 16388                           fsr0h	equ	0xFEA
 16389                           fsr0l	equ	0xFE9
 16390                           wreg	equ	0xFE8
 16391                           postdec1	equ	0xFE5
 16392                           fsr1l	equ	0xFE1
 16393                           indf2	equ	0xFDF
 16394                           postinc2	equ	0xFDE
 16395                           postdec2	equ	0xFDD
 16396                           fsr2h	equ	0xFDA
 16397                           fsr2l	equ	0xFD9
 16398                           status	equ	0xFD8
 16399                           
 16400 ;; *************** function _putch *****************
 16401 ;; Defined at:
 16402 ;;		line 20 in file "lcd.c"
 16403 ;; Parameters:    Size  Location     Type
 16404 ;;  data            1    wreg     unsigned char 
 16405 ;; Auto vars:     Size  Location     Type
 16406 ;;  data            1    2[BANK0 ] unsigned char 
 16407 ;; Return value:  Size  Location     Type
 16408 ;;                  1    wreg      void 
 16409 ;; Registers used:
 16410 ;;		wreg, status,2, status,0, cstack
 16411 ;; Tracked objects:
 16412 ;;		On entry : 0/0
 16413 ;;		On exit  : 0/0
 16414 ;;		Unchanged: 0/0
 16415 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16416 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16417 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16418 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16419 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16420 ;;Total ram usage:        1 bytes
 16421 ;; Hardware stack levels used:    1
 16422 ;; Hardware stack levels required when called:    8
 16423 ;; This function calls:
 16424 ;;		_lcdNibble
 16425 ;; This function is called by:
 16426 ;;		_printf
 16427 ;; This function uses a non-reentrant model
 16428 ;;
 16429                           
 16430                           	psect	text52
 16431  005040                     __ptext52:
 16432                           	opt stack 0
 16433  005040                     _putch:
 16434                           	opt stack 18
 16435                           
 16436                           ;incstack = 0
 16437                           ;putch@data stored from wreg
 16438  005040  0100               	movlb	0	; () banked
 16439  005042  6F82               	movwf	putch@data& (0+255),b
 16440                           
 16441                           ;lcd.c: 21: LATDbits.LATD2 = 1;
 16442  005044  848C               	bsf	3980,2,c	;volatile
 16443                           
 16444                           ;lcd.c: 22: lcdNibble(data);
 16445  005046  0100               	movlb	0	; () banked
 16446  005048  5182               	movf	putch@data& (0+255),w,b
 16447  00504A  EC31  F023         	call	_lcdNibble
 16448  00504E  0012               	return		;funcret
 16449  005050                     __end_of_putch:
 16450                           	opt stack 0
 16451                           tblptru	equ	0xFF8
 16452                           tblptrh	equ	0xFF7
 16453                           tblptrl	equ	0xFF6
 16454                           tablat	equ	0xFF5
 16455                           prodh	equ	0xFF4
 16456                           prodl	equ	0xFF3
 16457                           intcon	equ	0xFF2
 16458                           intcon2	equ	0xFF1
 16459                           intcon3	equ	0xFF0
 16460                           indf0	equ	0xFEF
 16461                           postinc0	equ	0xFEE
 16462                           fsr0h	equ	0xFEA
 16463                           fsr0l	equ	0xFE9
 16464                           wreg	equ	0xFE8
 16465                           postdec1	equ	0xFE5
 16466                           fsr1l	equ	0xFE1
 16467                           indf2	equ	0xFDF
 16468                           postinc2	equ	0xFDE
 16469                           postdec2	equ	0xFDD
 16470                           fsr2h	equ	0xFDA
 16471                           fsr2l	equ	0xFD9
 16472                           status	equ	0xFD8
 16473                           
 16474 ;; *************** function _isdigit *****************
 16475 ;; Defined at:
 16476 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
 16477 ;; Parameters:    Size  Location     Type
 16478 ;;  c               1    wreg     unsigned char 
 16479 ;; Auto vars:     Size  Location     Type
 16480 ;;  c               1    2[BANK0 ] unsigned char 
 16481 ;; Return value:  Size  Location     Type
 16482 ;;		None               void
 16483 ;; Registers used:
 16484 ;;		wreg, status,2, status,0
 16485 ;; Tracked objects:
 16486 ;;		On entry : 0/0
 16487 ;;		On exit  : 0/0
 16488 ;;		Unchanged: 0/0
 16489 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16490 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16491 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16492 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16493 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16494 ;;Total ram usage:        3 bytes
 16495 ;; Hardware stack levels used:    1
 16496 ;; Hardware stack levels required when called:    7
 16497 ;; This function calls:
 16498 ;;		Nothing
 16499 ;; This function is called by:
 16500 ;;		_printf
 16501 ;; This function uses a non-reentrant model
 16502 ;;
 16503                           
 16504                           	psect	text53
 16505  004E86                     __ptext53:
 16506                           	opt stack 0
 16507  004E86                     _isdigit:
 16508                           	opt stack 19
 16509                           
 16510                           ;incstack = 0
 16511                           ;isdigit@c stored from wreg
 16512  004E86  0100               	movlb	0	; () banked
 16513  004E88  6F82               	movwf	isdigit@c& (0+255),b
 16514  004E8A  0E00               	movlw	0
 16515  004E8C  0100               	movlb	0	; () banked
 16516  004E8E  6F81               	movwf	_isdigit$1977& (0+255),b
 16517                           
 16518                           ; BSR set to: 0
 16519  004E90  0E3A               	movlw	58
 16520  004E92  0100               	movlb	0	; () banked
 16521  004E94  6182               	cpfslt	isdigit@c& (0+255),b
 16522  004E96  D007               	goto	l5790
 16523                           
 16524                           ; BSR set to: 0
 16525  004E98  0E2F               	movlw	47
 16526  004E9A  0100               	movlb	0	; () banked
 16527  004E9C  6582               	cpfsgt	isdigit@c& (0+255),b
 16528  004E9E  D003               	goto	l5790
 16529                           
 16530                           ; BSR set to: 0
 16531  004EA0  0E01               	movlw	1
 16532  004EA2  0100               	movlb	0	; () banked
 16533  004EA4  6F81               	movwf	_isdigit$1977& (0+255),b
 16534  004EA6                     l5790:
 16535                           
 16536                           ; BSR set to: 0
 16537  004EA6  C081  F080         	movff	_isdigit$1977,??_isdigit
 16538  004EAA  0100               	movlb	0	; () banked
 16539  004EAC  3180               	rrcf	??_isdigit& (0+255),w,b
 16540  004EAE  0012               	return	
 16541  004EB0                     __end_of_isdigit:
 16542                           	opt stack 0
 16543                           tblptru	equ	0xFF8
 16544                           tblptrh	equ	0xFF7
 16545                           tblptrl	equ	0xFF6
 16546                           tablat	equ	0xFF5
 16547                           prodh	equ	0xFF4
 16548                           prodl	equ	0xFF3
 16549                           intcon	equ	0xFF2
 16550                           intcon2	equ	0xFF1
 16551                           intcon3	equ	0xFF0
 16552                           indf0	equ	0xFEF
 16553                           postinc0	equ	0xFEE
 16554                           fsr0h	equ	0xFEA
 16555                           fsr0l	equ	0xFE9
 16556                           wreg	equ	0xFE8
 16557                           postdec1	equ	0xFE5
 16558                           fsr1l	equ	0xFE1
 16559                           indf2	equ	0xFDF
 16560                           postinc2	equ	0xFDE
 16561                           postdec2	equ	0xFDD
 16562                           fsr2h	equ	0xFDA
 16563                           fsr2l	equ	0xFD9
 16564                           status	equ	0xFD8
 16565                           
 16566 ;; *************** function ___wmul *****************
 16567 ;; Defined at:
 16568 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
 16569 ;; Parameters:    Size  Location     Type
 16570 ;;  multiplier      2    0[BANK0 ] unsigned int 
 16571 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 16572 ;; Auto vars:     Size  Location     Type
 16573 ;;  product         2    4[BANK0 ] unsigned int 
 16574 ;; Return value:  Size  Location     Type
 16575 ;;                  2    0[BANK0 ] unsigned int 
 16576 ;; Registers used:
 16577 ;;		wreg, status,2, status,0, prodl, prodh
 16578 ;; Tracked objects:
 16579 ;;		On entry : 0/0
 16580 ;;		On exit  : 0/0
 16581 ;;		Unchanged: 0/0
 16582 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16583 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16584 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16585 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16586 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16587 ;;Total ram usage:        6 bytes
 16588 ;; Hardware stack levels used:    1
 16589 ;; Hardware stack levels required when called:    7
 16590 ;; This function calls:
 16591 ;;		Nothing
 16592 ;; This function is called by:
 16593 ;;		_printf
 16594 ;; This function uses a non-reentrant model
 16595 ;;
 16596                           
 16597                           	psect	text54
 16598  004B5A                     __ptext54:
 16599                           	opt stack 0
 16600  004B5A                     ___wmul:
 16601                           	opt stack 19
 16602                           
 16603                           ; BSR set to: 0
 16604                           ;incstack = 0
 16605  004B5A  0100               	movlb	0	; () banked
 16606  004B5C  5180               	movf	___wmul@multiplier& (0+255),w,b
 16607  004B5E  0100               	movlb	0	; () banked
 16608  004B60  0382               	mulwf	___wmul@multiplicand& (0+255),b
 16609  004B62  CFF3 F084          	movff	prodl,___wmul@product
 16610  004B66  CFF4 F085          	movff	prodh,___wmul@product+1
 16611  004B6A  0100               	movlb	0	; () banked
 16612  004B6C  5180               	movf	___wmul@multiplier& (0+255),w,b
 16613  004B6E  0100               	movlb	0	; () banked
 16614  004B70  0383               	mulwf	(___wmul@multiplicand+1)& (0+255),b
 16615  004B72  50F3               	movf	prodl,w,c
 16616  004B74  0100               	movlb	0	; () banked
 16617  004B76  2785               	addwf	(___wmul@product+1)& (0+255),f,b
 16618  004B78  0100               	movlb	0	; () banked
 16619  004B7A  5181               	movf	(___wmul@multiplier+1)& (0+255),w,b
 16620  004B7C  0100               	movlb	0	; () banked
 16621  004B7E  0382               	mulwf	___wmul@multiplicand& (0+255),b
 16622  004B80  50F3               	movf	prodl,w,c
 16623  004B82  0100               	movlb	0	; () banked
 16624  004B84  2785               	addwf	(___wmul@product+1)& (0+255),f,b
 16625                           
 16626                           ; BSR set to: 0
 16627  004B86  C084  F080         	movff	___wmul@product,?___wmul
 16628  004B8A  C085  F081         	movff	___wmul@product+1,?___wmul+1
 16629  004B8E  0012               	return	
 16630  004B90                     __end_of___wmul:
 16631                           	opt stack 0
 16632                           tblptru	equ	0xFF8
 16633                           tblptrh	equ	0xFF7
 16634                           tblptrl	equ	0xFF6
 16635                           tablat	equ	0xFF5
 16636                           prodh	equ	0xFF4
 16637                           prodl	equ	0xFF3
 16638                           intcon	equ	0xFF2
 16639                           intcon2	equ	0xFF1
 16640                           intcon3	equ	0xFF0
 16641                           indf0	equ	0xFEF
 16642                           postinc0	equ	0xFEE
 16643                           fsr0h	equ	0xFEA
 16644                           fsr0l	equ	0xFE9
 16645                           wreg	equ	0xFE8
 16646                           postdec1	equ	0xFE5
 16647                           fsr1l	equ	0xFE1
 16648                           indf2	equ	0xFDF
 16649                           postinc2	equ	0xFDE
 16650                           postdec2	equ	0xFDD
 16651                           fsr2h	equ	0xFDA
 16652                           fsr2l	equ	0xFD9
 16653                           status	equ	0xFD8
 16654                           
 16655 ;; *************** function ___lwmod *****************
 16656 ;; Defined at:
 16657 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
 16658 ;; Parameters:    Size  Location     Type
 16659 ;;  dividend        2    7[BANK0 ] unsigned int 
 16660 ;;  divisor         2    9[BANK0 ] unsigned int 
 16661 ;; Auto vars:     Size  Location     Type
 16662 ;;  counter         1   11[BANK0 ] unsigned char 
 16663 ;; Return value:  Size  Location     Type
 16664 ;;                  2    7[BANK0 ] unsigned int 
 16665 ;; Registers used:
 16666 ;;		wreg, status,2, status,0
 16667 ;; Tracked objects:
 16668 ;;		On entry : 0/0
 16669 ;;		On exit  : 0/0
 16670 ;;		Unchanged: 0/0
 16671 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16672 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16673 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16674 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16675 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16676 ;;Total ram usage:        5 bytes
 16677 ;; Hardware stack levels used:    1
 16678 ;; Hardware stack levels required when called:    7
 16679 ;; This function calls:
 16680 ;;		Nothing
 16681 ;; This function is called by:
 16682 ;;		_printf
 16683 ;; This function uses a non-reentrant model
 16684 ;;
 16685                           
 16686                           	psect	text55
 16687  0046CA                     __ptext55:
 16688                           	opt stack 0
 16689  0046CA                     ___lwmod:
 16690                           	opt stack 19
 16691                           
 16692                           ; BSR set to: 0
 16693                           ;incstack = 0
 16694  0046CA  0100               	movlb	0	; () banked
 16695  0046CC  5189               	movf	___lwmod@divisor& (0+255),w,b
 16696  0046CE  0100               	movlb	0	; () banked
 16697  0046D0  118A               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
 16698  0046D2  B4D8               	btfsc	status,2,c
 16699  0046D4  D026               	goto	l1823
 16700                           
 16701                           ; BSR set to: 0
 16702  0046D6  0E01               	movlw	1
 16703  0046D8  0100               	movlb	0	; () banked
 16704  0046DA  6F8B               	movwf	___lwmod@counter& (0+255),b
 16705  0046DC  D006               	goto	l5828
 16706  0046DE                     l5826:
 16707                           
 16708                           ; BSR set to: 0
 16709  0046DE  0100               	movlb	0	; () banked
 16710  0046E0  90D8               	bcf	status,0,c
 16711  0046E2  3789               	rlcf	___lwmod@divisor& (0+255),f,b
 16712  0046E4  378A               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
 16713  0046E6  0100               	movlb	0	; () banked
 16714  0046E8  2B8B               	incf	___lwmod@counter& (0+255),f,b
 16715  0046EA                     l5828:
 16716                           
 16717                           ; BSR set to: 0
 16718  0046EA  0100               	movlb	0	; () banked
 16719  0046EC  AF8A               	btfss	(___lwmod@divisor+1)& (0+255),7,b
 16720  0046EE  D7F7               	goto	l5826
 16721  0046F0                     l5830:
 16722                           
 16723                           ; BSR set to: 0
 16724  0046F0  0100               	movlb	0	; () banked
 16725  0046F2  5189               	movf	___lwmod@divisor& (0+255),w,b
 16726  0046F4  0100               	movlb	0	; () banked
 16727  0046F6  5D87               	subwf	___lwmod@dividend& (0+255),w,b
 16728  0046F8  0100               	movlb	0	; () banked
 16729  0046FA  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
 16730  0046FC  0100               	movlb	0	; () banked
 16731  0046FE  5988               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
 16732  004700  A0D8               	btfss	status,0,c
 16733  004702  D008               	goto	l5834
 16734                           
 16735                           ; BSR set to: 0
 16736  004704  0100               	movlb	0	; () banked
 16737  004706  5189               	movf	___lwmod@divisor& (0+255),w,b
 16738  004708  0100               	movlb	0	; () banked
 16739  00470A  5F87               	subwf	___lwmod@dividend& (0+255),f,b
 16740  00470C  0100               	movlb	0	; () banked
 16741  00470E  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
 16742  004710  0100               	movlb	0	; () banked
 16743  004712  5B88               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
 16744  004714                     l5834:
 16745                           
 16746                           ; BSR set to: 0
 16747  004714  0100               	movlb	0	; () banked
 16748  004716  90D8               	bcf	status,0,c
 16749  004718  338A               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
 16750  00471A  3389               	rrcf	___lwmod@divisor& (0+255),f,b
 16751                           
 16752                           ; BSR set to: 0
 16753  00471C  0100               	movlb	0	; () banked
 16754  00471E  2F8B               	decfsz	___lwmod@counter& (0+255),f,b
 16755  004720  D7E7               	goto	l5830
 16756  004722                     l1823:
 16757                           
 16758                           ; BSR set to: 0
 16759  004722  C087  F087         	movff	___lwmod@dividend,?___lwmod
 16760  004726  C088  F088         	movff	___lwmod@dividend+1,?___lwmod+1
 16761                           
 16762                           ; BSR set to: 0
 16763  00472A  0012               	return		;funcret
 16764  00472C                     __end_of___lwmod:
 16765                           	opt stack 0
 16766                           tblptru	equ	0xFF8
 16767                           tblptrh	equ	0xFF7
 16768                           tblptrl	equ	0xFF6
 16769                           tablat	equ	0xFF5
 16770                           prodh	equ	0xFF4
 16771                           prodl	equ	0xFF3
 16772                           intcon	equ	0xFF2
 16773                           intcon2	equ	0xFF1
 16774                           intcon3	equ	0xFF0
 16775                           indf0	equ	0xFEF
 16776                           postinc0	equ	0xFEE
 16777                           fsr0h	equ	0xFEA
 16778                           fsr0l	equ	0xFE9
 16779                           wreg	equ	0xFE8
 16780                           postdec1	equ	0xFE5
 16781                           fsr1l	equ	0xFE1
 16782                           indf2	equ	0xFDF
 16783                           postinc2	equ	0xFDE
 16784                           postdec2	equ	0xFDD
 16785                           fsr2h	equ	0xFDA
 16786                           fsr2l	equ	0xFD9
 16787                           status	equ	0xFD8
 16788                           
 16789 ;; *************** function ___lwdiv *****************
 16790 ;; Defined at:
 16791 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
 16792 ;; Parameters:    Size  Location     Type
 16793 ;;  dividend        2    0[BANK0 ] unsigned int 
 16794 ;;  divisor         2    2[BANK0 ] unsigned int 
 16795 ;; Auto vars:     Size  Location     Type
 16796 ;;  quotient        2    4[BANK0 ] unsigned int 
 16797 ;;  counter         1    6[BANK0 ] unsigned char 
 16798 ;; Return value:  Size  Location     Type
 16799 ;;                  2    0[BANK0 ] unsigned int 
 16800 ;; Registers used:
 16801 ;;		wreg, status,2, status,0
 16802 ;; Tracked objects:
 16803 ;;		On entry : 0/0
 16804 ;;		On exit  : 0/0
 16805 ;;		Unchanged: 0/0
 16806 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16807 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16808 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16809 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16810 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16811 ;;Total ram usage:        7 bytes
 16812 ;; Hardware stack levels used:    1
 16813 ;; Hardware stack levels required when called:    7
 16814 ;; This function calls:
 16815 ;;		Nothing
 16816 ;; This function is called by:
 16817 ;;		_printf
 16818 ;; This function uses a non-reentrant model
 16819 ;;
 16820                           
 16821                           	psect	text56
 16822  004490                     __ptext56:
 16823                           	opt stack 0
 16824  004490                     ___lwdiv:
 16825                           	opt stack 19
 16826                           
 16827                           ; BSR set to: 0
 16828                           ;incstack = 0
 16829  004490  0E00               	movlw	0
 16830  004492  0100               	movlb	0	; () banked
 16831  004494  6F85               	movwf	(___lwdiv@quotient+1)& (0+255),b
 16832  004496  0E00               	movlw	0
 16833  004498  6F84               	movwf	___lwdiv@quotient& (0+255),b
 16834                           
 16835                           ; BSR set to: 0
 16836  00449A  0100               	movlb	0	; () banked
 16837  00449C  5182               	movf	___lwdiv@divisor& (0+255),w,b
 16838  00449E  0100               	movlb	0	; () banked
 16839  0044A0  1183               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
 16840  0044A2  B4D8               	btfsc	status,2,c
 16841  0044A4  D02C               	goto	l1813
 16842                           
 16843                           ; BSR set to: 0
 16844  0044A6  0E01               	movlw	1
 16845  0044A8  0100               	movlb	0	; () banked
 16846  0044AA  6F86               	movwf	___lwdiv@counter& (0+255),b
 16847  0044AC  D006               	goto	l5808
 16848  0044AE                     l5806:
 16849                           
 16850                           ; BSR set to: 0
 16851  0044AE  0100               	movlb	0	; () banked
 16852  0044B0  90D8               	bcf	status,0,c
 16853  0044B2  3782               	rlcf	___lwdiv@divisor& (0+255),f,b
 16854  0044B4  3783               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
 16855  0044B6  0100               	movlb	0	; () banked
 16856  0044B8  2B86               	incf	___lwdiv@counter& (0+255),f,b
 16857  0044BA                     l5808:
 16858                           
 16859                           ; BSR set to: 0
 16860  0044BA  0100               	movlb	0	; () banked
 16861  0044BC  AF83               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
 16862  0044BE  D7F7               	goto	l5806
 16863  0044C0                     l5810:
 16864                           
 16865                           ; BSR set to: 0
 16866  0044C0  0100               	movlb	0	; () banked
 16867  0044C2  90D8               	bcf	status,0,c
 16868  0044C4  3784               	rlcf	___lwdiv@quotient& (0+255),f,b
 16869  0044C6  3785               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
 16870                           
 16871                           ; BSR set to: 0
 16872  0044C8  0100               	movlb	0	; () banked
 16873  0044CA  5182               	movf	___lwdiv@divisor& (0+255),w,b
 16874  0044CC  0100               	movlb	0	; () banked
 16875  0044CE  5D80               	subwf	___lwdiv@dividend& (0+255),w,b
 16876  0044D0  0100               	movlb	0	; () banked
 16877  0044D2  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 16878  0044D4  0100               	movlb	0	; () banked
 16879  0044D6  5981               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
 16880  0044D8  A0D8               	btfss	status,0,c
 16881  0044DA  D00A               	goto	l5818
 16882                           
 16883                           ; BSR set to: 0
 16884  0044DC  0100               	movlb	0	; () banked
 16885  0044DE  5182               	movf	___lwdiv@divisor& (0+255),w,b
 16886  0044E0  0100               	movlb	0	; () banked
 16887  0044E2  5F80               	subwf	___lwdiv@dividend& (0+255),f,b
 16888  0044E4  0100               	movlb	0	; () banked
 16889  0044E6  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 16890  0044E8  0100               	movlb	0	; () banked
 16891  0044EA  5B81               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
 16892                           
 16893                           ; BSR set to: 0
 16894  0044EC  0100               	movlb	0	; () banked
 16895  0044EE  8184               	bsf	___lwdiv@quotient& (0+255),0,b
 16896  0044F0                     l5818:
 16897                           
 16898                           ; BSR set to: 0
 16899  0044F0  0100               	movlb	0	; () banked
 16900  0044F2  90D8               	bcf	status,0,c
 16901  0044F4  3383               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
 16902  0044F6  3382               	rrcf	___lwdiv@divisor& (0+255),f,b
 16903                           
 16904                           ; BSR set to: 0
 16905  0044F8  0100               	movlb	0	; () banked
 16906  0044FA  2F86               	decfsz	___lwdiv@counter& (0+255),f,b
 16907  0044FC  D7E1               	goto	l5810
 16908  0044FE                     l1813:
 16909                           
 16910                           ; BSR set to: 0
 16911  0044FE  C084  F080         	movff	___lwdiv@quotient,?___lwdiv
 16912  004502  C085  F081         	movff	___lwdiv@quotient+1,?___lwdiv+1
 16913                           
 16914                           ; BSR set to: 0
 16915  004506  0012               	return		;funcret
 16916  004508                     __end_of___lwdiv:
 16917                           	opt stack 0
 16918                           tblptru	equ	0xFF8
 16919                           tblptrh	equ	0xFF7
 16920                           tblptrl	equ	0xFF6
 16921                           tablat	equ	0xFF5
 16922                           prodh	equ	0xFF4
 16923                           prodl	equ	0xFF3
 16924                           intcon	equ	0xFF2
 16925                           intcon2	equ	0xFF1
 16926                           intcon3	equ	0xFF0
 16927                           indf0	equ	0xFEF
 16928                           postinc0	equ	0xFEE
 16929                           fsr0h	equ	0xFEA
 16930                           fsr0l	equ	0xFE9
 16931                           wreg	equ	0xFE8
 16932                           postdec1	equ	0xFE5
 16933                           fsr1l	equ	0xFE1
 16934                           indf2	equ	0xFDF
 16935                           postinc2	equ	0xFDE
 16936                           postdec2	equ	0xFDD
 16937                           fsr2h	equ	0xFDA
 16938                           fsr2l	equ	0xFD9
 16939                           status	equ	0xFD8
 16940                           
 16941 ;; *************** function _lcdInst *****************
 16942 ;; Defined at:
 16943 ;;		line 15 in file "lcd.c"
 16944 ;; Parameters:    Size  Location     Type
 16945 ;;  data            1    wreg     unsigned char 
 16946 ;; Auto vars:     Size  Location     Type
 16947 ;;  data            1    2[BANK0 ] unsigned char 
 16948 ;; Return value:  Size  Location     Type
 16949 ;;                  1    wreg      void 
 16950 ;; Registers used:
 16951 ;;		wreg, status,2, status,0, cstack
 16952 ;; Tracked objects:
 16953 ;;		On entry : 0/0
 16954 ;;		On exit  : 0/0
 16955 ;;		Unchanged: 0/0
 16956 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16957 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16958 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16959 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16960 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16961 ;;Total ram usage:        1 bytes
 16962 ;; Hardware stack levels used:    1
 16963 ;; Hardware stack levels required when called:    8
 16964 ;; This function calls:
 16965 ;;		_lcdNibble
 16966 ;; This function is called by:
 16967 ;;		_UI
 16968 ;;		_change_state_to_menu_start
 16969 ;;		_change_state_to_menu_12
 16970 ;;		_change_state_to_menu_22
 16971 ;;		_initLCD
 16972 ;;		_printRTC
 16973 ;;		_Loading
 16974 ;;		_EEPROM_write
 16975 ;;		_Test
 16976 ;;		_algorithmTest
 16977 ;;		_sensorTest
 16978 ;;		_actuatorTest
 16979 ;;		_BothServos
 16980 ;;		_PortTestA5
 16981 ;;		_PusherTest
 16982 ;;		_SpeedTest
 16983 ;;		_BlockerTest
 16984 ;;		_ToggleTestA5
 16985 ;; This function uses a non-reentrant model
 16986 ;;
 16987                           
 16988                           	psect	text57
 16989  005050                     __ptext57:
 16990                           	opt stack 0
 16991  005050                     _lcdInst:
 16992                           	opt stack 20
 16993                           
 16994                           ; BSR set to: 0
 16995                           ;incstack = 0
 16996                           ;lcdInst@data stored from wreg
 16997  005050  0100               	movlb	0	; () banked
 16998  005052  6F82               	movwf	lcdInst@data& (0+255),b
 16999                           
 17000                           ;lcd.c: 16: LATDbits.LATD2 = 0;
 17001  005054  948C               	bcf	3980,2,c	;volatile
 17002                           
 17003                           ;lcd.c: 17: lcdNibble(data);
 17004  005056  0100               	movlb	0	; () banked
 17005  005058  5182               	movf	lcdInst@data& (0+255),w,b
 17006  00505A  EC31  F023         	call	_lcdNibble
 17007  00505E  0012               	return		;funcret
 17008  005060                     __end_of_lcdInst:
 17009                           	opt stack 0
 17010                           tblptru	equ	0xFF8
 17011                           tblptrh	equ	0xFF7
 17012                           tblptrl	equ	0xFF6
 17013                           tablat	equ	0xFF5
 17014                           prodh	equ	0xFF4
 17015                           prodl	equ	0xFF3
 17016                           intcon	equ	0xFF2
 17017                           intcon2	equ	0xFF1
 17018                           intcon3	equ	0xFF0
 17019                           indf0	equ	0xFEF
 17020                           postinc0	equ	0xFEE
 17021                           fsr0h	equ	0xFEA
 17022                           fsr0l	equ	0xFE9
 17023                           wreg	equ	0xFE8
 17024                           postdec1	equ	0xFE5
 17025                           fsr1l	equ	0xFE1
 17026                           indf2	equ	0xFDF
 17027                           postinc2	equ	0xFDE
 17028                           postdec2	equ	0xFDD
 17029                           fsr2h	equ	0xFDA
 17030                           fsr2l	equ	0xFD9
 17031                           status	equ	0xFD8
 17032                           
 17033 ;; *************** function _lcdNibble *****************
 17034 ;; Defined at:
 17035 ;;		line 25 in file "lcd.c"
 17036 ;; Parameters:    Size  Location     Type
 17037 ;;  data            1    wreg     unsigned char 
 17038 ;; Auto vars:     Size  Location     Type
 17039 ;;  data            1    1[BANK0 ] unsigned char 
 17040 ;;  temp            1    0[BANK0 ] unsigned char 
 17041 ;; Return value:  Size  Location     Type
 17042 ;;                  1    wreg      void 
 17043 ;; Registers used:
 17044 ;;		wreg, status,2, status,0
 17045 ;; Tracked objects:
 17046 ;;		On entry : 0/0
 17047 ;;		On exit  : 0/0
 17048 ;;		Unchanged: 0/0
 17049 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17050 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17051 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17052 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17053 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17054 ;;Total ram usage:        2 bytes
 17055 ;; Hardware stack levels used:    1
 17056 ;; Hardware stack levels required when called:    7
 17057 ;; This function calls:
 17058 ;;		Nothing
 17059 ;; This function is called by:
 17060 ;;		_lcdInst
 17061 ;;		_putch
 17062 ;; This function uses a non-reentrant model
 17063 ;;
 17064                           
 17065                           	psect	text58
 17066  004662                     __ptext58:
 17067                           	opt stack 0
 17068  004662                     _lcdNibble:
 17069                           	opt stack 20
 17070                           
 17071                           ;incstack = 0
 17072                           ;lcdNibble@data stored from wreg
 17073  004662  0100               	movlb	0	; () banked
 17074  004664  6F81               	movwf	lcdNibble@data& (0+255),b
 17075                           
 17076                           ;lcd.c: 27: char temp = data & 0xF0;
 17077  004666  0100               	movlb	0	; () banked
 17078  004668  5181               	movf	lcdNibble@data& (0+255),w,b
 17079  00466A  0BF0               	andlw	240
 17080  00466C  0100               	movlb	0	; () banked
 17081  00466E  6F80               	movwf	lcdNibble@temp& (0+255),b
 17082                           
 17083                           ;lcd.c: 28: LATD = LATD & 0x0F;
 17084  004670  508C               	movf	3980,w,c	;volatile
 17085  004672  0B0F               	andlw	15
 17086  004674  6E8C               	movwf	3980,c	;volatile
 17087                           
 17088                           ;lcd.c: 29: LATD = temp | LATD;
 17089  004676  0100               	movlb	0	; () banked
 17090  004678  5180               	movf	lcdNibble@temp& (0+255),w,b
 17091  00467A  108C               	iorwf	3980,w,c	;volatile
 17092  00467C  6E8C               	movwf	3980,c	;volatile
 17093                           
 17094                           ; BSR set to: 0
 17095                           ;lcd.c: 31: LATDbits.LATD3 = 1;
 17096  00467E  868C               	bsf	3980,3,c	;volatile
 17097                           
 17098                           ; BSR set to: 0
 17099                           ;lcd.c: 32: _delay((unsigned long)((25)*(32000000/4000000.0)));
 17100  004680  0E42               	movlw	66
 17101  004682                     u9777:
 17102  004682  2EE8               	decfsz	wreg,f,c
 17103  004684  D7FE               	bra	u9777
 17104  004686  D000               	nop2	
 17105                           
 17106                           ;lcd.c: 33: LATDbits.LATD3 = 0;
 17107  004688  968C               	bcf	3980,3,c	;volatile
 17108                           
 17109                           ;lcd.c: 34: _delay((unsigned long)((25)*(32000000/4000000.0)));
 17110  00468A  0E42               	movlw	66
 17111  00468C                     u9787:
 17112  00468C  2EE8               	decfsz	wreg,f,c
 17113  00468E  D7FE               	bra	u9787
 17114  004690  D000               	nop2	
 17115                           
 17116                           ;lcd.c: 36: data = data << 4;
 17117  004692  0100               	movlb	0	; () banked
 17118  004694  3981               	swapf	lcdNibble@data& (0+255),w,b
 17119  004696  0BF0               	andlw	240
 17120  004698  0100               	movlb	0	; () banked
 17121  00469A  6F81               	movwf	lcdNibble@data& (0+255),b
 17122                           
 17123                           ;lcd.c: 38: temp = data & 0xF0;
 17124  00469C  0100               	movlb	0	; () banked
 17125  00469E  5181               	movf	lcdNibble@data& (0+255),w,b
 17126  0046A0  0BF0               	andlw	240
 17127  0046A2  0100               	movlb	0	; () banked
 17128  0046A4  6F80               	movwf	lcdNibble@temp& (0+255),b
 17129                           
 17130                           ;lcd.c: 39: LATD = LATD & 0x0F;
 17131  0046A6  508C               	movf	3980,w,c	;volatile
 17132  0046A8  0B0F               	andlw	15
 17133  0046AA  6E8C               	movwf	3980,c	;volatile
 17134                           
 17135                           ;lcd.c: 40: LATD = temp | LATD;
 17136  0046AC  0100               	movlb	0	; () banked
 17137  0046AE  5180               	movf	lcdNibble@temp& (0+255),w,b
 17138  0046B0  108C               	iorwf	3980,w,c	;volatile
 17139  0046B2  6E8C               	movwf	3980,c	;volatile
 17140                           
 17141                           ; BSR set to: 0
 17142                           ;lcd.c: 42: LATDbits.LATD3 = 1;
 17143  0046B4  868C               	bsf	3980,3,c	;volatile
 17144                           
 17145                           ; BSR set to: 0
 17146                           ;lcd.c: 43: _delay((unsigned long)((25)*(32000000/4000000.0)));
 17147  0046B6  0E42               	movlw	66
 17148  0046B8                     u9797:
 17149  0046B8  2EE8               	decfsz	wreg,f,c
 17150  0046BA  D7FE               	bra	u9797
 17151  0046BC  D000               	nop2	
 17152                           
 17153                           ;lcd.c: 44: LATDbits.LATD3 = 0;
 17154  0046BE  968C               	bcf	3980,3,c	;volatile
 17155                           
 17156                           ;lcd.c: 45: _delay((unsigned long)((25)*(32000000/4000000.0)));
 17157  0046C0  0E42               	movlw	66
 17158  0046C2                     u9807:
 17159  0046C2  2EE8               	decfsz	wreg,f,c
 17160  0046C4  D7FE               	bra	u9807
 17161  0046C6  D000               	nop2	
 17162  0046C8  0012               	return		;funcret
 17163  0046CA                     __end_of_lcdNibble:
 17164                           	opt stack 0
 17165                           tblptru	equ	0xFF8
 17166                           tblptrh	equ	0xFF7
 17167                           tblptrl	equ	0xFF6
 17168                           tablat	equ	0xFF5
 17169                           prodh	equ	0xFF4
 17170                           prodl	equ	0xFF3
 17171                           intcon	equ	0xFF2
 17172                           intcon2	equ	0xFF1
 17173                           intcon3	equ	0xFF0
 17174                           indf0	equ	0xFEF
 17175                           postinc0	equ	0xFEE
 17176                           fsr0h	equ	0xFEA
 17177                           fsr0l	equ	0xFE9
 17178                           wreg	equ	0xFE8
 17179                           postdec1	equ	0xFE5
 17180                           fsr1l	equ	0xFE1
 17181                           indf2	equ	0xFDF
 17182                           postinc2	equ	0xFDE
 17183                           postdec2	equ	0xFDD
 17184                           fsr2h	equ	0xFDA
 17185                           fsr2l	equ	0xFD9
 17186                           status	equ	0xFD8
 17187                           
 17188 ;; *************** function _handler *****************
 17189 ;; Defined at:
 17190 ;;		line 16 in file "interruptHandler.c"
 17191 ;; Parameters:    Size  Location     Type
 17192 ;;		None
 17193 ;; Auto vars:     Size  Location     Type
 17194 ;;		None
 17195 ;; Return value:  Size  Location     Type
 17196 ;;                  1    wreg      void 
 17197 ;; Registers used:
 17198 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17199 ;; Tracked objects:
 17200 ;;		On entry : 0/0
 17201 ;;		On exit  : 0/0
 17202 ;;		Unchanged: 0/0
 17203 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17204 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17205 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17206 ;;      Temps:         16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17207 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17208 ;;Total ram usage:       16 bytes
 17209 ;; Hardware stack levels used:    1
 17210 ;; Hardware stack levels required when called:    6
 17211 ;; This function calls:
 17212 ;;		_printSortTimer
 17213 ;;		_updateMenu
 17214 ;; This function is called by:
 17215 ;;		Interrupt level 2
 17216 ;; This function uses a non-reentrant model
 17217 ;;
 17218                           
 17219                           	psect	intcode
 17220  000008                     __pintcode:
 17221                           	opt stack 0
 17222  000008                     _handler:
 17223                           	opt stack 18
 17224                           
 17225                           ;incstack = 0
 17226  000008  827E               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 17227  00000A  EDDF  F01B         	call	int_func,f	;refresh shadow registers
 17228                           tblptru	equ	0xFF8
 17229                           tblptrh	equ	0xFF7
 17230                           tblptrl	equ	0xFF6
 17231                           tablat	equ	0xFF5
 17232                           prodh	equ	0xFF4
 17233                           prodl	equ	0xFF3
 17234                           intcon	equ	0xFF2
 17235                           intcon2	equ	0xFF1
 17236                           intcon3	equ	0xFF0
 17237                           indf0	equ	0xFEF
 17238                           postinc0	equ	0xFEE
 17239                           fsr0h	equ	0xFEA
 17240                           fsr0l	equ	0xFE9
 17241                           wreg	equ	0xFE8
 17242                           postdec1	equ	0xFE5
 17243                           fsr1l	equ	0xFE1
 17244                           indf2	equ	0xFDF
 17245                           postinc2	equ	0xFDE
 17246                           postdec2	equ	0xFDD
 17247                           fsr2h	equ	0xFDA
 17248                           fsr2l	equ	0xFD9
 17249                           status	equ	0xFD8
 17250                           
 17251                           	psect	intcode_body
 17252  0037BE                     __pintcode_body:
 17253                           	opt stack 18
 17254  0037BE                     int_func:
 17255                           	opt stack 18
 17256  0037BE  0006               	pop		; remove dummy address from shadow register refresh
 17257  0037C0  CFFA F04B          	movff	pclath,??_handler+2
 17258  0037C4  CFFB F04C          	movff	pclatu,??_handler+3
 17259  0037C8  CFE9 F04D          	movff	fsr0l,??_handler+4
 17260  0037CC  CFEA F04E          	movff	fsr0h,??_handler+5
 17261  0037D0  CFE1 F04F          	movff	fsr1l,??_handler+6
 17262  0037D4  CFE2 F050          	movff	fsr1h,??_handler+7
 17263  0037D8  CFD9 F051          	movff	fsr2l,??_handler+8
 17264  0037DC  CFDA F052          	movff	fsr2h,??_handler+9
 17265  0037E0  CFF3 F053          	movff	prodl,??_handler+10
 17266  0037E4  CFF4 F054          	movff	prodh,??_handler+11
 17267  0037E8  CFF6 F055          	movff	tblptrl,??_handler+12
 17268  0037EC  CFF7 F056          	movff	tblptrh,??_handler+13
 17269  0037F0  CFF8 F057          	movff	tblptru,??_handler+14
 17270  0037F4  CFF5 F058          	movff	tablat,??_handler+15
 17271                           
 17272                           ;interruptHandler.c: 18: if(INT1IF){
 17273  0037F8  A0F0               	btfss	intcon3,0,c	;volatile
 17274  0037FA  D02B               	goto	i2l8980
 17275                           
 17276                           ;interruptHandler.c: 19: INT1IF = 0;
 17277  0037FC  90F0               	bcf	intcon3,0,c	;volatile
 17278                           
 17279                           ;interruptHandler.c: 20: if(machine_state == UI_state) {
 17280  0037FE  0100               	movlb	0	; () banked
 17281  003800  51FC               	movf	_machine_state& (0+255),w,b
 17282  003802  A4D8               	btfss	status,2,c
 17283  003804  D01B               	goto	i2l8974
 17284                           
 17285                           ; BSR set to: 0
 17286                           ;interruptHandler.c: 21: input = keys[(PORTB & 0xF0) >> 4];
 17287  003806  3881               	swapf	3969,w,c	;volatile
 17288  003808  0B0F               	andlw	15
 17289  00380A  0B0F               	andlw	15
 17290  00380C  6E49               	movwf	??_handler& (0+255),c
 17291  00380E  6A4A               	clrf	(??_handler+1)& (0+255),c
 17292  003810  0EEF               	movlw	low _keys
 17293  003812  2449               	addwf	??_handler,w,c
 17294  003814  6EF6               	movwf	tblptrl,c
 17295  003816  0EFA               	movlw	high _keys
 17296  003818  204A               	addwfc	??_handler+1,w,c
 17297  00381A  6EF7               	movwf	tblptrh,c
 17298  00381C                     	if	1	;There are 3 active tblptr bytes
 17299  00381C  6AF8               	clrf	tblptru,c
 17300  00381E  0E00               	movlw	low (__mediumconst shr (0+16))
 17301  003820  22F8               	addwfc	tblptru,f,c
 17302  003822                     	endif
 17303  003822  0008               	tblrd		*
 17304  003824  CFF5 F07D          	movff	tablat,_input	;volatile
 17305                           
 17306                           ; BSR set to: 0
 17307                           ;interruptHandler.c: 23: if(input == '*'){
 17308  003828  0E2A               	movlw	42
 17309  00382A  187D               	xorwf	_input,w,c	;volatile
 17310  00382C  A4D8               	btfss	status,2,c
 17311  00382E  D004               	goto	i2l8972
 17312                           
 17313                           ; BSR set to: 0
 17314                           ;interruptHandler.c: 24: machine_state = Testing_state;
 17315  003830  0E03               	movlw	3
 17316  003832  0100               	movlb	0	; () banked
 17317  003834  6FFC               	movwf	_machine_state& (0+255),b
 17318                           
 17319                           ;interruptHandler.c: 25: }
 17320  003836  D002               	goto	i2l8974
 17321  003838                     i2l8972:
 17322                           
 17323                           ; BSR set to: 0
 17324                           ;interruptHandler.c: 26: else{
 17325                           ;interruptHandler.c: 27: updateMenu();
 17326  003838  EC61  F013         	call	_updateMenu	;wreg free
 17327  00383C                     i2l8974:
 17328                           
 17329                           ;interruptHandler.c: 28: }
 17330                           ;interruptHandler.c: 29: }
 17331                           ;interruptHandler.c: 30: if(machine_state == Sorting_state){
 17332  00383C  0100               	movlb	0	; () banked
 17333  00383E  05FC               	decf	_machine_state& (0+255),w,b
 17334  003840  A4D8               	btfss	status,2,c
 17335  003842  D007               	goto	i2l8980
 17336                           
 17337                           ; BSR set to: 0
 17338                           ;interruptHandler.c: 31: if(input == '*'){
 17339  003844  0E2A               	movlw	42
 17340  003846  187D               	xorwf	_input,w,c	;volatile
 17341  003848  A4D8               	btfss	status,2,c
 17342  00384A  D003               	goto	i2l8980
 17343                           
 17344                           ; BSR set to: 0
 17345                           ;interruptHandler.c: 32: machine_state = DoneSorting_state;
 17346  00384C  0E02               	movlw	2
 17347  00384E  0100               	movlb	0	; () banked
 17348  003850  6FFC               	movwf	_machine_state& (0+255),b
 17349  003852                     i2l8980:
 17350                           
 17351                           ;interruptHandler.c: 33: }
 17352                           ;interruptHandler.c: 34: }
 17353                           ;interruptHandler.c: 35: }
 17354                           ;interruptHandler.c: 38: if(TMR0IF){
 17355  003852  A4F2               	btfss	intcon,2,c	;volatile
 17356  003854  D00C               	goto	i2l8994
 17357                           
 17358                           ;interruptHandler.c: 39: TMR0IF = 0;
 17359  003856  94F2               	bcf	intcon,2,c	;volatile
 17360                           
 17361                           ;interruptHandler.c: 40: if(machine_state == Sorting_state){
 17362  003858  0100               	movlb	0	; () banked
 17363  00385A  05FC               	decf	_machine_state& (0+255),w,b
 17364  00385C  A4D8               	btfss	status,2,c
 17365  00385E  D007               	goto	i2l8994
 17366                           
 17367                           ; BSR set to: 0
 17368                           ;interruptHandler.c: 41: printSortTimer();
 17369  003860  EC1F  F019         	call	_printSortTimer	;wreg free
 17370                           
 17371                           ;interruptHandler.c: 43: TMR0H = 0b10000101;
 17372  003864  0E85               	movlw	133
 17373  003866  6ED7               	movwf	4055,c	;volatile
 17374                           
 17375                           ;interruptHandler.c: 44: TMR0L = 0b11101110;
 17376  003868  0EEE               	movlw	238
 17377  00386A  6ED6               	movwf	4054,c	;volatile
 17378                           
 17379                           ;interruptHandler.c: 45: TMR0ON = 1;
 17380  00386C  8ED5               	bsf	4053,7,c	;volatile
 17381  00386E                     i2l8994:
 17382                           
 17383                           ;interruptHandler.c: 46: }
 17384                           ;interruptHandler.c: 47: }
 17385                           ;interruptHandler.c: 50: if(TMR1IF){
 17386  00386E  A09E               	btfss	3998,0,c	;volatile
 17387  003870  D024               	goto	i2l9018
 17388                           
 17389                           ;interruptHandler.c: 51: TMR1IF = 0;
 17390  003872  909E               	bcf	3998,0,c	;volatile
 17391                           
 17392                           ;interruptHandler.c: 52: TMR1ON = 0;
 17393  003874  90CD               	bcf	4045,0,c	;volatile
 17394                           
 17395                           ;interruptHandler.c: 53: if(machine_state == Sorting_state){
 17396  003876  0100               	movlb	0	; () banked
 17397  003878  05FC               	decf	_machine_state& (0+255),w,b
 17398  00387A  A4D8               	btfss	status,2,c
 17399  00387C  D01E               	goto	i2l9018
 17400                           
 17401                           ; BSR set to: 0
 17402                           ;interruptHandler.c: 54: if(was_low_1){
 17403  00387E  5079               	movf	_was_low_1,w,c	;volatile
 17404  003880  107A               	iorwf	_was_low_1+1,w,c	;volatile
 17405  003882  B4D8               	btfsc	status,2,c
 17406  003884  D00A               	goto	i2l919
 17407                           
 17408                           ; BSR set to: 0
 17409                           ;interruptHandler.c: 55: LATCbits.LATC1 = 1;
 17410  003886  828B               	bsf	3979,1,c	;volatile
 17411                           
 17412                           ; BSR set to: 0
 17413                           ;interruptHandler.c: 56: was_low_1 = 0;
 17414  003888  0E00               	movlw	0
 17415  00388A  6E7A               	movwf	_was_low_1+1,c	;volatile
 17416  00388C  0E00               	movlw	0
 17417  00388E  6E79               	movwf	_was_low_1,c	;volatile
 17418                           
 17419                           ; BSR set to: 0
 17420                           ;interruptHandler.c: 57: TMR1H = servoTimes[0];
 17421  003890  C11C  FFCF         	movff	_servoTimes,4047	;volatile
 17422                           
 17423                           ; BSR set to: 0
 17424                           ;interruptHandler.c: 58: TMR1L = servoTimes[1];
 17425  003894  C11E  FFCE         	movff	_servoTimes+2,4046	;volatile
 17426                           
 17427                           ;interruptHandler.c: 59: }
 17428  003898  D00F               	goto	i2l9016
 17429  00389A                     i2l919:
 17430                           
 17431                           ; BSR set to: 0
 17432                           ;interruptHandler.c: 60: else{
 17433                           ;interruptHandler.c: 61: LATCbits.LATC1 = 0;
 17434  00389A  928B               	bcf	3979,1,c	;volatile
 17435                           
 17436                           ; BSR set to: 0
 17437                           ;interruptHandler.c: 62: was_low_1 = 1;
 17438  00389C  0E00               	movlw	0
 17439  00389E  6E7A               	movwf	_was_low_1+1,c	;volatile
 17440  0038A0  0E01               	movlw	1
 17441  0038A2  6E79               	movwf	_was_low_1,c	;volatile
 17442                           
 17443                           ; BSR set to: 0
 17444                           ;interruptHandler.c: 63: TMR1H = 20000 - servoTimes[0];
 17445  0038A4  0101               	movlb	1	; () banked
 17446  0038A6  511C               	movf	_servoTimes& (0+255),w,b
 17447  0038A8  0800               	sublw	0
 17448  0038AA  0F20               	addlw	32
 17449  0038AC  6ECF               	movwf	4047,c	;volatile
 17450                           
 17451                           ; BSR set to: 1
 17452                           ;interruptHandler.c: 64: TMR1L = 20000 - servoTimes[1];
 17453  0038AE  0101               	movlb	1	; () banked
 17454  0038B0  511E               	movf	(_servoTimes+2)& (0+255),w,b
 17455  0038B2  0800               	sublw	0
 17456  0038B4  0F20               	addlw	32
 17457  0038B6  6ECE               	movwf	4046,c	;volatile
 17458  0038B8                     i2l9016:
 17459                           
 17460                           ;interruptHandler.c: 65: }
 17461                           ;interruptHandler.c: 66: TMR1ON = 1;
 17462  0038B8  80CD               	bsf	4045,0,c	;volatile
 17463  0038BA                     i2l9018:
 17464                           
 17465                           ;interruptHandler.c: 67: }
 17466                           ;interruptHandler.c: 68: }
 17467                           ;interruptHandler.c: 70: if(TMR3IF){
 17468  0038BA  A2A1               	btfss	4001,1,c	;volatile
 17469  0038BC  D024               	goto	i2l925
 17470                           
 17471                           ;interruptHandler.c: 71: TMR3IF = 0;
 17472  0038BE  92A1               	bcf	4001,1,c	;volatile
 17473                           
 17474                           ;interruptHandler.c: 72: TMR3ON = 0;
 17475  0038C0  90B1               	bcf	4017,0,c	;volatile
 17476                           
 17477                           ;interruptHandler.c: 73: if(machine_state == Sorting_state){
 17478  0038C2  0100               	movlb	0	; () banked
 17479  0038C4  05FC               	decf	_machine_state& (0+255),w,b
 17480  0038C6  A4D8               	btfss	status,2,c
 17481  0038C8  D01E               	goto	i2l925
 17482                           
 17483                           ; BSR set to: 0
 17484                           ;interruptHandler.c: 74: if(was_low_3){
 17485  0038CA  507B               	movf	_was_low_3,w,c	;volatile
 17486  0038CC  107C               	iorwf	_was_low_3+1,w,c	;volatile
 17487  0038CE  B4D8               	btfsc	status,2,c
 17488  0038D0  D00A               	goto	i2l923
 17489                           
 17490                           ; BSR set to: 0
 17491                           ;interruptHandler.c: 75: LATCbits.LATC2 = 1;
 17492  0038D2  848B               	bsf	3979,2,c	;volatile
 17493                           
 17494                           ; BSR set to: 0
 17495                           ;interruptHandler.c: 76: was_low_3 = 0;
 17496  0038D4  0E00               	movlw	0
 17497  0038D6  6E7C               	movwf	_was_low_3+1,c	;volatile
 17498  0038D8  0E00               	movlw	0
 17499  0038DA  6E7B               	movwf	_was_low_3,c	;volatile
 17500                           
 17501                           ; BSR set to: 0
 17502                           ;interruptHandler.c: 77: TMR3H = servoTimes[2];
 17503  0038DC  C120  FFB3         	movff	_servoTimes+4,4019	;volatile
 17504                           
 17505                           ; BSR set to: 0
 17506                           ;interruptHandler.c: 78: TMR3L = servoTimes[3];
 17507  0038E0  C122  FFB2         	movff	_servoTimes+6,4018	;volatile
 17508                           
 17509                           ;interruptHandler.c: 79: }
 17510  0038E4  D00F               	goto	i2l9040
 17511  0038E6                     i2l923:
 17512                           
 17513                           ; BSR set to: 0
 17514                           ;interruptHandler.c: 80: else{
 17515                           ;interruptHandler.c: 81: LATCbits.LATC2 = 0;
 17516  0038E6  948B               	bcf	3979,2,c	;volatile
 17517                           
 17518                           ; BSR set to: 0
 17519                           ;interruptHandler.c: 82: was_low_3 = 1;
 17520  0038E8  0E00               	movlw	0
 17521  0038EA  6E7C               	movwf	_was_low_3+1,c	;volatile
 17522  0038EC  0E01               	movlw	1
 17523  0038EE  6E7B               	movwf	_was_low_3,c	;volatile
 17524                           
 17525                           ; BSR set to: 0
 17526                           ;interruptHandler.c: 83: TMR3H = 20000 - servoTimes[2];
 17527  0038F0  0101               	movlb	1	; () banked
 17528  0038F2  5120               	movf	(_servoTimes+4)& (0+255),w,b
 17529  0038F4  0800               	sublw	0
 17530  0038F6  0F20               	addlw	32
 17531  0038F8  6EB3               	movwf	4019,c	;volatile
 17532                           
 17533                           ; BSR set to: 1
 17534                           ;interruptHandler.c: 84: TMR3L = 20000 - servoTimes[3];
 17535  0038FA  0101               	movlb	1	; () banked
 17536  0038FC  5122               	movf	(_servoTimes+6)& (0+255),w,b
 17537  0038FE  0800               	sublw	0
 17538  003900  0F20               	addlw	32
 17539  003902  6EB2               	movwf	4018,c	;volatile
 17540  003904                     i2l9040:
 17541                           
 17542                           ;interruptHandler.c: 85: }
 17543                           ;interruptHandler.c: 86: TMR3ON = 1;
 17544  003904  80B1               	bsf	4017,0,c	;volatile
 17545  003906                     i2l925:
 17546  003906  C058  FFF5         	movff	??_handler+15,tablat
 17547  00390A  C057  FFF8         	movff	??_handler+14,tblptru
 17548  00390E  C056  FFF7         	movff	??_handler+13,tblptrh
 17549  003912  C055  FFF6         	movff	??_handler+12,tblptrl
 17550  003916  C054  FFF4         	movff	??_handler+11,prodh
 17551  00391A  C053  FFF3         	movff	??_handler+10,prodl
 17552  00391E  C052  FFDA         	movff	??_handler+9,fsr2h
 17553  003922  C051  FFD9         	movff	??_handler+8,fsr2l
 17554  003926  C050  FFE2         	movff	??_handler+7,fsr1h
 17555  00392A  C04F  FFE1         	movff	??_handler+6,fsr1l
 17556  00392E  C04E  FFEA         	movff	??_handler+5,fsr0h
 17557  003932  C04D  FFE9         	movff	??_handler+4,fsr0l
 17558  003936  C04C  FFFB         	movff	??_handler+3,pclatu
 17559  00393A  C04B  FFFA         	movff	??_handler+2,pclath
 17560  00393E  927E               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 17561  003940  0011               	retfie		f
 17562  003942                     __end_of_handler:
 17563                           	opt stack 0
 17564                           pclatu	equ	0xFFB
 17565                           pclath	equ	0xFFA
 17566                           tblptru	equ	0xFF8
 17567                           tblptrh	equ	0xFF7
 17568                           tblptrl	equ	0xFF6
 17569                           tablat	equ	0xFF5
 17570                           prodh	equ	0xFF4
 17571                           prodl	equ	0xFF3
 17572                           intcon	equ	0xFF2
 17573                           intcon2	equ	0xFF1
 17574                           intcon3	equ	0xFF0
 17575                           indf0	equ	0xFEF
 17576                           postinc0	equ	0xFEE
 17577                           fsr0h	equ	0xFEA
 17578                           fsr0l	equ	0xFE9
 17579                           wreg	equ	0xFE8
 17580                           postdec1	equ	0xFE5
 17581                           fsr1h	equ	0xFE2
 17582                           fsr1l	equ	0xFE1
 17583                           indf2	equ	0xFDF
 17584                           postinc2	equ	0xFDE
 17585                           postdec2	equ	0xFDD
 17586                           fsr2h	equ	0xFDA
 17587                           fsr2l	equ	0xFD9
 17588                           status	equ	0xFD8
 17589                           
 17590 ;; *************** function _updateMenu *****************
 17591 ;; Defined at:
 17592 ;;		line 213 in file "UI.c"
 17593 ;; Parameters:    Size  Location     Type
 17594 ;;		None
 17595 ;; Auto vars:     Size  Location     Type
 17596 ;;		None
 17597 ;; Return value:  Size  Location     Type
 17598 ;;                  1    wreg      void 
 17599 ;; Registers used:
 17600 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17601 ;; Tracked objects:
 17602 ;;		On entry : 0/0
 17603 ;;		On exit  : 0/0
 17604 ;;		Unchanged: 0/0
 17605 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17606 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17607 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17608 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17609 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17610 ;;Total ram usage:        2 bytes
 17611 ;; Hardware stack levels used:    1
 17612 ;; Hardware stack levels required when called:    5
 17613 ;; This function calls:
 17614 ;;		_change_state_to_logs_11
 17615 ;;		_change_state_to_logs_12
 17616 ;;		_change_state_to_logs_22
 17617 ;;		_change_state_to_logs_23
 17618 ;;		_change_state_to_logs_33
 17619 ;;		_change_state_to_logs_34
 17620 ;;		_change_state_to_menu_11
 17621 ;;		_change_state_to_menu_23
 17622 ;;		_dispLogs
 17623 ;;		_inputHandler
 17624 ;;		i2_change_state_to_menu_12
 17625 ;;		i2_change_state_to_menu_22
 17626 ;;		i2_change_state_to_menu_start
 17627 ;; This function is called by:
 17628 ;;		_handler
 17629 ;; This function uses a non-reentrant model
 17630 ;;
 17631                           
 17632                           	psect	text60
 17633  0026C2                     __ptext60:
 17634                           	opt stack 0
 17635  0026C2                     _updateMenu:
 17636                           	opt stack 18
 17637                           
 17638                           ;UI.c: 214: up = 0; down = 0; enter = 0; back = 0;
 17639                           
 17640                           ;incstack = 0
 17641  0026C2  0E00               	movlw	0
 17642  0026C4  6E78               	movwf	_up+1,c
 17643  0026C6  0E00               	movlw	0
 17644  0026C8  6E77               	movwf	_up,c
 17645  0026CA  0E00               	movlw	0
 17646  0026CC  6E62               	movwf	_down+1,c
 17647  0026CE  0E00               	movlw	0
 17648  0026D0  6E61               	movwf	_down,c
 17649  0026D2  0E00               	movlw	0
 17650  0026D4  6E64               	movwf	_enter+1,c
 17651  0026D6  0E00               	movlw	0
 17652  0026D8  6E63               	movwf	_enter,c
 17653  0026DA  0E00               	movlw	0
 17654  0026DC  6E5A               	movwf	_back+1,c
 17655  0026DE  0E00               	movlw	0
 17656  0026E0  6E59               	movwf	_back,c
 17657                           
 17658                           ;UI.c: 215: (INTCONbits.GIE = 0);
 17659  0026E2  9EF2               	bcf	intcon,7,c	;volatile
 17660                           
 17661                           ;UI.c: 217: if (inputHandler()
 17662                           ;UI.c: 220: ){
 17663  0026E4  EC2A  F01A         	call	_inputHandler	;wreg free
 17664  0026E8  502A               	movf	?_inputHandler,w,c
 17665  0026EA  102B               	iorwf	?_inputHandler+1,w,c
 17666  0026EC  A4D8               	btfss	status,2,c
 17667  0026EE  D112               	goto	i2l8698
 17668  0026F0  D146               	goto	i2l257
 17669  0026F2                     i2l8550:
 17670                           
 17671                           ;UI.c: 224: change_state_to_menu_11();
 17672  0026F2  EC42  F026         	call	_change_state_to_menu_11	;wreg free
 17673                           
 17674                           ;UI.c: 225: break;
 17675  0026F6  D143               	goto	i2l257
 17676  0026F8                     i2l8552:
 17677                           
 17678                           ;UI.c: 228: if(up){
 17679  0026F8  5077               	movf	_up,w,c
 17680  0026FA  1078               	iorwf	_up+1,w,c
 17681  0026FC  B4D8               	btfsc	status,2,c
 17682  0026FE  D003               	goto	i2l8556
 17683                           
 17684                           ;UI.c: 229: change_state_to_menu_23();
 17685  002700  EC2A  F026         	call	_change_state_to_menu_23	;wreg free
 17686                           
 17687                           ;UI.c: 230: }
 17688  002704  D13C               	goto	i2l257
 17689  002706                     i2l8556:
 17690                           
 17691                           ;UI.c: 231: else if(down){
 17692  002706  5061               	movf	_down,w,c
 17693  002708  1062               	iorwf	_down+1,w,c
 17694  00270A  B4D8               	btfsc	status,2,c
 17695  00270C  D003               	goto	i2l8560
 17696                           
 17697                           ;UI.c: 232: change_state_to_menu_12();
 17698  00270E  EC12  F026         	call	i2_change_state_to_menu_12	;wreg free
 17699                           
 17700                           ;UI.c: 233: }
 17701  002712  D135               	goto	i2l257
 17702  002714                     i2l8560:
 17703                           
 17704                           ;UI.c: 234: else if(enter){
 17705  002714  5063               	movf	_enter,w,c
 17706  002716  1064               	iorwf	_enter+1,w,c
 17707  002718  B4D8               	btfsc	status,2,c
 17708  00271A  D131               	goto	i2l257
 17709                           
 17710                           ;UI.c: 235: change_state_to_menu_start();
 17711  00271C  EC6C  F027         	call	i2_change_state_to_menu_start	;wreg free
 17712                           
 17713                           ;UI.c: 236: }
 17714                           ;UI.c: 237: break;
 17715  002720  D12E               	goto	i2l257
 17716  002722                     i2l8564:
 17717                           
 17718                           ;UI.c: 240: if(up){
 17719  002722  5077               	movf	_up,w,c
 17720  002724  1078               	iorwf	_up+1,w,c
 17721  002726  B4D8               	btfsc	status,2,c
 17722  002728  D003               	goto	i2l8568
 17723                           
 17724                           ;UI.c: 241: change_state_to_menu_11();
 17725  00272A  EC42  F026         	call	_change_state_to_menu_11	;wreg free
 17726                           
 17727                           ;UI.c: 242: }
 17728  00272E  D127               	goto	i2l257
 17729  002730                     i2l8568:
 17730                           
 17731                           ;UI.c: 243: else if(down){
 17732  002730  5061               	movf	_down,w,c
 17733  002732  1062               	iorwf	_down+1,w,c
 17734  002734  B4D8               	btfsc	status,2,c
 17735  002736  D011               	goto	i2l8584
 17736                           
 17737                           ;UI.c: 244: change_state_to_menu_23();
 17738  002738  EC2A  F026         	call	_change_state_to_menu_23	;wreg free
 17739                           
 17740                           ;UI.c: 245: }
 17741  00273C  D120               	goto	i2l257
 17742  00273E                     i2l8576:
 17743                           
 17744                           ;UI.c: 252: if(up){
 17745  00273E  5077               	movf	_up,w,c
 17746  002740  1078               	iorwf	_up+1,w,c
 17747  002742  B4D8               	btfsc	status,2,c
 17748  002744  D003               	goto	i2l8580
 17749                           
 17750                           ;UI.c: 253: change_state_to_menu_11();
 17751  002746  EC42  F026         	call	_change_state_to_menu_11	;wreg free
 17752                           
 17753                           ;UI.c: 254: }
 17754  00274A  D119               	goto	i2l257
 17755  00274C                     i2l8580:
 17756                           
 17757                           ;UI.c: 255: else if(down){
 17758  00274C  5061               	movf	_down,w,c
 17759  00274E  1062               	iorwf	_down+1,w,c
 17760  002750  B4D8               	btfsc	status,2,c
 17761  002752  D003               	goto	i2l8584
 17762                           
 17763                           ;UI.c: 256: change_state_to_menu_23();
 17764  002754  EC2A  F026         	call	_change_state_to_menu_23	;wreg free
 17765                           
 17766                           ;UI.c: 257: }
 17767  002758  D112               	goto	i2l257
 17768  00275A                     i2l8584:
 17769                           
 17770                           ;UI.c: 258: else if(enter){
 17771  00275A  5063               	movf	_enter,w,c
 17772  00275C  1064               	iorwf	_enter+1,w,c
 17773  00275E  B4D8               	btfsc	status,2,c
 17774  002760  D10E               	goto	i2l257
 17775                           
 17776                           ;UI.c: 259: machine_state = Sorting_state;
 17777  002762  0E01               	movlw	1
 17778  002764  0100               	movlb	0	; () banked
 17779  002766  6FFC               	movwf	_machine_state& (0+255),b
 17780                           
 17781                           ; BSR set to: 0
 17782                           ;UI.c: 260: }
 17783                           ;UI.c: 261: break;
 17784                           
 17785                           ; BSR set to: 0
 17786                           
 17787                           ; BSR set to: 0
 17788  002768  D10A               	goto	i2l257
 17789  00276A                     i2l8588:
 17790                           
 17791                           ;UI.c: 264: if(up){
 17792  00276A  5077               	movf	_up,w,c
 17793  00276C  1078               	iorwf	_up+1,w,c
 17794  00276E  B4D8               	btfsc	status,2,c
 17795  002770  D003               	goto	i2l8592
 17796                           
 17797                           ;UI.c: 265: change_state_to_menu_22();
 17798  002772  ECFA  F025         	call	i2_change_state_to_menu_22	;wreg free
 17799                           
 17800                           ;UI.c: 266: }
 17801  002776  D103               	goto	i2l257
 17802  002778                     i2l8592:
 17803                           
 17804                           ;UI.c: 267: else if(down){
 17805  002778  5061               	movf	_down,w,c
 17806  00277A  1062               	iorwf	_down+1,w,c
 17807  00277C  B4D8               	btfsc	status,2,c
 17808  00277E  D003               	goto	i2l8596
 17809                           
 17810                           ;UI.c: 268: change_state_to_menu_11();
 17811  002780  EC42  F026         	call	_change_state_to_menu_11	;wreg free
 17812                           
 17813                           ;UI.c: 269: }
 17814  002784  D0FC               	goto	i2l257
 17815  002786                     i2l8596:
 17816                           
 17817                           ;UI.c: 270: else if(enter){
 17818  002786  5063               	movf	_enter,w,c
 17819  002788  1064               	iorwf	_enter+1,w,c
 17820  00278A  B4D8               	btfsc	status,2,c
 17821  00278C  D0F8               	goto	i2l257
 17822                           
 17823                           ;UI.c: 271: change_state_to_logs_11();
 17824  00278E  ECBA  F026         	call	_change_state_to_logs_11	;wreg free
 17825                           
 17826                           ;UI.c: 272: }
 17827                           ;UI.c: 273: break;
 17828  002792  D0F5               	goto	i2l257
 17829  002794                     i2l8600:
 17830                           
 17831                           ;UI.c: 276: if(up){
 17832  002794  5077               	movf	_up,w,c
 17833  002796  1078               	iorwf	_up+1,w,c
 17834  002798  B4D8               	btfsc	status,2,c
 17835  00279A  D003               	goto	i2l8604
 17836                           
 17837                           ;UI.c: 277: change_state_to_logs_34();
 17838  00279C  EC5A  F026         	call	_change_state_to_logs_34	;wreg free
 17839                           
 17840                           ;UI.c: 278: }
 17841  0027A0  D0EE               	goto	i2l257
 17842  0027A2                     i2l8604:
 17843                           
 17844                           ;UI.c: 279: else if(down){
 17845  0027A2  5061               	movf	_down,w,c
 17846  0027A4  1062               	iorwf	_down+1,w,c
 17847  0027A6  B4D8               	btfsc	status,2,c
 17848  0027A8  D003               	goto	i2l8608
 17849                           
 17850                           ;UI.c: 280: change_state_to_logs_12();
 17851  0027AA  ECA2  F026         	call	_change_state_to_logs_12	;wreg free
 17852                           
 17853                           ;UI.c: 281: }
 17854  0027AE  D0E7               	goto	i2l257
 17855  0027B0                     i2l8608:
 17856                           
 17857                           ;UI.c: 282: else if(enter){
 17858  0027B0  5063               	movf	_enter,w,c
 17859  0027B2  1064               	iorwf	_enter+1,w,c
 17860  0027B4  B4D8               	btfsc	status,2,c
 17861  0027B6  D007               	goto	i2l8612
 17862                           
 17863                           ;UI.c: 283: dispLogs(1);
 17864  0027B8  0E00               	movlw	0
 17865  0027BA  6E13               	movwf	dispLogs@myLog+1,c
 17866  0027BC  0E01               	movlw	1
 17867  0027BE  6E12               	movwf	dispLogs@myLog,c
 17868  0027C0  ECA6  F027         	call	_dispLogs	;wreg free
 17869                           
 17870                           ;UI.c: 284: }
 17871  0027C4  D0DC               	goto	i2l257
 17872  0027C6                     i2l8612:
 17873                           
 17874                           ;UI.c: 285: else if(back){
 17875  0027C6  5059               	movf	_back,w,c
 17876  0027C8  105A               	iorwf	_back+1,w,c
 17877  0027CA  B4D8               	btfsc	status,2,c
 17878  0027CC  D0D8               	goto	i2l257
 17879                           
 17880                           ;UI.c: 286: change_state_to_menu_23();
 17881  0027CE  EC2A  F026         	call	_change_state_to_menu_23	;wreg free
 17882                           
 17883                           ;UI.c: 287: }
 17884                           ;UI.c: 288: break;
 17885  0027D2  D0D5               	goto	i2l257
 17886  0027D4                     i2l8616:
 17887                           
 17888                           ;UI.c: 291: if(up){
 17889  0027D4  5077               	movf	_up,w,c
 17890  0027D6  1078               	iorwf	_up+1,w,c
 17891  0027D8  B4D8               	btfsc	status,2,c
 17892  0027DA  D003               	goto	i2l8620
 17893                           
 17894                           ;UI.c: 292: change_state_to_logs_11();
 17895  0027DC  ECBA  F026         	call	_change_state_to_logs_11	;wreg free
 17896                           
 17897                           ;UI.c: 293: }
 17898  0027E0  D0CE               	goto	i2l257
 17899  0027E2                     i2l8620:
 17900                           
 17901                           ;UI.c: 294: else if(down){
 17902  0027E2  5061               	movf	_down,w,c
 17903  0027E4  1062               	iorwf	_down+1,w,c
 17904  0027E6  B4D8               	btfsc	status,2,c
 17905  0027E8  D003               	goto	i2l8624
 17906                           
 17907                           ;UI.c: 295: change_state_to_logs_23();
 17908  0027EA  EC00  F027         	call	_change_state_to_logs_23	;wreg free
 17909                           
 17910                           ;UI.c: 296: }
 17911  0027EE  D0C7               	goto	i2l257
 17912  0027F0                     i2l8624:
 17913                           
 17914                           ;UI.c: 297: else if(enter){
 17915  0027F0  5063               	movf	_enter,w,c
 17916  0027F2  1064               	iorwf	_enter+1,w,c
 17917  0027F4  B4D8               	btfsc	status,2,c
 17918  0027F6  D007               	goto	i2l8628
 17919                           
 17920                           ;UI.c: 298: dispLogs(2);
 17921  0027F8  0E00               	movlw	0
 17922  0027FA  6E13               	movwf	dispLogs@myLog+1,c
 17923  0027FC  0E02               	movlw	2
 17924  0027FE  6E12               	movwf	dispLogs@myLog,c
 17925  002800  ECA6  F027         	call	_dispLogs	;wreg free
 17926                           
 17927                           ;UI.c: 299: }
 17928  002804  D0BC               	goto	i2l257
 17929  002806                     i2l8628:
 17930                           
 17931                           ;UI.c: 300: else if(back){
 17932  002806  5059               	movf	_back,w,c
 17933  002808  105A               	iorwf	_back+1,w,c
 17934  00280A  B4D8               	btfsc	status,2,c
 17935  00280C  D0B8               	goto	i2l257
 17936                           
 17937                           ;UI.c: 301: change_state_to_menu_23();
 17938  00280E  EC2A  F026         	call	_change_state_to_menu_23	;wreg free
 17939                           
 17940                           ;UI.c: 302: }
 17941                           ;UI.c: 303: break;
 17942  002812  D0B5               	goto	i2l257
 17943  002814                     i2l8632:
 17944                           
 17945                           ;UI.c: 306: if(up){
 17946  002814  5077               	movf	_up,w,c
 17947  002816  1078               	iorwf	_up+1,w,c
 17948  002818  B4D8               	btfsc	status,2,c
 17949  00281A  D003               	goto	i2l8636
 17950                           
 17951                           ;UI.c: 307: change_state_to_logs_11();
 17952  00281C  ECBA  F026         	call	_change_state_to_logs_11	;wreg free
 17953                           
 17954                           ;UI.c: 308: }
 17955  002820  D0AE               	goto	i2l257
 17956  002822                     i2l8636:
 17957                           
 17958                           ;UI.c: 309: else if(down){
 17959  002822  5061               	movf	_down,w,c
 17960  002824  1062               	iorwf	_down+1,w,c
 17961  002826  B4D8               	btfsc	status,2,c
 17962  002828  D003               	goto	i2l8640
 17963                           
 17964                           ;UI.c: 310: change_state_to_logs_23();
 17965  00282A  EC00  F027         	call	_change_state_to_logs_23	;wreg free
 17966                           
 17967                           ;UI.c: 311: }
 17968  00282E  D0A7               	goto	i2l257
 17969  002830                     i2l8640:
 17970                           
 17971                           ;UI.c: 312: else if(enter){
 17972  002830  5063               	movf	_enter,w,c
 17973  002832  1064               	iorwf	_enter+1,w,c
 17974  002834  B4D8               	btfsc	status,2,c
 17975  002836  D007               	goto	i2l8644
 17976                           
 17977                           ;UI.c: 313: dispLogs(2);
 17978  002838  0E00               	movlw	0
 17979  00283A  6E13               	movwf	dispLogs@myLog+1,c
 17980  00283C  0E02               	movlw	2
 17981  00283E  6E12               	movwf	dispLogs@myLog,c
 17982  002840  ECA6  F027         	call	_dispLogs	;wreg free
 17983                           
 17984                           ;UI.c: 314: }
 17985  002844  D09C               	goto	i2l257
 17986  002846                     i2l8644:
 17987                           
 17988                           ;UI.c: 315: else if(back){
 17989  002846  5059               	movf	_back,w,c
 17990  002848  105A               	iorwf	_back+1,w,c
 17991  00284A  B4D8               	btfsc	status,2,c
 17992  00284C  D098               	goto	i2l257
 17993                           
 17994                           ;UI.c: 316: change_state_to_menu_23();
 17995  00284E  EC2A  F026         	call	_change_state_to_menu_23	;wreg free
 17996                           
 17997                           ;UI.c: 317: }
 17998                           ;UI.c: 318: break;
 17999  002852  D095               	goto	i2l257
 18000  002854                     i2l8648:
 18001                           
 18002                           ;UI.c: 321: if(up){
 18003  002854  5077               	movf	_up,w,c
 18004  002856  1078               	iorwf	_up+1,w,c
 18005  002858  B4D8               	btfsc	status,2,c
 18006  00285A  D003               	goto	i2l8652
 18007                           
 18008                           ;UI.c: 322: change_state_to_logs_22();
 18009  00285C  EC8A  F026         	call	_change_state_to_logs_22	;wreg free
 18010                           
 18011                           ;UI.c: 323: }
 18012  002860  D08E               	goto	i2l257
 18013  002862                     i2l8652:
 18014                           
 18015                           ;UI.c: 324: else if(down){
 18016  002862  5061               	movf	_down,w,c
 18017  002864  1062               	iorwf	_down+1,w,c
 18018  002866  B4D8               	btfsc	status,2,c
 18019  002868  D003               	goto	i2l8656
 18020                           
 18021                           ;UI.c: 325: change_state_to_logs_34();
 18022  00286A  EC5A  F026         	call	_change_state_to_logs_34	;wreg free
 18023                           
 18024                           ;UI.c: 326: }
 18025  00286E  D087               	goto	i2l257
 18026  002870                     i2l8656:
 18027                           
 18028                           ;UI.c: 327: else if(enter){
 18029  002870  5063               	movf	_enter,w,c
 18030  002872  1064               	iorwf	_enter+1,w,c
 18031  002874  B4D8               	btfsc	status,2,c
 18032  002876  D007               	goto	i2l8660
 18033                           
 18034                           ;UI.c: 328: dispLogs(3);
 18035  002878  0E00               	movlw	0
 18036  00287A  6E13               	movwf	dispLogs@myLog+1,c
 18037  00287C  0E03               	movlw	3
 18038  00287E  6E12               	movwf	dispLogs@myLog,c
 18039  002880  ECA6  F027         	call	_dispLogs	;wreg free
 18040                           
 18041                           ;UI.c: 329: }
 18042  002884  D07C               	goto	i2l257
 18043  002886                     i2l8660:
 18044                           
 18045                           ;UI.c: 330: else if(back){
 18046  002886  5059               	movf	_back,w,c
 18047  002888  105A               	iorwf	_back+1,w,c
 18048  00288A  B4D8               	btfsc	status,2,c
 18049  00288C  D078               	goto	i2l257
 18050                           
 18051                           ;UI.c: 331: change_state_to_menu_23();
 18052  00288E  EC2A  F026         	call	_change_state_to_menu_23	;wreg free
 18053                           
 18054                           ;UI.c: 332: }
 18055                           ;UI.c: 333: break;
 18056  002892  D075               	goto	i2l257
 18057  002894                     i2l8664:
 18058                           
 18059                           ;UI.c: 336: if(up){
 18060  002894  5077               	movf	_up,w,c
 18061  002896  1078               	iorwf	_up+1,w,c
 18062  002898  B4D8               	btfsc	status,2,c
 18063  00289A  D003               	goto	i2l8668
 18064                           
 18065                           ;UI.c: 337: change_state_to_logs_22();
 18066  00289C  EC8A  F026         	call	_change_state_to_logs_22	;wreg free
 18067                           
 18068                           ;UI.c: 338: }
 18069  0028A0  D06E               	goto	i2l257
 18070  0028A2                     i2l8668:
 18071                           
 18072                           ;UI.c: 339: else if(down){
 18073  0028A2  5061               	movf	_down,w,c
 18074  0028A4  1062               	iorwf	_down+1,w,c
 18075  0028A6  B4D8               	btfsc	status,2,c
 18076  0028A8  D003               	goto	i2l8672
 18077                           
 18078                           ;UI.c: 340: change_state_to_logs_34();
 18079  0028AA  EC5A  F026         	call	_change_state_to_logs_34	;wreg free
 18080                           
 18081                           ;UI.c: 341: }
 18082  0028AE  D067               	goto	i2l257
 18083  0028B0                     i2l8672:
 18084                           
 18085                           ;UI.c: 342: else if(enter){
 18086  0028B0  5063               	movf	_enter,w,c
 18087  0028B2  1064               	iorwf	_enter+1,w,c
 18088  0028B4  B4D8               	btfsc	status,2,c
 18089  0028B6  D007               	goto	i2l8676
 18090                           
 18091                           ;UI.c: 343: dispLogs(3);
 18092  0028B8  0E00               	movlw	0
 18093  0028BA  6E13               	movwf	dispLogs@myLog+1,c
 18094  0028BC  0E03               	movlw	3
 18095  0028BE  6E12               	movwf	dispLogs@myLog,c
 18096  0028C0  ECA6  F027         	call	_dispLogs	;wreg free
 18097                           
 18098                           ;UI.c: 344: }
 18099  0028C4  D05C               	goto	i2l257
 18100  0028C6                     i2l8676:
 18101                           
 18102                           ;UI.c: 345: else if(back){
 18103  0028C6  5059               	movf	_back,w,c
 18104  0028C8  105A               	iorwf	_back+1,w,c
 18105  0028CA  B4D8               	btfsc	status,2,c
 18106  0028CC  D058               	goto	i2l257
 18107                           
 18108                           ;UI.c: 346: change_state_to_menu_23();
 18109  0028CE  EC2A  F026         	call	_change_state_to_menu_23	;wreg free
 18110                           
 18111                           ;UI.c: 347: }
 18112                           ;UI.c: 348: break;
 18113  0028D2  D055               	goto	i2l257
 18114  0028D4                     i2l8680:
 18115                           
 18116                           ;UI.c: 351: if(up){
 18117  0028D4  5077               	movf	_up,w,c
 18118  0028D6  1078               	iorwf	_up+1,w,c
 18119  0028D8  B4D8               	btfsc	status,2,c
 18120  0028DA  D003               	goto	i2l8684
 18121                           
 18122                           ;UI.c: 352: change_state_to_logs_33();
 18123  0028DC  EC72  F026         	call	_change_state_to_logs_33	;wreg free
 18124                           
 18125                           ;UI.c: 353: }
 18126  0028E0  D04E               	goto	i2l257
 18127  0028E2                     i2l8684:
 18128                           
 18129                           ;UI.c: 354: else if(down){
 18130  0028E2  5061               	movf	_down,w,c
 18131  0028E4  1062               	iorwf	_down+1,w,c
 18132  0028E6  B4D8               	btfsc	status,2,c
 18133  0028E8  D003               	goto	i2l8688
 18134                           
 18135                           ;UI.c: 355: change_state_to_logs_11();
 18136  0028EA  ECBA  F026         	call	_change_state_to_logs_11	;wreg free
 18137                           
 18138                           ;UI.c: 356: }
 18139  0028EE  D047               	goto	i2l257
 18140  0028F0                     i2l8688:
 18141                           
 18142                           ;UI.c: 357: else if(enter){
 18143  0028F0  5063               	movf	_enter,w,c
 18144  0028F2  1064               	iorwf	_enter+1,w,c
 18145  0028F4  B4D8               	btfsc	status,2,c
 18146  0028F6  D007               	goto	i2l8692
 18147                           
 18148                           ;UI.c: 358: dispLogs(4);
 18149  0028F8  0E00               	movlw	0
 18150  0028FA  6E13               	movwf	dispLogs@myLog+1,c
 18151  0028FC  0E04               	movlw	4
 18152  0028FE  6E12               	movwf	dispLogs@myLog,c
 18153  002900  ECA6  F027         	call	_dispLogs	;wreg free
 18154                           
 18155                           ;UI.c: 359: }
 18156  002904  D03C               	goto	i2l257
 18157  002906                     i2l8692:
 18158                           
 18159                           ;UI.c: 360: else if(back){
 18160  002906  5059               	movf	_back,w,c
 18161  002908  105A               	iorwf	_back+1,w,c
 18162  00290A  B4D8               	btfsc	status,2,c
 18163  00290C  D038               	goto	i2l257
 18164                           
 18165                           ;UI.c: 361: change_state_to_menu_23();
 18166  00290E  EC2A  F026         	call	_change_state_to_menu_23	;wreg free
 18167                           
 18168                           ;UI.c: 367: }
 18169                           
 18170                           ;UI.c: 366: break;
 18171                           
 18172                           ;UI.c: 365: default:
 18173                           
 18174                           ;UI.c: 362: }
 18175                           ;UI.c: 363: break;
 18176  002912  D035               	goto	i2l257
 18177  002914                     i2l8698:
 18178  002914  C0E6  F043         	movff	_cur_state,??_updateMenu
 18179  002918  C0E7  F044         	movff	_cur_state+1,??_updateMenu+1
 18180                           
 18181                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 3 sub-sw
      +                          itches
 18182                           ; Switch size 1, requested type "space"
 18183                           ; Number of cases is 3, Range of values is 0 to 4
 18184                           ; switch strategies available:
 18185                           ; Name         Instructions Cycles
 18186                           ; simple_byte           10     6 (average)
 18187                           ;	Chosen strategy is simple_byte
 18188  00291C  5044               	movf	??_updateMenu+1,w,c
 18189  00291E  0A00               	xorlw	0	; case 0
 18190  002920  B4D8               	btfsc	status,2,c
 18191  002922  D007               	goto	i2l9382
 18192  002924  0A03               	xorlw	3	; case 3
 18193  002926  B4D8               	btfsc	status,2,c
 18194  002928  D015               	goto	i2l9384
 18195  00292A  0A07               	xorlw	7	; case 4
 18196  00292C  B4D8               	btfsc	status,2,c
 18197  00292E  D020               	goto	i2l9386
 18198  002930  D026               	goto	i2l257
 18199  002932                     i2l9382:
 18200                           
 18201                           ; Switch size 1, requested type "space"
 18202                           ; Number of cases is 5, Range of values is 0 to 23
 18203                           ; switch strategies available:
 18204                           ; Name         Instructions Cycles
 18205                           ; simple_byte           16     9 (average)
 18206                           ;	Chosen strategy is simple_byte
 18207  002932  5043               	movf	??_updateMenu,w,c
 18208  002934  0A00               	xorlw	0	; case 0
 18209  002936  B4D8               	btfsc	status,2,c
 18210  002938  D6DC               	goto	i2l8550
 18211  00293A  0A0B               	xorlw	11	; case 11
 18212  00293C  B4D8               	btfsc	status,2,c
 18213  00293E  D6DC               	goto	i2l8552
 18214  002940  0A07               	xorlw	7	; case 12
 18215  002942  B4D8               	btfsc	status,2,c
 18216  002944  D6EE               	goto	i2l8564
 18217  002946  0A1A               	xorlw	26	; case 22
 18218  002948  B4D8               	btfsc	status,2,c
 18219  00294A  D6F9               	goto	i2l8576
 18220  00294C  0A01               	xorlw	1	; case 23
 18221  00294E  B4D8               	btfsc	status,2,c
 18222  002950  D70C               	goto	i2l8588
 18223  002952  D015               	goto	i2l257
 18224  002954                     i2l9384:
 18225                           
 18226                           ; Switch size 1, requested type "space"
 18227                           ; Number of cases is 4, Range of values is 243 to 255
 18228                           ; switch strategies available:
 18229                           ; Name         Instructions Cycles
 18230                           ; simple_byte           13     7 (average)
 18231                           ;	Chosen strategy is simple_byte
 18232  002954  5043               	movf	??_updateMenu,w,c
 18233  002956  0AF3               	xorlw	243	; case 243
 18234  002958  B4D8               	btfsc	status,2,c
 18235  00295A  D71C               	goto	i2l8600
 18236  00295C  0A07               	xorlw	7	; case 244
 18237  00295E  B4D8               	btfsc	status,2,c
 18238  002960  D739               	goto	i2l8616
 18239  002962  0A0A               	xorlw	10	; case 254
 18240  002964  B4D8               	btfsc	status,2,c
 18241  002966  D756               	goto	i2l8632
 18242  002968  0A01               	xorlw	1	; case 255
 18243  00296A  B4D8               	btfsc	status,2,c
 18244  00296C  D773               	goto	i2l8648
 18245  00296E  D007               	goto	i2l257
 18246  002970                     i2l9386:
 18247                           
 18248                           ; Switch size 1, requested type "space"
 18249                           ; Number of cases is 2, Range of values is 9 to 10
 18250                           ; switch strategies available:
 18251                           ; Name         Instructions Cycles
 18252                           ; simple_byte            7     4 (average)
 18253                           ;	Chosen strategy is simple_byte
 18254  002970  5043               	movf	??_updateMenu,w,c
 18255  002972  0A09               	xorlw	9	; case 9
 18256  002974  B4D8               	btfsc	status,2,c
 18257  002976  D78E               	goto	i2l8664
 18258  002978  0A03               	xorlw	3	; case 10
 18259  00297A  B4D8               	btfsc	status,2,c
 18260  00297C  D7AB               	goto	i2l8680
 18261  00297E                     i2l257:
 18262                           
 18263                           ;UI.c: 368: }
 18264                           ;UI.c: 369: (INTCONbits.GIE = 1);
 18265  00297E  8EF2               	bsf	intcon,7,c	;volatile
 18266  002980  0012               	return		;funcret
 18267  002982                     __end_of_updateMenu:
 18268                           	opt stack 0
 18269                           pclatu	equ	0xFFB
 18270                           pclath	equ	0xFFA
 18271                           tblptru	equ	0xFF8
 18272                           tblptrh	equ	0xFF7
 18273                           tblptrl	equ	0xFF6
 18274                           tablat	equ	0xFF5
 18275                           prodh	equ	0xFF4
 18276                           prodl	equ	0xFF3
 18277                           intcon	equ	0xFF2
 18278                           intcon2	equ	0xFF1
 18279                           intcon3	equ	0xFF0
 18280                           indf0	equ	0xFEF
 18281                           postinc0	equ	0xFEE
 18282                           fsr0h	equ	0xFEA
 18283                           fsr0l	equ	0xFE9
 18284                           wreg	equ	0xFE8
 18285                           postdec1	equ	0xFE5
 18286                           fsr1h	equ	0xFE2
 18287                           fsr1l	equ	0xFE1
 18288                           indf2	equ	0xFDF
 18289                           postinc2	equ	0xFDE
 18290                           postdec2	equ	0xFDD
 18291                           fsr2h	equ	0xFDA
 18292                           fsr2l	equ	0xFD9
 18293                           status	equ	0xFD8
 18294                           
 18295 ;; *************** function i2_change_state_to_menu_start *****************
 18296 ;; Defined at:
 18297 ;;		line 474 in file "UI.c"
 18298 ;; Parameters:    Size  Location     Type
 18299 ;;		None
 18300 ;; Auto vars:     Size  Location     Type
 18301 ;;		None
 18302 ;; Return value:  Size  Location     Type
 18303 ;;                  1    wreg      void 
 18304 ;; Registers used:
 18305 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18306 ;; Tracked objects:
 18307 ;;		On entry : 0/0
 18308 ;;		On exit  : 0/0
 18309 ;;		Unchanged: 0/0
 18310 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18311 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18312 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18313 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18314 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18315 ;;Total ram usage:        0 bytes
 18316 ;; Hardware stack levels used:    1
 18317 ;; Hardware stack levels required when called:    4
 18318 ;; This function calls:
 18319 ;;		i2_lcdInst
 18320 ;;		i2_printRTC
 18321 ;;		i2_printf
 18322 ;; This function is called by:
 18323 ;;		_updateMenu
 18324 ;; This function uses a non-reentrant model
 18325 ;;
 18326                           
 18327                           	psect	text61
 18328  004ED8                     __ptext61:
 18329                           	opt stack 0
 18330  004ED8                     i2_change_state_to_menu_start:
 18331                           	opt stack 18
 18332                           
 18333                           ;UI.c: 475: cur_state = 0;
 18334                           
 18335                           ;incstack = 0
 18336  004ED8  0E00               	movlw	0
 18337  004EDA  0100               	movlb	0	; () banked
 18338  004EDC  6FE7               	movwf	(_cur_state+1)& (0+255),b
 18339  004EDE  0E00               	movlw	0
 18340  004EE0  6FE6               	movwf	_cur_state& (0+255),b
 18341                           
 18342                           ; BSR set to: 0
 18343                           ;UI.c: 477: lcdInst(0b10000000);;
 18344  004EE2  0E80               	movlw	128
 18345  004EE4  EC36  F028         	call	i2_lcdInst
 18346                           
 18347                           ;UI.c: 478: printRTC();
 18348  004EE8  ECE5  F015         	call	i2_printRTC	;wreg free
 18349                           
 18350                           ;UI.c: 479: lcdInst(0b11000000);;
 18351  004EEC  0EC0               	movlw	192
 18352  004EEE  EC36  F028         	call	i2_lcdInst
 18353                           
 18354                           ;UI.c: 480: printf("PUSH TO CONTINUE");
 18355  004EF2  0EF7               	movlw	low STR_30
 18356  004EF4  6E0D               	movwf	i2printf@f,c
 18357  004EF6  0EFD               	movlw	high STR_30
 18358  004EF8  6E0E               	movwf	i2printf@f+1,c
 18359  004EFA  ECC6  F00E         	call	i2_printf	;wreg free
 18360  004EFE  0012               	return		;funcret
 18361  004F00                     __end_ofi2_change_state_to_menu_start:
 18362                           	opt stack 0
 18363                           pclatu	equ	0xFFB
 18364                           pclath	equ	0xFFA
 18365                           tblptru	equ	0xFF8
 18366                           tblptrh	equ	0xFF7
 18367                           tblptrl	equ	0xFF6
 18368                           tablat	equ	0xFF5
 18369                           prodh	equ	0xFF4
 18370                           prodl	equ	0xFF3
 18371                           intcon	equ	0xFF2
 18372                           intcon2	equ	0xFF1
 18373                           intcon3	equ	0xFF0
 18374                           indf0	equ	0xFEF
 18375                           postinc0	equ	0xFEE
 18376                           fsr0h	equ	0xFEA
 18377                           fsr0l	equ	0xFE9
 18378                           wreg	equ	0xFE8
 18379                           postdec1	equ	0xFE5
 18380                           fsr1h	equ	0xFE2
 18381                           fsr1l	equ	0xFE1
 18382                           indf2	equ	0xFDF
 18383                           postinc2	equ	0xFDE
 18384                           postdec2	equ	0xFDD
 18385                           fsr2h	equ	0xFDA
 18386                           fsr2l	equ	0xFD9
 18387                           status	equ	0xFD8
 18388                           
 18389 ;; *************** function i2_printRTC *****************
 18390 ;; Defined at:
 18391 ;;		line 63 in file "RTC.c"
 18392 ;; Parameters:    Size  Location     Type
 18393 ;;		None
 18394 ;; Auto vars:     Size  Location     Type
 18395 ;;  printRTC       14   44[COMRAM] int [7]
 18396 ;;  printRTC        4   60[COMRAM] unsigned char [4]
 18397 ;;  printRTC        2   64[COMRAM] int 
 18398 ;;  printRTC        2   58[COMRAM] int 
 18399 ;; Return value:  Size  Location     Type
 18400 ;;                  1    wreg      void 
 18401 ;; Registers used:
 18402 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18403 ;; Tracked objects:
 18404 ;;		On entry : 0/0
 18405 ;;		On exit  : 0/0
 18406 ;;		Unchanged: 0/0
 18407 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18408 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18409 ;;      Locals:        22       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18410 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18411 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18412 ;;Total ram usage:       25 bytes
 18413 ;; Hardware stack levels used:    1
 18414 ;; Hardware stack levels required when called:    3
 18415 ;; This function calls:
 18416 ;;		i2_getRTC
 18417 ;;		i2_lcdInst
 18418 ;;		i2_printf
 18419 ;;		i2_strcpy
 18420 ;; This function is called by:
 18421 ;;		i2_change_state_to_menu_start
 18422 ;; This function uses a non-reentrant model
 18423 ;;
 18424                           
 18425                           	psect	text62
 18426  002BCA                     __ptext62:
 18427                           	opt stack 0
 18428  002BCA                     i2_printRTC:
 18429                           	opt stack 18
 18430                           
 18431                           ;RTC.c: 64: getRTC();
 18432                           
 18433                           ;incstack = 0
 18434  002BCA  ECF8  F022         	call	i2_getRTC	;wreg free
 18435                           
 18436                           ;RTC.c: 65: char month[] = "MMM";
 18437  002BCE  C139  F03D         	movff	printRTC@F3219,i2printRTC@month
 18438  002BD2  C13A  F03E         	movff	printRTC@F3219+1,i2printRTC@month+1
 18439  002BD6  C13B  F03F         	movff	printRTC@F3219+2,i2printRTC@month+2
 18440  002BDA  C13C  F040         	movff	printRTC@F3219+3,i2printRTC@month+3
 18441                           
 18442                           ;RTC.c: 66: int INT_time[7];
 18443                           ;RTC.c: 67: for(int i = 0; i < 7; i++){
 18444  002BDE  0E00               	movlw	0
 18445  002BE0  6E42               	movwf	i2printRTC@i+1,c
 18446  002BE2  0E00               	movlw	0
 18447  002BE4  6E41               	movwf	i2printRTC@i,c
 18448  002BE6  BE42               	btfsc	i2printRTC@i+1,7,c
 18449  002BE8  D006               	goto	i2l6656
 18450  002BEA  5042               	movf	i2printRTC@i+1,w,c
 18451  002BEC  E135               	bnz	i2l606
 18452  002BEE  0E07               	movlw	7
 18453  002BF0  5C41               	subwf	i2printRTC@i,w,c
 18454  002BF2  B0D8               	btfsc	status,0,c
 18455  002BF4  D031               	goto	i2l606
 18456  002BF6                     i2l6656:
 18457                           
 18458                           ;RTC.c: 68: INT_time[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
 18459  002BF6  0E24               	movlw	low _time
 18460  002BF8  2441               	addwf	i2printRTC@i,w,c
 18461  002BFA  6ED9               	movwf	fsr2l,c
 18462  002BFC  0E01               	movlw	high _time
 18463  002BFE  2042               	addwfc	i2printRTC@i+1,w,c
 18464  002C00  6EDA               	movwf	fsr2h,c
 18465  002C02  50DF               	movf	indf2,w,c
 18466  002C04  6E2A               	movwf	??i2_printRTC& (0+255),c
 18467  002C06  3A2A               	swapf	??i2_printRTC,f,c
 18468  002C08  0E0F               	movlw	15
 18469  002C0A  162A               	andwf	??i2_printRTC,f,c
 18470  002C0C  0E0F               	movlw	15
 18471  002C0E  162A               	andwf	??i2_printRTC,f,c
 18472  002C10  502A               	movf	??i2_printRTC,w,c
 18473  002C12  0D0A               	mullw	10
 18474  002C14  0E24               	movlw	low _time
 18475  002C16  2441               	addwf	i2printRTC@i,w,c
 18476  002C18  6ED9               	movwf	fsr2l,c
 18477  002C1A  0E01               	movlw	high _time
 18478  002C1C  2042               	addwfc	i2printRTC@i+1,w,c
 18479  002C1E  6EDA               	movwf	fsr2h,c
 18480  002C20  50DF               	movf	indf2,w,c
 18481  002C22  0B0F               	andlw	15
 18482  002C24  6E2B               	movwf	(??i2_printRTC+1)& (0+255),c
 18483  002C26  6A2C               	clrf	(??i2_printRTC+2)& (0+255),c
 18484  002C28  50F3               	movf	prodl,w,c
 18485  002C2A  262B               	addwf	??i2_printRTC+1,f,c
 18486  002C2C  50F4               	movf	prodh,w,c
 18487  002C2E  222C               	addwfc	??i2_printRTC+2,f,c
 18488  002C30  90D8               	bcf	status,0,c
 18489  002C32  3441               	rlcf	i2printRTC@i,w,c
 18490  002C34  6ED9               	movwf	fsr2l,c
 18491  002C36  3442               	rlcf	i2printRTC@i+1,w,c
 18492  002C38  6EDA               	movwf	fsr2h,c
 18493  002C3A  0E2D               	movlw	low i2printRTC@INT_time
 18494  002C3C  26D9               	addwf	fsr2l,f,c
 18495  002C3E  0E00               	movlw	high i2printRTC@INT_time
 18496  002C40  22DA               	addwfc	fsr2h,f,c
 18497  002C42  C02B  FFDE         	movff	??i2_printRTC+1,postinc2
 18498  002C46  C02C  FFDD         	movff	??i2_printRTC+2,postdec2
 18499  002C4A  4A41               	infsnz	i2printRTC@i,f,c
 18500  002C4C  2A42               	incf	i2printRTC@i+1,f,c
 18501  002C4E  BE42               	btfsc	i2printRTC@i+1,7,c
 18502  002C50  D7D2               	goto	i2l6656
 18503  002C52  5042               	movf	i2printRTC@i+1,w,c
 18504  002C54  E101               	bnz	i2u527_40
 18505  002C56  D7CB               	goto	L13
 18506  002C58                     i2u527_40:
 18507  002C58                     i2l606:
 18508                           
 18509                           ;RTC.c: 69: }
 18510                           ;RTC.c: 70: int RTC_month = INT_time[5];
 18511  002C58  C037  F03B         	movff	i2printRTC@INT_time+10,i2printRTC@RTC_month
 18512  002C5C  C038  F03C         	movff	i2printRTC@INT_time+11,i2printRTC@RTC_month+1
 18513                           
 18514                           ;RTC.c: 71: switch(RTC_month){
 18515  002C60  D084               	goto	i2l6688
 18516  002C62                     i2l6662:
 18517                           
 18518                           ;RTC.c: 73: strcpy(month, "JAN");
 18519  002C62  0E3D               	movlw	low i2printRTC@month
 18520  002C64  6E01               	movwf	i2strcpy@to,c
 18521  002C66  0E00               	movlw	high i2printRTC@month
 18522  002C68  6E02               	movwf	i2strcpy@to+1,c
 18523  002C6A  0EDB               	movlw	low STR_8
 18524  002C6C  6E03               	movwf	i2strcpy@from,c
 18525  002C6E  0EFF               	movlw	high STR_8
 18526  002C70  6E04               	movwf	i2strcpy@from+1,c
 18527  002C72  ECE1  F025         	call	i2_strcpy	;wreg free
 18528                           
 18529                           ;RTC.c: 74: break;
 18530  002C76  D0A6               	goto	i2l6690
 18531  002C78                     i2l6664:
 18532                           
 18533                           ;RTC.c: 76: strcpy(month, "FEB");
 18534  002C78  0E3D               	movlw	low i2printRTC@month
 18535  002C7A  6E01               	movwf	i2strcpy@to,c
 18536  002C7C  0E00               	movlw	high i2printRTC@month
 18537  002C7E  6E02               	movwf	i2strcpy@to+1,c
 18538  002C80  0ECB               	movlw	low STR_9
 18539  002C82  6E03               	movwf	i2strcpy@from,c
 18540  002C84  0EFF               	movlw	high STR_9
 18541  002C86  6E04               	movwf	i2strcpy@from+1,c
 18542  002C88  ECE1  F025         	call	i2_strcpy	;wreg free
 18543                           
 18544                           ;RTC.c: 77: break;
 18545  002C8C  D09B               	goto	i2l6690
 18546  002C8E                     i2l6666:
 18547                           
 18548                           ;RTC.c: 79: strcpy(month, "MAR");
 18549  002C8E  0E3D               	movlw	low i2printRTC@month
 18550  002C90  6E01               	movwf	i2strcpy@to,c
 18551  002C92  0E00               	movlw	high i2printRTC@month
 18552  002C94  6E02               	movwf	i2strcpy@to+1,c
 18553  002C96  0EE7               	movlw	low STR_10
 18554  002C98  6E03               	movwf	i2strcpy@from,c
 18555  002C9A  0EFF               	movlw	high STR_10
 18556  002C9C  6E04               	movwf	i2strcpy@from+1,c
 18557  002C9E  ECE1  F025         	call	i2_strcpy	;wreg free
 18558                           
 18559                           ;RTC.c: 80: break;
 18560  002CA2  D090               	goto	i2l6690
 18561  002CA4                     i2l6668:
 18562                           
 18563                           ;RTC.c: 82: strcpy(month, "APR");
 18564  002CA4  0E3D               	movlw	low i2printRTC@month
 18565  002CA6  6E01               	movwf	i2strcpy@to,c
 18566  002CA8  0E00               	movlw	high i2printRTC@month
 18567  002CAA  6E02               	movwf	i2strcpy@to+1,c
 18568  002CAC  0EEB               	movlw	low STR_11
 18569  002CAE  6E03               	movwf	i2strcpy@from,c
 18570  002CB0  0EFF               	movlw	high STR_11
 18571  002CB2  6E04               	movwf	i2strcpy@from+1,c
 18572  002CB4  ECE1  F025         	call	i2_strcpy	;wreg free
 18573                           
 18574                           ;RTC.c: 83: break;
 18575  002CB8  D085               	goto	i2l6690
 18576  002CBA                     i2l6670:
 18577                           
 18578                           ;RTC.c: 85: strcpy(month, "MAY");
 18579  002CBA  0E3D               	movlw	low i2printRTC@month
 18580  002CBC  6E01               	movwf	i2strcpy@to,c
 18581  002CBE  0E00               	movlw	high i2printRTC@month
 18582  002CC0  6E02               	movwf	i2strcpy@to+1,c
 18583  002CC2  0EFB               	movlw	low STR_12
 18584  002CC4  6E03               	movwf	i2strcpy@from,c
 18585  002CC6  0EFF               	movlw	high STR_12
 18586  002CC8  6E04               	movwf	i2strcpy@from+1,c
 18587  002CCA  ECE1  F025         	call	i2_strcpy	;wreg free
 18588                           
 18589                           ;RTC.c: 86: break;
 18590  002CCE  D07A               	goto	i2l6690
 18591  002CD0                     i2l6672:
 18592                           
 18593                           ;RTC.c: 88: strcpy(month, "JUN");
 18594  002CD0  0E3D               	movlw	low i2printRTC@month
 18595  002CD2  6E01               	movwf	i2strcpy@to,c
 18596  002CD4  0E00               	movlw	high i2printRTC@month
 18597  002CD6  6E02               	movwf	i2strcpy@to+1,c
 18598  002CD8  0EDF               	movlw	low STR_13
 18599  002CDA  6E03               	movwf	i2strcpy@from,c
 18600  002CDC  0EFF               	movlw	high STR_13
 18601  002CDE  6E04               	movwf	i2strcpy@from+1,c
 18602  002CE0  ECE1  F025         	call	i2_strcpy	;wreg free
 18603                           
 18604                           ;RTC.c: 89: break;
 18605  002CE4  D06F               	goto	i2l6690
 18606  002CE6                     i2l6674:
 18607                           
 18608                           ;RTC.c: 91: strcpy(month, "JUL");
 18609  002CE6  0E3D               	movlw	low i2printRTC@month
 18610  002CE8  6E01               	movwf	i2strcpy@to,c
 18611  002CEA  0E00               	movlw	high i2printRTC@month
 18612  002CEC  6E02               	movwf	i2strcpy@to+1,c
 18613  002CEE  0ED7               	movlw	low STR_14
 18614  002CF0  6E03               	movwf	i2strcpy@from,c
 18615  002CF2  0EFF               	movlw	high STR_14
 18616  002CF4  6E04               	movwf	i2strcpy@from+1,c
 18617  002CF6  ECE1  F025         	call	i2_strcpy	;wreg free
 18618                           
 18619                           ;RTC.c: 92: break;
 18620  002CFA  D064               	goto	i2l6690
 18621  002CFC                     i2l6676:
 18622                           
 18623                           ;RTC.c: 94: strcpy(month, "AUG");
 18624  002CFC  0E3D               	movlw	low i2printRTC@month
 18625  002CFE  6E01               	movwf	i2strcpy@to,c
 18626  002D00  0E00               	movlw	high i2printRTC@month
 18627  002D02  6E02               	movwf	i2strcpy@to+1,c
 18628  002D04  0ED3               	movlw	low STR_15
 18629  002D06  6E03               	movwf	i2strcpy@from,c
 18630  002D08  0EFF               	movlw	high STR_15
 18631  002D0A  6E04               	movwf	i2strcpy@from+1,c
 18632  002D0C  ECE1  F025         	call	i2_strcpy	;wreg free
 18633                           
 18634                           ;RTC.c: 95: break;
 18635  002D10  D059               	goto	i2l6690
 18636  002D12                     i2l6678:
 18637                           
 18638                           ;RTC.c: 97: strcpy(month, "SEP");
 18639  002D12  0E3D               	movlw	low i2printRTC@month
 18640  002D14  6E01               	movwf	i2strcpy@to,c
 18641  002D16  0E00               	movlw	high i2printRTC@month
 18642  002D18  6E02               	movwf	i2strcpy@to+1,c
 18643  002D1A  0EE3               	movlw	low STR_16
 18644  002D1C  6E03               	movwf	i2strcpy@from,c
 18645  002D1E  0EFF               	movlw	high STR_16
 18646  002D20  6E04               	movwf	i2strcpy@from+1,c
 18647  002D22  ECE1  F025         	call	i2_strcpy	;wreg free
 18648                           
 18649                           ;RTC.c: 98: break;
 18650  002D26  D04E               	goto	i2l6690
 18651  002D28                     i2l6680:
 18652                           
 18653                           ;RTC.c: 100: strcpy(month, "OCT");
 18654  002D28  0E3D               	movlw	low i2printRTC@month
 18655  002D2A  6E01               	movwf	i2strcpy@to,c
 18656  002D2C  0E00               	movlw	high i2printRTC@month
 18657  002D2E  6E02               	movwf	i2strcpy@to+1,c
 18658  002D30  0EF3               	movlw	low STR_17
 18659  002D32  6E03               	movwf	i2strcpy@from,c
 18660  002D34  0EFF               	movlw	high STR_17
 18661  002D36  6E04               	movwf	i2strcpy@from+1,c
 18662  002D38  ECE1  F025         	call	i2_strcpy	;wreg free
 18663                           
 18664                           ;RTC.c: 101: break;
 18665  002D3C  D043               	goto	i2l6690
 18666  002D3E                     i2l6682:
 18667                           
 18668                           ;RTC.c: 103: strcpy(month, "NOV");
 18669  002D3E  0E3D               	movlw	low i2printRTC@month
 18670  002D40  6E01               	movwf	i2strcpy@to,c
 18671  002D42  0E00               	movlw	high i2printRTC@month
 18672  002D44  6E02               	movwf	i2strcpy@to+1,c
 18673  002D46  0EF7               	movlw	low STR_18
 18674  002D48  6E03               	movwf	i2strcpy@from,c
 18675  002D4A  0EFF               	movlw	high STR_18
 18676  002D4C  6E04               	movwf	i2strcpy@from+1,c
 18677  002D4E  ECE1  F025         	call	i2_strcpy	;wreg free
 18678                           
 18679                           ;RTC.c: 104: break;
 18680  002D52  D038               	goto	i2l6690
 18681  002D54                     i2l6684:
 18682                           
 18683                           ;RTC.c: 106: strcpy(month, "DEC");
 18684  002D54  0E3D               	movlw	low i2printRTC@month
 18685  002D56  6E01               	movwf	i2strcpy@to,c
 18686  002D58  0E00               	movlw	high i2printRTC@month
 18687  002D5A  6E02               	movwf	i2strcpy@to+1,c
 18688  002D5C  0ECF               	movlw	low STR_19
 18689  002D5E  6E03               	movwf	i2strcpy@from,c
 18690  002D60  0EFF               	movlw	high STR_19
 18691  002D62  6E04               	movwf	i2strcpy@from+1,c
 18692  002D64  ECE1  F025         	call	i2_strcpy	;wreg free
 18693                           
 18694                           ;RTC.c: 108: }
 18695                           
 18696                           ;RTC.c: 107: break;
 18697  002D68  D02D               	goto	i2l6690
 18698  002D6A                     i2l6688:
 18699  002D6A  C03B  F02A         	movff	i2printRTC@RTC_month,??i2_printRTC
 18700  002D6E  C03C  F02B         	movff	i2printRTC@RTC_month+1,??i2_printRTC+1
 18701                           
 18702                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 18703                           ; Switch size 1, requested type "space"
 18704                           ; Number of cases is 1, Range of values is 0 to 0
 18705                           ; switch strategies available:
 18706                           ; Name         Instructions Cycles
 18707                           ; simple_byte            4     3 (average)
 18708                           ;	Chosen strategy is simple_byte
 18709  002D72  502B               	movf	??i2_printRTC+1,w,c
 18710  002D74  0A00               	xorlw	0	; case 0
 18711  002D76  A4D8               	btfss	status,2,c
 18712  002D78  D025               	goto	i2l6690
 18713                           
 18714                           ; Switch size 1, requested type "space"
 18715                           ; Number of cases is 12, Range of values is 1 to 12
 18716                           ; switch strategies available:
 18717                           ; Name         Instructions Cycles
 18718                           ; simple_byte           37    19 (average)
 18719                           ;	Chosen strategy is simple_byte
 18720  002D7A  502A               	movf	??i2_printRTC,w,c
 18721  002D7C  0A01               	xorlw	1	; case 1
 18722  002D7E  B4D8               	btfsc	status,2,c
 18723  002D80  D770               	goto	i2l6662
 18724  002D82  0A03               	xorlw	3	; case 2
 18725  002D84  B4D8               	btfsc	status,2,c
 18726  002D86  D778               	goto	i2l6664
 18727  002D88  0A01               	xorlw	1	; case 3
 18728  002D8A  B4D8               	btfsc	status,2,c
 18729  002D8C  D780               	goto	i2l6666
 18730  002D8E  0A07               	xorlw	7	; case 4
 18731  002D90  B4D8               	btfsc	status,2,c
 18732  002D92  D788               	goto	i2l6668
 18733  002D94  0A01               	xorlw	1	; case 5
 18734  002D96  B4D8               	btfsc	status,2,c
 18735  002D98  D790               	goto	i2l6670
 18736  002D9A  0A03               	xorlw	3	; case 6
 18737  002D9C  B4D8               	btfsc	status,2,c
 18738  002D9E  D798               	goto	i2l6672
 18739  002DA0  0A01               	xorlw	1	; case 7
 18740  002DA2  B4D8               	btfsc	status,2,c
 18741  002DA4  D7A0               	goto	i2l6674
 18742  002DA6  0A0F               	xorlw	15	; case 8
 18743  002DA8  B4D8               	btfsc	status,2,c
 18744  002DAA  D7A8               	goto	i2l6676
 18745  002DAC  0A01               	xorlw	1	; case 9
 18746  002DAE  B4D8               	btfsc	status,2,c
 18747  002DB0  D7B0               	goto	i2l6678
 18748  002DB2  0A03               	xorlw	3	; case 10
 18749  002DB4  B4D8               	btfsc	status,2,c
 18750  002DB6  D7B8               	goto	i2l6680
 18751  002DB8  0A01               	xorlw	1	; case 11
 18752  002DBA  B4D8               	btfsc	status,2,c
 18753  002DBC  D7C0               	goto	i2l6682
 18754  002DBE  0A07               	xorlw	7	; case 12
 18755  002DC0  B4D8               	btfsc	status,2,c
 18756  002DC2  D7C8               	goto	i2l6684
 18757  002DC4                     i2l6690:
 18758                           
 18759                           ;RTC.c: 109: lcdInst(0b10000000);;
 18760  002DC4  0E80               	movlw	128
 18761  002DC6  EC36  F028         	call	i2_lcdInst
 18762                           
 18763                           ;RTC.c: 110: printf("%02d%s | %02d:%02d:%02d", INT_time[4],month,INT_time[2],INT_time[1]
      +                          ,INT_time[0]);
 18764  002DCA  0E0A               	movlw	low STR_21
 18765  002DCC  6E0D               	movwf	i2printf@f,c
 18766  002DCE  0EFB               	movlw	high STR_21
 18767  002DD0  6E0E               	movwf	i2printf@f+1,c
 18768  002DD2  C035  F00F         	movff	i2printRTC@INT_time+8,?i2_printf+2
 18769  002DD6  C036  F010         	movff	i2printRTC@INT_time+9,?i2_printf+3
 18770  002DDA  0E3D               	movlw	low i2printRTC@month
 18771  002DDC  6E11               	movwf	?i2_printf+4,c
 18772  002DDE  0E00               	movlw	high i2printRTC@month
 18773  002DE0  6E12               	movwf	?i2_printf+5,c
 18774  002DE2  C031  F013         	movff	i2printRTC@INT_time+4,?i2_printf+6
 18775  002DE6  C032  F014         	movff	i2printRTC@INT_time+5,?i2_printf+7
 18776  002DEA  C02F  F015         	movff	i2printRTC@INT_time+2,?i2_printf+8
 18777  002DEE  C030  F016         	movff	i2printRTC@INT_time+3,?i2_printf+9
 18778  002DF2  C02D  F017         	movff	i2printRTC@INT_time,?i2_printf+10
 18779  002DF6  C02E  F018         	movff	i2printRTC@INT_time+1,?i2_printf+11
 18780  002DFA  ECC6  F00E         	call	i2_printf	;wreg free
 18781  002DFE  0012               	return		;funcret
 18782  002E00                     __end_ofi2_printRTC:
 18783                           	opt stack 0
 18784                           pclatu	equ	0xFFB
 18785                           pclath	equ	0xFFA
 18786                           tblptru	equ	0xFF8
 18787                           tblptrh	equ	0xFF7
 18788                           tblptrl	equ	0xFF6
 18789                           tablat	equ	0xFF5
 18790                           prodh	equ	0xFF4
 18791                           prodl	equ	0xFF3
 18792                           intcon	equ	0xFF2
 18793                           intcon2	equ	0xFF1
 18794                           intcon3	equ	0xFF0
 18795                           indf0	equ	0xFEF
 18796                           postinc0	equ	0xFEE
 18797                           fsr0h	equ	0xFEA
 18798                           fsr0l	equ	0xFE9
 18799                           wreg	equ	0xFE8
 18800                           postdec1	equ	0xFE5
 18801                           fsr1h	equ	0xFE2
 18802                           fsr1l	equ	0xFE1
 18803                           indf2	equ	0xFDF
 18804                           postinc2	equ	0xFDE
 18805                           postdec2	equ	0xFDD
 18806                           fsr2h	equ	0xFDA
 18807                           fsr2l	equ	0xFD9
 18808                           status	equ	0xFD8
 18809                           
 18810 ;; *************** function i2_strcpy *****************
 18811 ;; Defined at:
 18812 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strcpy.c"
 18813 ;; Parameters:    Size  Location     Type
 18814 ;;  to              2    0[COMRAM] PTR unsigned char 
 18815 ;;		 -> printRTC@month(4), UI@month(4), 
 18816 ;;  from            2    2[COMRAM] PTR const unsigned char 
 18817 ;;		 -> STR_62(4), STR_61(4), STR_60(4), STR_59(4), 
 18818 ;;		 -> STR_58(4), STR_57(4), STR_56(4), STR_55(4), 
 18819 ;;		 -> STR_54(4), STR_53(4), STR_52(4), STR_51(4), 
 18820 ;;		 -> STR_20(4), STR_19(4), STR_18(4), STR_17(4), 
 18821 ;;		 -> STR_16(4), STR_15(4), STR_14(4), STR_13(4), 
 18822 ;;		 -> STR_12(4), STR_11(4), STR_10(4), STR_9(4), 
 18823 ;;		 -> STR_8(4), 
 18824 ;; Auto vars:     Size  Location     Type
 18825 ;;  strcpy          2    4[COMRAM] PTR unsigned char 
 18826 ;;		 -> printRTC@month(4), UI@month(4), 
 18827 ;; Return value:  Size  Location     Type
 18828 ;;                  2    0[COMRAM] PTR unsigned char 
 18829 ;; Registers used:
 18830 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 18831 ;; Tracked objects:
 18832 ;;		On entry : 0/0
 18833 ;;		On exit  : 0/0
 18834 ;;		Unchanged: 0/0
 18835 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18836 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18837 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18838 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18839 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18840 ;;Total ram usage:        6 bytes
 18841 ;; Hardware stack levels used:    1
 18842 ;; This function calls:
 18843 ;;		Nothing
 18844 ;; This function is called by:
 18845 ;;		i2_printRTC
 18846 ;; This function uses a non-reentrant model
 18847 ;;
 18848                           
 18849                           	psect	text63
 18850  004BC2                     __ptext63:
 18851                           	opt stack 0
 18852  004BC2                     i2_strcpy:
 18853                           	opt stack 20
 18854                           
 18855                           ;incstack = 0
 18856  004BC2  C001  F005         	movff	i2strcpy@to,i2strcpy@cp
 18857  004BC6  C002  F006         	movff	i2strcpy@to+1,i2strcpy@cp+1
 18858  004BCA  D004               	goto	i2l6314
 18859  004BCC                     i2l6312:
 18860  004BCC  4A05               	infsnz	i2strcpy@cp,f,c
 18861  004BCE  2A06               	incf	i2strcpy@cp+1,f,c
 18862  004BD0  4A03               	infsnz	i2strcpy@from,f,c
 18863  004BD2  2A04               	incf	i2strcpy@from+1,f,c
 18864  004BD4                     i2l6314:
 18865  004BD4  C003  FFF6         	movff	i2strcpy@from,tblptrl
 18866  004BD8  C004  FFF7         	movff	i2strcpy@from+1,tblptrh
 18867  004BDC                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 18868  004BDC  6AF8               	clrf	tblptru,c
 18869  004BDE                     	endif
 18870  004BDE                     	if	0	;tblptru may be non-zero
 18871  004BDE                     	endif
 18872  004BDE  C005  FFD9         	movff	i2strcpy@cp,fsr2l
 18873  004BE2  C006  FFDA         	movff	i2strcpy@cp+1,fsr2h
 18874  004BE6  0008               	tblrd		*
 18875  004BE8  CFF5 FFDF          	movff	tablat,indf2
 18876  004BEC  50DF               	movf	indf2,w,c
 18877  004BEE  B4D8               	btfsc	status,2,c
 18878  004BF0  0012               	return	
 18879  004BF2  D7EC               	goto	i2l6312
 18880  004BF4                     __end_ofi2_strcpy:
 18881                           	opt stack 0
 18882                           pclatu	equ	0xFFB
 18883                           pclath	equ	0xFFA
 18884                           tblptru	equ	0xFF8
 18885                           tblptrh	equ	0xFF7
 18886                           tblptrl	equ	0xFF6
 18887                           tablat	equ	0xFF5
 18888                           prodh	equ	0xFF4
 18889                           prodl	equ	0xFF3
 18890                           intcon	equ	0xFF2
 18891                           intcon2	equ	0xFF1
 18892                           intcon3	equ	0xFF0
 18893                           indf0	equ	0xFEF
 18894                           postinc0	equ	0xFEE
 18895                           fsr0h	equ	0xFEA
 18896                           fsr0l	equ	0xFE9
 18897                           wreg	equ	0xFE8
 18898                           postdec1	equ	0xFE5
 18899                           fsr1h	equ	0xFE2
 18900                           fsr1l	equ	0xFE1
 18901                           indf2	equ	0xFDF
 18902                           postinc2	equ	0xFDE
 18903                           postdec2	equ	0xFDD
 18904                           fsr2h	equ	0xFDA
 18905                           fsr2l	equ	0xFD9
 18906                           status	equ	0xFD8
 18907                           
 18908 ;; *************** function _inputHandler *****************
 18909 ;; Defined at:
 18910 ;;		line 372 in file "UI.c"
 18911 ;; Parameters:    Size  Location     Type
 18912 ;;		None
 18913 ;; Auto vars:     Size  Location     Type
 18914 ;;		None
 18915 ;; Return value:  Size  Location     Type
 18916 ;;                  2   41[COMRAM] int 
 18917 ;; Registers used:
 18918 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18919 ;; Tracked objects:
 18920 ;;		On entry : 0/0
 18921 ;;		On exit  : 0/0
 18922 ;;		Unchanged: 0/0
 18923 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18924 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18925 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18926 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18927 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18928 ;;Total ram usage:        4 bytes
 18929 ;; Hardware stack levels used:    1
 18930 ;; Hardware stack levels required when called:    4
 18931 ;; This function calls:
 18932 ;;		_change_state_to_logs_11
 18933 ;;		_change_state_to_logs_12
 18934 ;;		_change_state_to_logs_22
 18935 ;;		_change_state_to_logs_23
 18936 ;;		_change_state_to_logs_33
 18937 ;;		_change_state_to_logs_34
 18938 ;;		_change_state_to_menu_11
 18939 ;;		_change_state_to_menu_23
 18940 ;;		i2_change_state_to_menu_12
 18941 ;;		i2_change_state_to_menu_22
 18942 ;; This function is called by:
 18943 ;;		_updateMenu
 18944 ;; This function uses a non-reentrant model
 18945 ;;
 18946                           
 18947                           	psect	text64
 18948  003454                     __ptext64:
 18949                           	opt stack 0
 18950  003454                     _inputHandler:
 18951                           	opt stack 18
 18952                           
 18953                           ;UI.c: 377: if(firstboot){
 18954                           
 18955                           ;incstack = 0
 18956  003454  506F               	movf	_firstboot,w,c
 18957  003456  1070               	iorwf	_firstboot+1,w,c
 18958  003458  B4D8               	btfsc	status,2,c
 18959  00345A  D00B               	goto	i2l6758
 18960                           
 18961                           ;UI.c: 378: change_state_to_menu_11();
 18962  00345C  EC42  F026         	call	_change_state_to_menu_11	;wreg free
 18963                           
 18964                           ;UI.c: 379: firstboot = 0;
 18965  003460  0E00               	movlw	0
 18966  003462  6E70               	movwf	_firstboot+1,c
 18967  003464  0E00               	movlw	0
 18968  003466  6E6F               	movwf	_firstboot,c
 18969                           
 18970                           ;UI.c: 380: return 0;
 18971  003468  0E00               	movlw	0
 18972  00346A  6E2B               	movwf	?_inputHandler+1,c
 18973  00346C  0E00               	movlw	0
 18974  00346E  6E2A               	movwf	?_inputHandler,c
 18975  003470  0012               	return	
 18976  003472                     i2l6758:
 18977                           
 18978                           ;UI.c: 381: }
 18979                           ;UI.c: 382: if (logstate){
 18980  003472  0100               	movlb	0	; () banked
 18981  003474  51F6               	movf	_logstate& (0+255),w,b
 18982  003476  0100               	movlb	0	; () banked
 18983  003478  11F7               	iorwf	(_logstate+1)& (0+255),w,b
 18984  00347A  B4D8               	btfsc	status,2,c
 18985  00347C  D0C7               	goto	i2l6876
 18986                           
 18987                           ; BSR set to: 0
 18988                           ;UI.c: 383: if(input == 'C' && PORTBbits.RB1 == 1){
 18989  00347E  0E43               	movlw	67
 18990  003480  187D               	xorwf	_input,w,c	;volatile
 18991  003482  A4D8               	btfss	status,2,c
 18992  003484  D012               	goto	i2l6776
 18993                           
 18994                           ; BSR set to: 0
 18995  003486  B281               	btfsc	3969,1,c	;volatile
 18996  003488  D009               	goto	i2l6768
 18997  00348A  D00F               	goto	i2l6776
 18998  00348C                     i2l6766:
 18999                           
 19000                           ;UI.c: 386: _delay((unsigned long)((10)*(32000000/4000.0)));
 19001  00348C  0E68               	movlw	104
 19002  00348E  6E2C               	movwf	??_inputHandler& (0+255),c
 19003  003490  0EE4               	movlw	228
 19004  003492                     i2u981_47:
 19005  003492  2EE8               	decfsz	wreg,f,c
 19006  003494  D7FE               	bra	i2u981_47
 19007  003496  2E2C               	decfsz	??_inputHandler& (0+255),f,c
 19008  003498  D7FC               	bra	i2u981_47
 19009  00349A  D000               	nop2	
 19010  00349C                     i2l6768:
 19011  00349C  B281               	btfsc	3969,1,c	;volatile
 19012  00349E  D7F6               	goto	i2l6766
 19013  0034A0                     i2l6770:
 19014                           
 19015                           ;UI.c: 387: }
 19016                           ;UI.c: 388: return 0;
 19017  0034A0  0E00               	movlw	0
 19018  0034A2  6E2B               	movwf	?_inputHandler+1,c
 19019  0034A4  0E00               	movlw	0
 19020  0034A6  6E2A               	movwf	?_inputHandler,c
 19021  0034A8  0012               	return	
 19022  0034AA                     i2l6776:
 19023                           
 19024                           ;UI.c: 390: else if (input == 'D'){
 19025  0034AA  0E44               	movlw	68
 19026  0034AC  187D               	xorwf	_input,w,c	;volatile
 19027  0034AE  A4D8               	btfss	status,2,c
 19028  0034B0  D7F7               	goto	i2l6770
 19029                           
 19030                           ;UI.c: 392: logstate = 0;
 19031  0034B2  0E00               	movlw	0
 19032  0034B4  0100               	movlb	0	; () banked
 19033  0034B6  6FF7               	movwf	(_logstate+1)& (0+255),b
 19034  0034B8  0E00               	movlw	0
 19035  0034BA  6FF6               	movwf	_logstate& (0+255),b
 19036                           
 19037                           ;UI.c: 393: switch(cur_state){
 19038  0034BC  D012               	goto	i2l6794
 19039  0034BE                     i2l6780:
 19040                           
 19041                           ;UI.c: 395: change_state_to_logs_11();
 19042  0034BE  ECBA  F026         	call	_change_state_to_logs_11	;wreg free
 19043                           
 19044                           ;UI.c: 396: break;
 19045  0034C2  D7EE               	goto	i2l6770
 19046  0034C4                     i2l6782:
 19047                           
 19048                           ;UI.c: 398: change_state_to_logs_12();
 19049  0034C4  ECA2  F026         	call	_change_state_to_logs_12	;wreg free
 19050                           
 19051                           ;UI.c: 399: break;
 19052  0034C8  D7EB               	goto	i2l6770
 19053  0034CA                     i2l6784:
 19054                           
 19055                           ;UI.c: 401: change_state_to_logs_22();
 19056  0034CA  EC8A  F026         	call	_change_state_to_logs_22	;wreg free
 19057                           
 19058                           ;UI.c: 402: break;
 19059  0034CE  D7E8               	goto	i2l6770
 19060  0034D0                     i2l6786:
 19061                           
 19062                           ;UI.c: 404: change_state_to_logs_23();
 19063  0034D0  EC00  F027         	call	_change_state_to_logs_23	;wreg free
 19064                           
 19065                           ;UI.c: 405: break;
 19066  0034D4  D7E5               	goto	i2l6770
 19067  0034D6                     i2l6788:
 19068                           
 19069                           ;UI.c: 407: change_state_to_logs_33();
 19070  0034D6  EC72  F026         	call	_change_state_to_logs_33	;wreg free
 19071                           
 19072                           ;UI.c: 408: break;
 19073  0034DA  D7E2               	goto	i2l6770
 19074  0034DC                     i2l6790:
 19075                           
 19076                           ;UI.c: 410: change_state_to_logs_34();
 19077  0034DC  EC5A  F026         	call	_change_state_to_logs_34	;wreg free
 19078                           
 19079                           ;UI.c: 412: }
 19080                           
 19081                           ;UI.c: 411: break;
 19082  0034E0  D7DF               	goto	i2l6770
 19083  0034E2                     i2l6794:
 19084  0034E2  C0E6  F02C         	movff	_cur_state,??_inputHandler
 19085  0034E6  C0E7  F02D         	movff	_cur_state+1,??_inputHandler+1
 19086                           
 19087                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
 19088                           ; Switch size 1, requested type "space"
 19089                           ; Number of cases is 2, Range of values is 3 to 4
 19090                           ; switch strategies available:
 19091                           ; Name         Instructions Cycles
 19092                           ; simple_byte            7     4 (average)
 19093                           ;	Chosen strategy is simple_byte
 19094  0034EA  502D               	movf	??_inputHandler+1,w,c
 19095  0034EC  0A03               	xorlw	3	; case 3
 19096  0034EE  B4D8               	btfsc	status,2,c
 19097  0034F0  D004               	goto	i2l9390
 19098  0034F2  0A07               	xorlw	7	; case 4
 19099  0034F4  B4D8               	btfsc	status,2,c
 19100  0034F6  D00F               	goto	i2l9392
 19101  0034F8  D7D3               	goto	i2l6770
 19102  0034FA                     i2l9390:
 19103                           
 19104                           ; Switch size 1, requested type "space"
 19105                           ; Number of cases is 4, Range of values is 243 to 255
 19106                           ; switch strategies available:
 19107                           ; Name         Instructions Cycles
 19108                           ; simple_byte           13     7 (average)
 19109                           ;	Chosen strategy is simple_byte
 19110  0034FA  502C               	movf	??_inputHandler,w,c
 19111  0034FC  0AF3               	xorlw	243	; case 243
 19112  0034FE  B4D8               	btfsc	status,2,c
 19113  003500  D7DE               	goto	i2l6780
 19114  003502  0A07               	xorlw	7	; case 244
 19115  003504  B4D8               	btfsc	status,2,c
 19116  003506  D7DE               	goto	i2l6782
 19117  003508  0A0A               	xorlw	10	; case 254
 19118  00350A  B4D8               	btfsc	status,2,c
 19119  00350C  D7DE               	goto	i2l6784
 19120  00350E  0A01               	xorlw	1	; case 255
 19121  003510  B4D8               	btfsc	status,2,c
 19122  003512  D7DE               	goto	i2l6786
 19123  003514  D7C5               	goto	i2l6770
 19124  003516                     i2l9392:
 19125                           
 19126                           ; Switch size 1, requested type "space"
 19127                           ; Number of cases is 2, Range of values is 9 to 10
 19128                           ; switch strategies available:
 19129                           ; Name         Instructions Cycles
 19130                           ; simple_byte            7     4 (average)
 19131                           ;	Chosen strategy is simple_byte
 19132  003516  502C               	movf	??_inputHandler,w,c
 19133  003518  0A09               	xorlw	9	; case 9
 19134  00351A  B4D8               	btfsc	status,2,c
 19135  00351C  D7DC               	goto	i2l6788
 19136  00351E  0A03               	xorlw	3	; case 10
 19137  003520  B4D8               	btfsc	status,2,c
 19138  003522  D7DC               	goto	i2l6790
 19139  003524  D7BD               	goto	i2l6770
 19140  003526                     i2l6806:
 19141                           
 19142                           ;UI.c: 422: if(cur_state == 11){
 19143  003526  0E0B               	movlw	11
 19144  003528  0100               	movlb	0	; () banked
 19145  00352A  19E6               	xorwf	_cur_state& (0+255),w,b
 19146  00352C  0100               	movlb	0	; () banked
 19147  00352E  11E7               	iorwf	(_cur_state+1)& (0+255),w,b
 19148  003530  A4D8               	btfss	status,2,c
 19149  003532  D005               	goto	i2l6814
 19150                           
 19151                           ; BSR set to: 0
 19152                           ;UI.c: 423: return 0;
 19153  003534  0E00               	movlw	0
 19154  003536  6E2B               	movwf	?_inputHandler+1,c
 19155  003538  0E00               	movlw	0
 19156  00353A  6E2A               	movwf	?_inputHandler,c
 19157                           
 19158                           ; BSR set to: 0
 19159  00353C  0012               	return	
 19160  00353E                     i2l6814:
 19161                           
 19162                           ; BSR set to: 0
 19163                           ;UI.c: 425: else{
 19164                           ;UI.c: 426: change_state_to_menu_11();
 19165  00353E  EC42  F026         	call	_change_state_to_menu_11	;wreg free
 19166                           
 19167                           ;UI.c: 427: }
 19168                           ;UI.c: 428: return 0;
 19169  003542  0E00               	movlw	0
 19170  003544  6E2B               	movwf	?_inputHandler+1,c
 19171  003546  0E00               	movlw	0
 19172  003548  6E2A               	movwf	?_inputHandler,c
 19173  00354A  0012               	return	
 19174  00354C                     i2l6820:
 19175                           
 19176                           ;UI.c: 430: if(cur_state == 22 | cur_state == 12){
 19177  00354C  0E16               	movlw	22
 19178  00354E  0100               	movlb	0	; () banked
 19179  003550  19E6               	xorwf	_cur_state& (0+255),w,b
 19180  003552  0100               	movlb	0	; () banked
 19181  003554  11E7               	iorwf	(_cur_state+1)& (0+255),w,b
 19182  003556  B4D8               	btfsc	status,2,c
 19183  003558  D007               	goto	i2l6824
 19184                           
 19185                           ; BSR set to: 0
 19186  00355A  0E0C               	movlw	12
 19187  00355C  0100               	movlb	0	; () banked
 19188  00355E  19E6               	xorwf	_cur_state& (0+255),w,b
 19189  003560  0100               	movlb	0	; () banked
 19190  003562  11E7               	iorwf	(_cur_state+1)& (0+255),w,b
 19191  003564  A4D8               	btfss	status,2,c
 19192  003566  D005               	goto	i2l6830
 19193  003568                     i2l6824:
 19194                           
 19195                           ; BSR set to: 0
 19196                           ;UI.c: 431: return 0;
 19197  003568  0E00               	movlw	0
 19198  00356A  6E2B               	movwf	?_inputHandler+1,c
 19199  00356C  0E00               	movlw	0
 19200  00356E  6E2A               	movwf	?_inputHandler,c
 19201                           
 19202                           ; BSR set to: 0
 19203  003570  0012               	return	
 19204  003572                     i2l6830:
 19205                           
 19206                           ; BSR set to: 0
 19207                           ;UI.c: 433: else if(cur_state == 23){
 19208  003572  0E17               	movlw	23
 19209  003574  0100               	movlb	0	; () banked
 19210  003576  19E6               	xorwf	_cur_state& (0+255),w,b
 19211  003578  0100               	movlb	0	; () banked
 19212  00357A  11E7               	iorwf	(_cur_state+1)& (0+255),w,b
 19213  00357C  A4D8               	btfss	status,2,c
 19214  00357E  D003               	goto	i2l6834
 19215                           
 19216                           ; BSR set to: 0
 19217                           ;UI.c: 434: change_state_to_menu_22();
 19218  003580  ECFA  F025         	call	i2_change_state_to_menu_22	;wreg free
 19219                           
 19220                           ;UI.c: 435: }
 19221  003584  D002               	goto	i2l6836
 19222  003586                     i2l6834:
 19223                           
 19224                           ;UI.c: 436: else{
 19225                           ;UI.c: 437: change_state_to_menu_12();
 19226  003586  EC12  F026         	call	i2_change_state_to_menu_12	;wreg free
 19227  00358A                     i2l6836:
 19228                           
 19229                           ;UI.c: 438: }
 19230                           ;UI.c: 439: return 0;
 19231  00358A  0E00               	movlw	0
 19232  00358C  6E2B               	movwf	?_inputHandler+1,c
 19233  00358E  0E00               	movlw	0
 19234  003590  6E2A               	movwf	?_inputHandler,c
 19235  003592  0012               	return	
 19236  003594                     i2l6840:
 19237                           
 19238                           ;UI.c: 441: if(cur_state == 23){
 19239  003594  0E17               	movlw	23
 19240  003596  0100               	movlb	0	; () banked
 19241  003598  19E6               	xorwf	_cur_state& (0+255),w,b
 19242  00359A  0100               	movlb	0	; () banked
 19243  00359C  11E7               	iorwf	(_cur_state+1)& (0+255),w,b
 19244  00359E  A4D8               	btfss	status,2,c
 19245  0035A0  D005               	goto	i2l6848
 19246                           
 19247                           ; BSR set to: 0
 19248                           ;UI.c: 442: return 0;
 19249  0035A2  0E00               	movlw	0
 19250  0035A4  6E2B               	movwf	?_inputHandler+1,c
 19251  0035A6  0E00               	movlw	0
 19252  0035A8  6E2A               	movwf	?_inputHandler,c
 19253                           
 19254                           ; BSR set to: 0
 19255  0035AA  0012               	return	
 19256  0035AC                     i2l6848:
 19257                           
 19258                           ; BSR set to: 0
 19259                           ;UI.c: 444: else{
 19260                           ;UI.c: 445: change_state_to_menu_23();
 19261  0035AC  EC2A  F026         	call	_change_state_to_menu_23	;wreg free
 19262                           
 19263                           ;UI.c: 446: }
 19264                           ;UI.c: 447: return 0;
 19265  0035B0  0E00               	movlw	0
 19266  0035B2  6E2B               	movwf	?_inputHandler+1,c
 19267  0035B4  0E00               	movlw	0
 19268  0035B6  6E2A               	movwf	?_inputHandler,c
 19269  0035B8  0012               	return	
 19270  0035BA                     i2l6854:
 19271                           
 19272                           ;UI.c: 450: up = 1;
 19273  0035BA  0E00               	movlw	0
 19274  0035BC  6E78               	movwf	_up+1,c
 19275  0035BE  0E01               	movlw	1
 19276  0035C0  6E77               	movwf	_up,c
 19277                           
 19278                           ;UI.c: 451: return 1;
 19279  0035C2  0E00               	movlw	0
 19280  0035C4  6E2B               	movwf	?_inputHandler+1,c
 19281  0035C6  0E01               	movlw	1
 19282  0035C8  6E2A               	movwf	?_inputHandler,c
 19283  0035CA  0012               	return	
 19284  0035CC                     i2l6858:
 19285                           
 19286                           ;UI.c: 453: down = 1;
 19287  0035CC  0E00               	movlw	0
 19288  0035CE  6E62               	movwf	_down+1,c
 19289  0035D0  0E01               	movlw	1
 19290  0035D2  6E61               	movwf	_down,c
 19291                           
 19292                           ;UI.c: 454: return 1;
 19293  0035D4  0E00               	movlw	0
 19294  0035D6  6E2B               	movwf	?_inputHandler+1,c
 19295  0035D8  0E01               	movlw	1
 19296  0035DA  6E2A               	movwf	?_inputHandler,c
 19297  0035DC  0012               	return	
 19298  0035DE                     i2l6862:
 19299                           
 19300                           ;UI.c: 456: enter = 1;
 19301  0035DE  0E00               	movlw	0
 19302  0035E0  6E64               	movwf	_enter+1,c
 19303  0035E2  0E01               	movlw	1
 19304  0035E4  6E63               	movwf	_enter,c
 19305                           
 19306                           ;UI.c: 457: return 1;
 19307  0035E6  0E00               	movlw	0
 19308  0035E8  6E2B               	movwf	?_inputHandler+1,c
 19309  0035EA  0E01               	movlw	1
 19310  0035EC  6E2A               	movwf	?_inputHandler,c
 19311  0035EE  0012               	return	
 19312  0035F0                     i2l6866:
 19313                           
 19314                           ;UI.c: 459: back = 1;
 19315  0035F0  0E00               	movlw	0
 19316  0035F2  6E5A               	movwf	_back+1,c
 19317  0035F4  0E01               	movlw	1
 19318  0035F6  6E59               	movwf	_back,c
 19319                           
 19320                           ;UI.c: 460: return 1;
 19321  0035F8  0E00               	movlw	0
 19322  0035FA  6E2B               	movwf	?_inputHandler+1,c
 19323  0035FC  0E01               	movlw	1
 19324  0035FE  6E2A               	movwf	?_inputHandler,c
 19325  003600  0012               	return	
 19326  003602                     i2l6870:
 19327                           
 19328                           ;UI.c: 463: return 1;
 19329  003602  0E00               	movlw	0
 19330  003604  6E2B               	movwf	?_inputHandler+1,c
 19331  003606  0E01               	movlw	1
 19332  003608  6E2A               	movwf	?_inputHandler,c
 19333                           
 19334                           ;UI.c: 464: }
 19335  00360A  0012               	return	
 19336  00360C                     i2l6876:
 19337  00360C  507D               	movf	_input,w,c	;volatile
 19338                           
 19339                           ; Switch size 1, requested type "space"
 19340                           ; Number of cases is 7, Range of values is 49 to 68
 19341                           ; switch strategies available:
 19342                           ; Name         Instructions Cycles
 19343                           ; simple_byte           22    12 (average)
 19344                           ;	Chosen strategy is simple_byte
 19345  00360E  0A31               	xorlw	49	; case 49
 19346  003610  B4D8               	btfsc	status,2,c
 19347  003612  D789               	goto	i2l6806
 19348  003614  0A03               	xorlw	3	; case 50
 19349  003616  B4D8               	btfsc	status,2,c
 19350  003618  D799               	goto	i2l6820
 19351  00361A  0A01               	xorlw	1	; case 51
 19352  00361C  B4D8               	btfsc	status,2,c
 19353  00361E  D7BA               	goto	i2l6840
 19354  003620  0A72               	xorlw	114	; case 65
 19355  003622  B4D8               	btfsc	status,2,c
 19356  003624  D7CA               	goto	i2l6854
 19357  003626  0A03               	xorlw	3	; case 66
 19358  003628  B4D8               	btfsc	status,2,c
 19359  00362A  D7D0               	goto	i2l6858
 19360  00362C  0A01               	xorlw	1	; case 67
 19361  00362E  B4D8               	btfsc	status,2,c
 19362  003630  D7D6               	goto	i2l6862
 19363  003632  0A07               	xorlw	7	; case 68
 19364  003634  B4D8               	btfsc	status,2,c
 19365  003636  D7DC               	goto	i2l6866
 19366  003638  D7E4               	goto	i2l6870
 19367  00363A                     __end_of_inputHandler:
 19368                           	opt stack 0
 19369                           pclatu	equ	0xFFB
 19370                           pclath	equ	0xFFA
 19371                           tblptru	equ	0xFF8
 19372                           tblptrh	equ	0xFF7
 19373                           tblptrl	equ	0xFF6
 19374                           tablat	equ	0xFF5
 19375                           prodh	equ	0xFF4
 19376                           prodl	equ	0xFF3
 19377                           intcon	equ	0xFF2
 19378                           intcon2	equ	0xFF1
 19379                           intcon3	equ	0xFF0
 19380                           indf0	equ	0xFEF
 19381                           postinc0	equ	0xFEE
 19382                           fsr0h	equ	0xFEA
 19383                           fsr0l	equ	0xFE9
 19384                           wreg	equ	0xFE8
 19385                           postdec1	equ	0xFE5
 19386                           fsr1h	equ	0xFE2
 19387                           fsr1l	equ	0xFE1
 19388                           indf2	equ	0xFDF
 19389                           postinc2	equ	0xFDE
 19390                           postdec2	equ	0xFDD
 19391                           fsr2h	equ	0xFDA
 19392                           fsr2l	equ	0xFD9
 19393                           status	equ	0xFD8
 19394                           
 19395 ;; *************** function i2_change_state_to_menu_22 *****************
 19396 ;; Defined at:
 19397 ;;		line 498 in file "UI.c"
 19398 ;; Parameters:    Size  Location     Type
 19399 ;;		None
 19400 ;; Auto vars:     Size  Location     Type
 19401 ;;		None
 19402 ;; Return value:  Size  Location     Type
 19403 ;;                  1    wreg      void 
 19404 ;; Registers used:
 19405 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19406 ;; Tracked objects:
 19407 ;;		On entry : 0/0
 19408 ;;		On exit  : 0/0
 19409 ;;		Unchanged: 0/0
 19410 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19411 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19412 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19413 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19414 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19415 ;;Total ram usage:        0 bytes
 19416 ;; Hardware stack levels used:    1
 19417 ;; Hardware stack levels required when called:    3
 19418 ;; This function calls:
 19419 ;;		i2_lcdInst
 19420 ;;		i2_printf
 19421 ;; This function is called by:
 19422 ;;		_updateMenu
 19423 ;;		_inputHandler
 19424 ;; This function uses a non-reentrant model
 19425 ;;
 19426                           
 19427                           	psect	text65
 19428  004BF4                     __ptext65:
 19429                           	opt stack 0
 19430  004BF4                     i2_change_state_to_menu_22:
 19431                           	opt stack 19
 19432                           
 19433                           ;UI.c: 499: cur_state = 22;
 19434                           
 19435                           ;incstack = 0
 19436  004BF4  0E00               	movlw	0
 19437  004BF6  0100               	movlb	0	; () banked
 19438  004BF8  6FE7               	movwf	(_cur_state+1)& (0+255),b
 19439  004BFA  0E16               	movlw	22
 19440  004BFC  6FE6               	movwf	_cur_state& (0+255),b
 19441                           
 19442                           ; BSR set to: 0
 19443                           ;UI.c: 501: lcdInst(0b10000000);;
 19444  004BFE  0E80               	movlw	128
 19445  004C00  EC36  F028         	call	i2_lcdInst
 19446                           
 19447                           ;UI.c: 502: printf("2. SORT        <");
 19448  004C04  0EC4               	movlw	low STR_34
 19449  004C06  6E0D               	movwf	i2printf@f,c
 19450  004C08  0EFD               	movlw	high STR_34
 19451  004C0A  6E0E               	movwf	i2printf@f+1,c
 19452  004C0C  ECC6  F00E         	call	i2_printf	;wreg free
 19453                           
 19454                           ;UI.c: 503: lcdInst(0b11000000);;
 19455  004C10  0EC0               	movlw	192
 19456  004C12  EC36  F028         	call	i2_lcdInst
 19457                           
 19458                           ;UI.c: 504: printf("3. LOGS         ");
 19459  004C16  0E09               	movlw	low STR_36
 19460  004C18  6E0D               	movwf	i2printf@f,c
 19461  004C1A  0EFD               	movlw	high STR_36
 19462  004C1C  6E0E               	movwf	i2printf@f+1,c
 19463  004C1E  ECC6  F00E         	call	i2_printf	;wreg free
 19464  004C22  0012               	return		;funcret
 19465  004C24                     __end_ofi2_change_state_to_menu_22:
 19466                           	opt stack 0
 19467                           pclatu	equ	0xFFB
 19468                           pclath	equ	0xFFA
 19469                           tblptru	equ	0xFF8
 19470                           tblptrh	equ	0xFF7
 19471                           tblptrl	equ	0xFF6
 19472                           tablat	equ	0xFF5
 19473                           prodh	equ	0xFF4
 19474                           prodl	equ	0xFF3
 19475                           intcon	equ	0xFF2
 19476                           intcon2	equ	0xFF1
 19477                           intcon3	equ	0xFF0
 19478                           indf0	equ	0xFEF
 19479                           postinc0	equ	0xFEE
 19480                           fsr0h	equ	0xFEA
 19481                           fsr0l	equ	0xFE9
 19482                           wreg	equ	0xFE8
 19483                           postdec1	equ	0xFE5
 19484                           fsr1h	equ	0xFE2
 19485                           fsr1l	equ	0xFE1
 19486                           indf2	equ	0xFDF
 19487                           postinc2	equ	0xFDE
 19488                           postdec2	equ	0xFDD
 19489                           fsr2h	equ	0xFDA
 19490                           fsr2l	equ	0xFD9
 19491                           status	equ	0xFD8
 19492                           
 19493 ;; *************** function i2_change_state_to_menu_12 *****************
 19494 ;; Defined at:
 19495 ;;		line 490 in file "UI.c"
 19496 ;; Parameters:    Size  Location     Type
 19497 ;;		None
 19498 ;; Auto vars:     Size  Location     Type
 19499 ;;		None
 19500 ;; Return value:  Size  Location     Type
 19501 ;;                  1    wreg      void 
 19502 ;; Registers used:
 19503 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19504 ;; Tracked objects:
 19505 ;;		On entry : 0/0
 19506 ;;		On exit  : 0/0
 19507 ;;		Unchanged: 0/0
 19508 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19509 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19510 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19511 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19512 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19513 ;;Total ram usage:        0 bytes
 19514 ;; Hardware stack levels used:    1
 19515 ;; Hardware stack levels required when called:    3
 19516 ;; This function calls:
 19517 ;;		i2_lcdInst
 19518 ;;		i2_printf
 19519 ;; This function is called by:
 19520 ;;		_updateMenu
 19521 ;;		_inputHandler
 19522 ;; This function uses a non-reentrant model
 19523 ;;
 19524                           
 19525                           	psect	text66
 19526  004C24                     __ptext66:
 19527                           	opt stack 0
 19528  004C24                     i2_change_state_to_menu_12:
 19529                           	opt stack 19
 19530                           
 19531                           ;UI.c: 491: cur_state = 12;
 19532                           
 19533                           ;incstack = 0
 19534  004C24  0E00               	movlw	0
 19535  004C26  0100               	movlb	0	; () banked
 19536  004C28  6FE7               	movwf	(_cur_state+1)& (0+255),b
 19537  004C2A  0E0C               	movlw	12
 19538  004C2C  6FE6               	movwf	_cur_state& (0+255),b
 19539                           
 19540                           ; BSR set to: 0
 19541                           ;UI.c: 493: lcdInst(0b10000000);;
 19542  004C2E  0E80               	movlw	128
 19543  004C30  EC36  F028         	call	i2_lcdInst
 19544                           
 19545                           ;UI.c: 494: printf("1. DATE/TIME    ");
 19546  004C34  0E2B               	movlw	low STR_33
 19547  004C36  6E0D               	movwf	i2printf@f,c
 19548  004C38  0EFD               	movlw	high STR_33
 19549  004C3A  6E0E               	movwf	i2printf@f+1,c
 19550  004C3C  ECC6  F00E         	call	i2_printf	;wreg free
 19551                           
 19552                           ;UI.c: 495: lcdInst(0b11000000);;
 19553  004C40  0EC0               	movlw	192
 19554  004C42  EC36  F028         	call	i2_lcdInst
 19555                           
 19556                           ;UI.c: 496: printf("2. SORT        <");
 19557  004C46  0EC4               	movlw	low STR_34
 19558  004C48  6E0D               	movwf	i2printf@f,c
 19559  004C4A  0EFD               	movlw	high STR_34
 19560  004C4C  6E0E               	movwf	i2printf@f+1,c
 19561  004C4E  ECC6  F00E         	call	i2_printf	;wreg free
 19562  004C52  0012               	return		;funcret
 19563  004C54                     __end_ofi2_change_state_to_menu_12:
 19564                           	opt stack 0
 19565                           pclatu	equ	0xFFB
 19566                           pclath	equ	0xFFA
 19567                           tblptru	equ	0xFF8
 19568                           tblptrh	equ	0xFF7
 19569                           tblptrl	equ	0xFF6
 19570                           tablat	equ	0xFF5
 19571                           prodh	equ	0xFF4
 19572                           prodl	equ	0xFF3
 19573                           intcon	equ	0xFF2
 19574                           intcon2	equ	0xFF1
 19575                           intcon3	equ	0xFF0
 19576                           indf0	equ	0xFEF
 19577                           postinc0	equ	0xFEE
 19578                           fsr0h	equ	0xFEA
 19579                           fsr0l	equ	0xFE9
 19580                           wreg	equ	0xFE8
 19581                           postdec1	equ	0xFE5
 19582                           fsr1h	equ	0xFE2
 19583                           fsr1l	equ	0xFE1
 19584                           indf2	equ	0xFDF
 19585                           postinc2	equ	0xFDE
 19586                           postdec2	equ	0xFDD
 19587                           fsr2h	equ	0xFDA
 19588                           fsr2l	equ	0xFD9
 19589                           status	equ	0xFD8
 19590                           
 19591 ;; *************** function _change_state_to_menu_23 *****************
 19592 ;; Defined at:
 19593 ;;		line 506 in file "UI.c"
 19594 ;; Parameters:    Size  Location     Type
 19595 ;;		None
 19596 ;; Auto vars:     Size  Location     Type
 19597 ;;		None
 19598 ;; Return value:  Size  Location     Type
 19599 ;;                  1    wreg      void 
 19600 ;; Registers used:
 19601 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19602 ;; Tracked objects:
 19603 ;;		On entry : 0/0
 19604 ;;		On exit  : 0/0
 19605 ;;		Unchanged: 0/0
 19606 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19607 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19608 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19609 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19610 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19611 ;;Total ram usage:        0 bytes
 19612 ;; Hardware stack levels used:    1
 19613 ;; Hardware stack levels required when called:    3
 19614 ;; This function calls:
 19615 ;;		i2_lcdInst
 19616 ;;		i2_printf
 19617 ;; This function is called by:
 19618 ;;		_updateMenu
 19619 ;;		_inputHandler
 19620 ;; This function uses a non-reentrant model
 19621 ;;
 19622                           
 19623                           	psect	text67
 19624  004C54                     __ptext67:
 19625                           	opt stack 0
 19626  004C54                     _change_state_to_menu_23:
 19627                           	opt stack 18
 19628                           
 19629                           ;UI.c: 507: cur_state = 23;
 19630                           
 19631                           ;incstack = 0
 19632  004C54  0E00               	movlw	0
 19633  004C56  0100               	movlb	0	; () banked
 19634  004C58  6FE7               	movwf	(_cur_state+1)& (0+255),b
 19635  004C5A  0E17               	movlw	23
 19636  004C5C  6FE6               	movwf	_cur_state& (0+255),b
 19637                           
 19638                           ; BSR set to: 0
 19639                           ;UI.c: 509: lcdInst(0b10000000);;
 19640  004C5E  0E80               	movlw	128
 19641  004C60  EC36  F028         	call	i2_lcdInst
 19642                           
 19643                           ;UI.c: 510: printf("2. SORT         ");
 19644  004C64  0E1A               	movlw	low STR_32
 19645  004C66  6E0D               	movwf	i2printf@f,c
 19646  004C68  0EFD               	movlw	high STR_32
 19647  004C6A  6E0E               	movwf	i2printf@f+1,c
 19648  004C6C  ECC6  F00E         	call	i2_printf	;wreg free
 19649                           
 19650                           ;UI.c: 511: lcdInst(0b11000000);;
 19651  004C70  0EC0               	movlw	192
 19652  004C72  EC36  F028         	call	i2_lcdInst
 19653                           
 19654                           ;UI.c: 512: printf("3. LOGS        <");
 19655  004C76  0EB3               	movlw	low STR_38
 19656  004C78  6E0D               	movwf	i2printf@f,c
 19657  004C7A  0EFD               	movlw	high STR_38
 19658  004C7C  6E0E               	movwf	i2printf@f+1,c
 19659  004C7E  ECC6  F00E         	call	i2_printf	;wreg free
 19660  004C82  0012               	return		;funcret
 19661  004C84                     __end_of_change_state_to_menu_23:
 19662                           	opt stack 0
 19663                           pclatu	equ	0xFFB
 19664                           pclath	equ	0xFFA
 19665                           tblptru	equ	0xFF8
 19666                           tblptrh	equ	0xFF7
 19667                           tblptrl	equ	0xFF6
 19668                           tablat	equ	0xFF5
 19669                           prodh	equ	0xFF4
 19670                           prodl	equ	0xFF3
 19671                           intcon	equ	0xFF2
 19672                           intcon2	equ	0xFF1
 19673                           intcon3	equ	0xFF0
 19674                           indf0	equ	0xFEF
 19675                           postinc0	equ	0xFEE
 19676                           fsr0h	equ	0xFEA
 19677                           fsr0l	equ	0xFE9
 19678                           wreg	equ	0xFE8
 19679                           postdec1	equ	0xFE5
 19680                           fsr1h	equ	0xFE2
 19681                           fsr1l	equ	0xFE1
 19682                           indf2	equ	0xFDF
 19683                           postinc2	equ	0xFDE
 19684                           postdec2	equ	0xFDD
 19685                           fsr2h	equ	0xFDA
 19686                           fsr2l	equ	0xFD9
 19687                           status	equ	0xFD8
 19688                           
 19689 ;; *************** function _change_state_to_menu_11 *****************
 19690 ;; Defined at:
 19691 ;;		line 482 in file "UI.c"
 19692 ;; Parameters:    Size  Location     Type
 19693 ;;		None
 19694 ;; Auto vars:     Size  Location     Type
 19695 ;;		None
 19696 ;; Return value:  Size  Location     Type
 19697 ;;                  1    wreg      void 
 19698 ;; Registers used:
 19699 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19700 ;; Tracked objects:
 19701 ;;		On entry : 0/0
 19702 ;;		On exit  : 0/0
 19703 ;;		Unchanged: 0/0
 19704 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19705 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19706 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19707 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19708 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19709 ;;Total ram usage:        0 bytes
 19710 ;; Hardware stack levels used:    1
 19711 ;; Hardware stack levels required when called:    3
 19712 ;; This function calls:
 19713 ;;		i2_lcdInst
 19714 ;;		i2_printf
 19715 ;; This function is called by:
 19716 ;;		_updateMenu
 19717 ;;		_inputHandler
 19718 ;; This function uses a non-reentrant model
 19719 ;;
 19720                           
 19721                           	psect	text68
 19722  004C84                     __ptext68:
 19723                           	opt stack 0
 19724  004C84                     _change_state_to_menu_11:
 19725                           	opt stack 18
 19726                           
 19727                           ;UI.c: 483: cur_state = 11;
 19728                           
 19729                           ;incstack = 0
 19730  004C84  0E00               	movlw	0
 19731  004C86  0100               	movlb	0	; () banked
 19732  004C88  6FE7               	movwf	(_cur_state+1)& (0+255),b
 19733  004C8A  0E0B               	movlw	11
 19734  004C8C  6FE6               	movwf	_cur_state& (0+255),b
 19735                           
 19736                           ; BSR set to: 0
 19737                           ;UI.c: 485: lcdInst(0b10000000);;
 19738  004C8E  0E80               	movlw	128
 19739  004C90  EC36  F028         	call	i2_lcdInst
 19740                           
 19741                           ;UI.c: 486: printf("1. DATE/TIME   <");
 19742  004C94  0ED5               	movlw	low STR_31
 19743  004C96  6E0D               	movwf	i2printf@f,c
 19744  004C98  0EFD               	movlw	high STR_31
 19745  004C9A  6E0E               	movwf	i2printf@f+1,c
 19746  004C9C  ECC6  F00E         	call	i2_printf	;wreg free
 19747                           
 19748                           ;UI.c: 487: lcdInst(0b11000000);;
 19749  004CA0  0EC0               	movlw	192
 19750  004CA2  EC36  F028         	call	i2_lcdInst
 19751                           
 19752                           ;UI.c: 488: printf("2. SORT         ");
 19753  004CA6  0E1A               	movlw	low STR_32
 19754  004CA8  6E0D               	movwf	i2printf@f,c
 19755  004CAA  0EFD               	movlw	high STR_32
 19756  004CAC  6E0E               	movwf	i2printf@f+1,c
 19757  004CAE  ECC6  F00E         	call	i2_printf	;wreg free
 19758  004CB2  0012               	return		;funcret
 19759  004CB4                     __end_of_change_state_to_menu_11:
 19760                           	opt stack 0
 19761                           pclatu	equ	0xFFB
 19762                           pclath	equ	0xFFA
 19763                           tblptru	equ	0xFF8
 19764                           tblptrh	equ	0xFF7
 19765                           tblptrl	equ	0xFF6
 19766                           tablat	equ	0xFF5
 19767                           prodh	equ	0xFF4
 19768                           prodl	equ	0xFF3
 19769                           intcon	equ	0xFF2
 19770                           intcon2	equ	0xFF1
 19771                           intcon3	equ	0xFF0
 19772                           indf0	equ	0xFEF
 19773                           postinc0	equ	0xFEE
 19774                           fsr0h	equ	0xFEA
 19775                           fsr0l	equ	0xFE9
 19776                           wreg	equ	0xFE8
 19777                           postdec1	equ	0xFE5
 19778                           fsr1h	equ	0xFE2
 19779                           fsr1l	equ	0xFE1
 19780                           indf2	equ	0xFDF
 19781                           postinc2	equ	0xFDE
 19782                           postdec2	equ	0xFDD
 19783                           fsr2h	equ	0xFDA
 19784                           fsr2l	equ	0xFD9
 19785                           status	equ	0xFD8
 19786                           
 19787 ;; *************** function _change_state_to_logs_34 *****************
 19788 ;; Defined at:
 19789 ;;		line 549 in file "UI.c"
 19790 ;; Parameters:    Size  Location     Type
 19791 ;;		None
 19792 ;; Auto vars:     Size  Location     Type
 19793 ;;		None
 19794 ;; Return value:  Size  Location     Type
 19795 ;;                  1    wreg      void 
 19796 ;; Registers used:
 19797 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19798 ;; Tracked objects:
 19799 ;;		On entry : 0/0
 19800 ;;		On exit  : 0/0
 19801 ;;		Unchanged: 0/0
 19802 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19803 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19804 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19805 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19806 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19807 ;;Total ram usage:        0 bytes
 19808 ;; Hardware stack levels used:    1
 19809 ;; Hardware stack levels required when called:    3
 19810 ;; This function calls:
 19811 ;;		i2_lcdInst
 19812 ;;		i2_printf
 19813 ;; This function is called by:
 19814 ;;		_updateMenu
 19815 ;;		_inputHandler
 19816 ;; This function uses a non-reentrant model
 19817 ;;
 19818                           
 19819                           	psect	text69
 19820  004CB4                     __ptext69:
 19821                           	opt stack 0
 19822  004CB4                     _change_state_to_logs_34:
 19823                           	opt stack 18
 19824                           
 19825                           ;UI.c: 550: cur_state = 1034;
 19826                           
 19827                           ;incstack = 0
 19828  004CB4  0E04               	movlw	4
 19829  004CB6  0100               	movlb	0	; () banked
 19830  004CB8  6FE7               	movwf	(_cur_state+1)& (0+255),b
 19831  004CBA  0E0A               	movlw	10
 19832  004CBC  6FE6               	movwf	_cur_state& (0+255),b
 19833                           
 19834                           ; BSR set to: 0
 19835                           ;UI.c: 551: lcdInst(0b10000000);;
 19836  004CBE  0E80               	movlw	128
 19837  004CC0  EC36  F028         	call	i2_lcdInst
 19838                           
 19839                           ;UI.c: 552: printf("LOG 3           ");
 19840  004CC4  0EE7               	movlw	low STR_44
 19841  004CC6  6E0D               	movwf	i2printf@f,c
 19842  004CC8  0EFC               	movlw	high STR_44
 19843  004CCA  6E0E               	movwf	i2printf@f+1,c
 19844  004CCC  ECC6  F00E         	call	i2_printf	;wreg free
 19845                           
 19846                           ;UI.c: 553: lcdInst(0b11000000);;
 19847  004CD0  0EC0               	movlw	192
 19848  004CD2  EC36  F028         	call	i2_lcdInst
 19849                           
 19850                           ;UI.c: 554: printf("LOG 4          <");
 19851  004CD6  0EA2               	movlw	low STR_50
 19852  004CD8  6E0D               	movwf	i2printf@f,c
 19853  004CDA  0EFD               	movlw	high STR_50
 19854  004CDC  6E0E               	movwf	i2printf@f+1,c
 19855  004CDE  ECC6  F00E         	call	i2_printf	;wreg free
 19856  004CE2  0012               	return		;funcret
 19857  004CE4                     __end_of_change_state_to_logs_34:
 19858                           	opt stack 0
 19859                           pclatu	equ	0xFFB
 19860                           pclath	equ	0xFFA
 19861                           tblptru	equ	0xFF8
 19862                           tblptrh	equ	0xFF7
 19863                           tblptrl	equ	0xFF6
 19864                           tablat	equ	0xFF5
 19865                           prodh	equ	0xFF4
 19866                           prodl	equ	0xFF3
 19867                           intcon	equ	0xFF2
 19868                           intcon2	equ	0xFF1
 19869                           intcon3	equ	0xFF0
 19870                           indf0	equ	0xFEF
 19871                           postinc0	equ	0xFEE
 19872                           fsr0h	equ	0xFEA
 19873                           fsr0l	equ	0xFE9
 19874                           wreg	equ	0xFE8
 19875                           postdec1	equ	0xFE5
 19876                           fsr1h	equ	0xFE2
 19877                           fsr1l	equ	0xFE1
 19878                           indf2	equ	0xFDF
 19879                           postinc2	equ	0xFDE
 19880                           postdec2	equ	0xFDD
 19881                           fsr2h	equ	0xFDA
 19882                           fsr2l	equ	0xFD9
 19883                           status	equ	0xFD8
 19884                           
 19885 ;; *************** function _change_state_to_logs_33 *****************
 19886 ;; Defined at:
 19887 ;;		line 542 in file "UI.c"
 19888 ;; Parameters:    Size  Location     Type
 19889 ;;		None
 19890 ;; Auto vars:     Size  Location     Type
 19891 ;;		None
 19892 ;; Return value:  Size  Location     Type
 19893 ;;                  1    wreg      void 
 19894 ;; Registers used:
 19895 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19896 ;; Tracked objects:
 19897 ;;		On entry : 0/0
 19898 ;;		On exit  : 0/0
 19899 ;;		Unchanged: 0/0
 19900 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19901 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19902 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19903 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19904 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19905 ;;Total ram usage:        0 bytes
 19906 ;; Hardware stack levels used:    1
 19907 ;; Hardware stack levels required when called:    3
 19908 ;; This function calls:
 19909 ;;		i2_lcdInst
 19910 ;;		i2_printf
 19911 ;; This function is called by:
 19912 ;;		_updateMenu
 19913 ;;		_inputHandler
 19914 ;; This function uses a non-reentrant model
 19915 ;;
 19916                           
 19917                           	psect	text70
 19918  004CE4                     __ptext70:
 19919                           	opt stack 0
 19920  004CE4                     _change_state_to_logs_33:
 19921                           	opt stack 18
 19922                           
 19923                           ;UI.c: 543: cur_state = 1033;
 19924                           
 19925                           ;incstack = 0
 19926  004CE4  0E04               	movlw	4
 19927  004CE6  0100               	movlb	0	; () banked
 19928  004CE8  6FE7               	movwf	(_cur_state+1)& (0+255),b
 19929  004CEA  0E09               	movlw	9
 19930  004CEC  6FE6               	movwf	_cur_state& (0+255),b
 19931                           
 19932                           ; BSR set to: 0
 19933                           ;UI.c: 544: lcdInst(0b10000000);;
 19934  004CEE  0E80               	movlw	128
 19935  004CF0  EC36  F028         	call	i2_lcdInst
 19936                           
 19937                           ;UI.c: 545: printf("LOG 3          <");
 19938  004CF4  0E91               	movlw	low STR_46
 19939  004CF6  6E0D               	movwf	i2printf@f,c
 19940  004CF8  0EFD               	movlw	high STR_46
 19941  004CFA  6E0E               	movwf	i2printf@f+1,c
 19942  004CFC  ECC6  F00E         	call	i2_printf	;wreg free
 19943                           
 19944                           ;UI.c: 546: lcdInst(0b11000000);;
 19945  004D00  0EC0               	movlw	192
 19946  004D02  EC36  F028         	call	i2_lcdInst
 19947                           
 19948                           ;UI.c: 547: printf("LOG 4           ");
 19949  004D06  0EF8               	movlw	low STR_48
 19950  004D08  6E0D               	movwf	i2printf@f,c
 19951  004D0A  0EFC               	movlw	high STR_48
 19952  004D0C  6E0E               	movwf	i2printf@f+1,c
 19953  004D0E  ECC6  F00E         	call	i2_printf	;wreg free
 19954  004D12  0012               	return		;funcret
 19955  004D14                     __end_of_change_state_to_logs_33:
 19956                           	opt stack 0
 19957                           pclatu	equ	0xFFB
 19958                           pclath	equ	0xFFA
 19959                           tblptru	equ	0xFF8
 19960                           tblptrh	equ	0xFF7
 19961                           tblptrl	equ	0xFF6
 19962                           tablat	equ	0xFF5
 19963                           prodh	equ	0xFF4
 19964                           prodl	equ	0xFF3
 19965                           intcon	equ	0xFF2
 19966                           intcon2	equ	0xFF1
 19967                           intcon3	equ	0xFF0
 19968                           indf0	equ	0xFEF
 19969                           postinc0	equ	0xFEE
 19970                           fsr0h	equ	0xFEA
 19971                           fsr0l	equ	0xFE9
 19972                           wreg	equ	0xFE8
 19973                           postdec1	equ	0xFE5
 19974                           fsr1h	equ	0xFE2
 19975                           fsr1l	equ	0xFE1
 19976                           indf2	equ	0xFDF
 19977                           postinc2	equ	0xFDE
 19978                           postdec2	equ	0xFDD
 19979                           fsr2h	equ	0xFDA
 19980                           fsr2l	equ	0xFD9
 19981                           status	equ	0xFD8
 19982                           
 19983 ;; *************** function _change_state_to_logs_23 *****************
 19984 ;; Defined at:
 19985 ;;		line 535 in file "UI.c"
 19986 ;; Parameters:    Size  Location     Type
 19987 ;;		None
 19988 ;; Auto vars:     Size  Location     Type
 19989 ;;		None
 19990 ;; Return value:  Size  Location     Type
 19991 ;;                  1    wreg      void 
 19992 ;; Registers used:
 19993 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19994 ;; Tracked objects:
 19995 ;;		On entry : 0/0
 19996 ;;		On exit  : 0/0
 19997 ;;		Unchanged: 0/0
 19998 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19999 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20000 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20001 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20002 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20003 ;;Total ram usage:        0 bytes
 20004 ;; Hardware stack levels used:    1
 20005 ;; Hardware stack levels required when called:    3
 20006 ;; This function calls:
 20007 ;;		i2_lcdInst
 20008 ;;		i2_printf
 20009 ;; This function is called by:
 20010 ;;		_updateMenu
 20011 ;;		_inputHandler
 20012 ;; This function uses a non-reentrant model
 20013 ;;
 20014                           
 20015                           	psect	text71
 20016  004E00                     __ptext71:
 20017                           	opt stack 0
 20018  004E00                     _change_state_to_logs_23:
 20019                           	opt stack 18
 20020                           
 20021                           ;UI.c: 536: cur_state = 1023;
 20022                           
 20023                           ;incstack = 0
 20024  004E00  0E03               	movlw	3
 20025  004E02  0100               	movlb	0	; () banked
 20026  004E04  6FE7               	movwf	(_cur_state+1)& (0+255),b
 20027  004E06  69E6               	setf	_cur_state& (0+255),b
 20028                           
 20029                           ; BSR set to: 0
 20030                           ;UI.c: 537: lcdInst(0b10000000);;
 20031  004E08  0E80               	movlw	128
 20032  004E0A  EC36  F028         	call	i2_lcdInst
 20033                           
 20034                           ;UI.c: 538: printf("LOG 2           ");
 20035  004E0E  0ED6               	movlw	low STR_40
 20036  004E10  6E0D               	movwf	i2printf@f,c
 20037  004E12  0EFC               	movlw	high STR_40
 20038  004E14  6E0E               	movwf	i2printf@f+1,c
 20039  004E16  ECC6  F00E         	call	i2_printf	;wreg free
 20040                           
 20041                           ;UI.c: 539: lcdInst(0b11000000);;
 20042  004E1A  0EC0               	movlw	192
 20043  004E1C  EC36  F028         	call	i2_lcdInst
 20044                           
 20045                           ;UI.c: 540: printf("LOG 3          <");
 20046  004E20  0E91               	movlw	low STR_46
 20047  004E22  6E0D               	movwf	i2printf@f,c
 20048  004E24  0EFD               	movlw	high STR_46
 20049  004E26  6E0E               	movwf	i2printf@f+1,c
 20050  004E28  ECC6  F00E         	call	i2_printf	;wreg free
 20051  004E2C  0012               	return		;funcret
 20052  004E2E                     __end_of_change_state_to_logs_23:
 20053                           	opt stack 0
 20054                           pclatu	equ	0xFFB
 20055                           pclath	equ	0xFFA
 20056                           tblptru	equ	0xFF8
 20057                           tblptrh	equ	0xFF7
 20058                           tblptrl	equ	0xFF6
 20059                           tablat	equ	0xFF5
 20060                           prodh	equ	0xFF4
 20061                           prodl	equ	0xFF3
 20062                           intcon	equ	0xFF2
 20063                           intcon2	equ	0xFF1
 20064                           intcon3	equ	0xFF0
 20065                           indf0	equ	0xFEF
 20066                           postinc0	equ	0xFEE
 20067                           fsr0h	equ	0xFEA
 20068                           fsr0l	equ	0xFE9
 20069                           wreg	equ	0xFE8
 20070                           postdec1	equ	0xFE5
 20071                           fsr1h	equ	0xFE2
 20072                           fsr1l	equ	0xFE1
 20073                           indf2	equ	0xFDF
 20074                           postinc2	equ	0xFDE
 20075                           postdec2	equ	0xFDD
 20076                           fsr2h	equ	0xFDA
 20077                           fsr2l	equ	0xFD9
 20078                           status	equ	0xFD8
 20079                           
 20080 ;; *************** function _change_state_to_logs_22 *****************
 20081 ;; Defined at:
 20082 ;;		line 528 in file "UI.c"
 20083 ;; Parameters:    Size  Location     Type
 20084 ;;		None
 20085 ;; Auto vars:     Size  Location     Type
 20086 ;;		None
 20087 ;; Return value:  Size  Location     Type
 20088 ;;                  1    wreg      void 
 20089 ;; Registers used:
 20090 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20091 ;; Tracked objects:
 20092 ;;		On entry : 0/0
 20093 ;;		On exit  : 0/0
 20094 ;;		Unchanged: 0/0
 20095 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20096 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20097 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20098 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20099 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20100 ;;Total ram usage:        0 bytes
 20101 ;; Hardware stack levels used:    1
 20102 ;; Hardware stack levels required when called:    3
 20103 ;; This function calls:
 20104 ;;		i2_lcdInst
 20105 ;;		i2_printf
 20106 ;; This function is called by:
 20107 ;;		_updateMenu
 20108 ;;		_inputHandler
 20109 ;; This function uses a non-reentrant model
 20110 ;;
 20111                           
 20112                           	psect	text72
 20113  004D14                     __ptext72:
 20114                           	opt stack 0
 20115  004D14                     _change_state_to_logs_22:
 20116                           	opt stack 18
 20117                           
 20118                           ;UI.c: 529: cur_state = 1022;
 20119                           
 20120                           ;incstack = 0
 20121  004D14  0E03               	movlw	3
 20122  004D16  0100               	movlb	0	; () banked
 20123  004D18  6FE7               	movwf	(_cur_state+1)& (0+255),b
 20124  004D1A  0EFE               	movlw	254
 20125  004D1C  6FE6               	movwf	_cur_state& (0+255),b
 20126                           
 20127                           ; BSR set to: 0
 20128                           ;UI.c: 530: lcdInst(0b10000000);;
 20129  004D1E  0E80               	movlw	128
 20130  004D20  EC36  F028         	call	i2_lcdInst
 20131                           
 20132                           ;UI.c: 531: printf("LOG 2          <");
 20133  004D24  0E80               	movlw	low STR_42
 20134  004D26  6E0D               	movwf	i2printf@f,c
 20135  004D28  0EFD               	movlw	high STR_42
 20136  004D2A  6E0E               	movwf	i2printf@f+1,c
 20137  004D2C  ECC6  F00E         	call	i2_printf	;wreg free
 20138                           
 20139                           ;UI.c: 532: lcdInst(0b11000000);;
 20140  004D30  0EC0               	movlw	192
 20141  004D32  EC36  F028         	call	i2_lcdInst
 20142                           
 20143                           ;UI.c: 533: printf("LOG 3           ");
 20144  004D36  0EE7               	movlw	low STR_44
 20145  004D38  6E0D               	movwf	i2printf@f,c
 20146  004D3A  0EFC               	movlw	high STR_44
 20147  004D3C  6E0E               	movwf	i2printf@f+1,c
 20148  004D3E  ECC6  F00E         	call	i2_printf	;wreg free
 20149  004D42  0012               	return		;funcret
 20150  004D44                     __end_of_change_state_to_logs_22:
 20151                           	opt stack 0
 20152                           pclatu	equ	0xFFB
 20153                           pclath	equ	0xFFA
 20154                           tblptru	equ	0xFF8
 20155                           tblptrh	equ	0xFF7
 20156                           tblptrl	equ	0xFF6
 20157                           tablat	equ	0xFF5
 20158                           prodh	equ	0xFF4
 20159                           prodl	equ	0xFF3
 20160                           intcon	equ	0xFF2
 20161                           intcon2	equ	0xFF1
 20162                           intcon3	equ	0xFF0
 20163                           indf0	equ	0xFEF
 20164                           postinc0	equ	0xFEE
 20165                           fsr0h	equ	0xFEA
 20166                           fsr0l	equ	0xFE9
 20167                           wreg	equ	0xFE8
 20168                           postdec1	equ	0xFE5
 20169                           fsr1h	equ	0xFE2
 20170                           fsr1l	equ	0xFE1
 20171                           indf2	equ	0xFDF
 20172                           postinc2	equ	0xFDE
 20173                           postdec2	equ	0xFDD
 20174                           fsr2h	equ	0xFDA
 20175                           fsr2l	equ	0xFD9
 20176                           status	equ	0xFD8
 20177                           
 20178 ;; *************** function _change_state_to_logs_12 *****************
 20179 ;; Defined at:
 20180 ;;		line 521 in file "UI.c"
 20181 ;; Parameters:    Size  Location     Type
 20182 ;;		None
 20183 ;; Auto vars:     Size  Location     Type
 20184 ;;		None
 20185 ;; Return value:  Size  Location     Type
 20186 ;;                  1    wreg      void 
 20187 ;; Registers used:
 20188 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20189 ;; Tracked objects:
 20190 ;;		On entry : 0/0
 20191 ;;		On exit  : 0/0
 20192 ;;		Unchanged: 0/0
 20193 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20194 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20195 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20196 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20197 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20198 ;;Total ram usage:        0 bytes
 20199 ;; Hardware stack levels used:    1
 20200 ;; Hardware stack levels required when called:    3
 20201 ;; This function calls:
 20202 ;;		i2_lcdInst
 20203 ;;		i2_printf
 20204 ;; This function is called by:
 20205 ;;		_updateMenu
 20206 ;;		_inputHandler
 20207 ;; This function uses a non-reentrant model
 20208 ;;
 20209                           
 20210                           	psect	text73
 20211  004D44                     __ptext73:
 20212                           	opt stack 0
 20213  004D44                     _change_state_to_logs_12:
 20214                           	opt stack 18
 20215                           
 20216                           ;UI.c: 522: cur_state = 1012;
 20217                           
 20218                           ;incstack = 0
 20219  004D44  0E03               	movlw	3
 20220  004D46  0100               	movlb	0	; () banked
 20221  004D48  6FE7               	movwf	(_cur_state+1)& (0+255),b
 20222  004D4A  0EF4               	movlw	244
 20223  004D4C  6FE6               	movwf	_cur_state& (0+255),b
 20224                           
 20225                           ; BSR set to: 0
 20226                           ;UI.c: 523: lcdInst(0b10000000);;
 20227  004D4E  0E80               	movlw	128
 20228  004D50  EC36  F028         	call	i2_lcdInst
 20229                           
 20230                           ;UI.c: 524: printf("LOG 1           ");
 20231  004D54  0EC5               	movlw	low STR_41
 20232  004D56  6E0D               	movwf	i2printf@f,c
 20233  004D58  0EFC               	movlw	high STR_41
 20234  004D5A  6E0E               	movwf	i2printf@f+1,c
 20235  004D5C  ECC6  F00E         	call	i2_printf	;wreg free
 20236                           
 20237                           ;UI.c: 525: lcdInst(0b11000000);;
 20238  004D60  0EC0               	movlw	192
 20239  004D62  EC36  F028         	call	i2_lcdInst
 20240                           
 20241                           ;UI.c: 526: printf("LOG 2          <");
 20242  004D66  0E80               	movlw	low STR_42
 20243  004D68  6E0D               	movwf	i2printf@f,c
 20244  004D6A  0EFD               	movlw	high STR_42
 20245  004D6C  6E0E               	movwf	i2printf@f+1,c
 20246  004D6E  ECC6  F00E         	call	i2_printf	;wreg free
 20247  004D72  0012               	return		;funcret
 20248  004D74                     __end_of_change_state_to_logs_12:
 20249                           	opt stack 0
 20250                           pclatu	equ	0xFFB
 20251                           pclath	equ	0xFFA
 20252                           tblptru	equ	0xFF8
 20253                           tblptrh	equ	0xFF7
 20254                           tblptrl	equ	0xFF6
 20255                           tablat	equ	0xFF5
 20256                           prodh	equ	0xFF4
 20257                           prodl	equ	0xFF3
 20258                           intcon	equ	0xFF2
 20259                           intcon2	equ	0xFF1
 20260                           intcon3	equ	0xFF0
 20261                           indf0	equ	0xFEF
 20262                           postinc0	equ	0xFEE
 20263                           fsr0h	equ	0xFEA
 20264                           fsr0l	equ	0xFE9
 20265                           wreg	equ	0xFE8
 20266                           postdec1	equ	0xFE5
 20267                           fsr1h	equ	0xFE2
 20268                           fsr1l	equ	0xFE1
 20269                           indf2	equ	0xFDF
 20270                           postinc2	equ	0xFDE
 20271                           postdec2	equ	0xFDD
 20272                           fsr2h	equ	0xFDA
 20273                           fsr2l	equ	0xFD9
 20274                           status	equ	0xFD8
 20275                           
 20276 ;; *************** function _change_state_to_logs_11 *****************
 20277 ;; Defined at:
 20278 ;;		line 514 in file "UI.c"
 20279 ;; Parameters:    Size  Location     Type
 20280 ;;		None
 20281 ;; Auto vars:     Size  Location     Type
 20282 ;;		None
 20283 ;; Return value:  Size  Location     Type
 20284 ;;                  1    wreg      void 
 20285 ;; Registers used:
 20286 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20287 ;; Tracked objects:
 20288 ;;		On entry : 0/0
 20289 ;;		On exit  : 0/0
 20290 ;;		Unchanged: 0/0
 20291 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20292 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20293 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20294 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20295 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20296 ;;Total ram usage:        0 bytes
 20297 ;; Hardware stack levels used:    1
 20298 ;; Hardware stack levels required when called:    3
 20299 ;; This function calls:
 20300 ;;		i2_lcdInst
 20301 ;;		i2_printf
 20302 ;; This function is called by:
 20303 ;;		_updateMenu
 20304 ;;		_inputHandler
 20305 ;; This function uses a non-reentrant model
 20306 ;;
 20307                           
 20308                           	psect	text74
 20309  004D74                     __ptext74:
 20310                           	opt stack 0
 20311  004D74                     _change_state_to_logs_11:
 20312                           	opt stack 18
 20313                           
 20314                           ;UI.c: 515: cur_state = 1011;
 20315                           
 20316                           ;incstack = 0
 20317  004D74  0E03               	movlw	3
 20318  004D76  0100               	movlb	0	; () banked
 20319  004D78  6FE7               	movwf	(_cur_state+1)& (0+255),b
 20320  004D7A  0EF3               	movlw	243
 20321  004D7C  6FE6               	movwf	_cur_state& (0+255),b
 20322                           
 20323                           ; BSR set to: 0
 20324                           ;UI.c: 516: lcdInst(0b10000000);;
 20325  004D7E  0E80               	movlw	128
 20326  004D80  EC36  F028         	call	i2_lcdInst
 20327                           
 20328                           ;UI.c: 517: printf("LOG 1          <");
 20329  004D84  0E6F               	movlw	low STR_39
 20330  004D86  6E0D               	movwf	i2printf@f,c
 20331  004D88  0EFD               	movlw	high STR_39
 20332  004D8A  6E0E               	movwf	i2printf@f+1,c
 20333  004D8C  ECC6  F00E         	call	i2_printf	;wreg free
 20334                           
 20335                           ;UI.c: 518: lcdInst(0b11000000);;
 20336  004D90  0EC0               	movlw	192
 20337  004D92  EC36  F028         	call	i2_lcdInst
 20338                           
 20339                           ;UI.c: 519: printf("LOG 2           ");
 20340  004D96  0ED6               	movlw	low STR_40
 20341  004D98  6E0D               	movwf	i2printf@f,c
 20342  004D9A  0EFC               	movlw	high STR_40
 20343  004D9C  6E0E               	movwf	i2printf@f+1,c
 20344  004D9E  ECC6  F00E         	call	i2_printf	;wreg free
 20345  004DA2  0012               	return		;funcret
 20346  004DA4                     __end_of_change_state_to_logs_11:
 20347                           	opt stack 0
 20348                           pclatu	equ	0xFFB
 20349                           pclath	equ	0xFFA
 20350                           tblptru	equ	0xFF8
 20351                           tblptrh	equ	0xFF7
 20352                           tblptrl	equ	0xFF6
 20353                           tablat	equ	0xFF5
 20354                           prodh	equ	0xFF4
 20355                           prodl	equ	0xFF3
 20356                           intcon	equ	0xFF2
 20357                           intcon2	equ	0xFF1
 20358                           intcon3	equ	0xFF0
 20359                           indf0	equ	0xFEF
 20360                           postinc0	equ	0xFEE
 20361                           fsr0h	equ	0xFEA
 20362                           fsr0l	equ	0xFE9
 20363                           wreg	equ	0xFE8
 20364                           postdec1	equ	0xFE5
 20365                           fsr1h	equ	0xFE2
 20366                           fsr1l	equ	0xFE1
 20367                           indf2	equ	0xFDF
 20368                           postinc2	equ	0xFDE
 20369                           postdec2	equ	0xFDD
 20370                           fsr2h	equ	0xFDA
 20371                           fsr2l	equ	0xFD9
 20372                           status	equ	0xFD8
 20373                           
 20374 ;; *************** function _dispLogs *****************
 20375 ;; Defined at:
 20376 ;;		line 467 in file "UI.c"
 20377 ;; Parameters:    Size  Location     Type
 20378 ;;  myLog           2   17[COMRAM] int 
 20379 ;; Auto vars:     Size  Location     Type
 20380 ;;		None
 20381 ;; Return value:  Size  Location     Type
 20382 ;;                  1    wreg      void 
 20383 ;; Registers used:
 20384 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 20385 ;; Tracked objects:
 20386 ;;		On entry : 0/0
 20387 ;;		On exit  : 0/0
 20388 ;;		Unchanged: 0/0
 20389 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20390 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20391 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20392 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20393 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20394 ;;Total ram usage:        2 bytes
 20395 ;; Hardware stack levels used:    1
 20396 ;; Hardware stack levels required when called:    2
 20397 ;; This function calls:
 20398 ;;		_retrieveLog
 20399 ;; This function is called by:
 20400 ;;		_updateMenu
 20401 ;; This function uses a non-reentrant model
 20402 ;;
 20403                           
 20404                           	psect	text75
 20405  004F4C                     __ptext75:
 20406                           	opt stack 0
 20407  004F4C                     _dispLogs:
 20408                           	opt stack 20
 20409                           
 20410                           ;UI.c: 468: logstate = 1;
 20411                           
 20412                           ;incstack = 0
 20413  004F4C  0E00               	movlw	0
 20414  004F4E  0100               	movlb	0	; () banked
 20415  004F50  6FF7               	movwf	(_logstate+1)& (0+255),b
 20416  004F52  0E01               	movlw	1
 20417  004F54  6FF6               	movwf	_logstate& (0+255),b
 20418                           
 20419                           ; BSR set to: 0
 20420                           ;UI.c: 469: log = myLog;
 20421  004F56  C012  F0EC         	movff	dispLogs@myLog,_log
 20422  004F5A  C013  F0ED         	movff	dispLogs@myLog+1,_log+1
 20423                           
 20424                           ; BSR set to: 0
 20425                           ;UI.c: 470: retrieveLog(myLog - 1);
 20426  004F5E  0EFF               	movlw	255
 20427  004F60  2412               	addwf	dispLogs@myLog,w,c
 20428  004F62  6E07               	movwf	retrieveLog@logNum,c
 20429  004F64  0EFF               	movlw	255
 20430  004F66  2013               	addwfc	dispLogs@myLog+1,w,c
 20431  004F68  6E08               	movwf	retrieveLog@logNum+1,c
 20432  004F6A  EC41  F01D         	call	_retrieveLog	;wreg free
 20433  004F6E  0012               	return		;funcret
 20434  004F70                     __end_of_dispLogs:
 20435                           	opt stack 0
 20436                           pclatu	equ	0xFFB
 20437                           pclath	equ	0xFFA
 20438                           tblptru	equ	0xFF8
 20439                           tblptrh	equ	0xFF7
 20440                           tblptrl	equ	0xFF6
 20441                           tablat	equ	0xFF5
 20442                           prodh	equ	0xFF4
 20443                           prodl	equ	0xFF3
 20444                           intcon	equ	0xFF2
 20445                           intcon2	equ	0xFF1
 20446                           intcon3	equ	0xFF0
 20447                           indf0	equ	0xFEF
 20448                           postinc0	equ	0xFEE
 20449                           fsr0h	equ	0xFEA
 20450                           fsr0l	equ	0xFE9
 20451                           wreg	equ	0xFE8
 20452                           postdec1	equ	0xFE5
 20453                           fsr1h	equ	0xFE2
 20454                           fsr1l	equ	0xFE1
 20455                           indf2	equ	0xFDF
 20456                           postinc2	equ	0xFDE
 20457                           postdec2	equ	0xFDD
 20458                           fsr2h	equ	0xFDA
 20459                           fsr2l	equ	0xFD9
 20460                           status	equ	0xFD8
 20461                           
 20462 ;; *************** function _retrieveLog *****************
 20463 ;; Defined at:
 20464 ;;		line 134 in file "EEPROM.c"
 20465 ;; Parameters:    Size  Location     Type
 20466 ;;  logNum          2    6[COMRAM] int 
 20467 ;; Auto vars:     Size  Location     Type
 20468 ;;  i               2   13[COMRAM] int 
 20469 ;;  addr            2   15[COMRAM] unsigned short 
 20470 ;;  byte3           1   12[COMRAM] unsigned char 
 20471 ;;  byte2           1   11[COMRAM] unsigned char 
 20472 ;;  byte1           1   10[COMRAM] unsigned char 
 20473 ;; Return value:  Size  Location     Type
 20474 ;;                  1    wreg      void 
 20475 ;; Registers used:
 20476 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 20477 ;; Tracked objects:
 20478 ;;		On entry : 0/0
 20479 ;;		On exit  : 0/0
 20480 ;;		Unchanged: 0/0
 20481 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20482 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20483 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20484 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20485 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20486 ;;Total ram usage:       11 bytes
 20487 ;; Hardware stack levels used:    1
 20488 ;; Hardware stack levels required when called:    1
 20489 ;; This function calls:
 20490 ;;		i2_EEPROM_read
 20491 ;;		i2___wmul
 20492 ;; This function is called by:
 20493 ;;		_dispLogs
 20494 ;; This function uses a non-reentrant model
 20495 ;;
 20496                           
 20497                           	psect	text76
 20498  003A82                     __ptext76:
 20499                           	opt stack 0
 20500  003A82                     _retrieveLog:
 20501                           	opt stack 20
 20502                           
 20503                           ;EEPROM.c: 140: unsigned short addr = 1 + logNum * 11;
 20504                           
 20505                           ;incstack = 0
 20506  003A82  C007  F001         	movff	retrieveLog@logNum,i2___wmul@multiplier
 20507  003A86  C008  F002         	movff	retrieveLog@logNum+1,i2___wmul@multiplier+1
 20508  003A8A  0E00               	movlw	0
 20509  003A8C  6E04               	movwf	i2___wmul@multiplicand+1,c
 20510  003A8E  0E0B               	movlw	11
 20511  003A90  6E03               	movwf	i2___wmul@multiplicand,c
 20512  003A92  EC80  F027         	call	i2___wmul	;wreg free
 20513  003A96  0E01               	movlw	1
 20514  003A98  2401               	addwf	?i2___wmul,w,c
 20515  003A9A  6E10               	movwf	retrieveLog@addr,c
 20516  003A9C  0E00               	movlw	0
 20517  003A9E  2002               	addwfc	?i2___wmul+1,w,c
 20518  003AA0  6E11               	movwf	retrieveLog@addr+1,c
 20519                           
 20520                           ;EEPROM.c: 143: unsigned char byte1 = EEPROM_read(addr);
 20521  003AA2  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 20522  003AA6  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 20523  003AAA  EC02  F028         	call	i2_EEPROM_read	;wreg free
 20524  003AAE  6E0B               	movwf	retrieveLog@byte1,c
 20525                           
 20526                           ;EEPROM.c: 144: log_completion = (int)(byte1 & 0b10000000);
 20527  003AB0  C00B  F009         	movff	retrieveLog@byte1,??_retrieveLog
 20528  003AB4  0E80               	movlw	128
 20529  003AB6  1609               	andwf	??_retrieveLog,f,c
 20530  003AB8  5009               	movf	??_retrieveLog,w,c
 20531  003ABA  0100               	movlb	0	; () banked
 20532  003ABC  6FEE               	movwf	_log_completion& (0+255),b
 20533  003ABE  6BEF               	clrf	(_log_completion+1)& (0+255),b
 20534                           
 20535                           ; BSR set to: 0
 20536                           ;EEPROM.c: 145: log_count_total = (int)(byte1 & 0b00001111);
 20537  003AC0  C00B  F009         	movff	retrieveLog@byte1,??_retrieveLog
 20538  003AC4  0E0F               	movlw	15
 20539  003AC6  1609               	andwf	??_retrieveLog,f,c
 20540  003AC8  5009               	movf	??_retrieveLog,w,c
 20541  003ACA  6E75               	movwf	_log_count_total,c
 20542  003ACC  6A76               	clrf	_log_count_total+1,c
 20543                           
 20544                           ; BSR set to: 0
 20545                           ;EEPROM.c: 146: addr++;
 20546  003ACE  4A10               	infsnz	retrieveLog@addr,f,c
 20547  003AD0  2A11               	incf	retrieveLog@addr+1,f,c
 20548                           
 20549                           ; BSR set to: 0
 20550                           ;EEPROM.c: 149: unsigned char byte2 = EEPROM_read(addr);
 20551  003AD2  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 20552  003AD6  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 20553  003ADA  EC02  F028         	call	i2_EEPROM_read	;wreg free
 20554  003ADE  6E0C               	movwf	retrieveLog@byte2,c
 20555                           
 20556                           ;EEPROM.c: 150: log_count_pop_no_tab = (int)((byte2 & 0b11110000)>> 4);
 20557  003AE0  C00C  F009         	movff	retrieveLog@byte2,??_retrieveLog
 20558  003AE4  3A09               	swapf	??_retrieveLog,f,c
 20559  003AE6  0E0F               	movlw	15
 20560  003AE8  1609               	andwf	??_retrieveLog,f,c
 20561  003AEA  0E0F               	movlw	15
 20562  003AEC  1609               	andwf	??_retrieveLog,f,c
 20563  003AEE  5009               	movf	??_retrieveLog,w,c
 20564  003AF0  0100               	movlb	0	; () banked
 20565  003AF2  6FF0               	movwf	_log_count_pop_no_tab& (0+255),b
 20566  003AF4  6BF1               	clrf	(_log_count_pop_no_tab+1)& (0+255),b
 20567                           
 20568                           ; BSR set to: 0
 20569                           ;EEPROM.c: 151: log_count_pop_w_tab = (int)(byte2 & 0b00001111);
 20570  003AF6  C00C  F009         	movff	retrieveLog@byte2,??_retrieveLog
 20571  003AFA  0E0F               	movlw	15
 20572  003AFC  1609               	andwf	??_retrieveLog,f,c
 20573  003AFE  5009               	movf	??_retrieveLog,w,c
 20574  003B00  0100               	movlb	0	; () banked
 20575  003B02  6FF2               	movwf	_log_count_pop_w_tab& (0+255),b
 20576  003B04  6BF3               	clrf	(_log_count_pop_w_tab+1)& (0+255),b
 20577                           
 20578                           ; BSR set to: 0
 20579                           ;EEPROM.c: 152: addr++;
 20580  003B06  4A10               	infsnz	retrieveLog@addr,f,c
 20581  003B08  2A11               	incf	retrieveLog@addr+1,f,c
 20582                           
 20583                           ; BSR set to: 0
 20584                           ;EEPROM.c: 153: unsigned char byte3 = EEPROM_read(addr);
 20585  003B0A  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 20586  003B0E  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 20587  003B12  EC02  F028         	call	i2_EEPROM_read	;wreg free
 20588  003B16  6E0D               	movwf	retrieveLog@byte3,c
 20589                           
 20590                           ;EEPROM.c: 154: log_count_can_w_lab = (int)((byte3 & 0b11110000)>> 4);
 20591  003B18  C00D  F009         	movff	retrieveLog@byte3,??_retrieveLog
 20592  003B1C  3A09               	swapf	??_retrieveLog,f,c
 20593  003B1E  0E0F               	movlw	15
 20594  003B20  1609               	andwf	??_retrieveLog,f,c
 20595  003B22  0E0F               	movlw	15
 20596  003B24  1609               	andwf	??_retrieveLog,f,c
 20597  003B26  5009               	movf	??_retrieveLog,w,c
 20598  003B28  6E73               	movwf	_log_count_can_w_lab,c
 20599  003B2A  6A74               	clrf	_log_count_can_w_lab+1,c
 20600                           
 20601                           ;EEPROM.c: 155: log_count_can_no_lab = (int)(byte3 & 0b00001111);
 20602  003B2C  C00D  F009         	movff	retrieveLog@byte3,??_retrieveLog
 20603  003B30  0E0F               	movlw	15
 20604  003B32  1609               	andwf	??_retrieveLog,f,c
 20605  003B34  5009               	movf	??_retrieveLog,w,c
 20606  003B36  6E71               	movwf	_log_count_can_no_lab,c
 20607  003B38  6A72               	clrf	_log_count_can_no_lab+1,c
 20608                           
 20609                           ;EEPROM.c: 156: addr++;
 20610  003B3A  4A10               	infsnz	retrieveLog@addr,f,c
 20611  003B3C  2A11               	incf	retrieveLog@addr+1,f,c
 20612                           
 20613                           ;EEPROM.c: 159: for(int i = 0; i < 7; i++){
 20614  003B3E  0E00               	movlw	0
 20615  003B40  6E0F               	movwf	retrieveLog@i+1,c
 20616  003B42  0E00               	movlw	0
 20617  003B44  6E0E               	movwf	retrieveLog@i,c
 20618  003B46                     i2l6484:
 20619  003B46  BE0F               	btfsc	retrieveLog@i+1,7,c
 20620  003B48  D006               	goto	i2l6488
 20621  003B4A  500F               	movf	retrieveLog@i+1,w,c
 20622  003B4C  E11E               	bnz	i2l6496
 20623  003B4E  0E07               	movlw	7
 20624  003B50  5C0E               	subwf	retrieveLog@i,w,c
 20625  003B52  B0D8               	btfsc	status,0,c
 20626  003B54  D01A               	goto	i2l6496
 20627  003B56                     i2l6488:
 20628                           
 20629                           ;EEPROM.c: 160: log_startTime[i] = (int)EEPROM_read(addr);
 20630  003B56  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 20631  003B5A  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 20632  003B5E  EC02  F028         	call	i2_EEPROM_read	;wreg free
 20633  003B62  6E09               	movwf	??_retrieveLog& (0+255),c
 20634  003B64  6A0A               	clrf	(??_retrieveLog+1)& (0+255),c
 20635  003B66  90D8               	bcf	status,0,c
 20636  003B68  340E               	rlcf	retrieveLog@i,w,c
 20637  003B6A  6ED9               	movwf	fsr2l,c
 20638  003B6C  340F               	rlcf	retrieveLog@i+1,w,c
 20639  003B6E  6EDA               	movwf	fsr2h,c
 20640  003B70  0E00               	movlw	low _log_startTime
 20641  003B72  26D9               	addwf	fsr2l,f,c
 20642  003B74  0E01               	movlw	high _log_startTime
 20643  003B76  22DA               	addwfc	fsr2h,f,c
 20644  003B78  C009  FFDE         	movff	??_retrieveLog,postinc2
 20645  003B7C  C00A  FFDD         	movff	??_retrieveLog+1,postdec2
 20646                           
 20647                           ;EEPROM.c: 161: addr++;
 20648  003B80  4A10               	infsnz	retrieveLog@addr,f,c
 20649  003B82  2A11               	incf	retrieveLog@addr+1,f,c
 20650  003B84  4A0E               	infsnz	retrieveLog@i,f,c
 20651  003B86  2A0F               	incf	retrieveLog@i+1,f,c
 20652  003B88  D7DE               	goto	i2l6484
 20653  003B8A                     i2l6496:
 20654                           
 20655                           ;EEPROM.c: 162: }
 20656                           ;EEPROM.c: 165: log_total_time = (int)EEPROM_read(addr);
 20657  003B8A  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 20658  003B8E  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 20659  003B92  EC02  F028         	call	i2_EEPROM_read	;wreg free
 20660  003B96  6E09               	movwf	??_retrieveLog& (0+255),c
 20661  003B98  5009               	movf	??_retrieveLog,w,c
 20662  003B9A  0100               	movlb	0	; () banked
 20663  003B9C  6FF4               	movwf	_log_total_time& (0+255),b
 20664  003B9E  6BF5               	clrf	(_log_total_time+1)& (0+255),b
 20665                           
 20666                           ; BSR set to: 0
 20667  003BA0  0012               	return		;funcret
 20668  003BA2                     __end_of_retrieveLog:
 20669                           	opt stack 0
 20670                           pclatu	equ	0xFFB
 20671                           pclath	equ	0xFFA
 20672                           tblptru	equ	0xFF8
 20673                           tblptrh	equ	0xFF7
 20674                           tblptrl	equ	0xFF6
 20675                           tablat	equ	0xFF5
 20676                           prodh	equ	0xFF4
 20677                           prodl	equ	0xFF3
 20678                           intcon	equ	0xFF2
 20679                           intcon2	equ	0xFF1
 20680                           intcon3	equ	0xFF0
 20681                           indf0	equ	0xFEF
 20682                           postinc0	equ	0xFEE
 20683                           fsr0h	equ	0xFEA
 20684                           fsr0l	equ	0xFE9
 20685                           wreg	equ	0xFE8
 20686                           postdec1	equ	0xFE5
 20687                           fsr1h	equ	0xFE2
 20688                           fsr1l	equ	0xFE1
 20689                           indf2	equ	0xFDF
 20690                           postinc2	equ	0xFDE
 20691                           postdec2	equ	0xFDD
 20692                           fsr2h	equ	0xFDA
 20693                           fsr2l	equ	0xFD9
 20694                           status	equ	0xFD8
 20695                           
 20696 ;; *************** function i2_EEPROM_read *****************
 20697 ;; Defined at:
 20698 ;;		line 68 in file "EEPROM.c"
 20699 ;; Parameters:    Size  Location     Type
 20700 ;;  address         2    0[COMRAM] unsigned short 
 20701 ;; Auto vars:     Size  Location     Type
 20702 ;;		None
 20703 ;; Return value:  Size  Location     Type
 20704 ;;                  1    wreg      unsigned char 
 20705 ;; Registers used:
 20706 ;;		wreg, status,2
 20707 ;; Tracked objects:
 20708 ;;		On entry : 0/0
 20709 ;;		On exit  : 0/0
 20710 ;;		Unchanged: 0/0
 20711 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20712 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20713 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20714 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20715 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20716 ;;Total ram usage:        2 bytes
 20717 ;; Hardware stack levels used:    1
 20718 ;; This function calls:
 20719 ;;		Nothing
 20720 ;; This function is called by:
 20721 ;;		_retrieveLog
 20722 ;; This function uses a non-reentrant model
 20723 ;;
 20724                           
 20725                           	psect	text77
 20726  005004                     __ptext77:
 20727                           	opt stack 0
 20728  005004                     i2_EEPROM_read:
 20729                           	opt stack 20
 20730                           
 20731                           ;EEPROM.c: 70: EEADRH = (unsigned char)(address >> 8);
 20732                           
 20733                           ; BSR set to: 0
 20734                           ;incstack = 0
 20735  005004  5002               	movf	i2EEPROM_read@address+1,w,c
 20736  005006  6EAA               	movwf	4010,c	;volatile
 20737                           
 20738                           ;EEPROM.c: 71: EEADR = (unsigned char)address;
 20739  005008  C001  FFA9         	movff	i2EEPROM_read@address,4009	;volatile
 20740                           
 20741                           ;EEPROM.c: 73: EECON1bits.EEPGD = 0;
 20742  00500C  9EA6               	bcf	4006,7,c	;volatile
 20743                           
 20744                           ;EEPROM.c: 74: EECON1bits.CFGS = 0;
 20745  00500E  9CA6               	bcf	4006,6,c	;volatile
 20746                           
 20747                           ;EEPROM.c: 75: EECON1bits.RD = 1;
 20748  005010  80A6               	bsf	4006,0,c	;volatile
 20749  005012                     i2l1001:
 20750  005012  B0A6               	btfsc	4006,0,c	;volatile
 20751  005014  D7FE               	goto	i2l1001
 20752                           
 20753                           ;EEPROM.c: 81: return EEDATA;
 20754  005016  50A8               	movf	4008,w,c	;volatile
 20755  005018  0012               	return	
 20756  00501A                     __end_ofi2_EEPROM_read:
 20757                           	opt stack 0
 20758                           pclatu	equ	0xFFB
 20759                           pclath	equ	0xFFA
 20760                           tblptru	equ	0xFF8
 20761                           tblptrh	equ	0xFF7
 20762                           tblptrl	equ	0xFF6
 20763                           tablat	equ	0xFF5
 20764                           prodh	equ	0xFF4
 20765                           prodl	equ	0xFF3
 20766                           intcon	equ	0xFF2
 20767                           intcon2	equ	0xFF1
 20768                           intcon3	equ	0xFF0
 20769                           indf0	equ	0xFEF
 20770                           postinc0	equ	0xFEE
 20771                           fsr0h	equ	0xFEA
 20772                           fsr0l	equ	0xFE9
 20773                           wreg	equ	0xFE8
 20774                           postdec1	equ	0xFE5
 20775                           fsr1h	equ	0xFE2
 20776                           fsr1l	equ	0xFE1
 20777                           indf2	equ	0xFDF
 20778                           postinc2	equ	0xFDE
 20779                           postdec2	equ	0xFDD
 20780                           fsr2h	equ	0xFDA
 20781                           fsr2l	equ	0xFD9
 20782                           status	equ	0xFD8
 20783                           
 20784 ;; *************** function _printSortTimer *****************
 20785 ;; Defined at:
 20786 ;;		line 437 in file "sort.c"
 20787 ;; Parameters:    Size  Location     Type
 20788 ;;		None
 20789 ;; Auto vars:     Size  Location     Type
 20790 ;;  i               2   70[COMRAM] int 
 20791 ;;  curTime        14   44[COMRAM] int [7]
 20792 ;;  timeDiff        2   68[COMRAM] unsigned int 
 20793 ;;  sec             2   64[COMRAM] int 
 20794 ;;  min             2   62[COMRAM] int 
 20795 ;;  cur_sec         2   60[COMRAM] unsigned int 
 20796 ;;  start_sec       2   58[COMRAM] unsigned int 
 20797 ;; Return value:  Size  Location     Type
 20798 ;;                  1    wreg      void 
 20799 ;; Registers used:
 20800 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20801 ;; Tracked objects:
 20802 ;;		On entry : 0/0
 20803 ;;		On exit  : 0/0
 20804 ;;		Unchanged: 0/0
 20805 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20806 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20807 ;;      Locals:        28       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20808 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20809 ;;      Totals:        31       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20810 ;;Total ram usage:       31 bytes
 20811 ;; Hardware stack levels used:    1
 20812 ;; Hardware stack levels required when called:    3
 20813 ;; This function calls:
 20814 ;;		i2___lwdiv
 20815 ;;		i2___lwmod
 20816 ;;		i2___wmul
 20817 ;;		i2_getRTC
 20818 ;;		i2_lcdInst
 20819 ;;		i2_printf
 20820 ;; This function is called by:
 20821 ;;		_handler
 20822 ;; This function uses a non-reentrant model
 20823 ;;
 20824                           
 20825                           	psect	text78
 20826  00323E                     __ptext78:
 20827                           	opt stack 0
 20828  00323E                     _printSortTimer:
 20829                           	opt stack 20
 20830                           
 20831                           ;sort.c: 438: getRTC();
 20832                           
 20833                           ;incstack = 0
 20834  00323E  ECF8  F022         	call	i2_getRTC	;wreg free
 20835                           
 20836                           ;sort.c: 439: int curTime[7];
 20837                           ;sort.c: 440: for(int i = 0; i < 7; i++){
 20838  003242  0E00               	movlw	0
 20839  003244  6E48               	movwf	printSortTimer@i+1,c
 20840  003246  0E00               	movlw	0
 20841  003248  6E47               	movwf	printSortTimer@i,c
 20842  00324A                     i2l8880:
 20843  00324A  BE48               	btfsc	printSortTimer@i+1,7,c
 20844  00324C  D006               	goto	i2l8884
 20845  00324E  5048               	movf	printSortTimer@i+1,w,c
 20846  003250  E131               	bnz	i2l8890
 20847  003252  0E07               	movlw	7
 20848  003254  5C47               	subwf	printSortTimer@i,w,c
 20849  003256  B0D8               	btfsc	status,0,c
 20850  003258  D02D               	goto	i2l8890
 20851  00325A                     i2l8884:
 20852                           
 20853                           ;sort.c: 441: curTime[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
 20854  00325A  0E24               	movlw	low _time
 20855  00325C  2447               	addwf	printSortTimer@i,w,c
 20856  00325E  6ED9               	movwf	fsr2l,c
 20857  003260  0E01               	movlw	high _time
 20858  003262  2048               	addwfc	printSortTimer@i+1,w,c
 20859  003264  6EDA               	movwf	fsr2h,c
 20860  003266  50DF               	movf	indf2,w,c
 20861  003268  6E2A               	movwf	??_printSortTimer& (0+255),c
 20862  00326A  3A2A               	swapf	??_printSortTimer,f,c
 20863  00326C  0E0F               	movlw	15
 20864  00326E  162A               	andwf	??_printSortTimer,f,c
 20865  003270  0E0F               	movlw	15
 20866  003272  162A               	andwf	??_printSortTimer,f,c
 20867  003274  502A               	movf	??_printSortTimer,w,c
 20868  003276  0D0A               	mullw	10
 20869  003278  0E24               	movlw	low _time
 20870  00327A  2447               	addwf	printSortTimer@i,w,c
 20871  00327C  6ED9               	movwf	fsr2l,c
 20872  00327E  0E01               	movlw	high _time
 20873  003280  2048               	addwfc	printSortTimer@i+1,w,c
 20874  003282  6EDA               	movwf	fsr2h,c
 20875  003284  50DF               	movf	indf2,w,c
 20876  003286  0B0F               	andlw	15
 20877  003288  6E2B               	movwf	(??_printSortTimer+1)& (0+255),c
 20878  00328A  6A2C               	clrf	(??_printSortTimer+2)& (0+255),c
 20879  00328C  50F3               	movf	prodl,w,c
 20880  00328E  262B               	addwf	??_printSortTimer+1,f,c
 20881  003290  50F4               	movf	prodh,w,c
 20882  003292  222C               	addwfc	??_printSortTimer+2,f,c
 20883  003294  90D8               	bcf	status,0,c
 20884  003296  3447               	rlcf	printSortTimer@i,w,c
 20885  003298  6ED9               	movwf	fsr2l,c
 20886  00329A  3448               	rlcf	printSortTimer@i+1,w,c
 20887  00329C  6EDA               	movwf	fsr2h,c
 20888  00329E  0E2D               	movlw	low printSortTimer@curTime
 20889  0032A0  26D9               	addwf	fsr2l,f,c
 20890  0032A2  0E00               	movlw	high printSortTimer@curTime
 20891  0032A4  22DA               	addwfc	fsr2h,f,c
 20892  0032A6  C02B  FFDE         	movff	??_printSortTimer+1,postinc2
 20893  0032AA  C02C  FFDD         	movff	??_printSortTimer+2,postdec2
 20894  0032AE  4A47               	infsnz	printSortTimer@i,f,c
 20895  0032B0  2A48               	incf	printSortTimer@i+1,f,c
 20896  0032B2  D7CB               	goto	i2l8880
 20897  0032B4                     i2l8890:
 20898                           
 20899                           ;sort.c: 442: }
 20900                           ;sort.c: 443: unsigned int start_sec = startTime[0] + startTime[1]*60 + startTime[2]*360
      +                          0;
 20901  0032B4  C110  F001         	movff	_startTime+2,i2___wmul@multiplier
 20902  0032B8  C111  F002         	movff	_startTime+3,i2___wmul@multiplier+1
 20903  0032BC  0E00               	movlw	0
 20904  0032BE  6E04               	movwf	i2___wmul@multiplicand+1,c
 20905  0032C0  0E3C               	movlw	60
 20906  0032C2  6E03               	movwf	i2___wmul@multiplicand,c
 20907  0032C4  EC80  F027         	call	i2___wmul	;wreg free
 20908  0032C8  C001  F02A         	movff	?i2___wmul,??_printSortTimer
 20909  0032CC  C002  F02B         	movff	?i2___wmul+1,??_printSortTimer+1
 20910  0032D0  C112  F001         	movff	_startTime+4,i2___wmul@multiplier
 20911  0032D4  C113  F002         	movff	_startTime+5,i2___wmul@multiplier+1
 20912  0032D8  0E0E               	movlw	14
 20913  0032DA  6E04               	movwf	i2___wmul@multiplicand+1,c
 20914  0032DC  0E10               	movlw	16
 20915  0032DE  6E03               	movwf	i2___wmul@multiplicand,c
 20916  0032E0  EC80  F027         	call	i2___wmul	;wreg free
 20917  0032E4  5001               	movf	?i2___wmul,w,c
 20918  0032E6  262A               	addwf	??_printSortTimer,f,c
 20919  0032E8  5002               	movf	?i2___wmul+1,w,c
 20920  0032EA  222B               	addwfc	??_printSortTimer+1,f,c
 20921  0032EC  0101               	movlb	1	; () banked
 20922  0032EE  510E               	movf	_startTime& (0+255),w,b
 20923  0032F0  242A               	addwf	??_printSortTimer,w,c
 20924  0032F2  6E3B               	movwf	printSortTimer@start_sec,c
 20925  0032F4  0101               	movlb	1	; () banked
 20926  0032F6  510F               	movf	(_startTime+1)& (0+255),w,b
 20927  0032F8  202B               	addwfc	??_printSortTimer+1,w,c
 20928  0032FA  6E3C               	movwf	printSortTimer@start_sec+1,c
 20929                           
 20930                           ;sort.c: 444: unsigned int cur_sec = curTime[0] + curTime[1]*60 + curTime[2]*3600;
 20931  0032FC  C02F  F001         	movff	printSortTimer@curTime+2,i2___wmul@multiplier
 20932  003300  C030  F002         	movff	printSortTimer@curTime+3,i2___wmul@multiplier+1
 20933  003304  0E00               	movlw	0
 20934  003306  6E04               	movwf	i2___wmul@multiplicand+1,c
 20935  003308  0E3C               	movlw	60
 20936  00330A  6E03               	movwf	i2___wmul@multiplicand,c
 20937  00330C  EC80  F027         	call	i2___wmul	;wreg free
 20938  003310  C001  F02A         	movff	?i2___wmul,??_printSortTimer
 20939  003314  C002  F02B         	movff	?i2___wmul+1,??_printSortTimer+1
 20940  003318  C031  F001         	movff	printSortTimer@curTime+4,i2___wmul@multiplier
 20941  00331C  C032  F002         	movff	printSortTimer@curTime+5,i2___wmul@multiplier+1
 20942  003320  0E0E               	movlw	14
 20943  003322  6E04               	movwf	i2___wmul@multiplicand+1,c
 20944  003324  0E10               	movlw	16
 20945  003326  6E03               	movwf	i2___wmul@multiplicand,c
 20946  003328  EC80  F027         	call	i2___wmul	;wreg free
 20947  00332C  5001               	movf	?i2___wmul,w,c
 20948  00332E  262A               	addwf	??_printSortTimer,f,c
 20949  003330  5002               	movf	?i2___wmul+1,w,c
 20950  003332  222B               	addwfc	??_printSortTimer+1,f,c
 20951  003334  502D               	movf	printSortTimer@curTime,w,c
 20952  003336  242A               	addwf	??_printSortTimer,w,c
 20953  003338  6E3D               	movwf	printSortTimer@cur_sec,c
 20954  00333A  502E               	movf	printSortTimer@curTime+1,w,c
 20955  00333C  202B               	addwfc	??_printSortTimer+1,w,c
 20956  00333E  6E3E               	movwf	printSortTimer@cur_sec+1,c
 20957                           
 20958                           ;sort.c: 445: unsigned int timeDiff = cur_sec - start_sec;
 20959  003340  C03B  F02A         	movff	printSortTimer@start_sec,??_printSortTimer
 20960  003344  C03C  F02B         	movff	printSortTimer@start_sec+1,??_printSortTimer+1
 20961  003348  1E2A               	comf	??_printSortTimer,f,c
 20962  00334A  1E2B               	comf	??_printSortTimer+1,f,c
 20963  00334C  4A2A               	infsnz	??_printSortTimer,f,c
 20964  00334E  2A2B               	incf	??_printSortTimer+1,f,c
 20965  003350  503D               	movf	printSortTimer@cur_sec,w,c
 20966  003352  242A               	addwf	??_printSortTimer,w,c
 20967  003354  6E45               	movwf	printSortTimer@timeDiff,c
 20968  003356  503E               	movf	printSortTimer@cur_sec+1,w,c
 20969  003358  202B               	addwfc	??_printSortTimer+1,w,c
 20970  00335A  6E46               	movwf	printSortTimer@timeDiff+1,c
 20971                           
 20972                           ;sort.c: 447: total_time = timeDiff;
 20973  00335C  C045  F0F8         	movff	printSortTimer@timeDiff,_total_time
 20974  003360  C046  F0F9         	movff	printSortTimer@timeDiff+1,_total_time+1
 20975                           
 20976                           ;sort.c: 449: if(f_most_recent_sort_time){
 20977  003364  506B               	movf	_f_most_recent_sort_time,w,c
 20978  003366  106C               	iorwf	_f_most_recent_sort_time+1,w,c
 20979  003368  B4D8               	btfsc	status,2,c
 20980  00336A  D008               	goto	i2l8902
 20981                           
 20982                           ;sort.c: 450: most_recent_sort_time = total_time;
 20983  00336C  C0F8  F133         	movff	_total_time,_most_recent_sort_time
 20984  003370  C0F9  F134         	movff	_total_time+1,_most_recent_sort_time+1
 20985                           
 20986                           ;sort.c: 451: f_most_recent_sort_time = 0;
 20987  003374  0E00               	movlw	0
 20988  003376  6E6C               	movwf	_f_most_recent_sort_time+1,c
 20989  003378  0E00               	movlw	0
 20990  00337A  6E6B               	movwf	_f_most_recent_sort_time,c
 20991  00337C                     i2l8902:
 20992                           
 20993                           ;sort.c: 452: }
 20994                           ;sort.c: 459: if((total_time - most_recent_sort_time == 42) | (total_time == 179)){
 20995  00337C  C133  F02A         	movff	_most_recent_sort_time,??_printSortTimer
 20996  003380  C134  F02B         	movff	_most_recent_sort_time+1,??_printSortTimer+1
 20997  003384  1E2A               	comf	??_printSortTimer,f,c
 20998  003386  1E2B               	comf	??_printSortTimer+1,f,c
 20999  003388  4A2A               	infsnz	??_printSortTimer,f,c
 21000  00338A  2A2B               	incf	??_printSortTimer+1,f,c
 21001  00338C  0100               	movlb	0	; () banked
 21002  00338E  51F8               	movf	_total_time& (0+255),w,b
 21003  003390  262A               	addwf	??_printSortTimer,f,c
 21004  003392  0100               	movlb	0	; () banked
 21005  003394  51F9               	movf	(_total_time+1)& (0+255),w,b
 21006  003396  222B               	addwfc	??_printSortTimer+1,f,c
 21007  003398  0E2A               	movlw	42
 21008  00339A  182A               	xorwf	??_printSortTimer,w,c
 21009  00339C  102B               	iorwf	??_printSortTimer+1,w,c
 21010  00339E  B4D8               	btfsc	status,2,c
 21011  0033A0  D007               	goto	i2l8906
 21012                           
 21013                           ; BSR set to: 0
 21014  0033A2  0EB3               	movlw	179
 21015  0033A4  0100               	movlb	0	; () banked
 21016  0033A6  19F8               	xorwf	_total_time& (0+255),w,b
 21017  0033A8  0100               	movlb	0	; () banked
 21018  0033AA  11F9               	iorwf	(_total_time+1)& (0+255),w,b
 21019  0033AC  A4D8               	btfss	status,2,c
 21020  0033AE  D003               	goto	i2l8908
 21021  0033B0                     i2l8906:
 21022                           
 21023                           ; BSR set to: 0
 21024                           ;sort.c: 460: machine_state = DoneSorting_state;
 21025  0033B0  0E02               	movlw	2
 21026  0033B2  0100               	movlb	0	; () banked
 21027  0033B4  6FFC               	movwf	_machine_state& (0+255),b
 21028  0033B6                     i2l8908:
 21029                           
 21030                           ; BSR set to: 0
 21031                           ;sort.c: 462: }
 21032                           ;sort.c: 464: int min = (timeDiff % 3600) / 60;
 21033  0033B6  0E0E               	movlw	14
 21034  0033B8  6E04               	movwf	i2___lwmod@divisor+1,c
 21035  0033BA  0E10               	movlw	16
 21036  0033BC  6E03               	movwf	i2___lwmod@divisor,c
 21037  0033BE  C045  F001         	movff	printSortTimer@timeDiff,i2___lwmod@dividend
 21038  0033C2  C046  F002         	movff	printSortTimer@timeDiff+1,i2___lwmod@dividend+1
 21039  0033C6  EC39  F025         	call	i2___lwmod	;wreg free
 21040  0033CA  C001  F006         	movff	?i2___lwmod,i2___lwdiv@dividend
 21041  0033CE  C002  F007         	movff	?i2___lwmod+1,i2___lwdiv@dividend+1
 21042  0033D2  0E00               	movlw	0
 21043  0033D4  6E09               	movwf	i2___lwdiv@divisor+1,c
 21044  0033D6  0E3C               	movlw	60
 21045  0033D8  6E08               	movwf	i2___lwdiv@divisor,c
 21046  0033DA  EC7A  F024         	call	i2___lwdiv	;wreg free
 21047  0033DE  C006  F03F         	movff	?i2___lwdiv,printSortTimer@min
 21048  0033E2  C007  F040         	movff	?i2___lwdiv+1,printSortTimer@min+1
 21049                           
 21050                           ;sort.c: 465: int sec = (timeDiff % 3600) % 60;
 21051  0033E6  0E0E               	movlw	14
 21052  0033E8  6E04               	movwf	i2___lwmod@divisor+1,c
 21053  0033EA  0E10               	movlw	16
 21054  0033EC  6E03               	movwf	i2___lwmod@divisor,c
 21055  0033EE  C045  F001         	movff	printSortTimer@timeDiff,i2___lwmod@dividend
 21056  0033F2  C046  F002         	movff	printSortTimer@timeDiff+1,i2___lwmod@dividend+1
 21057  0033F6  EC39  F025         	call	i2___lwmod	;wreg free
 21058  0033FA  C001  F043         	movff	?i2___lwmod,_printSortTimer$2453
 21059  0033FE  C002  F044         	movff	?i2___lwmod+1,_printSortTimer$2453+1
 21060                           
 21061                           ;sort.c: 465: int sec = (timeDiff % 3600) % 60;
 21062  003402  C043  F001         	movff	_printSortTimer$2453,i2___lwmod@dividend
 21063  003406  C044  F002         	movff	_printSortTimer$2453+1,i2___lwmod@dividend+1
 21064  00340A  0E00               	movlw	0
 21065  00340C  6E04               	movwf	i2___lwmod@divisor+1,c
 21066  00340E  0E3C               	movlw	60
 21067  003410  6E03               	movwf	i2___lwmod@divisor,c
 21068  003412  EC39  F025         	call	i2___lwmod	;wreg free
 21069  003416  C001  F041         	movff	?i2___lwmod,printSortTimer@sec
 21070  00341A  C002  F042         	movff	?i2___lwmod+1,printSortTimer@sec+1
 21071                           
 21072                           ;sort.c: 467: lcdInst(0b10000000);;
 21073  00341E  0E80               	movlw	128
 21074  003420  EC36  F028         	call	i2_lcdInst
 21075                           
 21076                           ;sort.c: 468: printf("SORTING...");
 21077  003424  0E7C               	movlw	low STR_64
 21078  003426  6E0D               	movwf	i2printf@f,c
 21079  003428  0EFF               	movlw	high STR_64
 21080  00342A  6E0E               	movwf	i2printf@f+1,c
 21081  00342C  ECC6  F00E         	call	i2_printf	;wreg free
 21082                           
 21083                           ;sort.c: 469: lcdInst(0b11000000);;
 21084  003430  0EC0               	movlw	192
 21085  003432  EC36  F028         	call	i2_lcdInst
 21086                           
 21087                           ;sort.c: 470: printf("TIME %d:%02d", min, sec);
 21088  003436  0E42               	movlw	low STR_65
 21089  003438  6E0D               	movwf	i2printf@f,c
 21090  00343A  0EFF               	movlw	high STR_65
 21091  00343C  6E0E               	movwf	i2printf@f+1,c
 21092  00343E  C03F  F00F         	movff	printSortTimer@min,?i2_printf+2
 21093  003442  C040  F010         	movff	printSortTimer@min+1,?i2_printf+3
 21094  003446  C041  F011         	movff	printSortTimer@sec,?i2_printf+4
 21095  00344A  C042  F012         	movff	printSortTimer@sec+1,?i2_printf+5
 21096  00344E  ECC6  F00E         	call	i2_printf	;wreg free
 21097  003452  0012               	return		;funcret
 21098  003454                     __end_of_printSortTimer:
 21099                           	opt stack 0
 21100                           pclatu	equ	0xFFB
 21101                           pclath	equ	0xFFA
 21102                           tblptru	equ	0xFF8
 21103                           tblptrh	equ	0xFF7
 21104                           tblptrl	equ	0xFF6
 21105                           tablat	equ	0xFF5
 21106                           prodh	equ	0xFF4
 21107                           prodl	equ	0xFF3
 21108                           intcon	equ	0xFF2
 21109                           intcon2	equ	0xFF1
 21110                           intcon3	equ	0xFF0
 21111                           indf0	equ	0xFEF
 21112                           postinc0	equ	0xFEE
 21113                           fsr0h	equ	0xFEA
 21114                           fsr0l	equ	0xFE9
 21115                           wreg	equ	0xFE8
 21116                           postdec1	equ	0xFE5
 21117                           fsr1h	equ	0xFE2
 21118                           fsr1l	equ	0xFE1
 21119                           indf2	equ	0xFDF
 21120                           postinc2	equ	0xFDE
 21121                           postdec2	equ	0xFDD
 21122                           fsr2h	equ	0xFDA
 21123                           fsr2l	equ	0xFD9
 21124                           status	equ	0xFD8
 21125                           
 21126 ;; *************** function i2_printf *****************
 21127 ;; Defined at:
 21128 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
 21129 ;; Parameters:    Size  Location     Type
 21130 ;;  f               2   12[COMRAM] PTR const unsigned char 
 21131 ;;		 -> STR_125(18), STR_124(18), STR_123(18), STR_122(18), 
 21132 ;;		 -> STR_121(18), STR_120(18), STR_119(17), STR_118(17), 
 21133 ;;		 -> STR_117(3), STR_116(15), STR_115(3), STR_114(15), 
 21134 ;;		 -> STR_113(11), STR_112(18), STR_111(18), STR_110(17), 
 21135 ;;		 -> STR_109(15), STR_108(15), STR_107(15), STR_106(17), 
 21136 ;;		 -> STR_105(17), STR_104(17), STR_103(16), STR_102(17), 
 21137 ;;		 -> STR_101(17), STR_100(17), STR_99(17), STR_98(17), 
 21138 ;;		 -> STR_97(17), STR_96(15), STR_95(11), STR_94(17), 
 21139 ;;		 -> STR_93(11), STR_92(17), STR_91(14), STR_90(15), 
 21140 ;;		 -> STR_89(14), STR_88(10), STR_87(9), STR_86(9), 
 21141 ;;		 -> STR_85(10), STR_84(10), STR_83(16), STR_82(15), 
 21142 ;;		 -> STR_81(3), STR_80(15), STR_79(13), STR_78(14), 
 21143 ;;		 -> STR_77(8), STR_76(14), STR_75(15), STR_74(12), 
 21144 ;;		 -> STR_73(14), STR_72(17), STR_71(14), STR_70(15), 
 21145 ;;		 -> STR_69(17), STR_68(17), STR_67(7), STR_66(21), 
 21146 ;;		 -> STR_65(13), STR_64(11), STR_63(24), STR_50(17), 
 21147 ;;		 -> STR_49(17), STR_48(17), STR_47(17), STR_46(17), 
 21148 ;;		 -> STR_45(17), STR_44(17), STR_43(17), STR_42(17), 
 21149 ;;		 -> STR_41(17), STR_40(17), STR_39(17), STR_38(17), 
 21150 ;;		 -> STR_37(17), STR_36(17), STR_35(17), STR_34(17), 
 21151 ;;		 -> STR_33(17), STR_32(17), STR_31(17), STR_30(17), 
 21152 ;;		 -> STR_29(3), STR_28(17), STR_27(17), STR_26(17), 
 21153 ;;		 -> STR_25(17), STR_24(17), STR_23(14), STR_22(10), 
 21154 ;;		 -> STR_21(24), STR_7(7), STR_6(17), STR_5(18), 
 21155 ;;		 -> STR_4(16), STR_3(18), STR_2(14), STR_1(18), 
 21156 ;; Auto vars:     Size  Location     Type
 21157 ;;  printf          4    0        struct .
 21158 ;;  printf          2   39[COMRAM] int 
 21159 ;;  printf          2   35[COMRAM] unsigned int 
 21160 ;;  printf          2   33[COMRAM] unsigned int 
 21161 ;;  printf          2   31[COMRAM] PTR void [1]
 21162 ;;		 -> ?i2_printf(2), ?_printf(2), 
 21163 ;;  printf          2   29[COMRAM] PTR const unsigned char 
 21164 ;;		 -> STR_126(7), count_total(2), printRTC@month(4), UI@month(4), 
 21165 ;;  printf          1   38[COMRAM] char 
 21166 ;;  printf          1   37[COMRAM] unsigned char 
 21167 ;;  printf          1   28[COMRAM] char 
 21168 ;; Return value:  Size  Location     Type
 21169 ;;                  2   12[COMRAM] int 
 21170 ;; Registers used:
 21171 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21172 ;; Tracked objects:
 21173 ;;		On entry : 0/0
 21174 ;;		On exit  : 0/0
 21175 ;;		Unchanged: 0/0
 21176 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21177 ;;      Params:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21178 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21179 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21180 ;;      Totals:        29       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21181 ;;Total ram usage:       29 bytes
 21182 ;; Hardware stack levels used:    1
 21183 ;; Hardware stack levels required when called:    2
 21184 ;; This function calls:
 21185 ;;		i2___lwdiv
 21186 ;;		i2___lwmod
 21187 ;;		i2___wmul
 21188 ;;		i2_isdigit
 21189 ;;		i2_putch
 21190 ;; This function is called by:
 21191 ;;		_change_state_to_menu_11
 21192 ;;		_change_state_to_menu_23
 21193 ;;		_change_state_to_logs_11
 21194 ;;		_change_state_to_logs_12
 21195 ;;		_change_state_to_logs_22
 21196 ;;		_change_state_to_logs_23
 21197 ;;		_change_state_to_logs_33
 21198 ;;		_change_state_to_logs_34
 21199 ;;		_printSortTimer
 21200 ;;		i2_change_state_to_menu_start
 21201 ;;		i2_change_state_to_menu_12
 21202 ;;		i2_change_state_to_menu_22
 21203 ;;		i2_printRTC
 21204 ;; This function uses a non-reentrant model
 21205 ;;
 21206                           
 21207                           	psect	text79
 21208  001D8C                     __ptext79:
 21209                           	opt stack 0
 21210  001D8C                     i2_printf:
 21211                           	opt stack 19
 21212                           
 21213                           ;doprnt.c: 466: va_list ap;
 21214                           ;doprnt.c: 499: signed char c;
 21215                           ;doprnt.c: 501: int width;
 21216                           ;doprnt.c: 506: signed char prec;
 21217                           ;doprnt.c: 508: unsigned char flag;
 21218                           ;doprnt.c: 523: union {
 21219                           ;doprnt.c: 524: unsigned long vd;
 21220                           ;doprnt.c: 525: double integ;
 21221                           ;doprnt.c: 526: } tmpval;
 21222                           ;doprnt.c: 528: unsigned int val;
 21223                           ;doprnt.c: 529: unsigned len;
 21224                           ;doprnt.c: 530: const char * cp;
 21225                           ;doprnt.c: 533: *ap = __va_start();
 21226                           
 21227                           ;incstack = 0
 21228  001D8C  0E0F               	movlw	low (?i2_printf+2)
 21229  001D8E  6E20               	movwf	i2printf@ap,c
 21230  001D90  0E00               	movlw	high (?i2_printf+2)
 21231  001D92  6E21               	movwf	i2printf@ap+1,c
 21232                           
 21233                           ;doprnt.c: 536: while(c = *f++) {
 21234  001D94  D1A4               	goto	i2l6308
 21235  001D96                     i2l6178:
 21236                           
 21237                           ;doprnt.c: 538: if(c != '%')
 21238  001D96  0E25               	movlw	37
 21239  001D98  1827               	xorwf	i2printf@c,w,c
 21240  001D9A  B4D8               	btfsc	status,2,c
 21241  001D9C  D004               	goto	i2l6182
 21242                           
 21243                           ;doprnt.c: 540: {
 21244                           ;doprnt.c: 541: (putch(c) );
 21245  001D9E  5027               	movf	i2printf@c,w,c
 21246  001DA0  EC30  F028         	call	i2_putch
 21247                           
 21248                           ;doprnt.c: 542: continue;
 21249  001DA4  D19C               	goto	i2l6308
 21250  001DA6                     i2l6182:
 21251                           
 21252                           ;doprnt.c: 543: }
 21253                           ;doprnt.c: 546: width = 0;
 21254  001DA6  0E00               	movlw	0
 21255  001DA8  6E29               	movwf	i2printf@width+1,c
 21256  001DAA  0E00               	movlw	0
 21257  001DAC  6E28               	movwf	i2printf@width,c
 21258                           
 21259                           ;doprnt.c: 548: flag = 0;
 21260  001DAE  0E00               	movlw	0
 21261  001DB0  6E26               	movwf	i2printf@flag,c
 21262                           
 21263                           ;doprnt.c: 551: switch(*f) {
 21264                           
 21265                           ;doprnt.c: 550: for(;;) {
 21266  001DB2  D003               	goto	i2l6188
 21267  001DB4                     i2l6184:
 21268                           
 21269                           ;doprnt.c: 580: flag |= 0x04;
 21270  001DB4  8426               	bsf	i2printf@flag,2,c
 21271                           
 21272                           ;doprnt.c: 581: f++;
 21273  001DB6  4A0D               	infsnz	i2printf@f,f,c
 21274  001DB8  2A0E               	incf	i2printf@f+1,f,c
 21275  001DBA                     i2l6188:
 21276  001DBA  C00D  FFF6         	movff	i2printf@f,tblptrl
 21277  001DBE  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 21278  001DC2                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 21279  001DC2  6AF8               	clrf	tblptru,c
 21280  001DC4                     	endif
 21281  001DC4                     	if	0	;tblptru may be non-zero
 21282  001DC4                     	endif
 21283  001DC4  0008               	tblrd		*
 21284  001DC6  50F5               	movf	tablat,w,c
 21285                           
 21286                           ; Switch size 1, requested type "space"
 21287                           ; Number of cases is 1, Range of values is 48 to 48
 21288                           ; switch strategies available:
 21289                           ; Name         Instructions Cycles
 21290                           ; simple_byte            4     3 (average)
 21291                           ;	Chosen strategy is simple_byte
 21292  001DC8  0A30               	xorlw	48	; case 48
 21293  001DCA  B4D8               	btfsc	status,2,c
 21294  001DCC  D7F3               	goto	i2l6184
 21295                           
 21296                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 21297                           
 21298                           ;doprnt.c: 586: }
 21299                           
 21300                           ;doprnt.c: 585: break;
 21301  001DCE  C00D  FFF6         	movff	i2printf@f,tblptrl
 21302  001DD2  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 21303  001DD6                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 21304  001DD6  6AF8               	clrf	tblptru,c
 21305  001DD8                     	endif
 21306  001DD8                     	if	0	;tblptru may be non-zero
 21307  001DD8                     	endif
 21308  001DD8  0008               	tblrd		*
 21309  001DDA  50F5               	movf	tablat,w,c
 21310  001DDC  ECDA  F027         	call	i2_isdigit
 21311  001DE0  A0D8               	btfss	status,0,c
 21312  001DE2  D0A6               	goto	i2l6236
 21313                           
 21314                           ;doprnt.c: 598: width = 0;
 21315  001DE4  0E00               	movlw	0
 21316  001DE6  6E29               	movwf	i2printf@width+1,c
 21317  001DE8  0E00               	movlw	0
 21318  001DEA  6E28               	movwf	i2printf@width,c
 21319  001DEC                     i2l6194:
 21320                           
 21321                           ;doprnt.c: 600: width *= 10;
 21322  001DEC  C028  F001         	movff	i2printf@width,i2___wmul@multiplier
 21323  001DF0  C029  F002         	movff	i2printf@width+1,i2___wmul@multiplier+1
 21324  001DF4  0E00               	movlw	0
 21325  001DF6  6E04               	movwf	i2___wmul@multiplicand+1,c
 21326  001DF8  0E0A               	movlw	10
 21327  001DFA  6E03               	movwf	i2___wmul@multiplicand,c
 21328  001DFC  EC80  F027         	call	i2___wmul	;wreg free
 21329  001E00  C001  F028         	movff	?i2___wmul,i2printf@width
 21330  001E04  C002  F029         	movff	?i2___wmul+1,i2printf@width+1
 21331                           
 21332                           ;doprnt.c: 601: width += *f++ - '0';
 21333  001E08  0ED0               	movlw	208
 21334  001E0A  6E19               	movwf	??i2_printf& (0+255),c
 21335  001E0C  0EFF               	movlw	255
 21336  001E0E  6E1A               	movwf	(??i2_printf+1)& (0+255),c
 21337  001E10  C00D  FFF6         	movff	i2printf@f,tblptrl
 21338  001E14  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 21339  001E18                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 21340  001E18  6AF8               	clrf	tblptru,c
 21341  001E1A                     	endif
 21342  001E1A                     	if	0	;tblptru may be non-zero
 21343  001E1A                     	endif
 21344  001E1A  0008               	tblrd		*
 21345  001E1C  50F5               	movf	tablat,w,c
 21346  001E1E  6E1B               	movwf	(??i2_printf+2)& (0+255),c
 21347  001E20  6A1C               	clrf	(??i2_printf+3)& (0+255),c
 21348  001E22  5019               	movf	??i2_printf,w,c
 21349  001E24  261B               	addwf	??i2_printf+2,f,c
 21350  001E26  501A               	movf	??i2_printf+1,w,c
 21351  001E28  221C               	addwfc	??i2_printf+3,f,c
 21352  001E2A  501B               	movf	??i2_printf+2,w,c
 21353  001E2C  2628               	addwf	i2printf@width,f,c
 21354  001E2E  501C               	movf	??i2_printf+3,w,c
 21355  001E30  2229               	addwfc	i2printf@width+1,f,c
 21356  001E32  4A0D               	infsnz	i2printf@f,f,c
 21357  001E34  2A0E               	incf	i2printf@f+1,f,c
 21358                           
 21359                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 21360  001E36  C00D  FFF6         	movff	i2printf@f,tblptrl
 21361  001E3A  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 21362  001E3E                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 21363  001E3E  6AF8               	clrf	tblptru,c
 21364  001E40                     	endif
 21365  001E40                     	if	0	;tblptru may be non-zero
 21366  001E40                     	endif
 21367  001E40  0008               	tblrd		*
 21368  001E42  50F5               	movf	tablat,w,c
 21369  001E44  ECDA  F027         	call	i2_isdigit
 21370  001E48  A0D8               	btfss	status,0,c
 21371  001E4A  D072               	goto	i2l6236
 21372  001E4C  D7CF               	goto	i2l6194
 21373  001E4E                     i2l6202:
 21374                           
 21375                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
 21376  001E4E  C020  FFD9         	movff	i2printf@ap,fsr2l
 21377  001E52  C021  FFDA         	movff	i2printf@ap+1,fsr2h
 21378  001E56  CFDE F01E          	movff	postinc2,i2printf@cp
 21379  001E5A  CFDD F01F          	movff	postdec2,i2printf@cp+1
 21380  001E5E  0E02               	movlw	2
 21381  001E60  2620               	addwf	i2printf@ap,f,c
 21382  001E62  0E00               	movlw	0
 21383  001E64  2221               	addwfc	i2printf@ap+1,f,c
 21384                           
 21385                           ;doprnt.c: 740: if(!cp)
 21386  001E66  501E               	movf	i2printf@cp,w,c
 21387  001E68  101F               	iorwf	i2printf@cp+1,w,c
 21388  001E6A  A4D8               	btfss	status,2,c
 21389  001E6C  D004               	goto	i2l6210
 21390                           
 21391                           ;doprnt.c: 741: cp = "(null)";
 21392  001E6E  0EB6               	movlw	low STR_126
 21393  001E70  6E1E               	movwf	i2printf@cp,c
 21394  001E72  0EFF               	movlw	high STR_126
 21395  001E74  6E1F               	movwf	i2printf@cp+1,c
 21396  001E76                     i2l6210:
 21397                           
 21398                           ;doprnt.c: 745: len = 0;
 21399  001E76  0E00               	movlw	0
 21400  001E78  6E23               	movwf	i2printf@len+1,c
 21401  001E7A  0E00               	movlw	0
 21402  001E7C  6E22               	movwf	i2printf@len,c
 21403                           
 21404                           ;doprnt.c: 746: while(cp[len])
 21405  001E7E  D002               	goto	i2l6214
 21406  001E80                     i2l6212:
 21407                           
 21408                           ;doprnt.c: 747: len++;
 21409  001E80  4A22               	infsnz	i2printf@len,f,c
 21410  001E82  2A23               	incf	i2printf@len+1,f,c
 21411  001E84                     i2l6214:
 21412  001E84  5022               	movf	i2printf@len,w,c
 21413  001E86  241E               	addwf	i2printf@cp,w,c
 21414  001E88  6E19               	movwf	??i2_printf& (0+255),c
 21415  001E8A  5023               	movf	i2printf@len+1,w,c
 21416  001E8C  201F               	addwfc	i2printf@cp+1,w,c
 21417  001E8E  6E1A               	movwf	(??i2_printf+1)& (0+255),c
 21418  001E90  C019  FFF6         	movff	??i2_printf,tblptrl
 21419  001E94  C01A  FFF7         	movff	??i2_printf+1,tblptrh
 21420  001E98  0E00               	movlw	low (__mediumconst shr (0+16))
 21421  001E9A  6EF8               	movwf	tblptru,c
 21422  001E9C  0E0F               	movlw	(high __ramtop+-1)
 21423  001E9E  64F7               	cpfsgt	tblptrh,c
 21424  001EA0  D003               	bra	i2u482_47
 21425  001EA2  0008               	tblrd		*
 21426  001EA4  50F5               	movf	tablat,w,c
 21427  001EA6  D005               	bra	i2u482_40
 21428  001EA8                     i2u482_47:
 21429  001EA8  CFF6 FFE9          	movff	tblptrl,fsr0l
 21430  001EAC  CFF7 FFEA          	movff	tblptrh,fsr0h
 21431  001EB0  50EF               	movf	indf0,w,c
 21432  001EB2                     i2u482_40:
 21433  001EB2  0900               	iorlw	0
 21434  001EB4  A4D8               	btfss	status,2,c
 21435  001EB6  D7E4               	goto	i2l6212
 21436                           
 21437                           ;doprnt.c: 757: if(width > len)
 21438  001EB8  5028               	movf	i2printf@width,w,c
 21439  001EBA  5C22               	subwf	i2printf@len,w,c
 21440  001EBC  5029               	movf	i2printf@width+1,w,c
 21441  001EBE  5823               	subwfb	i2printf@len+1,w,c
 21442  001EC0  B0D8               	btfsc	status,0,c
 21443  001EC2  D005               	goto	i2l6220
 21444                           
 21445                           ;doprnt.c: 758: width -= len;
 21446  001EC4  5022               	movf	i2printf@len,w,c
 21447  001EC6  5E28               	subwf	i2printf@width,f,c
 21448  001EC8  5023               	movf	i2printf@len+1,w,c
 21449  001ECA  5A29               	subwfb	i2printf@width+1,f,c
 21450  001ECC  D008               	goto	i2l6224
 21451  001ECE                     i2l6220:
 21452                           
 21453                           ;doprnt.c: 759: else
 21454                           ;doprnt.c: 760: width = 0;
 21455  001ECE  0E00               	movlw	0
 21456  001ED0  6E29               	movwf	i2printf@width+1,c
 21457  001ED2  0E00               	movlw	0
 21458  001ED4  6E28               	movwf	i2printf@width,c
 21459                           
 21460                           ;doprnt.c: 764: while(width--)
 21461  001ED6  D003               	goto	i2l6224
 21462  001ED8                     i2l6222:
 21463                           
 21464                           ;doprnt.c: 765: (putch(' ') );
 21465  001ED8  0E20               	movlw	32
 21466  001EDA  EC30  F028         	call	i2_putch
 21467  001EDE                     i2l6224:
 21468  001EDE  0628               	decf	i2printf@width,f,c
 21469  001EE0  A0D8               	btfss	status,0,c
 21470  001EE2  0629               	decf	i2printf@width+1,f,c
 21471  001EE4  2828               	incf	i2printf@width,w,c
 21472  001EE6  E1F8               	bnz	i2l6222
 21473  001EE8  2829               	incf	i2printf@width+1,w,c
 21474  001EEA  B4D8               	btfsc	status,2,c
 21475  001EEC  D016               	goto	i2l6230
 21476  001EEE  D7F4               	goto	i2l6222
 21477  001EF0                     i2l6226:
 21478                           
 21479                           ;doprnt.c: 768: (putch(*cp++) );
 21480  001EF0  C01E  FFF6         	movff	i2printf@cp,tblptrl
 21481  001EF4  C01F  FFF7         	movff	i2printf@cp+1,tblptrh
 21482  001EF8  0E00               	movlw	low (__mediumconst shr (0+16))
 21483  001EFA  6EF8               	movwf	tblptru,c
 21484  001EFC  0E0F               	movlw	(high __ramtop+-1)
 21485  001EFE  64F7               	cpfsgt	tblptrh,c
 21486  001F00  D003               	bra	i2u486_47
 21487  001F02  0008               	tblrd		*
 21488  001F04  50F5               	movf	tablat,w,c
 21489  001F06  D005               	bra	i2u486_40
 21490  001F08                     i2u486_47:
 21491  001F08  CFF6 FFE9          	movff	tblptrl,fsr0l
 21492  001F0C  CFF7 FFEA          	movff	tblptrh,fsr0h
 21493  001F10  50EF               	movf	indf0,w,c
 21494  001F12                     i2u486_40:
 21495  001F12  EC30  F028         	call	i2_putch
 21496  001F16  4A1E               	infsnz	i2printf@cp,f,c
 21497  001F18  2A1F               	incf	i2printf@cp+1,f,c
 21498  001F1A                     i2l6230:
 21499  001F1A  0622               	decf	i2printf@len,f,c
 21500  001F1C  A0D8               	btfss	status,0,c
 21501  001F1E  0623               	decf	i2printf@len+1,f,c
 21502  001F20  2822               	incf	i2printf@len,w,c
 21503  001F22  E1E6               	bnz	i2l6226
 21504  001F24  2823               	incf	i2printf@len+1,w,c
 21505  001F26  B4D8               	btfsc	status,2,c
 21506  001F28  D0DA               	goto	i2l6308
 21507  001F2A  D7E2               	goto	i2l6226
 21508  001F2C                     i2l6232:
 21509                           
 21510                           ;doprnt.c: 818: flag |= 0x40;
 21511  001F2C  8C26               	bsf	i2printf@flag,6,c
 21512                           
 21513                           ;doprnt.c: 822: }
 21514                           
 21515                           ;doprnt.c: 819: break;
 21516  001F2E  D01B               	goto	i2l1366
 21517  001F30                     i2l6236:
 21518  001F30  C00D  FFF6         	movff	i2printf@f,tblptrl
 21519  001F34  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 21520  001F38  4A0D               	infsnz	i2printf@f,f,c
 21521  001F3A  2A0E               	incf	i2printf@f+1,f,c
 21522  001F3C                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 21523  001F3C  6AF8               	clrf	tblptru,c
 21524  001F3E                     	endif
 21525  001F3E                     	if	0	;tblptru may be non-zero
 21526  001F3E                     	endif
 21527  001F3E  0008               	tblrd		*
 21528  001F40  CFF5 F027          	movff	tablat,i2printf@c
 21529  001F44  5027               	movf	i2printf@c,w,c
 21530                           
 21531                           ; Switch size 1, requested type "space"
 21532                           ; Number of cases is 5, Range of values is 0 to 117
 21533                           ; switch strategies available:
 21534                           ; Name         Instructions Cycles
 21535                           ; simple_byte           16     9 (average)
 21536                           ;	Chosen strategy is simple_byte
 21537  001F46  0A00               	xorlw	0	; case 0
 21538  001F48  B4D8               	btfsc	status,2,c
 21539  001F4A  0012               	return	
 21540  001F4C  0A64               	xorlw	100	; case 100
 21541  001F4E  B4D8               	btfsc	status,2,c
 21542  001F50  D00A               	goto	i2l1366
 21543  001F52  0A0D               	xorlw	13	; case 105
 21544  001F54  B4D8               	btfsc	status,2,c
 21545  001F56  D007               	goto	i2l1366
 21546  001F58  0A1A               	xorlw	26	; case 115
 21547  001F5A  B4D8               	btfsc	status,2,c
 21548  001F5C  D778               	goto	i2l6202
 21549  001F5E  0A06               	xorlw	6	; case 117
 21550  001F60  B4D8               	btfsc	status,2,c
 21551  001F62  D7E4               	goto	i2l6232
 21552  001F64  D0BC               	goto	i2l6308
 21553  001F66                     i2l1366:
 21554                           
 21555                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
 21556  001F66  BC26               	btfsc	i2printf@flag,6,c
 21557  001F68  D015               	goto	i2l6248
 21558                           
 21559                           ;doprnt.c: 1253: {
 21560                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 21561  001F6A  C020  FFD9         	movff	i2printf@ap,fsr2l
 21562  001F6E  C021  FFDA         	movff	i2printf@ap+1,fsr2h
 21563  001F72  CFDE F024          	movff	postinc2,i2printf@val
 21564  001F76  CFDD F025          	movff	postdec2,i2printf@val+1
 21565  001F7A  0E02               	movlw	2
 21566  001F7C  2620               	addwf	i2printf@ap,f,c
 21567  001F7E  0E00               	movlw	0
 21568  001F80  2221               	addwfc	i2printf@ap+1,f,c
 21569                           
 21570                           ;doprnt.c: 1261: if((int)val < 0) {
 21571  001F82  AE25               	btfss	i2printf@val+1,7,c
 21572  001F84  D013               	goto	i2l6252
 21573                           
 21574                           ;doprnt.c: 1262: flag |= 0x03;
 21575  001F86  0E03               	movlw	3
 21576  001F88  1226               	iorwf	i2printf@flag,f,c
 21577                           
 21578                           ;doprnt.c: 1263: val = -val;
 21579  001F8A  6C24               	negf	i2printf@val,c
 21580  001F8C  1E25               	comf	i2printf@val+1,f,c
 21581  001F8E  B0D8               	btfsc	status,0,c
 21582  001F90  2A25               	incf	i2printf@val+1,f,c
 21583                           
 21584                           ;doprnt.c: 1264: }
 21585                           ;doprnt.c: 1266: }
 21586  001F92  D00C               	goto	i2l6252
 21587  001F94                     i2l6248:
 21588                           
 21589                           ;doprnt.c: 1268: else
 21590                           ;doprnt.c: 1273: {
 21591                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 21592  001F94  C020  FFD9         	movff	i2printf@ap,fsr2l
 21593  001F98  C021  FFDA         	movff	i2printf@ap+1,fsr2h
 21594  001F9C  CFDE F024          	movff	postinc2,i2printf@val
 21595  001FA0  CFDD F025          	movff	postdec2,i2printf@val+1
 21596  001FA4  0E02               	movlw	2
 21597  001FA6  2620               	addwf	i2printf@ap,f,c
 21598  001FA8  0E00               	movlw	0
 21599  001FAA  2221               	addwfc	i2printf@ap+1,f,c
 21600  001FAC                     i2l6252:
 21601                           
 21602                           ;doprnt.c: 1287: }
 21603                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 21604  001FAC  0E01               	movlw	1
 21605  001FAE  6E27               	movwf	i2printf@c,c
 21606  001FB0                     i2l6254:
 21607  001FB0  0E05               	movlw	5
 21608  001FB2  1827               	xorwf	i2printf@c,w,c
 21609  001FB4  B4D8               	btfsc	status,2,c
 21610  001FB6  D015               	goto	i2l6266
 21611                           
 21612                           ;doprnt.c: 1306: if(val < dpowers[c])
 21613  001FB8  5027               	movf	i2printf@c,w,c
 21614  001FBA  0D02               	mullw	2
 21615  001FBC  0E00               	movlw	low _dpowers
 21616  001FBE  24F3               	addwf	prodl,w,c
 21617  001FC0  6EF6               	movwf	tblptrl,c
 21618  001FC2  0EFB               	movlw	high _dpowers
 21619  001FC4  20F4               	addwfc	prodh,w,c
 21620  001FC6  6EF7               	movwf	tblptrh,c
 21621  001FC8                     	if	1	;There are 3 active tblptr bytes
 21622  001FC8  6AF8               	clrf	tblptru,c
 21623  001FCA  0E00               	movlw	low (__mediumconst shr (0+16))
 21624  001FCC  22F8               	addwfc	tblptru,f,c
 21625  001FCE                     	endif
 21626  001FCE  0009               	tblrd		*+
 21627  001FD0  50F5               	movf	tablat,w,c
 21628  001FD2  5C24               	subwf	i2printf@val,w,c
 21629  001FD4  0009               	tblrd		*+
 21630  001FD6  50F5               	movf	tablat,w,c
 21631  001FD8  5825               	subwfb	i2printf@val+1,w,c
 21632  001FDA  A0D8               	btfss	status,0,c
 21633  001FDC  D002               	goto	i2l6266
 21634                           
 21635                           ;doprnt.c: 1307: break;
 21636  001FDE  2A27               	incf	i2printf@c,f,c
 21637  001FE0  D7E7               	goto	i2l6254
 21638  001FE2                     i2l6266:
 21639                           
 21640                           ;doprnt.c: 1345: if(width && flag & 0x03)
 21641  001FE2  5028               	movf	i2printf@width,w,c
 21642  001FE4  1029               	iorwf	i2printf@width+1,w,c
 21643  001FE6  B4D8               	btfsc	status,2,c
 21644  001FE8  D009               	goto	i2l6272
 21645  001FEA  C026  F019         	movff	i2printf@flag,??i2_printf
 21646  001FEE  0E03               	movlw	3
 21647  001FF0  1619               	andwf	??i2_printf,f,c
 21648  001FF2  B4D8               	btfsc	status,2,c
 21649  001FF4  D003               	goto	i2l6272
 21650                           
 21651                           ;doprnt.c: 1346: width--;
 21652  001FF6  0628               	decf	i2printf@width,f,c
 21653  001FF8  A0D8               	btfss	status,0,c
 21654  001FFA  0629               	decf	i2printf@width+1,f,c
 21655  001FFC                     i2l6272:
 21656                           
 21657                           ;doprnt.c: 1381: if(width > c)
 21658  001FFC  0E80               	movlw	128
 21659  001FFE  BE27               	btfsc	i2printf@c,7,c
 21660  002000  0E7F               	movlw	127
 21661  002002  6E19               	movwf	??i2_printf& (0+255),c
 21662  002004  5028               	movf	i2printf@width,w,c
 21663  002006  5C27               	subwf	i2printf@c,w,c
 21664  002008  5029               	movf	i2printf@width+1,w,c
 21665  00200A  0A80               	xorlw	128
 21666  00200C  5819               	subwfb	??i2_printf& (0+255),w,c
 21667  00200E  B0D8               	btfsc	status,0,c
 21668  002010  D007               	goto	i2l6276
 21669                           
 21670                           ;doprnt.c: 1382: width -= c;
 21671  002012  5027               	movf	i2printf@c,w,c
 21672  002014  5E28               	subwf	i2printf@width,f,c
 21673  002016  0E00               	movlw	0
 21674  002018  BE27               	btfsc	i2printf@c,7,c
 21675  00201A  0EFF               	movlw	255
 21676  00201C  5A29               	subwfb	i2printf@width+1,f,c
 21677  00201E  D004               	goto	i2l6278
 21678  002020                     i2l6276:
 21679                           
 21680                           ;doprnt.c: 1383: else
 21681                           ;doprnt.c: 1384: width = 0;
 21682  002020  0E00               	movlw	0
 21683  002022  6E29               	movwf	i2printf@width+1,c
 21684  002024  0E00               	movlw	0
 21685  002026  6E28               	movwf	i2printf@width,c
 21686  002028                     i2l6278:
 21687                           
 21688                           ;doprnt.c: 1387: if(flag & 0x04) {
 21689  002028  A426               	btfss	i2printf@flag,2,c
 21690  00202A  D014               	goto	i2l6290
 21691                           
 21692                           ;doprnt.c: 1392: if(flag & 0x03)
 21693  00202C  C026  F019         	movff	i2printf@flag,??i2_printf
 21694  002030  0E03               	movlw	3
 21695  002032  1619               	andwf	??i2_printf,f,c
 21696  002034  B4D8               	btfsc	status,2,c
 21697  002036  D003               	goto	i2l6284
 21698                           
 21699                           ;doprnt.c: 1393: (putch('-') );
 21700  002038  0E2D               	movlw	45
 21701  00203A  EC30  F028         	call	i2_putch
 21702  00203E                     i2l6284:
 21703                           
 21704                           ;doprnt.c: 1415: if(width)
 21705  00203E  5028               	movf	i2printf@width,w,c
 21706  002040  1029               	iorwf	i2printf@width+1,w,c
 21707  002042  B4D8               	btfsc	status,2,c
 21708  002044  D01E               	goto	i2l6300
 21709                           
 21710                           ;doprnt.c: 1417: (putch('0') );
 21711                           
 21712                           ;doprnt.c: 1416: do
 21713  002046  0E30               	movlw	48
 21714  002048  EC30  F028         	call	i2_putch
 21715                           
 21716                           ;doprnt.c: 1418: while(--width);
 21717  00204C  0628               	decf	i2printf@width,f,c
 21718  00204E  A0D8               	btfss	status,0,c
 21719  002050  0629               	decf	i2printf@width+1,f,c
 21720  002052  D7F5               	goto	i2l6284
 21721  002054                     i2l6290:
 21722                           
 21723                           ;doprnt.c: 1422: {
 21724                           ;doprnt.c: 1424: if(width
 21725                           ;doprnt.c: 1428: )
 21726  002054  5028               	movf	i2printf@width,w,c
 21727  002056  1029               	iorwf	i2printf@width+1,w,c
 21728  002058  B4D8               	btfsc	status,2,c
 21729  00205A  D00A               	goto	i2l6296
 21730  00205C                     i2l6292:
 21731                           
 21732                           ;doprnt.c: 1430: (putch(' ') );
 21733  00205C  0E20               	movlw	32
 21734  00205E  EC30  F028         	call	i2_putch
 21735                           
 21736                           ;doprnt.c: 1431: while(--width);
 21737  002062  0628               	decf	i2printf@width,f,c
 21738  002064  A0D8               	btfss	status,0,c
 21739  002066  0629               	decf	i2printf@width+1,f,c
 21740  002068  5028               	movf	i2printf@width,w,c
 21741  00206A  1029               	iorwf	i2printf@width+1,w,c
 21742  00206C  A4D8               	btfss	status,2,c
 21743  00206E  D7F6               	goto	i2l6292
 21744  002070                     i2l6296:
 21745                           
 21746                           ;doprnt.c: 1438: if(flag & 0x03)
 21747  002070  C026  F019         	movff	i2printf@flag,??i2_printf
 21748  002074  0E03               	movlw	3
 21749  002076  1619               	andwf	??i2_printf,f,c
 21750  002078  B4D8               	btfsc	status,2,c
 21751  00207A  D003               	goto	i2l6300
 21752                           
 21753                           ;doprnt.c: 1439: (putch('-') );
 21754  00207C  0E2D               	movlw	45
 21755  00207E  EC30  F028         	call	i2_putch
 21756  002082                     i2l6300:
 21757                           
 21758                           ;doprnt.c: 1469: }
 21759                           ;doprnt.c: 1472: prec = c;
 21760  002082  C027  F01D         	movff	i2printf@c,i2printf@prec
 21761                           
 21762                           ;doprnt.c: 1474: while(prec--) {
 21763  002086  D027               	goto	i2l6306
 21764  002088                     i2l6302:
 21765                           
 21766                           ;doprnt.c: 1478: {
 21767                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 21768  002088  501D               	movf	i2printf@prec,w,c
 21769  00208A  0D02               	mullw	2
 21770  00208C  0E00               	movlw	low _dpowers
 21771  00208E  24F3               	addwf	prodl,w,c
 21772  002090  6EF6               	movwf	tblptrl,c
 21773  002092  0EFB               	movlw	high _dpowers
 21774  002094  20F4               	addwfc	prodh,w,c
 21775  002096  6EF7               	movwf	tblptrh,c
 21776  002098                     	if	1	;There are 3 active tblptr bytes
 21777  002098  6AF8               	clrf	tblptru,c
 21778  00209A  0E00               	movlw	low (__mediumconst shr (0+16))
 21779  00209C  22F8               	addwfc	tblptru,f,c
 21780  00209E                     	endif
 21781  00209E  0009               	tblrd		*+
 21782  0020A0  CFF5 F008          	movff	tablat,i2___lwdiv@divisor
 21783  0020A4  000A               	tblrd		*-
 21784  0020A6  CFF5 F009          	movff	tablat,i2___lwdiv@divisor+1
 21785  0020AA  C024  F006         	movff	i2printf@val,i2___lwdiv@dividend
 21786  0020AE  C025  F007         	movff	i2printf@val+1,i2___lwdiv@dividend+1
 21787  0020B2  EC7A  F024         	call	i2___lwdiv	;wreg free
 21788  0020B6  C006  F001         	movff	?i2___lwdiv,i2___lwmod@dividend
 21789  0020BA  C007  F002         	movff	?i2___lwdiv+1,i2___lwmod@dividend+1
 21790  0020BE  0E00               	movlw	0
 21791  0020C0  6E04               	movwf	i2___lwmod@divisor+1,c
 21792  0020C2  0E0A               	movlw	10
 21793  0020C4  6E03               	movwf	i2___lwmod@divisor,c
 21794  0020C6  EC39  F025         	call	i2___lwmod	;wreg free
 21795  0020CA  5001               	movf	?i2___lwmod,w,c
 21796  0020CC  0F30               	addlw	48
 21797  0020CE  6E27               	movwf	i2printf@c,c
 21798                           
 21799                           ;doprnt.c: 1523: }
 21800                           ;doprnt.c: 1524: (putch(c) );
 21801  0020D0  5027               	movf	i2printf@c,w,c
 21802  0020D2  EC30  F028         	call	i2_putch
 21803  0020D6                     i2l6306:
 21804  0020D6  061D               	decf	i2printf@prec,f,c
 21805  0020D8  281D               	incf	i2printf@prec,w,c
 21806  0020DA  A4D8               	btfss	status,2,c
 21807  0020DC  D7D5               	goto	i2l6302
 21808  0020DE                     i2l6308:
 21809  0020DE  C00D  FFF6         	movff	i2printf@f,tblptrl
 21810  0020E2  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 21811  0020E6  4A0D               	infsnz	i2printf@f,f,c
 21812  0020E8  2A0E               	incf	i2printf@f+1,f,c
 21813  0020EA                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 21814  0020EA  6AF8               	clrf	tblptru,c
 21815  0020EC                     	endif
 21816  0020EC                     	if	0	;tblptru may be non-zero
 21817  0020EC                     	endif
 21818  0020EC  0008               	tblrd		*
 21819  0020EE  CFF5 F027          	movff	tablat,i2printf@c
 21820  0020F2  5027               	movf	i2printf@c,w,c
 21821  0020F4  B4D8               	btfsc	status,2,c
 21822  0020F6  0012               	return	
 21823  0020F8  D64E               	goto	i2l6178
 21824  0020FA                     __end_ofi2_printf:
 21825                           	opt stack 0
 21826                           pclatu	equ	0xFFB
 21827                           pclath	equ	0xFFA
 21828                           tblptru	equ	0xFF8
 21829                           tblptrh	equ	0xFF7
 21830                           tblptrl	equ	0xFF6
 21831                           tablat	equ	0xFF5
 21832                           prodh	equ	0xFF4
 21833                           prodl	equ	0xFF3
 21834                           intcon	equ	0xFF2
 21835                           intcon2	equ	0xFF1
 21836                           intcon3	equ	0xFF0
 21837                           indf0	equ	0xFEF
 21838                           postinc0	equ	0xFEE
 21839                           fsr0h	equ	0xFEA
 21840                           fsr0l	equ	0xFE9
 21841                           wreg	equ	0xFE8
 21842                           postdec1	equ	0xFE5
 21843                           fsr1h	equ	0xFE2
 21844                           fsr1l	equ	0xFE1
 21845                           indf2	equ	0xFDF
 21846                           postinc2	equ	0xFDE
 21847                           postdec2	equ	0xFDD
 21848                           fsr2h	equ	0xFDA
 21849                           fsr2l	equ	0xFD9
 21850                           status	equ	0xFD8
 21851                           
 21852 ;; *************** function i2_putch *****************
 21853 ;; Defined at:
 21854 ;;		line 20 in file "lcd.c"
 21855 ;; Parameters:    Size  Location     Type
 21856 ;;  data            1    wreg     unsigned char 
 21857 ;; Auto vars:     Size  Location     Type
 21858 ;;  data            1    2[COMRAM] unsigned char 
 21859 ;; Return value:  Size  Location     Type
 21860 ;;                  1    wreg      void 
 21861 ;; Registers used:
 21862 ;;		wreg, status,2, status,0, cstack
 21863 ;; Tracked objects:
 21864 ;;		On entry : 0/0
 21865 ;;		On exit  : 0/0
 21866 ;;		Unchanged: 0/0
 21867 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21868 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21869 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21870 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21871 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21872 ;;Total ram usage:        1 bytes
 21873 ;; Hardware stack levels used:    1
 21874 ;; Hardware stack levels required when called:    1
 21875 ;; This function calls:
 21876 ;;		i2_lcdNibble
 21877 ;; This function is called by:
 21878 ;;		i2_printf
 21879 ;; This function uses a non-reentrant model
 21880 ;;
 21881                           
 21882                           	psect	text80
 21883  005060                     __ptext80:
 21884                           	opt stack 0
 21885  005060                     i2_putch:
 21886                           	opt stack 19
 21887                           
 21888                           ;incstack = 0
 21889                           ;i2putch@data stored from wreg
 21890  005060  6E03               	movwf	i2putch@data,c
 21891                           
 21892                           ;lcd.c: 21: LATDbits.LATD2 = 1;
 21893  005062  848C               	bsf	3980,2,c	;volatile
 21894                           
 21895                           ;lcd.c: 22: lcdNibble(data);
 21896  005064  5003               	movf	i2putch@data,w,c
 21897  005066  EC4F  F024         	call	i2_lcdNibble
 21898  00506A  0012               	return		;funcret
 21899  00506C                     __end_ofi2_putch:
 21900                           	opt stack 0
 21901                           pclatu	equ	0xFFB
 21902                           pclath	equ	0xFFA
 21903                           tblptru	equ	0xFF8
 21904                           tblptrh	equ	0xFF7
 21905                           tblptrl	equ	0xFF6
 21906                           tablat	equ	0xFF5
 21907                           prodh	equ	0xFF4
 21908                           prodl	equ	0xFF3
 21909                           intcon	equ	0xFF2
 21910                           intcon2	equ	0xFF1
 21911                           intcon3	equ	0xFF0
 21912                           indf0	equ	0xFEF
 21913                           postinc0	equ	0xFEE
 21914                           fsr0h	equ	0xFEA
 21915                           fsr0l	equ	0xFE9
 21916                           wreg	equ	0xFE8
 21917                           postdec1	equ	0xFE5
 21918                           fsr1h	equ	0xFE2
 21919                           fsr1l	equ	0xFE1
 21920                           indf2	equ	0xFDF
 21921                           postinc2	equ	0xFDE
 21922                           postdec2	equ	0xFDD
 21923                           fsr2h	equ	0xFDA
 21924                           fsr2l	equ	0xFD9
 21925                           status	equ	0xFD8
 21926                           
 21927 ;; *************** function i2_isdigit *****************
 21928 ;; Defined at:
 21929 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
 21930 ;; Parameters:    Size  Location     Type
 21931 ;;  c               1    wreg     unsigned char 
 21932 ;; Auto vars:     Size  Location     Type
 21933 ;;  c               1    2[COMRAM] unsigned char 
 21934 ;; Return value:  Size  Location     Type
 21935 ;;		None               void
 21936 ;; Registers used:
 21937 ;;		wreg, status,2, status,0
 21938 ;; Tracked objects:
 21939 ;;		On entry : 0/0
 21940 ;;		On exit  : 0/0
 21941 ;;		Unchanged: 0/0
 21942 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21943 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21944 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21945 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21946 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21947 ;;Total ram usage:        3 bytes
 21948 ;; Hardware stack levels used:    1
 21949 ;; This function calls:
 21950 ;;		Nothing
 21951 ;; This function is called by:
 21952 ;;		i2_printf
 21953 ;; This function uses a non-reentrant model
 21954 ;;
 21955                           
 21956                           	psect	text81
 21957  004FB4                     __ptext81:
 21958                           	opt stack 0
 21959  004FB4                     i2_isdigit:
 21960                           	opt stack 20
 21961                           
 21962                           ;incstack = 0
 21963                           ;i2isdigit@c stored from wreg
 21964  004FB4  6E03               	movwf	i2isdigit@c,c
 21965  004FB6  0E00               	movlw	0
 21966  004FB8  6E02               	movwf	i2_isdigit$1977,c
 21967  004FBA  0E3A               	movlw	58
 21968  004FBC  6003               	cpfslt	i2isdigit@c,c
 21969  004FBE  D005               	goto	i2l5882
 21970  004FC0  0E2F               	movlw	47
 21971  004FC2  6403               	cpfsgt	i2isdigit@c,c
 21972  004FC4  D002               	goto	i2l5882
 21973  004FC6  0E01               	movlw	1
 21974  004FC8  6E02               	movwf	i2_isdigit$1977,c
 21975  004FCA                     i2l5882:
 21976  004FCA  C002  F001         	movff	i2_isdigit$1977,??i2_isdigit
 21977  004FCE  3001               	rrcf	??i2_isdigit,w,c
 21978  004FD0  0012               	return	
 21979  004FD2                     __end_ofi2_isdigit:
 21980                           	opt stack 0
 21981                           pclatu	equ	0xFFB
 21982                           pclath	equ	0xFFA
 21983                           tblptru	equ	0xFF8
 21984                           tblptrh	equ	0xFF7
 21985                           tblptrl	equ	0xFF6
 21986                           tablat	equ	0xFF5
 21987                           prodh	equ	0xFF4
 21988                           prodl	equ	0xFF3
 21989                           intcon	equ	0xFF2
 21990                           intcon2	equ	0xFF1
 21991                           intcon3	equ	0xFF0
 21992                           indf0	equ	0xFEF
 21993                           postinc0	equ	0xFEE
 21994                           fsr0h	equ	0xFEA
 21995                           fsr0l	equ	0xFE9
 21996                           wreg	equ	0xFE8
 21997                           postdec1	equ	0xFE5
 21998                           fsr1h	equ	0xFE2
 21999                           fsr1l	equ	0xFE1
 22000                           indf2	equ	0xFDF
 22001                           postinc2	equ	0xFDE
 22002                           postdec2	equ	0xFDD
 22003                           fsr2h	equ	0xFDA
 22004                           fsr2l	equ	0xFD9
 22005                           status	equ	0xFD8
 22006                           
 22007 ;; *************** function i2___wmul *****************
 22008 ;; Defined at:
 22009 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
 22010 ;; Parameters:    Size  Location     Type
 22011 ;;  multiplier      2    0[COMRAM] unsigned int 
 22012 ;;  multiplicand    2    2[COMRAM] unsigned int 
 22013 ;; Auto vars:     Size  Location     Type
 22014 ;;  __wmul          2    4[COMRAM] unsigned int 
 22015 ;; Return value:  Size  Location     Type
 22016 ;;                  2    0[COMRAM] unsigned int 
 22017 ;; Registers used:
 22018 ;;		wreg, status,2, status,0, prodl, prodh
 22019 ;; Tracked objects:
 22020 ;;		On entry : 0/0
 22021 ;;		On exit  : 0/0
 22022 ;;		Unchanged: 0/0
 22023 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22024 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22025 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22026 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22027 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22028 ;;Total ram usage:        6 bytes
 22029 ;; Hardware stack levels used:    1
 22030 ;; This function calls:
 22031 ;;		Nothing
 22032 ;; This function is called by:
 22033 ;;		_printSortTimer
 22034 ;;		_retrieveLog
 22035 ;;		i2_printf
 22036 ;; This function uses a non-reentrant model
 22037 ;;
 22038                           
 22039                           	psect	text82
 22040  004F00                     __ptext82:
 22041                           	opt stack 0
 22042  004F00                     i2___wmul:
 22043                           	opt stack 20
 22044                           
 22045                           ;incstack = 0
 22046  004F00  5001               	movf	i2___wmul@multiplier,w,c
 22047  004F02  0203               	mulwf	i2___wmul@multiplicand,c
 22048  004F04  CFF3 F005          	movff	prodl,i2___wmul@product
 22049  004F08  CFF4 F006          	movff	prodh,i2___wmul@product+1
 22050  004F0C  5001               	movf	i2___wmul@multiplier,w,c
 22051  004F0E  0204               	mulwf	i2___wmul@multiplicand+1,c
 22052  004F10  50F3               	movf	prodl,w,c
 22053  004F12  2606               	addwf	i2___wmul@product+1,f,c
 22054  004F14  5002               	movf	i2___wmul@multiplier+1,w,c
 22055  004F16  0203               	mulwf	i2___wmul@multiplicand,c
 22056  004F18  50F3               	movf	prodl,w,c
 22057  004F1A  2606               	addwf	i2___wmul@product+1,f,c
 22058  004F1C  C005  F001         	movff	i2___wmul@product,?i2___wmul
 22059  004F20  C006  F002         	movff	i2___wmul@product+1,?i2___wmul+1
 22060  004F24  0012               	return	
 22061  004F26                     __end_ofi2___wmul:
 22062                           	opt stack 0
 22063                           pclatu	equ	0xFFB
 22064                           pclath	equ	0xFFA
 22065                           tblptru	equ	0xFF8
 22066                           tblptrh	equ	0xFF7
 22067                           tblptrl	equ	0xFF6
 22068                           tablat	equ	0xFF5
 22069                           prodh	equ	0xFF4
 22070                           prodl	equ	0xFF3
 22071                           intcon	equ	0xFF2
 22072                           intcon2	equ	0xFF1
 22073                           intcon3	equ	0xFF0
 22074                           indf0	equ	0xFEF
 22075                           postinc0	equ	0xFEE
 22076                           fsr0h	equ	0xFEA
 22077                           fsr0l	equ	0xFE9
 22078                           wreg	equ	0xFE8
 22079                           postdec1	equ	0xFE5
 22080                           fsr1h	equ	0xFE2
 22081                           fsr1l	equ	0xFE1
 22082                           indf2	equ	0xFDF
 22083                           postinc2	equ	0xFDE
 22084                           postdec2	equ	0xFDD
 22085                           fsr2h	equ	0xFDA
 22086                           fsr2l	equ	0xFD9
 22087                           status	equ	0xFD8
 22088                           
 22089 ;; *************** function i2___lwmod *****************
 22090 ;; Defined at:
 22091 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
 22092 ;; Parameters:    Size  Location     Type
 22093 ;;  dividend        2    0[COMRAM] unsigned int 
 22094 ;;  divisor         2    2[COMRAM] unsigned int 
 22095 ;; Auto vars:     Size  Location     Type
 22096 ;;  __lwmod         1    4[COMRAM] unsigned char 
 22097 ;; Return value:  Size  Location     Type
 22098 ;;                  2    0[COMRAM] unsigned int 
 22099 ;; Registers used:
 22100 ;;		wreg, status,2, status,0
 22101 ;; Tracked objects:
 22102 ;;		On entry : 0/0
 22103 ;;		On exit  : 0/0
 22104 ;;		Unchanged: 0/0
 22105 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22106 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22107 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22108 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22109 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22110 ;;Total ram usage:        5 bytes
 22111 ;; Hardware stack levels used:    1
 22112 ;; This function calls:
 22113 ;;		Nothing
 22114 ;; This function is called by:
 22115 ;;		_printSortTimer
 22116 ;;		i2_printf
 22117 ;; This function uses a non-reentrant model
 22118 ;;
 22119                           
 22120                           	psect	text83
 22121  004A72                     __ptext83:
 22122                           	opt stack 0
 22123  004A72                     i2___lwmod:
 22124                           	opt stack 20
 22125                           
 22126                           ;incstack = 0
 22127  004A72  5003               	movf	i2___lwmod@divisor,w,c
 22128  004A74  1004               	iorwf	i2___lwmod@divisor+1,w,c
 22129  004A76  B4D8               	btfsc	status,2,c
 22130  004A78  D018               	goto	i2l1823
 22131  004A7A  0E01               	movlw	1
 22132  004A7C  6E05               	movwf	i2___lwmod@counter,c
 22133  004A7E  D004               	goto	i2l5914
 22134  004A80                     i2l5912:
 22135  004A80  90D8               	bcf	status,0,c
 22136  004A82  3603               	rlcf	i2___lwmod@divisor,f,c
 22137  004A84  3604               	rlcf	i2___lwmod@divisor+1,f,c
 22138  004A86  2A05               	incf	i2___lwmod@counter,f,c
 22139  004A88                     i2l5914:
 22140  004A88  AE04               	btfss	i2___lwmod@divisor+1,7,c
 22141  004A8A  D7FA               	goto	i2l5912
 22142  004A8C                     i2l5916:
 22143  004A8C  5003               	movf	i2___lwmod@divisor,w,c
 22144  004A8E  5C01               	subwf	i2___lwmod@dividend,w,c
 22145  004A90  5004               	movf	i2___lwmod@divisor+1,w,c
 22146  004A92  5802               	subwfb	i2___lwmod@dividend+1,w,c
 22147  004A94  A0D8               	btfss	status,0,c
 22148  004A96  D004               	goto	i2l5920
 22149  004A98  5003               	movf	i2___lwmod@divisor,w,c
 22150  004A9A  5E01               	subwf	i2___lwmod@dividend,f,c
 22151  004A9C  5004               	movf	i2___lwmod@divisor+1,w,c
 22152  004A9E  5A02               	subwfb	i2___lwmod@dividend+1,f,c
 22153  004AA0                     i2l5920:
 22154  004AA0  90D8               	bcf	status,0,c
 22155  004AA2  3204               	rrcf	i2___lwmod@divisor+1,f,c
 22156  004AA4  3203               	rrcf	i2___lwmod@divisor,f,c
 22157  004AA6  2E05               	decfsz	i2___lwmod@counter,f,c
 22158  004AA8  D7F1               	goto	i2l5916
 22159  004AAA                     i2l1823:
 22160  004AAA  C001  F001         	movff	i2___lwmod@dividend,?i2___lwmod
 22161  004AAE  C002  F002         	movff	i2___lwmod@dividend+1,?i2___lwmod+1
 22162  004AB2  0012               	return		;funcret
 22163  004AB4                     __end_ofi2___lwmod:
 22164                           	opt stack 0
 22165                           pclatu	equ	0xFFB
 22166                           pclath	equ	0xFFA
 22167                           tblptru	equ	0xFF8
 22168                           tblptrh	equ	0xFF7
 22169                           tblptrl	equ	0xFF6
 22170                           tablat	equ	0xFF5
 22171                           prodh	equ	0xFF4
 22172                           prodl	equ	0xFF3
 22173                           intcon	equ	0xFF2
 22174                           intcon2	equ	0xFF1
 22175                           intcon3	equ	0xFF0
 22176                           indf0	equ	0xFEF
 22177                           postinc0	equ	0xFEE
 22178                           fsr0h	equ	0xFEA
 22179                           fsr0l	equ	0xFE9
 22180                           wreg	equ	0xFE8
 22181                           postdec1	equ	0xFE5
 22182                           fsr1h	equ	0xFE2
 22183                           fsr1l	equ	0xFE1
 22184                           indf2	equ	0xFDF
 22185                           postinc2	equ	0xFDE
 22186                           postdec2	equ	0xFDD
 22187                           fsr2h	equ	0xFDA
 22188                           fsr2l	equ	0xFD9
 22189                           status	equ	0xFD8
 22190                           
 22191 ;; *************** function i2___lwdiv *****************
 22192 ;; Defined at:
 22193 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
 22194 ;; Parameters:    Size  Location     Type
 22195 ;;  dividend        2    5[COMRAM] unsigned int 
 22196 ;;  divisor         2    7[COMRAM] unsigned int 
 22197 ;; Auto vars:     Size  Location     Type
 22198 ;;  __lwdiv         2    9[COMRAM] unsigned int 
 22199 ;;  __lwdiv         1   11[COMRAM] unsigned char 
 22200 ;; Return value:  Size  Location     Type
 22201 ;;                  2    5[COMRAM] unsigned int 
 22202 ;; Registers used:
 22203 ;;		wreg, status,2, status,0
 22204 ;; Tracked objects:
 22205 ;;		On entry : 0/0
 22206 ;;		On exit  : 0/0
 22207 ;;		Unchanged: 0/0
 22208 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22209 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22210 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22211 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22212 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22213 ;;Total ram usage:        7 bytes
 22214 ;; Hardware stack levels used:    1
 22215 ;; This function calls:
 22216 ;;		Nothing
 22217 ;; This function is called by:
 22218 ;;		_printSortTimer
 22219 ;;		i2_printf
 22220 ;; This function uses a non-reentrant model
 22221 ;;
 22222                           
 22223                           	psect	text84
 22224  0048F4                     __ptext84:
 22225                           	opt stack 0
 22226  0048F4                     i2___lwdiv:
 22227                           	opt stack 20
 22228                           
 22229                           ;incstack = 0
 22230  0048F4  0E00               	movlw	0
 22231  0048F6  6E0B               	movwf	i2___lwdiv@quotient+1,c
 22232  0048F8  0E00               	movlw	0
 22233  0048FA  6E0A               	movwf	i2___lwdiv@quotient,c
 22234  0048FC  5008               	movf	i2___lwdiv@divisor,w,c
 22235  0048FE  1009               	iorwf	i2___lwdiv@divisor+1,w,c
 22236  004900  B4D8               	btfsc	status,2,c
 22237  004902  D01C               	goto	i2l1813
 22238  004904  0E01               	movlw	1
 22239  004906  6E0C               	movwf	i2___lwdiv@counter,c
 22240  004908  D004               	goto	i2l5894
 22241  00490A                     i2l5892:
 22242  00490A  90D8               	bcf	status,0,c
 22243  00490C  3608               	rlcf	i2___lwdiv@divisor,f,c
 22244  00490E  3609               	rlcf	i2___lwdiv@divisor+1,f,c
 22245  004910  2A0C               	incf	i2___lwdiv@counter,f,c
 22246  004912                     i2l5894:
 22247  004912  AE09               	btfss	i2___lwdiv@divisor+1,7,c
 22248  004914  D7FA               	goto	i2l5892
 22249  004916                     i2l5896:
 22250  004916  90D8               	bcf	status,0,c
 22251  004918  360A               	rlcf	i2___lwdiv@quotient,f,c
 22252  00491A  360B               	rlcf	i2___lwdiv@quotient+1,f,c
 22253  00491C  5008               	movf	i2___lwdiv@divisor,w,c
 22254  00491E  5C06               	subwf	i2___lwdiv@dividend,w,c
 22255  004920  5009               	movf	i2___lwdiv@divisor+1,w,c
 22256  004922  5807               	subwfb	i2___lwdiv@dividend+1,w,c
 22257  004924  A0D8               	btfss	status,0,c
 22258  004926  D005               	goto	i2l5904
 22259  004928  5008               	movf	i2___lwdiv@divisor,w,c
 22260  00492A  5E06               	subwf	i2___lwdiv@dividend,f,c
 22261  00492C  5009               	movf	i2___lwdiv@divisor+1,w,c
 22262  00492E  5A07               	subwfb	i2___lwdiv@dividend+1,f,c
 22263  004930  800A               	bsf	i2___lwdiv@quotient,0,c
 22264  004932                     i2l5904:
 22265  004932  90D8               	bcf	status,0,c
 22266  004934  3209               	rrcf	i2___lwdiv@divisor+1,f,c
 22267  004936  3208               	rrcf	i2___lwdiv@divisor,f,c
 22268  004938  2E0C               	decfsz	i2___lwdiv@counter,f,c
 22269  00493A  D7ED               	goto	i2l5896
 22270  00493C                     i2l1813:
 22271  00493C  C00A  F006         	movff	i2___lwdiv@quotient,?i2___lwdiv
 22272  004940  C00B  F007         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
 22273  004944  0012               	return		;funcret
 22274  004946                     __end_ofi2___lwdiv:
 22275                           	opt stack 0
 22276                           pclatu	equ	0xFFB
 22277                           pclath	equ	0xFFA
 22278                           tblptru	equ	0xFF8
 22279                           tblptrh	equ	0xFF7
 22280                           tblptrl	equ	0xFF6
 22281                           tablat	equ	0xFF5
 22282                           prodh	equ	0xFF4
 22283                           prodl	equ	0xFF3
 22284                           intcon	equ	0xFF2
 22285                           intcon2	equ	0xFF1
 22286                           intcon3	equ	0xFF0
 22287                           indf0	equ	0xFEF
 22288                           postinc0	equ	0xFEE
 22289                           fsr0h	equ	0xFEA
 22290                           fsr0l	equ	0xFE9
 22291                           wreg	equ	0xFE8
 22292                           postdec1	equ	0xFE5
 22293                           fsr1h	equ	0xFE2
 22294                           fsr1l	equ	0xFE1
 22295                           indf2	equ	0xFDF
 22296                           postinc2	equ	0xFDE
 22297                           postdec2	equ	0xFDD
 22298                           fsr2h	equ	0xFDA
 22299                           fsr2l	equ	0xFD9
 22300                           status	equ	0xFD8
 22301                           
 22302 ;; *************** function i2_lcdInst *****************
 22303 ;; Defined at:
 22304 ;;		line 15 in file "lcd.c"
 22305 ;; Parameters:    Size  Location     Type
 22306 ;;  data            1    wreg     unsigned char 
 22307 ;; Auto vars:     Size  Location     Type
 22308 ;;  data            1    2[COMRAM] unsigned char 
 22309 ;; Return value:  Size  Location     Type
 22310 ;;                  1    wreg      void 
 22311 ;; Registers used:
 22312 ;;		wreg, status,2, status,0, cstack
 22313 ;; Tracked objects:
 22314 ;;		On entry : 0/0
 22315 ;;		On exit  : 0/0
 22316 ;;		Unchanged: 0/0
 22317 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22318 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22319 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22320 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22321 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22322 ;;Total ram usage:        1 bytes
 22323 ;; Hardware stack levels used:    1
 22324 ;; Hardware stack levels required when called:    1
 22325 ;; This function calls:
 22326 ;;		i2_lcdNibble
 22327 ;; This function is called by:
 22328 ;;		_change_state_to_menu_11
 22329 ;;		_change_state_to_menu_23
 22330 ;;		_change_state_to_logs_11
 22331 ;;		_change_state_to_logs_12
 22332 ;;		_change_state_to_logs_22
 22333 ;;		_change_state_to_logs_23
 22334 ;;		_change_state_to_logs_33
 22335 ;;		_change_state_to_logs_34
 22336 ;;		_printSortTimer
 22337 ;;		i2_change_state_to_menu_start
 22338 ;;		i2_change_state_to_menu_12
 22339 ;;		i2_change_state_to_menu_22
 22340 ;;		i2_printRTC
 22341 ;; This function uses a non-reentrant model
 22342 ;;
 22343                           
 22344                           	psect	text85
 22345  00506C                     __ptext85:
 22346                           	opt stack 0
 22347  00506C                     i2_lcdInst:
 22348                           	opt stack 19
 22349                           
 22350                           ;incstack = 0
 22351                           ;i2lcdInst@data stored from wreg
 22352  00506C  6E03               	movwf	i2lcdInst@data,c
 22353                           
 22354                           ;lcd.c: 16: LATDbits.LATD2 = 0;
 22355  00506E  948C               	bcf	3980,2,c	;volatile
 22356                           
 22357                           ;lcd.c: 17: lcdNibble(data);
 22358  005070  5003               	movf	i2lcdInst@data,w,c
 22359  005072  EC4F  F024         	call	i2_lcdNibble
 22360  005076  0012               	return		;funcret
 22361  005078                     __end_ofi2_lcdInst:
 22362                           	opt stack 0
 22363                           pclatu	equ	0xFFB
 22364                           pclath	equ	0xFFA
 22365                           tblptru	equ	0xFF8
 22366                           tblptrh	equ	0xFF7
 22367                           tblptrl	equ	0xFF6
 22368                           tablat	equ	0xFF5
 22369                           prodh	equ	0xFF4
 22370                           prodl	equ	0xFF3
 22371                           intcon	equ	0xFF2
 22372                           intcon2	equ	0xFF1
 22373                           intcon3	equ	0xFF0
 22374                           indf0	equ	0xFEF
 22375                           postinc0	equ	0xFEE
 22376                           fsr0h	equ	0xFEA
 22377                           fsr0l	equ	0xFE9
 22378                           wreg	equ	0xFE8
 22379                           postdec1	equ	0xFE5
 22380                           fsr1h	equ	0xFE2
 22381                           fsr1l	equ	0xFE1
 22382                           indf2	equ	0xFDF
 22383                           postinc2	equ	0xFDE
 22384                           postdec2	equ	0xFDD
 22385                           fsr2h	equ	0xFDA
 22386                           fsr2l	equ	0xFD9
 22387                           status	equ	0xFD8
 22388                           
 22389 ;; *************** function i2_lcdNibble *****************
 22390 ;; Defined at:
 22391 ;;		line 25 in file "lcd.c"
 22392 ;; Parameters:    Size  Location     Type
 22393 ;;  data            1    wreg     unsigned char 
 22394 ;; Auto vars:     Size  Location     Type
 22395 ;;  data            1    1[COMRAM] unsigned char 
 22396 ;;  lcdNibble       1    0[COMRAM] unsigned char 
 22397 ;; Return value:  Size  Location     Type
 22398 ;;                  1    wreg      void 
 22399 ;; Registers used:
 22400 ;;		wreg, status,2, status,0
 22401 ;; Tracked objects:
 22402 ;;		On entry : 0/0
 22403 ;;		On exit  : 0/0
 22404 ;;		Unchanged: 0/0
 22405 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22406 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22407 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22408 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22409 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22410 ;;Total ram usage:        2 bytes
 22411 ;; Hardware stack levels used:    1
 22412 ;; This function calls:
 22413 ;;		Nothing
 22414 ;; This function is called by:
 22415 ;;		i2_lcdInst
 22416 ;;		i2_putch
 22417 ;; This function uses a non-reentrant model
 22418 ;;
 22419                           
 22420                           	psect	text86
 22421  00489E                     __ptext86:
 22422                           	opt stack 0
 22423  00489E                     i2_lcdNibble:
 22424                           	opt stack 19
 22425                           
 22426                           ;incstack = 0
 22427                           ;i2lcdNibble@data stored from wreg
 22428  00489E  6E02               	movwf	i2lcdNibble@data,c
 22429                           
 22430                           ;lcd.c: 27: char temp = data & 0xF0;
 22431  0048A0  5002               	movf	i2lcdNibble@data,w,c
 22432  0048A2  0BF0               	andlw	240
 22433  0048A4  6E01               	movwf	i2lcdNibble@temp,c
 22434                           
 22435                           ;lcd.c: 28: LATD = LATD & 0x0F;
 22436  0048A6  508C               	movf	3980,w,c	;volatile
 22437  0048A8  0B0F               	andlw	15
 22438  0048AA  6E8C               	movwf	3980,c	;volatile
 22439                           
 22440                           ;lcd.c: 29: LATD = temp | LATD;
 22441  0048AC  5001               	movf	i2lcdNibble@temp,w,c
 22442  0048AE  108C               	iorwf	3980,w,c	;volatile
 22443  0048B0  6E8C               	movwf	3980,c	;volatile
 22444                           
 22445                           ;lcd.c: 31: LATDbits.LATD3 = 1;
 22446  0048B2  868C               	bsf	3980,3,c	;volatile
 22447                           
 22448                           ;lcd.c: 32: _delay((unsigned long)((25)*(32000000/4000000.0)));
 22449  0048B4  0E42               	movlw	66
 22450  0048B6                     i2u982_47:
 22451  0048B6  2EE8               	decfsz	wreg,f,c
 22452  0048B8  D7FE               	bra	i2u982_47
 22453  0048BA  D000               	nop2	
 22454                           
 22455                           ;lcd.c: 33: LATDbits.LATD3 = 0;
 22456  0048BC  968C               	bcf	3980,3,c	;volatile
 22457                           
 22458                           ;lcd.c: 34: _delay((unsigned long)((25)*(32000000/4000000.0)));
 22459  0048BE  0E42               	movlw	66
 22460  0048C0                     i2u983_47:
 22461  0048C0  2EE8               	decfsz	wreg,f,c
 22462  0048C2  D7FE               	bra	i2u983_47
 22463  0048C4  D000               	nop2	
 22464                           
 22465                           ;lcd.c: 36: data = data << 4;
 22466  0048C6  3802               	swapf	i2lcdNibble@data,w,c
 22467  0048C8  0BF0               	andlw	240
 22468  0048CA  6E02               	movwf	i2lcdNibble@data,c
 22469                           
 22470                           ;lcd.c: 38: temp = data & 0xF0;
 22471  0048CC  5002               	movf	i2lcdNibble@data,w,c
 22472  0048CE  0BF0               	andlw	240
 22473  0048D0  6E01               	movwf	i2lcdNibble@temp,c
 22474                           
 22475                           ;lcd.c: 39: LATD = LATD & 0x0F;
 22476  0048D2  508C               	movf	3980,w,c	;volatile
 22477  0048D4  0B0F               	andlw	15
 22478  0048D6  6E8C               	movwf	3980,c	;volatile
 22479                           
 22480                           ;lcd.c: 40: LATD = temp | LATD;
 22481  0048D8  5001               	movf	i2lcdNibble@temp,w,c
 22482  0048DA  108C               	iorwf	3980,w,c	;volatile
 22483  0048DC  6E8C               	movwf	3980,c	;volatile
 22484                           
 22485                           ;lcd.c: 42: LATDbits.LATD3 = 1;
 22486  0048DE  868C               	bsf	3980,3,c	;volatile
 22487                           
 22488                           ;lcd.c: 43: _delay((unsigned long)((25)*(32000000/4000000.0)));
 22489  0048E0  0E42               	movlw	66
 22490  0048E2                     i2u984_47:
 22491  0048E2  2EE8               	decfsz	wreg,f,c
 22492  0048E4  D7FE               	bra	i2u984_47
 22493  0048E6  D000               	nop2	
 22494                           
 22495                           ;lcd.c: 44: LATDbits.LATD3 = 0;
 22496  0048E8  968C               	bcf	3980,3,c	;volatile
 22497                           
 22498                           ;lcd.c: 45: _delay((unsigned long)((25)*(32000000/4000000.0)));
 22499  0048EA  0E42               	movlw	66
 22500  0048EC                     i2u985_47:
 22501  0048EC  2EE8               	decfsz	wreg,f,c
 22502  0048EE  D7FE               	bra	i2u985_47
 22503  0048F0  D000               	nop2	
 22504  0048F2  0012               	return		;funcret
 22505  0048F4                     __end_ofi2_lcdNibble:
 22506                           	opt stack 0
 22507                           pclatu	equ	0xFFB
 22508                           pclath	equ	0xFFA
 22509                           tblptru	equ	0xFF8
 22510                           tblptrh	equ	0xFF7
 22511                           tblptrl	equ	0xFF6
 22512                           tablat	equ	0xFF5
 22513                           prodh	equ	0xFF4
 22514                           prodl	equ	0xFF3
 22515                           intcon	equ	0xFF2
 22516                           intcon2	equ	0xFF1
 22517                           intcon3	equ	0xFF0
 22518                           indf0	equ	0xFEF
 22519                           postinc0	equ	0xFEE
 22520                           fsr0h	equ	0xFEA
 22521                           fsr0l	equ	0xFE9
 22522                           wreg	equ	0xFE8
 22523                           postdec1	equ	0xFE5
 22524                           fsr1h	equ	0xFE2
 22525                           fsr1l	equ	0xFE1
 22526                           indf2	equ	0xFDF
 22527                           postinc2	equ	0xFDE
 22528                           postdec2	equ	0xFDD
 22529                           fsr2h	equ	0xFDA
 22530                           fsr2l	equ	0xFD9
 22531                           status	equ	0xFD8
 22532                           
 22533 ;; *************** function i2_getRTC *****************
 22534 ;; Defined at:
 22535 ;;		line 44 in file "RTC.c"
 22536 ;; Parameters:    Size  Location     Type
 22537 ;;		None
 22538 ;; Auto vars:     Size  Location     Type
 22539 ;;  getRTC          2    3[COMRAM] int 
 22540 ;; Return value:  Size  Location     Type
 22541 ;;                  1    wreg      void 
 22542 ;; Registers used:
 22543 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 22544 ;; Tracked objects:
 22545 ;;		On entry : 0/0
 22546 ;;		On exit  : 0/0
 22547 ;;		Unchanged: 0/0
 22548 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22549 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22550 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22551 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22552 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22553 ;;Total ram usage:        2 bytes
 22554 ;; Hardware stack levels used:    1
 22555 ;; Hardware stack levels required when called:    2
 22556 ;; This function calls:
 22557 ;;		i2_I2C_Master_Read
 22558 ;;		i2_I2C_Master_Start
 22559 ;;		i2_I2C_Master_Stop
 22560 ;;		i2_I2C_Master_Write
 22561 ;; This function is called by:
 22562 ;;		_printSortTimer
 22563 ;;		i2_printRTC
 22564 ;; This function uses a non-reentrant model
 22565 ;;
 22566                           
 22567                           	psect	text87
 22568  0045F0                     __ptext87:
 22569                           	opt stack 0
 22570  0045F0                     i2_getRTC:
 22571                           	opt stack 18
 22572                           
 22573                           ;RTC.c: 48: I2C_Master_Start();
 22574                           
 22575                           ;incstack = 0
 22576  0045F0  EC56  F028         	call	i2_I2C_Master_Start	;wreg free
 22577                           
 22578                           ;RTC.c: 49: I2C_Master_Write(0b11010000);
 22579  0045F4  0E00               	movlw	0
 22580  0045F6  6E03               	movwf	i2I2C_Master_Write@d+1,c
 22581  0045F8  0ED0               	movlw	208
 22582  0045FA  6E02               	movwf	i2I2C_Master_Write@d,c
 22583  0045FC  EC41  F028         	call	i2_I2C_Master_Write	;wreg free
 22584                           
 22585                           ;RTC.c: 50: I2C_Master_Write(0x00);
 22586  004600  0E00               	movlw	0
 22587  004602  6E03               	movwf	i2I2C_Master_Write@d+1,c
 22588  004604  0E00               	movlw	0
 22589  004606  6E02               	movwf	i2I2C_Master_Write@d,c
 22590  004608  EC41  F028         	call	i2_I2C_Master_Write	;wreg free
 22591                           
 22592                           ;RTC.c: 51: I2C_Master_Stop();
 22593  00460C  EC52  F028         	call	i2_I2C_Master_Stop	;wreg free
 22594                           
 22595                           ;RTC.c: 54: I2C_Master_Start();
 22596  004610  EC56  F028         	call	i2_I2C_Master_Start	;wreg free
 22597                           
 22598                           ;RTC.c: 55: I2C_Master_Write(0b11010001);
 22599  004614  0E00               	movlw	0
 22600  004616  6E03               	movwf	i2I2C_Master_Write@d+1,c
 22601  004618  0ED1               	movlw	209
 22602  00461A  6E02               	movwf	i2I2C_Master_Write@d,c
 22603  00461C  EC41  F028         	call	i2_I2C_Master_Write	;wreg free
 22604                           
 22605                           ;RTC.c: 56: for(int i = 0; i < 6; i++){
 22606  004620  0E00               	movlw	0
 22607  004622  6E05               	movwf	i2getRTC@i+1,c
 22608  004624  0E00               	movlw	0
 22609  004626  6E04               	movwf	i2getRTC@i,c
 22610  004628                     i2l6150:
 22611  004628  BE05               	btfsc	i2getRTC@i+1,7,c
 22612  00462A  D006               	goto	i2l6154
 22613  00462C  5005               	movf	i2getRTC@i+1,w,c
 22614  00462E  E111               	bnz	i2l6160
 22615  004630  0E06               	movlw	6
 22616  004632  5C04               	subwf	i2getRTC@i,w,c
 22617  004634  B0D8               	btfsc	status,0,c
 22618  004636  D00D               	goto	i2l6160
 22619  004638                     i2l6154:
 22620                           
 22621                           ;RTC.c: 57: time[i] = I2C_Master_Read(1);
 22622  004638  0E24               	movlw	low _time
 22623  00463A  2404               	addwf	i2getRTC@i,w,c
 22624  00463C  6ED9               	movwf	fsr2l,c
 22625  00463E  0E01               	movlw	high _time
 22626  004640  2005               	addwfc	i2getRTC@i+1,w,c
 22627  004642  6EDA               	movwf	fsr2h,c
 22628  004644  0E01               	movlw	1
 22629  004646  EC93  F027         	call	i2_I2C_Master_Read
 22630  00464A  6EDF               	movwf	indf2,c
 22631  00464C  4A04               	infsnz	i2getRTC@i,f,c
 22632  00464E  2A05               	incf	i2getRTC@i+1,f,c
 22633  004650  D7EB               	goto	i2l6150
 22634  004652                     i2l6160:
 22635                           
 22636                           ;RTC.c: 58: }
 22637                           ;RTC.c: 59: time[6] = I2C_Master_Read(0);
 22638  004652  0E00               	movlw	0
 22639  004654  EC93  F027         	call	i2_I2C_Master_Read
 22640  004658  0101               	movlb	1	; () banked
 22641  00465A  6F2A               	movwf	(_time+6)& (0+255),b
 22642                           
 22643                           ;RTC.c: 60: I2C_Master_Stop();
 22644  00465C  EC52  F028         	call	i2_I2C_Master_Stop	;wreg free
 22645  004660  0012               	return		;funcret
 22646  004662                     __end_ofi2_getRTC:
 22647                           	opt stack 0
 22648                           pclatu	equ	0xFFB
 22649                           pclath	equ	0xFFA
 22650                           tblptru	equ	0xFF8
 22651                           tblptrh	equ	0xFF7
 22652                           tblptrl	equ	0xFF6
 22653                           tablat	equ	0xFF5
 22654                           prodh	equ	0xFF4
 22655                           prodl	equ	0xFF3
 22656                           intcon	equ	0xFF2
 22657                           intcon2	equ	0xFF1
 22658                           intcon3	equ	0xFF0
 22659                           indf0	equ	0xFEF
 22660                           postinc0	equ	0xFEE
 22661                           fsr0h	equ	0xFEA
 22662                           fsr0l	equ	0xFE9
 22663                           wreg	equ	0xFE8
 22664                           postdec1	equ	0xFE5
 22665                           fsr1h	equ	0xFE2
 22666                           fsr1l	equ	0xFE1
 22667                           indf2	equ	0xFDF
 22668                           postinc2	equ	0xFDE
 22669                           postdec2	equ	0xFDD
 22670                           fsr2h	equ	0xFDA
 22671                           fsr2l	equ	0xFD9
 22672                           status	equ	0xFD8
 22673                           
 22674 ;; *************** function i2_I2C_Master_Write *****************
 22675 ;; Defined at:
 22676 ;;		line 49 in file "I2C.c"
 22677 ;; Parameters:    Size  Location     Type
 22678 ;;  d               2    1[COMRAM] unsigned int 
 22679 ;; Auto vars:     Size  Location     Type
 22680 ;;		None
 22681 ;; Return value:  Size  Location     Type
 22682 ;;                  1    wreg      void 
 22683 ;; Registers used:
 22684 ;;		wreg, status,2, status,0, cstack
 22685 ;; Tracked objects:
 22686 ;;		On entry : 0/0
 22687 ;;		On exit  : 0/0
 22688 ;;		Unchanged: 0/0
 22689 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22690 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22691 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22692 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22693 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22694 ;;Total ram usage:        2 bytes
 22695 ;; Hardware stack levels used:    1
 22696 ;; Hardware stack levels required when called:    1
 22697 ;; This function calls:
 22698 ;;		i2_I2C_Master_Wait
 22699 ;; This function is called by:
 22700 ;;		i2_getRTC
 22701 ;; This function uses a non-reentrant model
 22702 ;;
 22703                           
 22704                           	psect	text88
 22705  005082                     __ptext88:
 22706                           	opt stack 0
 22707  005082                     i2_I2C_Master_Write:
 22708                           	opt stack 18
 22709                           
 22710                           ;I2C.c: 51: I2C_Master_Wait();
 22711                           
 22712                           ;incstack = 0
 22713  005082  EC17  F028         	call	i2_I2C_Master_Wait	;wreg free
 22714                           
 22715                           ;I2C.c: 52: SSPBUF = d;
 22716  005086  C002  FFC9         	movff	i2I2C_Master_Write@d,4041	;volatile
 22717  00508A  0012               	return		;funcret
 22718  00508C                     __end_ofi2_I2C_Master_Write:
 22719                           	opt stack 0
 22720                           pclatu	equ	0xFFB
 22721                           pclath	equ	0xFFA
 22722                           tblptru	equ	0xFF8
 22723                           tblptrh	equ	0xFF7
 22724                           tblptrl	equ	0xFF6
 22725                           tablat	equ	0xFF5
 22726                           prodh	equ	0xFF4
 22727                           prodl	equ	0xFF3
 22728                           intcon	equ	0xFF2
 22729                           intcon2	equ	0xFF1
 22730                           intcon3	equ	0xFF0
 22731                           indf0	equ	0xFEF
 22732                           postinc0	equ	0xFEE
 22733                           fsr0h	equ	0xFEA
 22734                           fsr0l	equ	0xFE9
 22735                           wreg	equ	0xFE8
 22736                           postdec1	equ	0xFE5
 22737                           fsr1h	equ	0xFE2
 22738                           fsr1l	equ	0xFE1
 22739                           indf2	equ	0xFDF
 22740                           postinc2	equ	0xFDE
 22741                           postdec2	equ	0xFDD
 22742                           fsr2h	equ	0xFDA
 22743                           fsr2l	equ	0xFD9
 22744                           status	equ	0xFD8
 22745                           
 22746 ;; *************** function i2_I2C_Master_Stop *****************
 22747 ;; Defined at:
 22748 ;;		line 43 in file "I2C.c"
 22749 ;; Parameters:    Size  Location     Type
 22750 ;;		None
 22751 ;; Auto vars:     Size  Location     Type
 22752 ;;		None
 22753 ;; Return value:  Size  Location     Type
 22754 ;;                  1    wreg      void 
 22755 ;; Registers used:
 22756 ;;		wreg, status,2, status,0, cstack
 22757 ;; Tracked objects:
 22758 ;;		On entry : 0/0
 22759 ;;		On exit  : 0/0
 22760 ;;		Unchanged: 0/0
 22761 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22762 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22763 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22764 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22765 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22766 ;;Total ram usage:        0 bytes
 22767 ;; Hardware stack levels used:    1
 22768 ;; Hardware stack levels required when called:    1
 22769 ;; This function calls:
 22770 ;;		i2_I2C_Master_Wait
 22771 ;; This function is called by:
 22772 ;;		i2_getRTC
 22773 ;; This function uses a non-reentrant model
 22774 ;;
 22775                           
 22776                           	psect	text89
 22777  0050A4                     __ptext89:
 22778                           	opt stack 0
 22779  0050A4                     i2_I2C_Master_Stop:
 22780                           	opt stack 18
 22781                           
 22782                           ;I2C.c: 45: I2C_Master_Wait();
 22783                           
 22784                           ;incstack = 0
 22785  0050A4  EC17  F028         	call	i2_I2C_Master_Wait	;wreg free
 22786                           
 22787                           ;I2C.c: 46: PEN = 1;
 22788  0050A8  84C5               	bsf	4037,2,c	;volatile
 22789  0050AA  0012               	return		;funcret
 22790  0050AC                     __end_ofi2_I2C_Master_Stop:
 22791                           	opt stack 0
 22792                           pclatu	equ	0xFFB
 22793                           pclath	equ	0xFFA
 22794                           tblptru	equ	0xFF8
 22795                           tblptrh	equ	0xFF7
 22796                           tblptrl	equ	0xFF6
 22797                           tablat	equ	0xFF5
 22798                           prodh	equ	0xFF4
 22799                           prodl	equ	0xFF3
 22800                           intcon	equ	0xFF2
 22801                           intcon2	equ	0xFF1
 22802                           intcon3	equ	0xFF0
 22803                           indf0	equ	0xFEF
 22804                           postinc0	equ	0xFEE
 22805                           fsr0h	equ	0xFEA
 22806                           fsr0l	equ	0xFE9
 22807                           wreg	equ	0xFE8
 22808                           postdec1	equ	0xFE5
 22809                           fsr1h	equ	0xFE2
 22810                           fsr1l	equ	0xFE1
 22811                           indf2	equ	0xFDF
 22812                           postinc2	equ	0xFDE
 22813                           postdec2	equ	0xFDD
 22814                           fsr2h	equ	0xFDA
 22815                           fsr2l	equ	0xFD9
 22816                           status	equ	0xFD8
 22817                           
 22818 ;; *************** function i2_I2C_Master_Start *****************
 22819 ;; Defined at:
 22820 ;;		line 31 in file "I2C.c"
 22821 ;; Parameters:    Size  Location     Type
 22822 ;;		None
 22823 ;; Auto vars:     Size  Location     Type
 22824 ;;		None
 22825 ;; Return value:  Size  Location     Type
 22826 ;;                  1    wreg      void 
 22827 ;; Registers used:
 22828 ;;		wreg, status,2, status,0, cstack
 22829 ;; Tracked objects:
 22830 ;;		On entry : 0/0
 22831 ;;		On exit  : 0/0
 22832 ;;		Unchanged: 0/0
 22833 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22834 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22835 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22836 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22837 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22838 ;;Total ram usage:        0 bytes
 22839 ;; Hardware stack levels used:    1
 22840 ;; Hardware stack levels required when called:    1
 22841 ;; This function calls:
 22842 ;;		i2_I2C_Master_Wait
 22843 ;; This function is called by:
 22844 ;;		i2_getRTC
 22845 ;; This function uses a non-reentrant model
 22846 ;;
 22847                           
 22848                           	psect	text90
 22849  0050AC                     __ptext90:
 22850                           	opt stack 0
 22851  0050AC                     i2_I2C_Master_Start:
 22852                           	opt stack 18
 22853                           
 22854                           ;I2C.c: 33: I2C_Master_Wait();
 22855                           
 22856                           ;incstack = 0
 22857  0050AC  EC17  F028         	call	i2_I2C_Master_Wait	;wreg free
 22858                           
 22859                           ;I2C.c: 34: SEN = 1;
 22860  0050B0  80C5               	bsf	4037,0,c	;volatile
 22861  0050B2  0012               	return		;funcret
 22862  0050B4                     __end_ofi2_I2C_Master_Start:
 22863                           	opt stack 0
 22864                           pclatu	equ	0xFFB
 22865                           pclath	equ	0xFFA
 22866                           tblptru	equ	0xFF8
 22867                           tblptrh	equ	0xFF7
 22868                           tblptrl	equ	0xFF6
 22869                           tablat	equ	0xFF5
 22870                           prodh	equ	0xFF4
 22871                           prodl	equ	0xFF3
 22872                           intcon	equ	0xFF2
 22873                           intcon2	equ	0xFF1
 22874                           intcon3	equ	0xFF0
 22875                           indf0	equ	0xFEF
 22876                           postinc0	equ	0xFEE
 22877                           fsr0h	equ	0xFEA
 22878                           fsr0l	equ	0xFE9
 22879                           wreg	equ	0xFE8
 22880                           postdec1	equ	0xFE5
 22881                           fsr1h	equ	0xFE2
 22882                           fsr1l	equ	0xFE1
 22883                           indf2	equ	0xFDF
 22884                           postinc2	equ	0xFDE
 22885                           postdec2	equ	0xFDD
 22886                           fsr2h	equ	0xFDA
 22887                           fsr2l	equ	0xFD9
 22888                           status	equ	0xFD8
 22889                           
 22890 ;; *************** function i2_I2C_Master_Read *****************
 22891 ;; Defined at:
 22892 ;;		line 55 in file "I2C.c"
 22893 ;; Parameters:    Size  Location     Type
 22894 ;;  a               1    wreg     unsigned char 
 22895 ;; Auto vars:     Size  Location     Type
 22896 ;;  a               1    1[COMRAM] unsigned char 
 22897 ;;  I2C_Master_R    1    2[COMRAM] unsigned char 
 22898 ;; Return value:  Size  Location     Type
 22899 ;;                  1    wreg      unsigned char 
 22900 ;; Registers used:
 22901 ;;		wreg, status,2, status,0, cstack
 22902 ;; Tracked objects:
 22903 ;;		On entry : 0/0
 22904 ;;		On exit  : 0/0
 22905 ;;		Unchanged: 0/0
 22906 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22907 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22908 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22909 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22910 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22911 ;;Total ram usage:        2 bytes
 22912 ;; Hardware stack levels used:    1
 22913 ;; Hardware stack levels required when called:    1
 22914 ;; This function calls:
 22915 ;;		i2_I2C_Master_Wait
 22916 ;; This function is called by:
 22917 ;;		i2_getRTC
 22918 ;; This function uses a non-reentrant model
 22919 ;;
 22920                           
 22921                           	psect	text91
 22922  004F26                     __ptext91:
 22923                           	opt stack 0
 22924  004F26                     i2_I2C_Master_Read:
 22925                           	opt stack 18
 22926                           
 22927                           ;incstack = 0
 22928                           ;i2I2C_Master_Read@a stored from wreg
 22929  004F26  6E02               	movwf	i2I2C_Master_Read@a,c
 22930                           
 22931                           ;I2C.c: 57: unsigned char temp;
 22932                           ;I2C.c: 58: I2C_Master_Wait();
 22933  004F28  EC17  F028         	call	i2_I2C_Master_Wait	;wreg free
 22934                           
 22935                           ;I2C.c: 59: RCEN = 1;
 22936  004F2C  86C5               	bsf	4037,3,c	;volatile
 22937                           
 22938                           ;I2C.c: 60: I2C_Master_Wait();
 22939  004F2E  EC17  F028         	call	i2_I2C_Master_Wait	;wreg free
 22940                           
 22941                           ;I2C.c: 61: temp = SSPBUF;
 22942  004F32  CFC9 F003          	movff	4041,i2I2C_Master_Read@temp	;volatile
 22943                           
 22944                           ;I2C.c: 62: I2C_Master_Wait();
 22945  004F36  EC17  F028         	call	i2_I2C_Master_Wait	;wreg free
 22946                           
 22947                           ;I2C.c: 63: ACKDT = (a)?0:1;
 22948  004F3A  5002               	movf	i2I2C_Master_Read@a,w,c
 22949  004F3C  A4D8               	btfss	status,2,c
 22950  004F3E  D002               	goto	i2u427_40
 22951  004F40  8AC5               	bsf	4037,5,c	;volatile
 22952  004F42  D001               	goto	i2l5858
 22953  004F44                     i2u427_40:
 22954  004F44  9AC5               	bcf	4037,5,c	;volatile
 22955  004F46                     i2l5858:
 22956                           
 22957                           ;I2C.c: 64: ACKEN = 1;
 22958  004F46  88C5               	bsf	4037,4,c	;volatile
 22959                           
 22960                           ;I2C.c: 65: return temp;
 22961  004F48  5003               	movf	i2I2C_Master_Read@temp,w,c
 22962  004F4A  0012               	return	
 22963  004F4C                     __end_ofi2_I2C_Master_Read:
 22964                           	opt stack 0
 22965                           pclatu	equ	0xFFB
 22966                           pclath	equ	0xFFA
 22967                           tblptru	equ	0xFF8
 22968                           tblptrh	equ	0xFF7
 22969                           tblptrl	equ	0xFF6
 22970                           tablat	equ	0xFF5
 22971                           prodh	equ	0xFF4
 22972                           prodl	equ	0xFF3
 22973                           intcon	equ	0xFF2
 22974                           intcon2	equ	0xFF1
 22975                           intcon3	equ	0xFF0
 22976                           indf0	equ	0xFEF
 22977                           postinc0	equ	0xFEE
 22978                           fsr0h	equ	0xFEA
 22979                           fsr0l	equ	0xFE9
 22980                           wreg	equ	0xFE8
 22981                           postdec1	equ	0xFE5
 22982                           fsr1h	equ	0xFE2
 22983                           fsr1l	equ	0xFE1
 22984                           indf2	equ	0xFDF
 22985                           postinc2	equ	0xFDE
 22986                           postdec2	equ	0xFDD
 22987                           fsr2h	equ	0xFDA
 22988                           fsr2l	equ	0xFD9
 22989                           status	equ	0xFD8
 22990                           
 22991 ;; *************** function i2_I2C_Master_Wait *****************
 22992 ;; Defined at:
 22993 ;;		line 26 in file "I2C.c"
 22994 ;; Parameters:    Size  Location     Type
 22995 ;;		None
 22996 ;; Auto vars:     Size  Location     Type
 22997 ;;		None
 22998 ;; Return value:  Size  Location     Type
 22999 ;;                  1    wreg      void 
 23000 ;; Registers used:
 23001 ;;		wreg, status,2, status,0
 23002 ;; Tracked objects:
 23003 ;;		On entry : 0/0
 23004 ;;		On exit  : 0/0
 23005 ;;		Unchanged: 0/0
 23006 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23007 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23008 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23009 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23010 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23011 ;;Total ram usage:        1 bytes
 23012 ;; Hardware stack levels used:    1
 23013 ;; This function calls:
 23014 ;;		Nothing
 23015 ;; This function is called by:
 23016 ;;		i2_I2C_Master_Start
 23017 ;;		i2_I2C_Master_Stop
 23018 ;;		i2_I2C_Master_Write
 23019 ;;		i2_I2C_Master_Read
 23020 ;; This function uses a non-reentrant model
 23021 ;;
 23022                           
 23023                           	psect	text92
 23024  00502E                     __ptext92:
 23025                           	opt stack 0
 23026  00502E                     i2_I2C_Master_Wait:
 23027                           	opt stack 18
 23028  00502E                     i2l66:
 23029  00502E  B4C7               	btfsc	4039,2,c	;volatile
 23030  005030  D7FE               	goto	i2l66
 23031  005032  CFC5 F001          	movff	4037,??i2_I2C_Master_Wait	;volatile
 23032  005036  0E1F               	movlw	31
 23033  005038  1601               	andwf	??i2_I2C_Master_Wait,f,c
 23034  00503A  B4D8               	btfsc	status,2,c
 23035  00503C  0012               	return	
 23036  00503E  D7F7               	goto	i2l66
 23037  005040                     __end_ofi2_I2C_Master_Wait:
 23038                           	opt stack 0
 23039                           pclatu	equ	0xFFB
 23040                           pclath	equ	0xFFA
 23041                           tblptru	equ	0xFF8
 23042                           tblptrh	equ	0xFF7
 23043                           tblptrl	equ	0xFF6
 23044                           tablat	equ	0xFF5
 23045                           prodh	equ	0xFF4
 23046                           prodl	equ	0xFF3
 23047                           intcon	equ	0xFF2
 23048                           intcon2	equ	0xFF1
 23049                           intcon3	equ	0xFF0
 23050                           indf0	equ	0xFEF
 23051                           postinc0	equ	0xFEE
 23052                           fsr0h	equ	0xFEA
 23053                           fsr0l	equ	0xFE9
 23054                           wreg	equ	0xFE8
 23055                           postdec1	equ	0xFE5
 23056                           fsr1h	equ	0xFE2
 23057                           fsr1l	equ	0xFE1
 23058                           indf2	equ	0xFDF
 23059                           postinc2	equ	0xFDE
 23060                           postdec2	equ	0xFDD
 23061                           fsr2h	equ	0xFDA
 23062                           fsr2l	equ	0xFD9
 23063                           status	equ	0xFD8
 23064                           pclatu	equ	0xFFB
 23065                           pclath	equ	0xFFA
 23066                           tblptru	equ	0xFF8
 23067                           tblptrh	equ	0xFF7
 23068                           tblptrl	equ	0xFF6
 23069                           tablat	equ	0xFF5
 23070                           prodh	equ	0xFF4
 23071                           prodl	equ	0xFF3
 23072                           intcon	equ	0xFF2
 23073                           intcon2	equ	0xFF1
 23074                           intcon3	equ	0xFF0
 23075                           indf0	equ	0xFEF
 23076                           postinc0	equ	0xFEE
 23077                           fsr0h	equ	0xFEA
 23078                           fsr0l	equ	0xFE9
 23079                           wreg	equ	0xFE8
 23080                           postdec1	equ	0xFE5
 23081                           fsr1h	equ	0xFE2
 23082                           fsr1l	equ	0xFE1
 23083                           indf2	equ	0xFDF
 23084                           postinc2	equ	0xFDE
 23085                           postdec2	equ	0xFDD
 23086                           fsr2h	equ	0xFDA
 23087                           fsr2l	equ	0xFD9
 23088                           status	equ	0xFD8
 23089                           
 23090                           	psect	rparam
 23091  0000                     pclatu	equ	0xFFB
 23092                           pclath	equ	0xFFA
 23093                           tblptru	equ	0xFF8
 23094                           tblptrh	equ	0xFF7
 23095                           tblptrl	equ	0xFF6
 23096                           tablat	equ	0xFF5
 23097                           prodh	equ	0xFF4
 23098                           prodl	equ	0xFF3
 23099                           intcon	equ	0xFF2
 23100                           intcon2	equ	0xFF1
 23101                           intcon3	equ	0xFF0
 23102                           indf0	equ	0xFEF
 23103                           postinc0	equ	0xFEE
 23104                           fsr0h	equ	0xFEA
 23105                           fsr0l	equ	0xFE9
 23106                           wreg	equ	0xFE8
 23107                           postdec1	equ	0xFE5
 23108                           fsr1h	equ	0xFE2
 23109                           fsr1l	equ	0xFE1
 23110                           indf2	equ	0xFDF
 23111                           postinc2	equ	0xFDE
 23112                           postdec2	equ	0xFDD
 23113                           fsr2h	equ	0xFDA
 23114                           fsr2l	equ	0xFD9
 23115                           status	equ	0xFD8
 23116                           
 23117                           	psect	temp
 23118  00007E                     btemp:
 23119                           	opt stack 0
 23120  00007E                     	ds	1
 23121  0000                     int$flags	set	btemp
 23122                           pclatu	equ	0xFFB
 23123                           pclath	equ	0xFFA
 23124                           tblptru	equ	0xFF8
 23125                           tblptrh	equ	0xFF7
 23126                           tblptrl	equ	0xFF6
 23127                           tablat	equ	0xFF5
 23128                           prodh	equ	0xFF4
 23129                           prodl	equ	0xFF3
 23130                           intcon	equ	0xFF2
 23131                           intcon2	equ	0xFF1
 23132                           intcon3	equ	0xFF0
 23133                           indf0	equ	0xFEF
 23134                           postinc0	equ	0xFEE
 23135                           fsr0h	equ	0xFEA
 23136                           fsr0l	equ	0xFE9
 23137                           wreg	equ	0xFE8
 23138                           postdec1	equ	0xFE5
 23139                           fsr1h	equ	0xFE2
 23140                           fsr1l	equ	0xFE1
 23141                           indf2	equ	0xFDF
 23142                           postinc2	equ	0xFDE
 23143                           postdec2	equ	0xFDD
 23144                           fsr2h	equ	0xFDA
 23145                           fsr2l	equ	0xFD9
 23146                           status	equ	0xFD8


Data Sizes:
    Strings     1269
    Constant    27
    Data        8
    BSS         128
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     88     125
    BANK0           128     90     128
    BANK1           256      0      61
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    strcpy@from	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_62(CODE[4]), STR_61(CODE[4]), STR_60(CODE[4]), STR_59(CODE[4]), 
		 -> STR_58(CODE[4]), STR_57(CODE[4]), STR_56(CODE[4]), STR_55(CODE[4]), 
		 -> STR_54(CODE[4]), STR_53(CODE[4]), STR_52(CODE[4]), STR_51(CODE[4]), 
		 -> STR_20(CODE[4]), STR_19(CODE[4]), STR_18(CODE[4]), STR_17(CODE[4]), 
		 -> STR_16(CODE[4]), STR_15(CODE[4]), STR_14(CODE[4]), STR_13(CODE[4]), 
		 -> STR_12(CODE[4]), STR_11(CODE[4]), STR_10(CODE[4]), STR_9(CODE[4]), 
		 -> STR_8(CODE[4]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 

    printf@cp	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_126(CODE[7]), count_total(BANK0[2]), printRTC@month(BANK0[4]), UI@month(BANK0[4]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 24
		 -> STR_125(CODE[18]), STR_124(CODE[18]), STR_123(CODE[18]), STR_122(CODE[18]), 
		 -> STR_121(CODE[18]), STR_120(CODE[18]), STR_119(CODE[17]), STR_118(CODE[17]), 
		 -> STR_117(CODE[3]), STR_116(CODE[15]), STR_115(CODE[3]), STR_114(CODE[15]), 
		 -> STR_113(CODE[11]), STR_112(CODE[18]), STR_111(CODE[18]), STR_110(CODE[17]), 
		 -> STR_109(CODE[15]), STR_108(CODE[15]), STR_107(CODE[15]), STR_106(CODE[17]), 
		 -> STR_105(CODE[17]), STR_104(CODE[17]), STR_103(CODE[16]), STR_102(CODE[17]), 
		 -> STR_101(CODE[17]), STR_100(CODE[17]), STR_99(CODE[17]), STR_98(CODE[17]), 
		 -> STR_97(CODE[17]), STR_96(CODE[15]), STR_95(CODE[11]), STR_94(CODE[17]), 
		 -> STR_93(CODE[11]), STR_92(CODE[17]), STR_91(CODE[14]), STR_90(CODE[15]), 
		 -> STR_89(CODE[14]), STR_88(CODE[10]), STR_87(CODE[9]), STR_86(CODE[9]), 
		 -> STR_85(CODE[10]), STR_84(CODE[10]), STR_83(CODE[16]), STR_82(CODE[15]), 
		 -> STR_81(CODE[3]), STR_80(CODE[15]), STR_79(CODE[13]), STR_78(CODE[14]), 
		 -> STR_77(CODE[8]), STR_76(CODE[14]), STR_75(CODE[15]), STR_74(CODE[12]), 
		 -> STR_73(CODE[14]), STR_72(CODE[17]), STR_71(CODE[14]), STR_70(CODE[15]), 
		 -> STR_69(CODE[17]), STR_68(CODE[17]), STR_67(CODE[7]), STR_66(CODE[21]), 
		 -> STR_65(CODE[13]), STR_64(CODE[11]), STR_63(CODE[24]), STR_50(CODE[17]), 
		 -> STR_49(CODE[17]), STR_48(CODE[17]), STR_47(CODE[17]), STR_46(CODE[17]), 
		 -> STR_45(CODE[17]), STR_44(CODE[17]), STR_43(CODE[17]), STR_42(CODE[17]), 
		 -> STR_41(CODE[17]), STR_40(CODE[17]), STR_39(CODE[17]), STR_38(CODE[17]), 
		 -> STR_37(CODE[17]), STR_36(CODE[17]), STR_35(CODE[17]), STR_34(CODE[17]), 
		 -> STR_33(CODE[17]), STR_32(CODE[17]), STR_31(CODE[17]), STR_30(CODE[17]), 
		 -> STR_29(CODE[3]), STR_28(CODE[17]), STR_27(CODE[17]), STR_26(CODE[17]), 
		 -> STR_25(CODE[17]), STR_24(CODE[17]), STR_23(CODE[14]), STR_22(CODE[10]), 
		 -> STR_21(CODE[24]), STR_7(CODE[7]), STR_6(CODE[17]), STR_5(CODE[18]), 
		 -> STR_4(CODE[16]), STR_3(CODE[18]), STR_2(CODE[14]), STR_1(CODE[18]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i2_printf(COMRAM[2]), ?_printf(BANK0[2]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _handler in COMRAM

    _handler->_printSortTimer
    i2_change_state_to_menu_start->i2_printRTC
    i2_printRTC->i2_printf
    i2_change_state_to_menu_22->i2_printf
    i2_change_state_to_menu_12->i2_printf
    _change_state_to_menu_23->i2_printf
    _change_state_to_menu_11->i2_printf
    _change_state_to_logs_34->i2_printf
    _change_state_to_logs_33->i2_printf
    _change_state_to_logs_23->i2_printf
    _change_state_to_logs_22->i2_printf
    _change_state_to_logs_12->i2_printf
    _change_state_to_logs_11->i2_printf
    _dispLogs->_retrieveLog
    _retrieveLog->i2___wmul
    _printSortTimer->i2_printf
    i2_printf->i2___lwdiv
    i2_putch->i2_lcdNibble
    i2___lwdiv->i2___lwmod
    i2_lcdInst->i2_lcdNibble
    i2_getRTC->i2_I2C_Master_Read
    i2_getRTC->i2_I2C_Master_Write
    i2_I2C_Master_Write->i2_I2C_Master_Wait
    i2_I2C_Master_Stop->i2_I2C_Master_Wait
    i2_I2C_Master_Start->i2_I2C_Master_Wait
    i2_I2C_Master_Read->i2_I2C_Master_Wait

Critical Paths under _main in BANK0

    _main->_UI
    _sort->_Loading
    _Loading->_EEPROM_write
    _initSortTimer->_getRTC
    _getMAG->_readMAG
    _getIR->_readIR
    _readIR->_readADC
    _ID->_delay_ms
    _Distribution->_updateServoPosition
    _logRun->_EEPROM_write
    _EEPROM_write->_printf
    _loadRTC->_I2C_Master_Init
    _I2C_Master_Init->___lldiv
    _change_state_to_menu_start->_printRTC
    _initLCD->_lcdInst
    _UI->_printRTC
    _printRTC->_printf
    _getRTC->_I2C_Master_Read
    _getRTC->_I2C_Master_Write
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Read->_I2C_Master_Wait
    _change_state_to_menu_22->_printf
    _change_state_to_menu_12->_printf
    ___awdiv->___awmod
    _Test->_actuatorTest
    _sensorTest->_printf
    _readMAG->_readADC
    _algorithmTest->_printf
    _actuatorTest->_printf
    _SpeedTest->_printf
    _PusherTest->_printf
    _PortTestA5->_printf
    _BothServos->_printf
    _initServos->_updateServoPosition
    _BlockerTest->_printf
    _printf->___awdiv
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _lcdInst->_lcdNibble

Critical Paths under _handler in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _handler in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _handler in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _handler in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _handler in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _handler in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _handler in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _handler in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _handler in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _handler in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _handler in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _handler in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _handler in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _handler in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _handler in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _handler in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  201753
                    _I2C_Master_Init
                               _Test
                                 _UI
                            _initLCD
                           _initTime
                             _initUI
                             _logRun
                      _machineConfig
                               _sort
                        _stopSignals
 ---------------------------------------------------------------------------------
 (1) _stopSignals                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _sort                                                 0     0      0   23225
                       _Distribution
                                 _ID
                            _Loading
 ---------------------------------------------------------------------------------
 (2) _Loading                                             19    19      0   17707
                                             49 BANK0     19    19      0
                        _EEPROM_read
                       _EEPROM_write
                           _delay_ms
                              _getIR
                             _getMAG
                     _initGlobalVars
                         _initServos
                      _initSortTimer
                            _lcdInst
                             _readIR
 ---------------------------------------------------------------------------------
 (3) _initSortTimer                                        5     5      0     631
                                              5 BANK0      5     5      0
                             _getRTC
 ---------------------------------------------------------------------------------
 (3) _initGlobalVars                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _getMAG                                               2     2      0      45
                                              6 BANK0      2     2      0
                            _readMAG
 ---------------------------------------------------------------------------------
 (3) _getIR                                                3     3      0      91
                                              6 BANK0      3     3      0
                             _readIR
 ---------------------------------------------------------------------------------
 (3) _readIR                                               4     4      0      45
                                              2 BANK0      4     4      0
                            _readADC
 ---------------------------------------------------------------------------------
 (2) _ID                                                   6     6      0     137
                                              2 BANK0      6     6      0
                           _delay_ms
 ---------------------------------------------------------------------------------
 (3) _delay_ms                                             2     2      0      23
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _Distribution                                         2     2      0    5381
                                              8 BANK0      2     2      0
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (1) _machineConfig                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _logRun                                              10    10      0   11286
                                             49 BANK0     10    10      0
                        _EEPROM_read
                       _EEPROM_write
 ---------------------------------------------------------------------------------
 (3) _EEPROM_write                                         6     3      3   10539
                                             43 BANK0      6     3      3
                        _EEPROM_read
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (4) _EEPROM_read                                          2     0      2     426
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _initUI                                               0     0      0   22968
         _change_state_to_menu_start
                            _loadRTC
 ---------------------------------------------------------------------------------
 (2) _loadRTC                                              3     3      0     914
                                             21 BANK0      3     3      0
                    _I2C_Master_Init
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Init                                      8     4      4     440
                                             13 BANK0      8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     290
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_start                           0     0      0   22054
                            _lcdInst
                           _printRTC
                             _printf
 ---------------------------------------------------------------------------------
 (1) _initTime                                             7     1      6     538
                                              0 BANK0      7     1      6
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     135
                                              3 BANK0      1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _UI                                                  24    24      0   45688
                                             68 BANK0     22    22      0
                            ___awdiv
                            ___awmod
            _change_state_to_menu_12
            _change_state_to_menu_22
                            _lcdInst
                           _printRTC
                             _printf
                             _strcpy
 ---------------------------------------------------------------------------------
 (3) _printRTC                                            25    25      0   13211
                                             43 BANK0     25    25      0
                             _getRTC
                            _lcdInst
                             _printf
                             _strcpy
 ---------------------------------------------------------------------------------
 (4) _strcpy                                               6     2      4    3275
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) _getRTC                                               2     2      0     519
                                              3 BANK0      2     2      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Write                                     2     0      2     406
                                              1 BANK0      2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Read                                      2     2      0      45
                                              1 BANK0      2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (6) _I2C_Master_Wait                                      1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_22                              0     0      0    8843
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_12                              0     0      0    8843
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4    1064
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     556
                                              6 BANK0      8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (1) _Test                                                 2     2      0   97473
                                             70 BANK0      2     2      0
                        _BlockerTest
                         _BothServos
                         _EEPROMTest
                         _PortTestA5
                          _PortTests
                         _PusherTest
                          _SpeedTest
                       _actuatorTest
                      _algorithmTest
                            _lcdInst
                             _printf
                         _sensorTest
 ---------------------------------------------------------------------------------
 (2) _sensorTest                                           4     4      0    8955
                                             43 BANK0      4     4      0
                            _lcdInst
                             _printf
                            _readADC
                            _readMAG
 ---------------------------------------------------------------------------------
 (4) _readMAG                                              4     4      0      45
                                              2 BANK0      4     4      0
                            _readADC
 ---------------------------------------------------------------------------------
 (2) _algorithmTest                                        2     2      0    8843
                                             43 BANK0      2     2      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _actuatorTest                                        27    27      0   15467
                                             43 BANK0     27    27      0
                            _lcdInst
                             _printf
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (2) _SpeedTest                                            1     1      0    8843
                                             43 BANK0      1     1      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _PusherTest                                          10    10      0    9047
                                             43 BANK0     10    10      0
                            _lcdInst
                             _printf
                            _readADC
 ---------------------------------------------------------------------------------
 (4) _readADC                                              2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _PortTests                                            2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _PortTestA5                                           1     1      0    8843
                                             43 BANK0      1     1      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _EEPROMTest                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _BothServos                                           2     2      0   19605
                                             43 BANK0      2     2      0
                         _initServos
                            _lcdInst
                             _printf
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (3) _initServos                                           1     1      0    5381
                                              8 BANK0      1     1      0
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (4) _updateServoPosition                                  8     4      4    5381
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (2) _BlockerTest                                          7     7      0    9027
                                             43 BANK0      7     7      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (4) _printf                                              33    21     12    8708
                                             14 BANK0     29    17     12
                            ___awdiv (ARG)
                            ___awmod (ARG)
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0     135
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (5) _isdigit                                              3     3      0      68
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4     669
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (5) ___lwmod                                              5     1      4     515
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (5) ___lwdiv                                              7     3      4     366
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (3) _lcdInst                                              1     1      0     135
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNibble                                            2     2      0     113
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _handler                                             16    16      0   75643
                                             72 COMRAM    16    16      0
                     _printSortTimer
                         _updateMenu
 ---------------------------------------------------------------------------------
 (8) _updateMenu                                           2     2      0   70855
                                             66 COMRAM     2     2      0
            _change_state_to_logs_11
            _change_state_to_logs_12
            _change_state_to_logs_22
            _change_state_to_logs_23
            _change_state_to_logs_33
            _change_state_to_logs_34
            _change_state_to_menu_11
            _change_state_to_menu_23
                           _dispLogs
                       _inputHandler
          i2_change_state_to_menu_12
          i2_change_state_to_menu_22
       i2_change_state_to_menu_start
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_start                         0     0      0    7640
                          i2_lcdInst
                         i2_printRTC
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) i2_printRTC                                         25    25      0    4553
                                             41 COMRAM    25    25      0
                           i2_getRTC
                          i2_lcdInst
                           i2_printf
                           i2_strcpy
 ---------------------------------------------------------------------------------
 (11) i2_strcpy                                            6     2      4     699
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (9) _inputHandler                                         4     2      2   30870
                                             41 COMRAM     4     2      2
            _change_state_to_logs_11
            _change_state_to_logs_12
            _change_state_to_logs_22
            _change_state_to_logs_23
            _change_state_to_logs_33
            _change_state_to_logs_34
            _change_state_to_menu_11
            _change_state_to_menu_23
          i2_change_state_to_menu_12
          i2_change_state_to_menu_22
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_22                            0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_12                            0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_menu_23                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_menu_11                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_34                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_33                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_23                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_22                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_12                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_11                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) _dispLogs                                             2     0      2    1475
                                             17 COMRAM     2     0      2
                        _retrieveLog
 ---------------------------------------------------------------------------------
 (10) _retrieveLog                                        11     9      2    1047
                                              6 COMRAM    11     9      2
                      i2_EEPROM_read
                           i2___wmul
 ---------------------------------------------------------------------------------
 (11) i2_EEPROM_read                                       2     0      2     174
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (8) _printSortTimer                                      31    31      0    4788
                                             41 COMRAM    31    31      0
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                           i2_getRTC
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) i2_printf                                           33    21     12    2952
                                             12 COMRAM    29    17     12
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                          i2_isdigit
                            i2_putch
 ---------------------------------------------------------------------------------
 (11) i2_putch                                             1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (11) i2_isdigit                                           3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (11) i2___wmul                                            6     2      4     469
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (11) i2___lwmod                                           5     1      4     367
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (11) i2___lwdiv                                           7     3      4     266
                                              5 COMRAM     7     3      4
                          i2___lwmod (ARG)
 ---------------------------------------------------------------------------------
 (11) i2_lcdInst                                           1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (12) i2_lcdNibble                                         2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (11) i2_getRTC                                            2     2      0     213
                                              3 COMRAM     2     2      0
                  i2_I2C_Master_Read
                 i2_I2C_Master_Start
                  i2_I2C_Master_Stop
                 i2_I2C_Master_Write
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Write                                  2     0      2     100
                                              1 COMRAM     2     0      2
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Stop                                   0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Start                                  0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Read                                   2     2      0      45
                                              1 COMRAM     2     2      0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (13) i2_I2C_Master_Wait                                   1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_Master_Init
     ___lldiv
   _Test
     _BlockerTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _BothServos
       _initServos
         _updateServoPosition
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _updateServoPosition
     _EEPROMTest
     _PortTestA5
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _PortTests
     _PusherTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _readADC
     _SpeedTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _actuatorTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _updateServoPosition
     _algorithmTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _lcdInst
       _lcdNibble
     _printf
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___lwdiv (ARG)
       ___lwmod (ARG)
         ___lwdiv (ARG)
       ___wmul (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNibble
     _sensorTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _readADC
       _readMAG
         _readADC
   _UI
     ___awdiv
       ___awmod (ARG)
     ___awmod
     _change_state_to_menu_12
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _change_state_to_menu_22
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _lcdInst
       _lcdNibble
     _printRTC
       _getRTC
         _I2C_Master_Read
           _I2C_Master_Wait
         _I2C_Master_Start
           _I2C_Master_Wait
         _I2C_Master_Stop
           _I2C_Master_Wait
         _I2C_Master_Write
           _I2C_Master_Wait
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _strcpy
     _printf
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___lwdiv (ARG)
       ___lwmod (ARG)
         ___lwdiv (ARG)
       ___wmul (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNibble
     _strcpy
   _initLCD
     _lcdInst
       _lcdNibble
   _initTime
   _initUI
     _change_state_to_menu_start
       _lcdInst
         _lcdNibble
       _printRTC
         _getRTC
           _I2C_Master_Read
             _I2C_Master_Wait
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
         _lcdInst
           _lcdNibble
         _printf
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
           _isdigit (ARG)
           _putch (ARG)
             _lcdNibble
         _strcpy
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _loadRTC
       _I2C_Master_Init
         ___lldiv
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
   _logRun
     _EEPROM_read
     _EEPROM_write
       _EEPROM_read
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
   _machineConfig
   _sort
     _Distribution
       _updateServoPosition
     _ID
       _delay_ms
     _Loading
       _EEPROM_read
       _EEPROM_write
         _EEPROM_read
         _lcdInst
           _lcdNibble
         _printf
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
           _isdigit (ARG)
           _putch (ARG)
             _lcdNibble
       _delay_ms
       _getIR
         _readIR
           _readADC
       _getMAG
         _readMAG
           _readADC
       _initGlobalVars
       _initServos
         _updateServoPosition
       _initSortTimer
         _getRTC
           _I2C_Master_Read
             _I2C_Master_Wait
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
       _lcdInst
         _lcdNibble
       _readIR
         _readADC
   _stopSignals

 _handler (ROOT)
   _printSortTimer
     i2___lwdiv
       i2___lwmod (ARG)
     i2___lwmod
     i2___wmul
     i2_getRTC
       i2_I2C_Master_Read
         i2_I2C_Master_Wait
       i2_I2C_Master_Start
         i2_I2C_Master_Wait
       i2_I2C_Master_Stop
         i2_I2C_Master_Wait
       i2_I2C_Master_Write
         i2_I2C_Master_Wait
     i2_lcdInst
       i2_lcdNibble
     i2_printf
       i2___lwdiv
         i2___lwmod (ARG)
       i2___lwmod
       i2___wmul
       i2_isdigit
       i2_putch
         i2_lcdNibble
   _updateMenu
     _change_state_to_logs_11
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_12
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_22
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_23
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_33
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_34
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_menu_11
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_menu_23
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _dispLogs
       _retrieveLog
         i2_EEPROM_read
         i2___wmul
     _inputHandler
       _change_state_to_logs_11
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_12
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_22
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_23
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_33
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_34
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_menu_11
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_menu_23
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       i2_change_state_to_menu_12
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       i2_change_state_to_menu_22
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
     i2_change_state_to_menu_12
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     i2_change_state_to_menu_22
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     i2_change_state_to_menu_start
       i2_lcdInst
         i2_lcdNibble
       i2_printRTC
         i2_getRTC
           i2_I2C_Master_Read
             i2_I2C_Master_Wait
           i2_I2C_Master_Start
             i2_I2C_Master_Wait
           i2_I2C_Master_Stop
             i2_I2C_Master_Wait
           i2_I2C_Master_Write
             i2_I2C_Master_Wait
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
         i2_strcpy
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      3D       7       23.8%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     5A      80       5      100.0%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     58      7D       1       99.2%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     13A      34        0.0%
DATA                 0      0     13A       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Wed Mar 29 14:00:53 2017

                                    _i 0131                     i2_I2C_Master_Start 50AC  
                   i2_I2C_Master_Write 5082                                     l66 501A  
                                   _ID 2E00                            __CFG_CPD$ON 000000  
                                   _UI 08CA                           ___awdiv@sign 008B  
                                   _up 0077                    ___wmul@multiplicand 0082  
                   i2___lwdiv@dividend 0006                            __CFG_BORV$3 000000  
                   EEPROM_read@address 0080                           __CFG_CP0$OFF 000000  
                         __CFG_CP1$OFF 000000                           __CFG_CP2$OFF 000000  
                         __CFG_CP3$OFF 000000                                    ID@i 0084  
                                  ?_ID 0001                                    ?_UI 0001  
                                  UI@i 00C8                                    l180 09A0  
                                  l606 24AE                                    l491 3F0A  
                                  l740 123C                                    l750 12E8  
                                  l761 13F6                                    l753 1322  
                                  l852 4544                                    l772 14C0  
                                  l774 14D2                                    l766 156E  
                                  l758 13BC                                    l791 2F68  
                                  l775 14E6                                    l792 2F82  
                                  l776 14FA                                    l777 150E  
                                  l778 1524                                    l795 301A  
                                  l988 3CD8                           __CFG_CPB$OFF 000000  
                                  _PEN 007E2A                                    _SEN 007E28  
                  ?i2_I2C_Master_Start 0001                         ?_machineConfig 0001  
                  ?i2_I2C_Master_Write 0002                                    _log 00EC  
                                  _sel 00FD                                    _var 00FA  
                         ___awmod@sign 0085                                    wreg 000FE8  
                  i2printRTC@RTC_month 003B                    __end_of_BlockerTest 37BE  
                  _log_count_can_w_lab 0073        __end_of_change_state_to_menu_11 4CB4  
      __end_of_change_state_to_menu_12 4B24        __end_of_change_state_to_menu_22 4AEC  
      __end_of_change_state_to_menu_23 4C84           _f_can_coming_to_distribution 0069  
                       ??_Distribution 0088        __end_of_change_state_to_logs_11 4DA4  
      __end_of_change_state_to_logs_12 4D74        __end_of_change_state_to_logs_22 4D44  
      __end_of_change_state_to_logs_23 4E2E        __end_of_change_state_to_logs_33 4D14  
      __end_of_change_state_to_logs_34 4CE4                                   ??_ID 0082  
                                 ??_UI 00C4                           __CFG_LVP$OFF 000000  
                         __CFG_WDT$OFF 000000                                   l1001 4FFC  
                                 l1010 3A6C                                   l1102 3C00  
                                 l1105 3C20                                   l1210 0782  
                                 l1301 434C                                   l1126 3DF8  
                                 l1215 0858                                   l1135 2158  
                                 l1240 43FA                                   l1232 43A8  
                                 l1161 007C                                   l1129 3DFC  
                                 l1330 375C                                   l1234 43AC  
                                 l1138 215C                                   l1331 3776  
                                 l1235 43B0                                   l1171 018C  
                                 l1236 43B4                                   l1228 438C  
                                 l1308 435C                                   l1172 01DA  
                                 l1164 0080                                   l1325 3710  
                                 l1237 43B8                                   l1173 0240  
                                 l1238 43BC                                   l1270 2BC6  
                                 l1174 028E                                   l1255 483C  
                                 l1168 0126                                   l1249 482C  
                                 l1273 2B62                                   l1277 2BA6  
                                 l1366 1816                                   l1198 05E8  
                                 l1279 2BC0                                   l1813 44FE  
                                 l1823 4722                                   l6000 17DC  
                                 l1760 4098                                   l6012 184E  
                                 l6030 18AA                                   l6040 1904  
                                 l6016 1868                                   l6112 4530  
                                 l7000 13A6                                   l6042 190E  
                                 l6018 186E                                   l6114 455A  
                                 l6130 4032                                   l7010 13D6  
                                 l6060 196A                                   l6036 18CC  
                                 l7012 13E0                                   l6070 19DC  
                                 l6054 1944                                   l6126 401C  
                                 l7022 1410                                   l6056 1950  
                                 l6064 197E                                   l6048 1928  
                                 l6072 19E8                                   l6128 402C  
                                 l7200 3098                                   l6066 1984  
                                 l6138 4086                                   l7210 3130  
                                 l7202 30C6                                   l7130 2EE2  
                                 l7026 1436                                   l6084 42C2  
                                 l6076 4B2E                                   l6340 24B8  
                                 l7212 314A                                   l7044 149E  
                                 l8110 3F80                                   l6094 42F8  
                                 l6078 4B3A                                   l6350 254E  
                                 l6342 24D6                                   l6334 242C  
                                 l7206 30FC                                   l7142 2F18  
                                 l7134 2EF0                                   l7046 14A8  
                                 l8112 3F8C                                   l8104 3F62  
                                 l6088 42D8                                   l6360 25E4  
                                 l6352 256C                                   l6344 24F4  
                                 l7208 3116                                   l7216 3164  
                                 l6600 45A2                                   l6504 40B8  
                                 l5810 44C0                                   l8042 36AE  
                                 l7410 00EA                                   l8130 3FE4  
                                 l8122 3FC2                                   l8114 3F92  
                                 l6362 2602                                   l6354 258A  
                                 l6346 2512                                   l7218 3192  
                                 l7146 2F28                                   l6514 4144  
                                 l7074 1530                                   l7500 0314  
                                 l7420 0112                                   l7412 00F0  
                                 l7316 2264                                   l6356 25A8  
                                 l6348 2530                                   l8220 09D0  
                                 l6612 45CC                                   l6508 40CE  
                                 l7092 15B4                                   l7076 1566  
                                 l5806 44AE                                   l5830 46F0  
                                 l8070 373C                                   l8062 3712  
                                 l8046 36DE                                   l5750 4E80  
                                 l7510 033C                                   l7334 22F6  
                                 l8126 3FD0                                   l8150 4194  
                                 l8142 4170                                   l6358 25C6  
                                 l6366 2620                                   l8214 09B8  
                                 l6550 3D40                                   l7190 3030  
                                 l7094 15BA                                   _ADIE 007CEE  
                                 l5808 44BA                                   l8072 3746  
                                 l8064 3722                                   l7600 051A  
                                 l7504 032C                                   l7416 00FA  
                                 l7328 22B4                                   l8152 41A0  
                                 l6368 267E                                   l8320 0BE6  
                                 l8232 0A04                                   l8224 09DA  
                                 l8216 09BE                                   l6704 4238  
                                 l7192 304A                                   l7176 2FD8  
                                 l7184 301C                                   l6616 45E4  
                                 l7096 15C6                                   l5818 44F0  
                                 l5834 4714                                   l5826 46DE  
                                 l8082 3778                                   l7610 0542  
                                 l7530 03B0                                   l7522 038E  
                                 l7514 0354                                   l7506 0332  
                                 l7370 23F0                                   l7354 2372  
                                 l7346 2342                                   l8154 41A6  
                                 l8162 41D8                                   l8146 4180  
                                 l8330 0C7C                                   l8322 0C04  
                                 l8314 0B8C                                   l6714 427A  
                                 l6562 3D78                                   l6554 3D4A  
                                 l7194 3064                                   l5828 46EA  
                                 l8084 3788                                   l5748 4E6E  
                                 l7604 0524                                   l7540 03D8  
                                 l7532 03B6                                   l5772 4DF8  
                                 l8412 0F2A                                   l8404 0F08  
                                 l8332 0C9A                                   l8324 0C22  
                                 l8316 0BAA                                   l8252 0A6C  
                                 l8228 09F2                                   l6708 424E  
                                 l7196 307E                                   l6572 4EB6  
                                 l5790 4EA6                                   l5942 15DE  
                                 l7710 0742                                   l7630 05A8  
                                 l7614 054C                                   l7526 0398  
                                 l7366 23BA                                   l7358 23A8  
                                 l8166 41EC                                   l8158 41CA  
                                 l8510 1100                                   l8430 0F90  
                                 l8334 0CB8                                   l8326 0C40  
                                 l8318 0BC8                                   l8342 0D12  
                                 l8246 0A5C                                   l8262 0A92  
                                 l6566 3D82                                   l6558 3D62  
                                 l5952 160E                                   l8088 37B8  
                                 l7720 076A                                   l7640 05D0  
                                 l7608 053C                                   l7552 041C  
                                 l7536 03C0                                   l8408 0F12  
                                 l8352 0DC2                                   l8336 0CD6  
                                 l8328 0C5E                                   l8344 0D76  
                                 l8280 0AEE                                   l8256 0A84  
                                 l8248 0A62                                   l6576 4ECC  
                                 l6920 11FA                                   l5946 15F2  
                                 l7714 075A                                   l7706 0738  
                                 l7634 05C0                                   l7626 059E  
                                 l7618 0564                                   l7562 0444  
                                 l7298 21AC                                   l8098 3F4C  
                                 l8514 110A                                   l8434 0F9A  
                                 l8370 0E0E                                   l8362 0DEC  
                                 l8338 0CF4                                   l8290 0B18  
                                 l6930 1244                                   l5948 1604  
                                 l7740 07D2                                   l7716 0760  
                                 l7636 05C6                                   l7556 0434  
                                 l7548 0412                                   l8532 1156  
                                 l8524 1134                                   l8452 0FE6  
                                 l8444 0FC4                                   l8356 0DDA  
                                 l8348 0DB8                                   l8284 0B06  
                                 l8276 0AE4                                   l6596 458C  
                                 l5990 1792                                   l5974 16F0  
                                 l5966 16BE                                   l5958 1642  
                                 l7750 07FA                                   l7662 0652  
                                 l7654 0630                                   l7582 04B8  
                                 l7574 0496                                   l7566 045C  
                                 l7558 043A                                   l8518 1122  
                                 l8470 104C                                   l8438 0FB2  
                                 l8390 0ED4                                   l8366 0DF6  
                                 l8294 0B22                                   l5984 1768  
                                 l5976 16FC                                   l7912 2B90  
                                 l7744 07DC                                   l7680 06B4  
                                 l7672 067A                                   l7664 0658  
                                 l7592 04E0                                   l7584 04BE  
                                 l7496 030A                                   l8528 113E  
                                 l8448 0FCE                                   l8536 1162  
                                 l5994 17BE                                   l5986 1774  
                                 l5978 1702                                   l7754 0804  
                                 l7690 06DC                                   l7658 063A  
                                 l7578 04A0                                   l8474 1056  
                                 l8394 0EDE                                   l8298 0B3A  
                                 l6962 12D2                                   l6946 1280  
                                 l5996 17D6                                   l5988 177A  
                                 l7908 2B7C                                   l7836 4384  
                                 l7780 0882                                   l7764 0842  
                                 l7748 07F4                                   l7684 06BE  
                                 l7668 0662                                   l7588 04C8  
                                 l8492 10A2                                   l8484 1080  
                                 l6972 1302                                   l7926 43C0  
                                 l7790 08AA                                   l7774 0872  
                                 l7758 081C                                   l7694 06E6  
                                 l8830 3BA2                                   l8478 106E  
                                 l8398 0EF6                                   l6974 130C  
                                 l7848 29B4                                   l7784 089A  
                                 l7776 0878                                   l7688 06D6  
                                 l8488 108A                                   l6984 133C  
                                 l7866 2A6C                                   l7794 08C2  
                                 l7786 08A0                                   l7698 06FE  
                                 l8850 3C2C                                   l8818 3A26  
                                 l7868 2A72                                   l8860 3C4A  
                                 l8852 3C32                                   l8940 3EDE  
                                 l7886 2B2A                                   l8862 3C50  
                                 l8854 3C38                                   l8870 3C62  
                                 l8942 3EE4                                   l8934 3EBA  
                                 l8864 3C56                                   l8856 3C3E  
                                 l8848 3C26                                   l8792 398E  
                                 l8952 3F00                                   l8944 3EEA  
                                 l8936 3ED0                                   l7898 2B4C  
                                 l8866 3C5C                                   l8858 3C44  
                                 l8794 39A2                                   l8954 3F06  
                                 l8958 3F0C                                   STR_1 FBA3  
                                 STR_2 FF27                                   STR_3 FB91  
                                 STR_4 FE4A                                   STR_5 FB91  
                                 STR_6 FDE6                                   STR_7 FFC4  
                                 STR_8 FFDB                                   STR_9 FFCB  
                                 _LATA 000F89                                   _LATB 000F8A  
                                 _LATC 000F8B                                   _LATD 000F8C  
                                 _LATE 000F8D                                   u4400 4A24  
                                 u4170 4DF6                                   u6040 0126  
                                 u5080 24AE                                   u5065 475C  
                                 u4450 173C                                   u4370 49D6  
                                 _PEIE 007F96                                   u6060 01DA  
                                 u4380 49D8                                   u4390 4A22  
                                 u5430 1206                                   u4391 4A1E  
                                 u6080 028E                                   u4457 1732  
                                 u4490 17B4                                   u5450 123C  
                                 _RCEN 007E2B                                   u5710 2E4E  
                                 u5720 2EA4                                   u5448 120A  
                                 u4497 17AA                                   u6610 29F6  
                                 u5810 2FE4                                   u6620 29F8  
                                 u5900 21EE                                   u5910 21F0  
                                 u5830 301A                                   u5718 2E52  
                                 u9007 22A6                                   u6640 2AB4  
                                 u5728 2EA8                                   u9017 22EA  
                                 i2l66 502E                                   u6650 2AB6  
                                 u9107 0092                                   u9027 2308  
                                 u8307 1374                                   u5940 2396  
                                 u5828 2FE8                                   u9117 0102  
                                 u9037 2336                                   u8317 13C0  
                                 u8237 118A                                   u6831 3706  
                                 u9207 0344                                   u9127 0136  
                                 u9047 2350                                   u8407 14D6  
                                 u8327 13C8                                   u8247 12A0  
                                 u6840 3708                                   u9217 03A0  
                                 u9137 019C                                   u9057 3DA8  
                                 u8417 14E0                                   u8337 13FA  
                                 u8257 12EC                                   u6770 3670  
                                 u5970 23DE                                   u9307 05D8  
                                 u9227 03C8                                   u9147 01BA  
                                 u9067 3DEC                                   u8507 4BAE  
                                 u8427 14EA                                   u8347 1404  
                                 u8267 12F4                                   u6940 37A6  
                                 u6780 36CC                                   u5948 239A  
                                 u9317 0642                                   u9237 0424  
                                 u9157 01EA                                   u9077 3E0E  
                                 u8517 45AA                                   u8437 14F4  
                                 u8357 141E                                   u8277 1326  
                                 u9407 085C                                   u9327 066A  
                                 u9247 044C                                   u9167 0250  
                                 u9087 002C                                   u8607 4EC2  
                                 u8527 2E16                                   u8447 14FE  
                                 u8367 1454                                   u8287 1330  
                                 u6881 3732                                   u9417 0866  
                                 u9337 06C6                                   u9257 04A8  
                                 u9177 026E                                   u9097 0070  
                                 u8617 30EC                                   u8537 2E34  
                                 u8457 1506                                   u8377 148C  
                                 u8297 134A                                   u6890 3734  
                                 u6778 3674                                   u5978 23E2  
                                 u9507 2ACA                                   u9427 088A  
                                 u9347 06EE                                   u9267 04D0  
                                 u9187 029E                                   u8707 09E2  
                                 u8627 31A0                                   u8547 2E6C  
                                 u8467 1512                                   u8387 14C4  
                                 u6948 37AA                                   u6788 36D0  
                                 u9517 2B1E                                   u9437 08B2  
                                 u9357 074A                                   u9277 052C  
                                 u9197 031C                                   u8717 0A1E  
                                 u8637 31D2                                   u8557 2E8A  
                                 u8477 151C                                   u8397 14CC  
                                 u9607 1AAE                                   u9527 2B66  
                                 u9447 4316                                   u9367 0772  
                                 u9287 0554                                   u8807 0EE6  
                                 u8727 0A74                                   u8647 3CF6  
                                 u8567 2F38                                   u8487 1528  
                                 u9617 1AE2                                   u9537 2B6E  
                                 u9457 4366                                   u9377 0794  
                                 u9297 05B0                                   u8817 0F1A  
                                 u8737 0AA0                                   u8657 3D52  
                                 u8577 2F6C                                   u8497 159A  
                                 u9707 1D10                                   u9627 1B14  
                                 u9547 2BAA                                   u9467 437A  
                                 u9387 07E4                                   u8907 1146  
                                 u8827 0F44                                   u8747 0AF6  
                                 u8667 3D8A                                   u8587 2F76  
                                 u9717 1D44                                   u9637 1B60  
                                 u9557 2BB4                                   u9477 2990  
                                 u9397 080C                                   u8917 3BB0  
                                 u8837 0FA2                                   u8757 0B2A  
                                 u8677 4A34                                   u8597 2F9C  
                                 u7990 3A6C                                   u9807 46C2  
                                 u9727 1D76                                   u9647 1B94  
                                 u9567 4E76                                   u9487 2A0C  
                                 u8927 3BF4                                   u8847 0FD6  
                                 u8767 0B54                                   u8687 4A68  
                                 u9737 4886                                   u9657 1BC6  
                                 u9577 47F6                                   u9497 2A60  
                                 u8937 2108                                   u8857 1000  
                                 u8777 0DCA                                   u8697 08E2  
                                 u9747 3648                                   u9667 1C12  
                                 u9587 1A16                                   u8947 214C  
                                 u8867 105E                                   u8787 0DFE  
                                 u9757 3760                                   u9677 1C5E  
                                 u9597 1A62                                   u8957 216E  
                                 u8877 1092                                   u8797 0E28  
                                 u9767 376A                                   u9687 1C92  
                                 u8967 219C                                   u8887 10BC  
                                 u9777 4682                                   u9697 1CC4  
                                 u8977 2204                                   u8897 1112  
                                 u9787 468C                                   u8987 2258  
                                 u9797 46B8                                   u8997 2278  
                                 _RSEN 007E29                            _stopSignals 4FD2  
                                 _Test 3BA2                                   _back 0059  
                                 _main 3E70                                   _down 0061  
                                 _keys FAEF                                   _time 0124  
                                 fsr0h 000FEA                                   fsr1h 000FE2  
                   i2___lwdiv@quotient 000A                                   indf0 000FEF  
                                 fsr2h 000FDA                                   fsr0l 000FE9  
                                 indf2 000FDF                                   fsr1l 000FE1  
                                 fsr2l 000FD9                                   _sort 4F70  
                                 btemp 007E                   ??i2_I2C_Master_Start 0002  
                 ??i2_I2C_Master_Write 0004                                   prodh 000FF4  
                                 prodl 000FF3                                   start 000E  
                        __CFG_IESO$OFF 000000                   _log_count_can_no_lab 0071  
                      __end_ofi2_putch 506C                    __size_of_EEPROMTest 0002  
                        __CFG_MCLRE$ON 000000                           ___param_bank 000000  
                           i2_printRTC 2BCA                            i2_lcdNibble 489E  
                      __end_of_Loading 15D0                   __end_of_actuatorTest 08CA  
                     ?_I2C_Master_Init 008D                       ?_I2C_Master_Read 0001  
                     ?_I2C_Master_Wait 0001            ??i2_change_state_to_menu_12 002A  
          ??i2_change_state_to_menu_22 002A                       ?_I2C_Master_Stop 0001  
                                ?_Test 0001                   __end_of_EEPROM_write 3D9A  
                                ?_main 0001                                  _ACKEN 007E2C  
                                _ACKDT 007E2D                        __end_of___awdiv 3FEE  
                                _EEADR 000FA9                                  STR_10 FFE7  
                                STR_11 FFEB                                  STR_12 FFFB  
                                STR_20 FFEF                                  STR_13 FFDF  
                                STR_21 FB0A                                  STR_14 FFD7  
                                STR_22 FF9B                                  STR_30 FDF7  
                                STR_15 FFD3                                  STR_23 FF19  
                                STR_31 FDD5                                  STR_16 FFE3  
                                STR_24 FD3C                                  STR_32 FD1A  
                                STR_40 FCD6                                  STR_17 FFF3  
                                STR_25 FE19                                  STR_33 FD2B  
                                STR_41 FCC5                                  STR_18 FFF7  
                                STR_34 FDC4                                  STR_50 FDA2  
                                STR_42 FD80                                  STR_26 FD4D  
                                STR_43 FD80                                  STR_35 FDC4  
                                STR_51 FFDB                                  STR_19 FFCF  
                                STR_27 FE08                                  STR_52 FFCB  
                                STR_60 FFF3                                  STR_28 FD5E  
                                STR_36 FD09                                  STR_44 FCE7  
                      __end_of___awmod 41F6                                  STR_45 FCD6  
                                STR_37 FD1A                                  STR_53 FFE7  
                                STR_61 FFF7                                  STR_29 FE16  
                                STR_62 FFCF                                  STR_54 FFEB  
                                STR_70 FED2                                  STR_38 FDB3  
                                STR_46 FD91                                  STR_47 FD91  
                                STR_55 FFFB                                  STR_63 FB0A  
                                STR_71 FF0B                                  STR_39 FD6F  
                                STR_56 FFDF                                  STR_64 FF7C  
                                STR_80 FE5A                                  STR_48 FCF8  
                                STR_72 FC5F                                  STR_49 FCE7  
                                STR_57 FFD7                                  STR_81 FE16  
                                STR_65 FF42                                  STR_73 FEEF  
                                STR_58 FFD3                                  STR_74 FF4F  
                                STR_90 FEC3                                  STR_82 FE87  
                                STR_66 FB22                                  STR_59 FFE3  
                                STR_67 FFBD                                  STR_91 FEE1  
                                STR_75 FEB4                                  STR_83 FE2A  
                                STR_84 FF87                                  STR_76 FEFD  
                                STR_68 FC92                                  STR_92 FC70  
                                STR_85 FF87                                  STR_77 FFAE  
                                STR_93 FF5B                                  STR_69 FCA3  
                                STR_78 FF0B                                  STR_86 FFA5  
                                STR_94 FC81                                  STR_87 FFA5  
                                STR_95 FF66                                  STR_79 FF35  
                                STR_88 FF91                                  STR_96 FEA5  
                                STR_89 FF0B                                  STR_97 FC0A  
                                STR_98 FBF9                                  STR_99 FBD7  
                                ?_sort 0001                        __end_of___lldiv 40AA  
                                _T0CON 000FD5                        ___awdiv@divisor 0088  
                                _T1CON 000FCD                                  _T3CON 000FB1  
                      __end_of___lwdiv 4508                        __end_of___lwmod 472C  
                                i2l257 297E                                  i2l606 2C58  
                                i2l923 38E6                                  i2l925 3906  
                                i2l919 389A                        ___awdiv@counter 008A  
                                _TMR0H 000FD7                                  _TMR1H 000FCF  
                                _TMR0L 000FD6                                  _TMR3H 000FB3  
                                _TMR1L 000FCE                                  _TMR3L 000FB2  
                           _BothServos 1A08                                  _PORTB 000F81  
                                _TRISA 000F92                                  _TRISB 000F93  
                                _TRISC 000F94                                  _TRISD 000F95  
                                _TRISE 000F96                          __CFG_PWRT$OFF 000000  
                        __CFG_WRT0$OFF 000000                          __CFG_WRT1$OFF 000000  
                        __CFG_WRT2$OFF 000000                          __CFG_WRT3$OFF 000000  
                      __end_of_lcdInst 5060                        __end_of_handler 3942  
                       __CFG_EBTR0$OFF 000000                         __CFG_FCMEN$OFF 000000  
                       __CFG_EBTR1$OFF 000000                         __CFG_EBTR2$OFF 000000  
                       __CFG_EBTR3$OFF 000000                                  _nRBPU 007F8F  
                        __CFG_WRTB$OFF 000000                          __CFG_WRTC$OFF 000000  
                        __CFG_WRTD$OFF 000000                        __end_of_readADC 4E86  
                      __end_of_initLCD 4A72                         __CFG_EBTRB$OFF 000000  
                                _debug 005F                             i2isdigit@c 0003  
                                _getIR 457E                        __end_of_loadRTC 4282  
                      __end_of_readMAG 4A2C                        __end_of_dpowers FB0A  
                                _first 006D                                  _enter 0063  
                      __end_of_isdigit 4EB0                                  _input 007D  
                                _putch 5040                                  pclath 000FFA  
                                tablat 000FF5                       __end_ofi2___wmul 4F26  
                     __end_ofi2_getRTC 4662                    _log_count_pop_w_tab 00F2  
                                status 000FD8                         __CFG_PBADEN$ON 000000  
                        i2printf@width 0028                       __end_ofi2_printf 20FA  
                   __size_ofi2___lwdiv 0052                     __size_ofi2___lwmod 0042  
                     __end_ofi2_strcpy 4BF4                            Loading@addr 00B3  
                     _count_can_no_lab 012B                   __size_of_EEPROM_read 0018  
                      __initialization 4946                           __end_of_Test 3CB6  
                   __size_ofi2_lcdInst 000C                           __end_of_main 3F30  
                         __end_of_keys FB00                           __end_of_sort 4F92  
                           i2printf@ap 0020                             i2printf@cp 001E  
                        PusherTest@res 00AD                     __size_ofi2_isdigit 001E  
                     PusherTest@i_1712 00B3                            _BlockerTest 363A  
                               ??_Test 00C6    __size_of_change_state_to_menu_start 002C  
                      ??_machineConfig 0080                                 ??_main 00DA  
                               ??_sort 00C4                          __activetblptr 000003  
           updateServoPosition@my_time 0086             updateServoPosition@time_us 0080  
                           i2strcpy@cp 0005                             i2strcpy@to 0001  
                    ?_I2C_Master_Start 0001                    EEPROM_write@address 00AB  
               __size_ofi2_EEPROM_read 0016                      ?_I2C_Master_Write 0081  
                               ?_getIR 0001                     ??_I2C_Master_Start 0081  
                               _ADCON0 000FC2                                 _ADCON1 000FC1  
                   ??_I2C_Master_Write 0083                                 _ADCON2 000FC0  
                               STR_100 FC2C                                 STR_101 FC3D  
                               STR_110 FCB4                                 STR_102 FBB5  
                               STR_103 FE3A                                 STR_111 FB37  
                               STR_104 FBE8                                 STR_120 FB5B  
                               STR_112 FB49                                 STR_121 FB49  
                               STR_113 FF71                                 STR_105 FBC6  
                               STR_106 FBE8                                 STR_114 FE5A  
                               STR_122 FB7F                                 _ADRESH 000FC4  
                               STR_115 FE16                                 STR_107 FE96  
                               STR_123 FB6D                                 STR_116 FE5A  
                               STR_124 FB7F                                 STR_108 FE78  
                               _EEADRH 000FAA                                 STR_117 FE16  
                               STR_125 FB7F                                 STR_109 FE69  
                               STR_126 FFB6                                 STR_118 FC1B  
                               _ADRESL 000FC3                                 STR_119 FC4E  
                               _EEDATA 000FA8                                 _EECON2 000FA7  
                     ___awdiv@dividend 0086                        i2lcdNibble@data 0002  
                               ?_putch 0001                 __size_of_initSortTimer 00AA  
                      i2lcdNibble@temp 0001              i2_change_state_to_menu_12 4C24  
            i2_change_state_to_menu_22 4BF4                                 _INT1IE 007F83  
                               _INT1IF 007F80                                 _CVRCON 000FB5  
                               i2l1001 5012                                 i2l1366 1F66  
                               i2l1813 493C                                 i2l1823 4AAA  
                               i2l6210 1E76                                 i2l6202 1E4E  
                               i2l6300 2082                                 i2l6220 1ECE  
                               i2l6212 1E80                                 i2l6150 4628  
                               i2l6302 2088                                 i2l6230 1F1A  
                               i2l6222 1ED8                                 i2l6214 1E84  
                               i2l6160 4652                                 i2l6232 1F2C  
                               i2l6224 1EDE                                 i2l6312 4BCC  
                               i2l6154 4638                                 i2l6306 20D6  
                               i2l6226 1EF0                                 i2l6314 4BD4  
                               i2l6252 1FAC                                 i2l6236 1F30  
                               i2l6308 20DE                                 i2l6254 1FB0  
                               i2l6182 1DA6                                 i2l6272 1FFC  
                               i2l6248 1F94                                 i2l6184 1DB4  
                               i2l6290 2054                                 i2l6266 1FE2  
                               i2l6194 1DEC                                 i2l6178 1D96  
                               i2l6292 205C                                 i2l6284 203E  
                               i2l6276 2020                                 i2l6188 1DBA  
                               i2l6278 2028                                 i2l5904 4932  
                               i2l5920 4AA0                                 i2l5912 4A80  
                               i2l6296 2070                                 i2l9040 3904  
                               i2l9016 38B8                                 i2l5914 4A88  
                               i2l9018 38BA                                 i2l5916 4A8C  
                               i2l6484 3B46                                 i2l6820 354C  
                               i2l6830 3572                                 i2l6814 353E  
                               i2l6806 3526                                 i2l6670 2CBA  
                               i2l6662 2C62                                 i2l6496 3B8A  
                               i2l6488 3B56                                 i2l6840 3594  
                               i2l6824 3568                                 i2l6680 2D28  
                               i2l6672 2CD0                                 i2l6664 2C78  
                               i2l6656 2BF6                                 i2l8600 2794  
                               i2l5858 4F46                                 i2l5882 4FCA  
                               i2l6834 3586                                 i2l6770 34A0  
                               i2l6682 2D3E                                 i2l6674 2CE6  
                               i2l6666 2C8E                                 i2l6690 2DC4  
                               i2l5892 490A                                 i2l6836 358A  
                               i2l6780 34BE                                 i2l6684 2D54  
                               i2l6676 2CFC                                 i2l6668 2CA4  
                               i2l8620 27E2                                 i2l8612 27C6  
                               i2l8604 27A2                                 i2l5894 4912  
                               i2l6870 3602                                 i2l6862 35DE  
                               i2l6854 35BA                                 i2l6790 34DC  
                               i2l6782 34C4                                 i2l6766 348C  
                               i2l6758 3472                                 i2l6678 2D12  
                               i2l8550 26F2                                 i2l5896 4916  
                               i2l6848 35AC                                 i2l6784 34CA  
                               i2l6768 349C                                 i2l6776 34AA  
                               i2l6688 2D6A                                 i2l8640 2830  
                               i2l8632 2814                                 i2l8624 27F0  
                               i2l8616 27D4                                 i2l8608 27B0  
                               i2l8560 2714                                 i2l8552 26F8  
                               i2l6866 35F0                                 i2l6858 35CC  
                               i2l6786 34D0                                 i2l6794 34E2  
                               i2l6788 34D6                                 i2l6876 360C  
                               i2l8660 2886                                 i2l8652 2862  
                               i2l8644 2846                                 i2l8636 2822  
                               i2l8628 2806                                 i2l8580 274C  
                               i2l8564 2722                                 i2l8556 2706  
                               i2l8902 337C                                 i2l9390 34FA  
                               i2l9382 2932                                 i2l9392 3516  
                               i2l9384 2954                                 i2l8680 28D4  
                               i2l8672 28B0                                 i2l8664 2894  
                               i2l8656 2870                                 i2l8648 2854  
                               i2l8592 2778                                 i2l8584 275A  
                               i2l8576 273E                                 i2l8568 2730  
                               i2l8906 33B0                                 i2l9386 2970  
                               i2l8908 33B6                                 i2l8692 2906  
                               i2l8684 28E2                                 i2l8676 28C6  
                               i2l8668 28A2                                 i2l8596 2786  
                               i2l8588 276A                                 i2l8880 324A  
                               i2l8688 28F0                                 i2l8890 32B4  
                               i2l8698 2914                                 i2l8884 325A  
                               i2l8972 3838                                 i2l8980 3852  
                               i2l8974 383C                                 i2l8994 386E  
              _f_most_recent_sort_time 006B                                 _OSCCON 000FD3  
                               _TMR0IE 007F95                                 _TMR0IF 007F92  
                            ??i2_putch 0003                                 _TMR1IE 007CE8  
                               _TMR1IF 007CF0                                 _TMR2IE 007CE9  
                               _TMR3IE 007D01                                 _TMR3IF 007D09  
                               _TMR0ON 007EAF                                 _TMR1ON 007E68  
                               _TMR3ON 007D88                                 _SSPADD 000FC8  
                               _TRISC3 007CA3                                 _TRISC4 007CA4  
                               _SSPBUF 000FC9                              ??_Loading 00B1  
                     __end_of_delay_ms 4ED8                   delay_ms@milliseconds 0081  
                       __CFG_XINST$OFF 000000                       __end_of_dispLogs 4F70  
                          ?i2_printRTC 0001                       retrieveLog@byte1 000B  
                     retrieveLog@byte2 000C                       retrieveLog@byte3 000D  
                 __end_of_Distribution 323E                                 ___wmul 4B5A  
                            ??___awdiv 008A                         __CFG_STVREN$ON 000000  
                               _getMAG 4B90                              ??___awmod 0084  
                          logRun@byte1 00B2                            logRun@byte2 00B3  
                          logRun@byte3 00B4                                 _getRTC 4282  
                            ??___lldiv 0088                              ??___lwdiv 0084  
                            ??___lwmod 008B                       ??_printSortTimer 002A  
                     __end_of_initTime 4FB4                                 _initUI 4DA4  
                               _readIR 4994                                 _logRun 3942  
                               getIR@i 0087                                 clear_0 496C  
                               clear_1 4978                                 clear_2 4984  
                     ___awdiv@quotient 008C                        ___awmod@divisor 0082  
                           _PortTestA5 47E8                        ___awmod@counter 0084  
                            ??_lcdInst 0082                                 _printf 15D0  
                            ??_handler 0049                __size_of_initGlobalVars 0080  
                         ?_retrieveLog 0007                                 _strcpy 4B24  
                   __size_of_SpeedTest 0084                              ??_readADC 0080  
                            ??_initLCD 0083                              ??_loadRTC 0095  
                            ??_readMAG 0082   __end_ofi2_change_state_to_menu_start 4F00  
__size_ofi2_change_state_to_menu_start 0028           i2_change_state_to_menu_start 4ED8  
                          ?_BothServos 0001                           ??_EEPROMTest 0080  
                            ??_isdigit 0080                     __size_of_PortTests 0084  
                    __end_ofi2___lwdiv 4946                       __end_of_printRTC 26C2  
                         __mediumconst FAEE                      __end_ofi2___lwmod 4AB4  
                               tblptrh 000FF7                                 tblptrl 000FF6  
                               tblptru 000FF8                   _log_count_pop_no_tab 00F0  
                __end_of_algorithmTest 3E70                      __end_ofi2_lcdInst 5078  
                           _PusherTest 2982                      __end_ofi2_isdigit 4FD2  
                           __accesstop 0080                __end_of__initialization 498A  
                        ?_inputHandler 002A                  _most_recent_sort_time 0133  
                        ___rparam_used 000001                printSortTimer@start_sec 003B  
                __size_of_actuatorTest 08B8                          i2_EEPROM_read 5004  
                         Loading@byte1 00B5                     i2___lwmod@dividend 0001  
                   __end_of_EEPROMTest 50B6                         __pcstackCOMRAM 0001  
                __size_of_EEPROM_write 00E4                           __pidataBANK1 508C  
                  BlockerTest@cam_flag 00AE                          __end_of_getIR 45F0  
                          i2printRTC@i 0041                          _initSortTimer 40AA  
          __end_of_updateServoPosition 457E                          __end_of_putch 5050  
                          i2printf@len 0022                            i2printf@val 0024  
                           __end_of_ID 3026                             __end_of_UI 1170  
                            ?i2___wmul 0001                     __size_of_lcdNibble 0068  
                            ?i2_getRTC 0001                            i2putch@data 0003  
                printSortTimer@curTime 002D     __end_of_change_state_to_menu_start 4E5A  
        ?i2_change_state_to_menu_start 0001             _change_state_to_menu_start 4E2E  
                printSortTimer@cur_sec 003D                              ?i2_printf 000D  
                              ??_getIR 0086                              ?i2_strcpy 0001  
                     _count_pop_no_tab 005B                    __size_ofi2_printRTC 0236  
                              ??_putch 0082                           _actuatorTest 0012  
                           __pbssBANK0 00DA                             __pbssBANK1 0100  
                         ?_stopSignals 0001                         ??_inputHandler 002C  
                         _EEPROM_write 3CB6               ?_change_state_to_menu_11 0001  
             ?_change_state_to_menu_12 0001               ?_change_state_to_menu_22 0001  
             ?_change_state_to_menu_23 0001                                UI@F3228 0135  
                    __end_of_SpeedTest 438C                         ?i2_EEPROM_read 0001  
             ?_change_state_to_logs_11 0001               ?_change_state_to_logs_12 0001  
             ?_change_state_to_logs_22 0001               ?_change_state_to_logs_23 0001  
             ?_change_state_to_logs_33 0001               ?_change_state_to_logs_34 0001  
                  __size_of_BothServos 0384                      __end_of_PortTests 4410  
                    printRTC@RTC_month 00BC                           ?i2_lcdNibble 0001  
                              UI@i_412 00CA                                UI@i_413 00CB  
                              UI@i_431 00CC                                UI@i_440 00D1  
                              UI@i_432 00CD                                UI@i_409 00C9  
                              UI@i_443 00D2                                UI@i_435 00CE  
                              UI@i_444 00D3                                UI@i_436 00CF  
                              UI@i_447 00D4                                UI@i_439 00D0  
                              UI@i_448 00D5                         ?_initSortTimer 0001  
                              ?___wmul 0080                                ?_getMAG 0001  
                              ?_getRTC 0001                                ?_initUI 0001  
                              ?_readIR 0001                                ?_logRun 0001  
             updateServoPosition@timer 0082                                UI@month 00D6  
                          ?_PortTestA5 0001                                ?_printf 008E  
                              _UI$2333 00C6                                ?_strcpy 0080  
                           ??i2___wmul 0005                             ??i2_getRTC 0004  
                            ?_delay_ms 0001                             ??i2_printf 0019  
                           ??i2_strcpy 0005                              ?_dispLogs 0012  
                              _SSPCON1 000FC6                                _SSPCON2 000FC5  
                          ?_PusherTest 0001                                _SSPSTAT 000FC7  
                              _RTCflag 00E2                                i2_putch 5060  
                            ?_initTime 0080                        _f_loadingNewCan 00EA  
                      i2printRTC@month 003D                  __size_of_Distribution 0218  
          __size_ofi2_I2C_Master_Start 0008                      __end_of_lcdNibble 46CA  
                              _Loading 1170            __size_ofi2_I2C_Master_Write 000A  
                     EEPROM_write@data 00AD                                __Hparam 0000  
                              __Lparam 0000     __size_ofi2_change_state_to_menu_12 0030  
   __size_ofi2_change_state_to_menu_22 0030                              ?_printRTC 0001  
                              ___awdiv 3F30                                ___awmod 4154  
                           _initServos 4844                                ___lldiv 3FEE  
                      __size_of___wmul 0036                        __size_of_getMAG 0032  
                              ___lwdiv 4490                                ___lwmod 46CA  
                      __size_of_getRTC 0086                        printSortTimer@i 0047  
                            _CMCONbits 000FB4                      retrieveLog@logNum 0007  
                         logRun@byte11 00B6                           ?_BlockerTest 0001  
                      __size_of_initUI 002E                        __size_of_readIR 004C  
                              __pcinit 4946                   i2EEPROM_read@address 0001  
                      __size_of_logRun 0140                           logRun@byte_i 00B5  
                              __ramtop 1000                         _initGlobalVars 4410  
                              _lcdInst 5050                                _handler 0008  
                              __ptext0 3E70                                __ptext1 4FD2  
                              __ptext2 4F70                                __ptext3 1170  
                              __ptext4 40AA                                __ptext5 4410  
                              __ptext6 4B90                                __ptext7 457E  
                              __ptext8 4994                                __ptext9 2E00  
                      __size_of_printf 0438                                _readADC 4E5A  
                      __size_of_strcpy 0036                                _initLCD 4A2C  
                              _cur_can 00E4                                _loadRTC 41F6  
                              _readMAG 49E0                                _dpowers FB00  
                   actuatorTest@i_1660 00AE                     actuatorTest@i_1661 00AF  
                   actuatorTest@i_1653 00AD                     actuatorTest@i_1670 00B5  
                   actuatorTest@i_1663 00B0                     actuatorTest@i_1680 00BB  
                   actuatorTest@i_1672 00B6                     actuatorTest@i_1664 00B1  
                   actuatorTest@i_1673 00B7                     actuatorTest@i_1690 00C1  
                   actuatorTest@i_1682 00BC                     actuatorTest@i_1666 00B2  
                   actuatorTest@i_1683 00BD                     actuatorTest@i_1675 00B8  
                   actuatorTest@i_1667 00B3                     actuatorTest@i_1692 00C2  
                   actuatorTest@i_1676 00B9                     actuatorTest@i_1693 00C3  
                   actuatorTest@i_1685 00BE                     actuatorTest@i_1669 00B4  
                   actuatorTest@i_1686 00BF                     actuatorTest@i_1679 00BA  
                   actuatorTest@i_1689 00C0                                _isdigit 4E86  
                     ___awmod@dividend 0080                                getRTC@i 0083  
                 __size_of_retrieveLog 0120                             ??_delay_ms 0080  
             __size_of_I2C_Master_Init 0060               __size_of_I2C_Master_Read 002E  
                        _log_startTime 0100               __size_of_I2C_Master_Wait 0014  
             __size_of_I2C_Master_Stop 0008                             ??_dispLogs 0014  
                         _Distribution 3026                         __pintcode_body 37BE  
                 end_of_initialization 498A                                logRun@i 00B7  
                           ??_initTime 0086                        ??i2_EEPROM_read 0003  
                              int_func 37BE                    i2___wmul@multiplier 0001  
                        ??_EEPROM_read 0082                    __size_of_PortTestA5 005C  
            __size_of_I2C_Master_Start 0008              __size_of_I2C_Master_Write 000A  
                      ___lldiv@divisor 0084                        ___lldiv@counter 008C  
                      ??_initSortTimer 0085                                printf@c 00A8  
                         ??i2_printRTC 002A                                printf@f 008E  
                           ??_printRTC 00AB                       I2C_Master_Init@c 008D  
                     I2C_Master_Read@a 0081                                postdec1 000FE5  
                              postdec2 000FDD                                postinc0 000FEE  
                              postinc2 000FDE                 __end_of_initGlobalVars 4490  
                           _sensorTest 20FA                    __size_of_PusherTest 0248  
                           _servoTimes 011C                              _PORTAbits 000F80  
                            _PORTBbits 000F81                   __end_of_inputHandler 363A  
                         ??_BothServos 00AB                  __end_of_machineConfig 47E8  
                           _updateMenu 26C2                      i2_I2C_Master_Read 4F26  
                            _IR_signal 00DE                      i2_I2C_Master_Wait 502E  
                    i2_I2C_Master_Stop 50A4                      i2___lwdiv@divisor 0008  
                      _log_count_total 0075                              i2___lwdiv 48F4  
                            i2___lwmod 4A72                      i2___lwdiv@counter 000C  
                   ?i2_I2C_Master_Read 0001                     ?i2_I2C_Master_Wait 0001  
                   __end_ofi2_printRTC 2E00                     ?i2_I2C_Master_Stop 0001  
                        actuatorTest@i 00C4           ??_change_state_to_menu_start 00C4  
                            i2_lcdInst 506C                          Loading@i_1103 00B6  
                        Loading@i_1104 00B8                          Loading@i_1106 00BA  
                        Loading@i_1107 00BC                          Loading@i_1109 00BE  
                           _total_time 00F8                            printf@width 00A9  
                 __size_of_stopSignals 001A                    ??i2_I2C_Master_Read 0002  
                            i2_isdigit 4FB4                    ??i2_I2C_Master_Wait 0001  
                  ??i2_I2C_Master_Stop 0002                              i2getRTC@i 0004  
                   __end_of_BothServos 1D8C                            PusherTest@i 00B1  
                  __end_of_EEPROM_read 5004                            ?_initServos 0001  
                      ?_initGlobalVars 0001                         __end_of___wmul 4B90  
                       __end_of_getMAG 4BC2                         __end_of_getRTC 4308  
                 __size_ofi2_lcdNibble 0056                          EEPROM_write@i 00AF  
                        i2lcdInst@data 0003                         __end_of_initUI 4DD2  
                       __end_of_readIR 49E0                         __end_of_logRun 3A82  
                     i2___wmul@product 0005                         __end_of_printf 1A08  
                         i2printf@flag 0026                         __end_of_strcpy 4B5A  
            __end_ofi2_I2C_Master_Read 4F4C              __end_ofi2_I2C_Master_Wait 5040  
                         i2printf@prec 001D                    start_initialization 4946  
            __end_ofi2_I2C_Master_Stop 50AC                             readMAG@res 0084  
                    __size_ofi2___wmul 0026                        _count_can_w_lab 012D  
          ?_change_state_to_menu_start 0001                      __size_ofi2_getRTC 0072  
                            i2printf@c 0027                              i2printf@f 000D  
                   EEPROM_write@i_1339 00B0                  i2I2C_Master_Read@temp 0003  
                 BlockerTest@cond_flag 00B0                             ?i2___lwdiv 0006  
                           ?i2___lwmod 0001                      __size_ofi2_printf 036E  
                    __size_ofi2_strcpy 0032                      ??_I2C_Master_Init 0091  
                    ??_I2C_Master_Read 0081                      ??_I2C_Master_Wait 0080  
                           ?i2_lcdInst 0001                      ??_I2C_Master_Stop 0081  
                     __CFG_OSC$INTIO67 000000                             ?i2_isdigit 0001  
                           initTime@DD 0083                             initTime@MM 0084  
                           initTime@YY 0085                        retrieveLog@addr 0010  
                           logRun@addr 00B9                              _SpeedTest 4308  
                             ??___wmul 0084                               ??_getMAG 0086  
                             ??_getRTC 0083                 __size_of_algorithmTest 00D6  
                            _PortTests 438C                            ?_sensorTest 0001  
                          __pdataBANK1 0135                       __CFG_LPT1OSC$OFF 000000  
                             ??_initUI 00C4                               ??_readIR 0082  
                             ??_logRun 00B1                               ID@i_1120 0086  
                         ??_PortTestA5 00AB                 printSortTimer@timeDiff 0045  
     __size_of_change_state_to_menu_11 0030       __size_of_change_state_to_menu_12 0038  
     __size_of_change_state_to_menu_22 0038       __size_of_change_state_to_menu_23 0030  
                             ??_printf 009A       __size_of_change_state_to_logs_11 0030  
     __size_of_change_state_to_logs_12 0030       __size_of_change_state_to_logs_22 0030  
     __size_of_change_state_to_logs_23 002E       __size_of_change_state_to_logs_33 0030  
     __size_of_change_state_to_logs_34 0030                               ??_strcpy 0084  
                  _printSortTimer$2453 0043                   __size_of_BlockerTest 0184  
                          __pbssCOMRAM 0059           __size_of_updateServoPosition 0076  
                          ?_updateMenu 0001                          __pcstackBANK0 0080  
              __size_of_printSortTimer 0216                      i2___lwmod@divisor 0003  
                    i2___lwmod@counter 0005                           _isdigit$1977 0081  
                         ??_PusherTest 00AB                      __size_of_delay_ms 0028  
                       initSortTimer@i 0088                      printSortTimer@min 003F  
                    printSortTimer@sec 0041                    __size_of_initServos 005A  
                    __size_of_dispLogs 0024                       printRTC@INT_time 00AE  
                         i2strcpy@from 0003                               ?i2_putch 0001  
                   PusherTest@res_1708 00AF                        _count_pop_w_tab 005D  
                          _EEPROM_read 4FEC                     __end_of_PortTestA5 4844  
                     _I2C_Master_Start 509C                              _f_lastCan 00E8  
                             ?_Loading 0001                    i2I2C_Master_Write@d 0002  
                     _I2C_Master_Write 5078                      __size_of_initTime 0022  
                     ___lwdiv@dividend 0080                      __CFG_CCP2MX$PORTC 000000  
                            __pintcode 0008                             ?_SpeedTest 0001  
                        __pmediumconst FAEE                              _lcdNibble 4662  
                __size_of_inputHandler 01E6                               ?___awdiv 0086  
                             ?___awmod 0080                               ?___lldiv 0080  
                       _sensor_outputs 00DA                               ?___lwdiv 0080  
                           ?_PortTests 0001                               ?___lwmod 0087  
                    __size_of_printRTC 02CA                     __end_of_PusherTest 2BCA  
                             ?_lcdInst 0001                               ?_handler 0001  
                             ?_readADC 0001                               ?_initLCD 0001  
                             ?_loadRTC 0001                               ?_readMAG 0001  
                             ?_isdigit 0001             __size_ofi2_I2C_Master_Read 0026  
           __size_ofi2_I2C_Master_Wait 0012             __size_ofi2_I2C_Master_Stop 0008  
                            _firstboot 006F                              _cur_state 00E6  
                     ___lwdiv@quotient 0084                         __size_of_getIR 0072  
                        _algorithmTest 3D9A                            ??i2___lwdiv 000A  
                          ??i2___lwmod 0005                         __size_of_putch 0010  
                          __size_of_ID 0226                            __size_of_UI 08A6  
                  __size_of_sensorTest 02FE             __end_ofi2_I2C_Master_Start 50B4  
           __end_ofi2_I2C_Master_Write 508C                            ??i2_lcdInst 0003  
                       ___wmul@product 0084                               _LATAbits 000F89  
                             _LATCbits 000F8B                               _LATDbits 000F8C  
                             _LATEbits 000F8D                           _inputHandler 3454  
                          ??i2_isdigit 0001                           BlockerTest@i 00AC  
                             i2u427_40 4F44                               _PIR2bits 000FA1  
                             i2u527_40 2C58                               i2u482_40 1EB2  
                             i2u482_47 1EA8                               i2u486_40 1F12  
                             i2u486_47 1F08                               i2u981_47 3492  
                             i2u982_47 48B6                               i2u983_47 48C0  
                             i2u984_47 48E2                    __size_of_updateMenu 02C0  
                       _log_completion 00EE                               i2u985_47 48EC  
                     __CFG_WDTPS$32768 000000                             ?_lcdNibble 0001  
                            _was_low_1 0079                              _was_low_3 007B  
                        ??_retrieveLog 0009                             _ADCON0bits 000FC2  
                    ___wmul@multiplier 0080                              _startTime 010E  
                             i2___wmul 4F00                          lcdNibble@data 0081  
                             i2_getRTC 45F0                             printf@flag 00A7  
                        lcdNibble@temp 0080                             printf@prec 009E  
                             Loading@i 00C2                               Loading@j 00C0  
                             i2_printf 1D8C                               i2_strcpy 4BC2  
                       ?_algorithmTest 0001                    I2C_Master_Read@temp 0082  
                            copy_data0 495A                              readIR@res 0084  
                     __size_ofi2_putch 000C                             _EECON1bits 000FA6  
                __end_ofi2_EEPROM_read 501A                            _count_total 00FE  
                     ??_initGlobalVars 0080                               __Hrparam 0000  
                     __size_of_Loading 0460                              initTime@h 0081  
                            initTime@m 0080                              initTime@s 0086  
                            initTime@w 0082                               __Lrparam 0000  
                   __CFG_BOREN$SBORDIS 000000                              logRun@num 00B1  
                          ??_SpeedTest 00AB                  __end_of_initSortTimer 4154  
                         ??_initServos 0088                            ??_PortTests 0080  
                     __size_of___awdiv 00BE                       __size_of___awmod 00A2  
              _change_state_to_menu_11 4C84             ?i2_change_state_to_menu_12 0001  
              _change_state_to_menu_12 4AEC             ?i2_change_state_to_menu_22 0001  
              _change_state_to_menu_22 4AB4                _change_state_to_menu_23 4C54  
                i2___wmul@multiplicand 0003                       __size_of___lldiv 00BC  
                     __size_of___lwdiv 0078                _change_state_to_logs_11 4D74  
              _change_state_to_logs_12 4D44                _change_state_to_logs_22 4D14  
              _change_state_to_logs_23 4E00                _change_state_to_logs_33 4CE4  
              _change_state_to_logs_34 4CB4                       __size_of___lwmod 0062  
                       readADC@channel 0081                     i2I2C_Master_Read@a 0002  
                     __size_of_lcdInst 0010                       __size_of_handler 393A  
                           _EEPROMTest 50B4                        _I2C_Master_Init 472C  
                     __size_of_readADC 002C                        _I2C_Master_Read 4DD2  
                     __size_of_initLCD 0046                           _f_ID_receive 0065  
                     __size_of_loadRTC 008C                       __size_of_readMAG 004C  
                      _I2C_Master_Wait 501A                        _I2C_Master_Stop 5094  
                     __size_of_isdigit 002A                               _delay_ms 4EB0  
                       _printSortTimer 323E                        ___lwdiv@divisor 0082  
                      ___lwdiv@counter 0086                    __end_of_retrieveLog 3BA2  
                             __ptext10 4EB0                               __ptext11 3026  
                             __ptext20 4E2E                               __ptext12 478C  
                             __ptext21 4F92                               __ptext13 3942  
                             __ptext30 4DD2                               __ptext22 4A2C  
                             __ptext14 3CB6                               __ptext31 501A  
                             __ptext23 08CA                               __ptext15 4FEC  
                             __ptext40 0012                               __ptext32 4AB4  
                             __ptext24 23F8                               __ptext16 4DA4  
                             __ptext41 4308                               __ptext33 4AEC  
                             __ptext25 4B24                               __ptext17 41F6  
                             __ptext50 363A                               __ptext42 2982  
                             __ptext34 4154                               __ptext26 4282  
                             __ptext18 472C                               __ptext51 15D0  
                             __ptext43 4E5A                               __ptext35 3F30  
                             __ptext27 5078                               __ptext19 3FEE  
                             __ptext60 26C2                               __ptext52 5040  
                             __ptext44 438C                               __ptext36 3BA2  
                             __ptext28 5094                               __ptext61 4ED8  
                             __ptext53 4E86                               __ptext45 47E8  
                             __ptext37 20FA                               __ptext29 509C  
                             __ptext70 4CE4                               __ptext62 2BCA  
                             __ptext54 4B5A                               __ptext46 50B4  
                             __ptext38 49E0                               __ptext71 4E00  
                             __ptext63 4BC2                               __ptext55 46CA  
                             __ptext47 1A08                               __ptext39 3D9A  
                             __ptext80 5060                               __ptext72 4D14  
                             __ptext64 3454                               __ptext56 4490  
                             __ptext48 4844                               __ptext81 4FB4  
                             __ptext73 4D44                               __ptext65 4BF4  
                             __ptext57 5050                               __ptext49 4508  
                             __ptext90 50AC                               __ptext82 4F00  
                             __ptext74 4D74                               __ptext66 4C24  
                             __ptext58 4662                               __ptext91 4F26  
                             __ptext83 4A72                               __ptext75 4F4C  
                             __ptext67 4C54                               __ptext92 502E  
                             __ptext84 48F4                               __ptext76 3A82  
                             __ptext68 4C84                               __ptext85 506C  
                             __ptext77 5004                               __ptext69 4CB4  
                             __ptext86 489E                               __ptext78 323E  
                             __ptext87 45F0                               __ptext79 1D8C  
                             __ptext88 5082                               __ptext89 50A4  
                             _dispLogs 4F4C                          ?_actuatorTest 0001  
                        ??_stopSignals 0080                             strcpy@from 0082  
                       i2_isdigit$1977 0002                     __end_of_initServos 489E  
                        __size_of_Test 0114                          ?_EEPROM_write 00AB  
                             _initTime 4F92                          __size_of_main 00C0  
                        __size_of_sort 0022         ??i2_change_state_to_menu_start 0043  
                             _logstate 00F6                    _updateServoPosition 4508  
               __size_of_machineConfig 005C                          ??i2_lcdNibble 0001  
                             _printRTC 23F8                            ??_lcdNibble 0080  
                            printRTC@i 00C2                               int$flags 007E  
                         ??_sensorTest 00AB                         _log_total_time 00F4  
                   _f_can_coming_to_ID 0067                              printf@len 00A3  
                            printf@val 00A5      __end_ofi2_change_state_to_menu_12 4C54  
    __end_ofi2_change_state_to_menu_22 4C24                               loadRTC@i 0096  
               __end_of_printSortTimer 3454                              putch@data 0082  
             __end_of_I2C_Master_Start 50A4                            _OSCTUNEbits 000F9B  
             __end_of_I2C_Master_Write 5082                             _INTCONbits 000FF2  
                 ?_updateServoPosition 0080                           ??_updateMenu 0043  
                      ??_algorithmTest 00AB                             _MAG_signal 00E0  
                             isdigit@c 0082                          sensorTest@res 00AD  
                       ??_actuatorTest 00AB                               intlevel2 0000  
                       ??_EEPROM_write 00AE                     __end_of_sensorTest 23F8  
                     ___lwmod@dividend 0087                       ___lldiv@dividend 0080  
                         ?_EEPROM_read 0080                    __end_of_stopSignals 4FEC  
            ??_change_state_to_menu_11 002A              ??_change_state_to_menu_12 00AB  
            ??_change_state_to_menu_22 00AB              ??_change_state_to_menu_23 002A  
            ??_change_state_to_logs_11 002A              ??_change_state_to_logs_12 002A  
            ??_change_state_to_logs_22 002A              ??_change_state_to_logs_23 002A  
            ??_change_state_to_logs_33 002A              ??_change_state_to_logs_34 002A  
                             printf@ap 00A1                               printf@cp 009F  
                   __end_of_updateMenu 2982                __end_of_I2C_Master_Init 478C  
              __end_of_I2C_Master_Read 4E00                __end_of_I2C_Master_Wait 502E  
                        ??_BlockerTest 00AB                __end_of_I2C_Master_Stop 509C  
                          lcdInst@data 0082                          printRTC@F3219 0139  
                         retrieveLog@i 000E                            _retrieveLog 3A82  
                  __end_ofi2_lcdNibble 48F4                  ??_updateServoPosition 0084  
                      ?_printSortTimer 0001                       ___lldiv@quotient 0088  
                    I2C_Master_Write@d 0081                            ?_EEPROMTest 0001  
                      ___lwmod@divisor 0089                      _f_can_distributed 012F  
                             strcpy@cp 0084                               strcpy@to 0080  
                        _machineConfig 478C                        ___lwmod@counter 008B  
                        printRTC@month 00BE                          ?_Distribution 0001  
                        _machine_state 00FC                          dispLogs@myLog 0012  
                   i2printRTC@INT_time 002D  
